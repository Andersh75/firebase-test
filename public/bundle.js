(function () {
    'use strict';

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const directives = new WeakMap();
    const isDirective = (o) => typeof o === 'function' && directives.has(o);
    //# sourceMappingURL=directive.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * @module lit-html
     */
    /**
     * True if the custom elements polyfill is in use.
     */
    const isCEPolyfill = window.customElements !== undefined &&
        window.customElements.polyfillWrapFlushCallback !== undefined;
    /**
     * Removes nodes, starting from `startNode` (inclusive) to `endNode`
     * (exclusive), from `container`.
     */
    const removeNodes = (container, startNode, endNode = null) => {
        let node = startNode;
        while (node !== endNode) {
            const n = node.nextSibling;
            container.removeChild(node);
            node = n;
        }
    };
    //# sourceMappingURL=dom.js.map

    /**
     * @license
     * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * A sentinel value that signals that a value was handled by a directive and
     * should not be written to the DOM.
     */
    const noChange = {};
    /**
     * A sentinel value that signals a NodePart to fully clear its content.
     */
    const nothing = {};
    //# sourceMappingURL=part.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An expression marker with embedded unique key to avoid collision with
     * possible text in templates.
     */
    const marker = `{{lit-${String(Math.random()).slice(2)}}}`;
    /**
     * An expression marker used text-positions, multi-binding attributes, and
     * attributes with markup-like text values.
     */
    const nodeMarker = `<!--${marker}-->`;
    const markerRegex = new RegExp(`${marker}|${nodeMarker}`);
    /**
     * Suffix appended to all bound attribute names.
     */
    const boundAttributeSuffix = '$lit$';
    /**
     * An updateable Template that tracks the location of dynamic parts.
     */
    class Template {
        constructor(result, element) {
            this.parts = [];
            this.element = element;
            let index = -1;
            let partIndex = 0;
            const nodesToRemove = [];
            const _prepareTemplate = (template) => {
                const content = template.content;
                // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
                // null
                const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
                // Keeps track of the last index associated with a part. We try to delete
                // unnecessary nodes, but we never want to associate two different parts
                // to the same index. They must have a constant node between.
                let lastPartIndex = 0;
                while (walker.nextNode()) {
                    index++;
                    const node = walker.currentNode;
                    if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {
                        if (node.hasAttributes()) {
                            const attributes = node.attributes;
                            // Per
                            // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
                            // attributes are not guaranteed to be returned in document order.
                            // In particular, Edge/IE can return them out of order, so we cannot
                            // assume a correspondance between part index and attribute index.
                            let count = 0;
                            for (let i = 0; i < attributes.length; i++) {
                                if (attributes[i].value.indexOf(marker) >= 0) {
                                    count++;
                                }
                            }
                            while (count-- > 0) {
                                // Get the template literal section leading up to the first
                                // expression in this attribute
                                const stringForPart = result.strings[partIndex];
                                // Find the attribute name
                                const name = lastAttributeNameRegex.exec(stringForPart)[2];
                                // Find the corresponding attribute
                                // All bound attributes have had a suffix added in
                                // TemplateResult#getHTML to opt out of special attribute
                                // handling. To look up the attribute value we also need to add
                                // the suffix.
                                const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                                const attributeValue = node.getAttribute(attributeLookupName);
                                const strings = attributeValue.split(markerRegex);
                                this.parts.push({ type: 'attribute', index, name, strings });
                                node.removeAttribute(attributeLookupName);
                                partIndex += strings.length - 1;
                            }
                        }
                        if (node.tagName === 'TEMPLATE') {
                            _prepareTemplate(node);
                        }
                    }
                    else if (node.nodeType === 3 /* Node.TEXT_NODE */) {
                        const data = node.data;
                        if (data.indexOf(marker) >= 0) {
                            const parent = node.parentNode;
                            const strings = data.split(markerRegex);
                            const lastIndex = strings.length - 1;
                            // Generate a new text node for each literal section
                            // These nodes are also used as the markers for node parts
                            for (let i = 0; i < lastIndex; i++) {
                                parent.insertBefore((strings[i] === '') ? createMarker() :
                                    document.createTextNode(strings[i]), node);
                                this.parts.push({ type: 'node', index: ++index });
                            }
                            // If there's no text, we must insert a comment to mark our place.
                            // Else, we can trust it will stick around after cloning.
                            if (strings[lastIndex] === '') {
                                parent.insertBefore(createMarker(), node);
                                nodesToRemove.push(node);
                            }
                            else {
                                node.data = strings[lastIndex];
                            }
                            // We have a part for each match found
                            partIndex += lastIndex;
                        }
                    }
                    else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {
                        if (node.data === marker) {
                            const parent = node.parentNode;
                            // Add a new marker node to be the startNode of the Part if any of
                            // the following are true:
                            //  * We don't have a previousSibling
                            //  * The previousSibling is already the start of a previous part
                            if (node.previousSibling === null || index === lastPartIndex) {
                                index++;
                                parent.insertBefore(createMarker(), node);
                            }
                            lastPartIndex = index;
                            this.parts.push({ type: 'node', index });
                            // If we don't have a nextSibling, keep this node so we have an end.
                            // Else, we can remove it to save future costs.
                            if (node.nextSibling === null) {
                                node.data = '';
                            }
                            else {
                                nodesToRemove.push(node);
                                index--;
                            }
                            partIndex++;
                        }
                        else {
                            let i = -1;
                            while ((i = node.data.indexOf(marker, i + 1)) !==
                                -1) {
                                // Comment node has a binding marker inside, make an inactive part
                                // The binding won't work, but subsequent bindings will
                                // TODO (justinfagnani): consider whether it's even worth it to
                                // make bindings in comments work
                                this.parts.push({ type: 'node', index: -1 });
                            }
                        }
                    }
                }
            };
            _prepareTemplate(element);
            // Remove text binding nodes after the walk to not disturb the TreeWalker
            for (const n of nodesToRemove) {
                n.parentNode.removeChild(n);
            }
        }
    }
    const isTemplatePartActive = (part) => part.index !== -1;
    // Allows `document.createComment('')` to be renamed for a
    // small manual size-savings.
    const createMarker = () => document.createComment('');
    /**
     * This regex extracts the attribute name preceding an attribute-position
     * expression. It does this by matching the syntax allowed for attributes
     * against the string literal directly preceding the expression, assuming that
     * the expression is in an attribute-value position.
     *
     * See attributes in the HTML spec:
     * https://www.w3.org/TR/html5/syntax.html#attributes-0
     *
     * "\0-\x1F\x7F-\x9F" are Unicode control characters
     *
     * " \x09\x0a\x0c\x0d" are HTML space characters:
     * https://www.w3.org/TR/html5/infrastructure.html#space-character
     *
     * So an attribute is:
     *  * The name: any character except a control character, space character, ('),
     *    ("), ">", "=", or "/"
     *  * Followed by zero or more space characters
     *  * Followed by "="
     *  * Followed by zero or more space characters
     *  * Followed by:
     *    * Any character except space, ('), ("), "<", ">", "=", (`), or
     *    * (") then any non-("), or
     *    * (') then any non-(')
     */
    const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;
    //# sourceMappingURL=template.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An instance of a `Template` that can be attached to the DOM and updated
     * with new values.
     */
    class TemplateInstance {
        constructor(template, processor, options) {
            this._parts = [];
            this.template = template;
            this.processor = processor;
            this.options = options;
        }
        update(values) {
            let i = 0;
            for (const part of this._parts) {
                if (part !== undefined) {
                    part.setValue(values[i]);
                }
                i++;
            }
            for (const part of this._parts) {
                if (part !== undefined) {
                    part.commit();
                }
            }
        }
        _clone() {
            // When using the Custom Elements polyfill, clone the node, rather than
            // importing it, to keep the fragment in the template's document. This
            // leaves the fragment inert so custom elements won't upgrade and
            // potentially modify their contents by creating a polyfilled ShadowRoot
            // while we traverse the tree.
            const fragment = isCEPolyfill ?
                this.template.element.content.cloneNode(true) :
                document.importNode(this.template.element.content, true);
            const parts = this.template.parts;
            let partIndex = 0;
            let nodeIndex = 0;
            const _prepareInstance = (fragment) => {
                // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
                // null
                const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);
                let node = walker.nextNode();
                // Loop through all the nodes and parts of a template
                while (partIndex < parts.length && node !== null) {
                    const part = parts[partIndex];
                    // Consecutive Parts may have the same node index, in the case of
                    // multiple bound attributes on an element. So each iteration we either
                    // increment the nodeIndex, if we aren't on a node with a part, or the
                    // partIndex if we are. By not incrementing the nodeIndex when we find a
                    // part, we allow for the next part to be associated with the current
                    // node if neccessasry.
                    if (!isTemplatePartActive(part)) {
                        this._parts.push(undefined);
                        partIndex++;
                    }
                    else if (nodeIndex === part.index) {
                        if (part.type === 'node') {
                            const part = this.processor.handleTextExpression(this.options);
                            part.insertAfterNode(node.previousSibling);
                            this._parts.push(part);
                        }
                        else {
                            this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
                        }
                        partIndex++;
                    }
                    else {
                        nodeIndex++;
                        if (node.nodeName === 'TEMPLATE') {
                            _prepareInstance(node.content);
                        }
                        node = walker.nextNode();
                    }
                }
            };
            _prepareInstance(fragment);
            if (isCEPolyfill) {
                document.adoptNode(fragment);
                customElements.upgrade(fragment);
            }
            return fragment;
        }
    }
    //# sourceMappingURL=template-instance.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * The return type of `html`, which holds a Template and the values from
     * interpolated expressions.
     */
    class TemplateResult {
        constructor(strings, values, type, processor) {
            this.strings = strings;
            this.values = values;
            this.type = type;
            this.processor = processor;
        }
        /**
         * Returns a string of HTML used to create a `<template>` element.
         */
        getHTML() {
            const endIndex = this.strings.length - 1;
            let html = '';
            for (let i = 0; i < endIndex; i++) {
                const s = this.strings[i];
                // This exec() call does two things:
                // 1) Appends a suffix to the bound attribute name to opt out of special
                // attribute value parsing that IE11 and Edge do, like for style and
                // many SVG attributes. The Template class also appends the same suffix
                // when looking up attributes to create Parts.
                // 2) Adds an unquoted-attribute-safe marker for the first expression in
                // an attribute. Subsequent attribute expressions will use node markers,
                // and this is safe since attributes with multiple expressions are
                // guaranteed to be quoted.
                const match = lastAttributeNameRegex.exec(s);
                if (match) {
                    // We're starting a new bound attribute.
                    // Add the safe attribute suffix, and use unquoted-attribute-safe
                    // marker.
                    html += s.substr(0, match.index) + match[1] + match[2] +
                        boundAttributeSuffix + match[3] + marker;
                }
                else {
                    // We're either in a bound node, or trailing bound attribute.
                    // Either way, nodeMarker is safe to use.
                    html += s + nodeMarker;
                }
            }
            return html + this.strings[endIndex];
        }
        getTemplateElement() {
            const template = document.createElement('template');
            template.innerHTML = this.getHTML();
            return template;
        }
    }
    //# sourceMappingURL=template-result.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const isPrimitive = (value) => (value === null ||
        !(typeof value === 'object' || typeof value === 'function'));
    /**
     * Sets attribute values for AttributeParts, so that the value is only set once
     * even if there are multiple parts for an attribute.
     */
    class AttributeCommitter {
        constructor(element, name, strings) {
            this.dirty = true;
            this.element = element;
            this.name = name;
            this.strings = strings;
            this.parts = [];
            for (let i = 0; i < strings.length - 1; i++) {
                this.parts[i] = this._createPart();
            }
        }
        /**
         * Creates a single part. Override this to create a differnt type of part.
         */
        _createPart() {
            return new AttributePart(this);
        }
        _getValue() {
            const strings = this.strings;
            const l = strings.length - 1;
            let text = '';
            for (let i = 0; i < l; i++) {
                text += strings[i];
                const part = this.parts[i];
                if (part !== undefined) {
                    const v = part.value;
                    if (v != null &&
                        (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {
                        for (const t of v) {
                            text += typeof t === 'string' ? t : String(t);
                        }
                    }
                    else {
                        text += typeof v === 'string' ? v : String(v);
                    }
                }
            }
            text += strings[l];
            return text;
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                this.element.setAttribute(this.name, this._getValue());
            }
        }
    }
    class AttributePart {
        constructor(comitter) {
            this.value = undefined;
            this.committer = comitter;
        }
        setValue(value) {
            if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
                this.value = value;
                // If the value is a not a directive, dirty the committer so that it'll
                // call setAttribute. If the value is a directive, it'll dirty the
                // committer if it calls setValue().
                if (!isDirective(value)) {
                    this.committer.dirty = true;
                }
            }
        }
        commit() {
            while (isDirective(this.value)) {
                const directive$$1 = this.value;
                this.value = noChange;
                directive$$1(this);
            }
            if (this.value === noChange) {
                return;
            }
            this.committer.commit();
        }
    }
    class NodePart {
        constructor(options) {
            this.value = undefined;
            this._pendingValue = undefined;
            this.options = options;
        }
        /**
         * Inserts this part into a container.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendInto(container) {
            this.startNode = container.appendChild(createMarker());
            this.endNode = container.appendChild(createMarker());
        }
        /**
         * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and
         * its next sibling must be static, unchanging nodes such as those that appear
         * in a literal section of a template.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterNode(ref) {
            this.startNode = ref;
            this.endNode = ref.nextSibling;
        }
        /**
         * Appends this part into a parent part.
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        appendIntoPart(part) {
            part._insert(this.startNode = createMarker());
            part._insert(this.endNode = createMarker());
        }
        /**
         * Appends this part after `ref`
         *
         * This part must be empty, as its contents are not automatically moved.
         */
        insertAfterPart(ref) {
            ref._insert(this.startNode = createMarker());
            this.endNode = ref.endNode;
            ref.endNode = this.startNode;
        }
        setValue(value) {
            this._pendingValue = value;
        }
        commit() {
            while (isDirective(this._pendingValue)) {
                const directive$$1 = this._pendingValue;
                this._pendingValue = noChange;
                directive$$1(this);
            }
            const value = this._pendingValue;
            if (value === noChange) {
                return;
            }
            if (isPrimitive(value)) {
                if (value !== this.value) {
                    this._commitText(value);
                }
            }
            else if (value instanceof TemplateResult) {
                this._commitTemplateResult(value);
            }
            else if (value instanceof Node) {
                this._commitNode(value);
            }
            else if (Array.isArray(value) || value[Symbol.iterator]) {
                this._commitIterable(value);
            }
            else if (value === nothing) {
                this.value = nothing;
                this.clear();
            }
            else {
                // Fallback, will render the string representation
                this._commitText(value);
            }
        }
        _insert(node) {
            this.endNode.parentNode.insertBefore(node, this.endNode);
        }
        _commitNode(value) {
            if (this.value === value) {
                return;
            }
            this.clear();
            this._insert(value);
            this.value = value;
        }
        _commitText(value) {
            const node = this.startNode.nextSibling;
            value = value == null ? '' : value;
            if (node === this.endNode.previousSibling &&
                node.nodeType === 3 /* Node.TEXT_NODE */) {
                // If we only have a single text node between the markers, we can just
                // set its value, rather than replacing it.
                // TODO(justinfagnani): Can we just check if this.value is primitive?
                node.data = value;
            }
            else {
                this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));
            }
            this.value = value;
        }
        _commitTemplateResult(value) {
            const template = this.options.templateFactory(value);
            if (this.value && this.value.template === template) {
                this.value.update(value.values);
            }
            else {
                // Make sure we propagate the template processor from the TemplateResult
                // so that we use its syntax extension, etc. The template factory comes
                // from the render function options so that it can control template
                // caching and preprocessing.
                const instance = new TemplateInstance(template, value.processor, this.options);
                const fragment = instance._clone();
                instance.update(value.values);
                this._commitNode(fragment);
                this.value = instance;
            }
        }
        _commitIterable(value) {
            // For an Iterable, we create a new InstancePart per item, then set its
            // value to the item. This is a little bit of overhead for every item in
            // an Iterable, but it lets us recurse easily and efficiently update Arrays
            // of TemplateResults that will be commonly returned from expressions like:
            // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
            // If _value is an array, then the previous render was of an
            // iterable and _value will contain the NodeParts from the previous
            // render. If _value is not an array, clear this part and make a new
            // array for NodeParts.
            if (!Array.isArray(this.value)) {
                this.value = [];
                this.clear();
            }
            // Lets us keep track of how many items we stamped so we can clear leftover
            // items from a previous render
            const itemParts = this.value;
            let partIndex = 0;
            let itemPart;
            for (const item of value) {
                // Try to reuse an existing part
                itemPart = itemParts[partIndex];
                // If no existing part, create a new one
                if (itemPart === undefined) {
                    itemPart = new NodePart(this.options);
                    itemParts.push(itemPart);
                    if (partIndex === 0) {
                        itemPart.appendIntoPart(this);
                    }
                    else {
                        itemPart.insertAfterPart(itemParts[partIndex - 1]);
                    }
                }
                itemPart.setValue(item);
                itemPart.commit();
                partIndex++;
            }
            if (partIndex < itemParts.length) {
                // Truncate the parts array so _value reflects the current state
                itemParts.length = partIndex;
                this.clear(itemPart && itemPart.endNode);
            }
        }
        clear(startNode = this.startNode) {
            removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
        }
    }
    /**
     * Implements a boolean attribute, roughly as defined in the HTML
     * specification.
     *
     * If the value is truthy, then the attribute is present with a value of
     * ''. If the value is falsey, the attribute is removed.
     */
    class BooleanAttributePart {
        constructor(element, name, strings) {
            this.value = undefined;
            this._pendingValue = undefined;
            if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
                throw new Error('Boolean attributes can only contain a single expression');
            }
            this.element = element;
            this.name = name;
            this.strings = strings;
        }
        setValue(value) {
            this._pendingValue = value;
        }
        commit() {
            while (isDirective(this._pendingValue)) {
                const directive$$1 = this._pendingValue;
                this._pendingValue = noChange;
                directive$$1(this);
            }
            if (this._pendingValue === noChange) {
                return;
            }
            const value = !!this._pendingValue;
            if (this.value !== value) {
                if (value) {
                    this.element.setAttribute(this.name, '');
                }
                else {
                    this.element.removeAttribute(this.name);
                }
            }
            this.value = value;
            this._pendingValue = noChange;
        }
    }
    /**
     * Sets attribute values for PropertyParts, so that the value is only set once
     * even if there are multiple parts for a property.
     *
     * If an expression controls the whole property value, then the value is simply
     * assigned to the property under control. If there are string literals or
     * multiple expressions, then the strings are expressions are interpolated into
     * a string first.
     */
    class PropertyCommitter extends AttributeCommitter {
        constructor(element, name, strings) {
            super(element, name, strings);
            this.single =
                (strings.length === 2 && strings[0] === '' && strings[1] === '');
        }
        _createPart() {
            return new PropertyPart(this);
        }
        _getValue() {
            if (this.single) {
                return this.parts[0].value;
            }
            return super._getValue();
        }
        commit() {
            if (this.dirty) {
                this.dirty = false;
                this.element[this.name] = this._getValue();
            }
        }
    }
    class PropertyPart extends AttributePart {
    }
    // Detect event listener options support. If the `capture` property is read
    // from the options object, then options are supported. If not, then the thrid
    // argument to add/removeEventListener is interpreted as the boolean capture
    // value so we should only pass the `capture` property.
    let eventOptionsSupported = false;
    try {
        const options = {
            get capture() {
                eventOptionsSupported = true;
                return false;
            }
        };
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    }
    catch (_e) {
    }
    class EventPart {
        constructor(element, eventName, eventContext) {
            this.value = undefined;
            this._pendingValue = undefined;
            this.element = element;
            this.eventName = eventName;
            this.eventContext = eventContext;
            this._boundHandleEvent = (e) => this.handleEvent(e);
        }
        setValue(value) {
            this._pendingValue = value;
        }
        commit() {
            while (isDirective(this._pendingValue)) {
                const directive$$1 = this._pendingValue;
                this._pendingValue = noChange;
                directive$$1(this);
            }
            if (this._pendingValue === noChange) {
                return;
            }
            const newListener = this._pendingValue;
            const oldListener = this.value;
            const shouldRemoveListener = newListener == null ||
                oldListener != null &&
                    (newListener.capture !== oldListener.capture ||
                        newListener.once !== oldListener.once ||
                        newListener.passive !== oldListener.passive);
            const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
            if (shouldRemoveListener) {
                this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);
            }
            if (shouldAddListener) {
                this._options = getOptions(newListener);
                this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);
            }
            this.value = newListener;
            this._pendingValue = noChange;
        }
        handleEvent(event) {
            if (typeof this.value === 'function') {
                this.value.call(this.eventContext || this.element, event);
            }
            else {
                this.value.handleEvent(event);
            }
        }
    }
    // We copy options because of the inconsistent behavior of browsers when reading
    // the third argument of add/removeEventListener. IE11 doesn't support options
    // at all. Chrome 41 only reads `capture` if the argument is an object.
    const getOptions = (o) => o &&
        (eventOptionsSupported ?
            { capture: o.capture, passive: o.passive, once: o.once } :
            o.capture);
    //# sourceMappingURL=parts.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Creates Parts when a template is instantiated.
     */
    class DefaultTemplateProcessor {
        /**
         * Create parts for an attribute-position binding, given the event, attribute
         * name, and string literals.
         *
         * @param element The element containing the binding
         * @param name  The attribute name
         * @param strings The string literals. There are always at least two strings,
         *   event for fully-controlled bindings with a single expression.
         */
        handleAttributeExpressions(element, name, strings, options) {
            const prefix = name[0];
            if (prefix === '.') {
                const comitter = new PropertyCommitter(element, name.slice(1), strings);
                return comitter.parts;
            }
            if (prefix === '@') {
                return [new EventPart(element, name.slice(1), options.eventContext)];
            }
            if (prefix === '?') {
                return [new BooleanAttributePart(element, name.slice(1), strings)];
            }
            const comitter = new AttributeCommitter(element, name, strings);
            return comitter.parts;
        }
        /**
         * Create parts for a text-position binding.
         * @param templateFactory
         */
        handleTextExpression(options) {
            return new NodePart(options);
        }
    }
    const defaultTemplateProcessor = new DefaultTemplateProcessor();
    //# sourceMappingURL=default-template-processor.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * The default TemplateFactory which caches Templates keyed on
     * result.type and result.strings.
     */
    function templateFactory(result) {
        let templateCache = templateCaches.get(result.type);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(result.type, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        // If the TemplateStringsArray is new, generate a key from the strings
        // This key is shared between all templates with identical content
        const key = result.strings.join(marker);
        // Check if we already have a Template for this key
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            // If we have not seen this key before, create a new Template
            template = new Template(result, result.getTemplateElement());
            // Cache the Template for this key
            templateCache.keyString.set(key, template);
        }
        // Cache all future queries for this TemplateStringsArray
        templateCache.stringsArray.set(result.strings, template);
        return template;
    }
    const templateCaches = new Map();
    //# sourceMappingURL=template-factory.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const parts = new WeakMap();
    /**
     * Renders a template to a container.
     *
     * To update a container with new values, reevaluate the template literal and
     * call `render` with the new result.
     *
     * @param result a TemplateResult created by evaluating a template tag like
     *     `html` or `svg`.
     * @param container A DOM parent to render to. The entire contents are either
     *     replaced, or efficiently updated if the same result type was previous
     *     rendered there.
     * @param options RenderOptions for the entire render tree rendered to this
     *     container. Render options must *not* change between renders to the same
     *     container, as those changes will not effect previously rendered DOM.
     */
    const render = (result, container, options) => {
        let part = parts.get(container);
        if (part === undefined) {
            removeNodes(container, container.firstChild);
            parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
            part.appendInto(container);
        }
        part.setValue(result);
        part.commit();
    };
    //# sourceMappingURL=render.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * Interprets a template literal as an HTML template that can efficiently
     * render to and update a container.
     */
    const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);
    //# sourceMappingURL=lit-html.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    const walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;
    /**
     * Removes the list of nodes from a Template safely. In addition to removing
     * nodes from the Template, the Template part indices are updated to match
     * the mutated Template DOM.
     *
     * As the template is walked the removal state is tracked and
     * part indices are adjusted as needed.
     *
     * div
     *   div#1 (remove) <-- start removing (removing node is div#1)
     *     div
     *       div#2 (remove)  <-- continue removing (removing node is still div#1)
     *         div
     * div <-- stop removing since previous sibling is the removing node (div#1,
     * removed 4 nodes)
     */
    function removeNodesFromTemplate(template, nodesToRemove) {
        const { element: { content }, parts } = template;
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let part = parts[partIndex];
        let nodeIndex = -1;
        let removeCount = 0;
        const nodesToRemoveInTemplate = [];
        let currentRemovingNode = null;
        while (walker.nextNode()) {
            nodeIndex++;
            const node = walker.currentNode;
            // End removal if stepped past the removing node
            if (node.previousSibling === currentRemovingNode) {
                currentRemovingNode = null;
            }
            // A node to remove was found in the template
            if (nodesToRemove.has(node)) {
                nodesToRemoveInTemplate.push(node);
                // Track node we're removing
                if (currentRemovingNode === null) {
                    currentRemovingNode = node;
                }
            }
            // When removing, increment count by which to adjust subsequent part indices
            if (currentRemovingNode !== null) {
                removeCount++;
            }
            while (part !== undefined && part.index === nodeIndex) {
                // If part is in a removed node deactivate it by setting index to -1 or
                // adjust the index as needed.
                part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
                // go to the next active part.
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                part = parts[partIndex];
            }
        }
        nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));
    }
    const countNodes = (node) => {
        let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;
        const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
        while (walker.nextNode()) {
            count++;
        }
        return count;
    };
    const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
        for (let i = startIndex + 1; i < parts.length; i++) {
            const part = parts[i];
            if (isTemplatePartActive(part)) {
                return i;
            }
        }
        return -1;
    };
    /**
     * Inserts the given node into the Template, optionally before the given
     * refNode. In addition to inserting the node into the Template, the Template
     * part indices are updated to match the mutated Template DOM.
     */
    function insertNodeIntoTemplate(template, node, refNode = null) {
        const { element: { content }, parts } = template;
        // If there's no refNode, then put node at end of template.
        // No part indices need to be shifted in this case.
        if (refNode === null || refNode === undefined) {
            content.appendChild(node);
            return;
        }
        const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
        let partIndex = nextActiveIndexInTemplateParts(parts);
        let insertCount = 0;
        let walkerIndex = -1;
        while (walker.nextNode()) {
            walkerIndex++;
            const walkerNode = walker.currentNode;
            if (walkerNode === refNode) {
                insertCount = countNodes(node);
                refNode.parentNode.insertBefore(node, refNode);
            }
            while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
                // If we've inserted the node, simply adjust all subsequent parts
                if (insertCount > 0) {
                    while (partIndex !== -1) {
                        parts[partIndex].index += insertCount;
                        partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
                    }
                    return;
                }
                partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
            }
        }
    }
    //# sourceMappingURL=modify-template.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // Get a key to lookup in `templateCaches`.
    const getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
    let compatibleShadyCSSVersion = true;
    if (typeof window.ShadyCSS === 'undefined') {
        compatibleShadyCSSVersion = false;
    }
    else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
        console.warn(`Incompatible ShadyCSS version detected.` +
            `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +
            `@webcomponents/shadycss@1.3.1.`);
        compatibleShadyCSSVersion = false;
    }
    /**
     * Template factory which scopes template DOM using ShadyCSS.
     * @param scopeName {string}
     */
    const shadyTemplateFactory = (scopeName) => (result) => {
        const cacheKey = getTemplateCacheKey(result.type, scopeName);
        let templateCache = templateCaches.get(cacheKey);
        if (templateCache === undefined) {
            templateCache = {
                stringsArray: new WeakMap(),
                keyString: new Map()
            };
            templateCaches.set(cacheKey, templateCache);
        }
        let template = templateCache.stringsArray.get(result.strings);
        if (template !== undefined) {
            return template;
        }
        const key = result.strings.join(marker);
        template = templateCache.keyString.get(key);
        if (template === undefined) {
            const element = result.getTemplateElement();
            if (compatibleShadyCSSVersion) {
                window.ShadyCSS.prepareTemplateDom(element, scopeName);
            }
            template = new Template(result, element);
            templateCache.keyString.set(key, template);
        }
        templateCache.stringsArray.set(result.strings, template);
        return template;
    };
    const TEMPLATE_TYPES = ['html', 'svg'];
    /**
     * Removes all style elements from Templates for the given scopeName.
     */
    const removeStylesFromLitTemplates = (scopeName) => {
        TEMPLATE_TYPES.forEach((type) => {
            const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
            if (templates !== undefined) {
                templates.keyString.forEach((template) => {
                    const { element: { content } } = template;
                    // IE 11 doesn't support the iterable param Set constructor
                    const styles = new Set();
                    Array.from(content.querySelectorAll('style')).forEach((s) => {
                        styles.add(s);
                    });
                    removeNodesFromTemplate(template, styles);
                });
            }
        });
    };
    const shadyRenderSet = new Set();
    /**
     * For the given scope name, ensures that ShadyCSS style scoping is performed.
     * This is done just once per scope name so the fragment and template cannot
     * be modified.
     * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
     * to be scoped and appended to the document
     * (2) removes style elements from all lit-html Templates for this scope name.
     *
     * Note, <style> elements can only be placed into templates for the
     * initial rendering of the scope. If <style> elements are included in templates
     * dynamically rendered to the scope (after the first scope render), they will
     * not be scoped and the <style> will be left in the template and rendered
     * output.
     */
    const prepareTemplateStyles = (renderedDOM, template, scopeName) => {
        shadyRenderSet.add(scopeName);
        // Move styles out of rendered DOM and store.
        const styles = renderedDOM.querySelectorAll('style');
        // If there are no styles, skip unnecessary work
        if (styles.length === 0) {
            // Ensure prepareTemplateStyles is called to support adding
            // styles via `prepareAdoptedCssText` since that requires that
            // `prepareTemplateStyles` is called.
            window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
            return;
        }
        const condensedStyle = document.createElement('style');
        // Collect styles into a single style. This helps us make sure ShadyCSS
        // manipulations will not prevent us from being able to fix up template
        // part indices.
        // NOTE: collecting styles is inefficient for browsers but ShadyCSS
        // currently does this anyway. When it does not, this should be changed.
        for (let i = 0; i < styles.length; i++) {
            const style = styles[i];
            style.parentNode.removeChild(style);
            condensedStyle.textContent += style.textContent;
        }
        // Remove styles from nested templates in this scope.
        removeStylesFromLitTemplates(scopeName);
        // And then put the condensed style into the "root" template passed in as
        // `template`.
        insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);
        // Note, it's important that ShadyCSS gets the template that `lit-html`
        // will actually render so that it can update the style inside when
        // needed (e.g. @apply native Shadow DOM case).
        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
        if (window.ShadyCSS.nativeShadow) {
            // When in native Shadow DOM, re-add styling to rendered content using
            // the style ShadyCSS produced.
            const style = template.element.content.querySelector('style');
            renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
        }
        else {
            // When not in native Shadow DOM, at this point ShadyCSS will have
            // removed the style from the lit template and parts will be broken as a
            // result. To fix this, we put back the style node ShadyCSS removed
            // and then tell lit to remove that node from the template.
            // NOTE, ShadyCSS creates its own style so we can safely add/remove
            // `condensedStyle` here.
            template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);
            const removes = new Set();
            removes.add(condensedStyle);
            removeNodesFromTemplate(template, removes);
        }
    };
    /**
     * Extension to the standard `render` method which supports rendering
     * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
     * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
     * or when the webcomponentsjs
     * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
     *
     * Adds a `scopeName` option which is used to scope element DOM and stylesheets
     * when native ShadowDOM is unavailable. The `scopeName` will be added to
     * the class attribute of all rendered DOM. In addition, any style elements will
     * be automatically re-written with this `scopeName` selector and moved out
     * of the rendered DOM and into the document `<head>`.
     *
     * It is common to use this render method in conjunction with a custom element
     * which renders a shadowRoot. When this is done, typically the element's
     * `localName` should be used as the `scopeName`.
     *
     * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
     * custom properties (needed only on older browsers like IE11) and a shim for
     * a deprecated feature called `@apply` that supports applying a set of css
     * custom properties to a given location.
     *
     * Usage considerations:
     *
     * * Part values in `<style>` elements are only applied the first time a given
     * `scopeName` renders. Subsequent changes to parts in style elements will have
     * no effect. Because of this, parts in style elements should only be used for
     * values that will never change, for example parts that set scope-wide theme
     * values or parts which render shared style elements.
     *
     * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
     * custom element's `constructor` is not supported. Instead rendering should
     * either done asynchronously, for example at microtask timing (for example
     * `Promise.resolve()`), or be deferred until the first time the element's
     * `connectedCallback` runs.
     *
     * Usage considerations when using shimmed custom properties or `@apply`:
     *
     * * Whenever any dynamic changes are made which affect
     * css custom properties, `ShadyCSS.styleElement(element)` must be called
     * to update the element. There are two cases when this is needed:
     * (1) the element is connected to a new parent, (2) a class is added to the
     * element that causes it to match different custom properties.
     * To address the first case when rendering a custom element, `styleElement`
     * should be called in the element's `connectedCallback`.
     *
     * * Shimmed custom properties may only be defined either for an entire
     * shadowRoot (for example, in a `:host` rule) or via a rule that directly
     * matches an element with a shadowRoot. In other words, instead of flowing from
     * parent to child as do native css custom properties, shimmed custom properties
     * flow only from shadowRoots to nested shadowRoots.
     *
     * * When using `@apply` mixing css shorthand property names with
     * non-shorthand names (for example `border` and `border-width`) is not
     * supported.
     */
    const render$1 = (result, container, options) => {
        const scopeName = options.scopeName;
        const hasRendered = parts.has(container);
        const needsScoping = container instanceof ShadowRoot &&
            compatibleShadyCSSVersion && result instanceof TemplateResult;
        // Handle first render to a scope specially...
        const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
        // On first scope render, render into a fragment; this cannot be a single
        // fragment that is reused since nested renders can occur synchronously.
        const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
        render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
        // When performing first scope render,
        // (1) We've rendered into a fragment so that there's a chance to
        // `prepareTemplateStyles` before sub-elements hit the DOM
        // (which might cause them to render based on a common pattern of
        // rendering in a custom element's `connectedCallback`);
        // (2) Scope the template with ShadyCSS one time only for this scope.
        // (3) Render the fragment into the container and make sure the
        // container knows its `part` is the one we just rendered. This ensures
        // DOM will be re-used on subsequent renders.
        if (firstScopeRender) {
            const part = parts.get(renderContainer);
            parts.delete(renderContainer);
            if (part.value instanceof TemplateInstance) {
                prepareTemplateStyles(renderContainer, part.value.template, scopeName);
            }
            removeNodes(container, container.firstChild);
            container.appendChild(renderContainer);
            parts.set(container, part);
        }
        // After elements have hit the DOM, update styling if this is the
        // initial render to this container.
        // This is needed whenever dynamic changes are made so it would be
        // safest to do every render; however, this would regress performance
        // so we leave it up to the user to call `ShadyCSSS.styleElement`
        // for dynamic changes.
        if (!hasRendered && needsScoping) {
            window.ShadyCSS.styleElement(container.host);
        }
    };
    //# sourceMappingURL=shady-render.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
     * replaced at compile time by the munged name for object[property]. We cannot
     * alias this function, so we have to use a small shim that has the same
     * behavior when not compiling.
     */
    const JSCompiler_renameProperty$1 = (prop, _obj) => prop;
    /**
     * Returns the property descriptor for a property on this prototype by walking
     * up the prototype chain. Note that we stop just before Object.prototype, which
     * also avoids issues with Symbol polyfills (core-js, get-own-property-symbols),
     * which create accessors for the symbols on Object.prototype.
     */
    const descriptorFromPrototype = (name, proto) => {
        if (name in proto) {
            while (proto !== Object.prototype) {
                if (proto.hasOwnProperty(name)) {
                    return Object.getOwnPropertyDescriptor(proto, name);
                }
                proto = Object.getPrototypeOf(proto);
            }
        }
        return undefined;
    };
    const defaultConverter = {
        toAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value ? '' : null;
                case Object:
                case Array:
                    // if the value is `null` or `undefined` pass this through
                    // to allow removing/no change behavior.
                    return value == null ? value : JSON.stringify(value);
            }
            return value;
        },
        fromAttribute(value, type) {
            switch (type) {
                case Boolean:
                    return value !== null;
                case Number:
                    return value === null ? null : Number(value);
                case Object:
                case Array:
                    return JSON.parse(value);
            }
            return value;
        }
    };
    /**
     * Change function that returns true if `value` is different from `oldValue`.
     * This method is used as the default for a property's `hasChanged` function.
     */
    const notEqual = (value, old) => {
        // This ensures (old==NaN, value==NaN) always returns false
        return old !== value && (old === old || value === value);
    };
    const defaultPropertyDeclaration = {
        attribute: true,
        type: String,
        converter: defaultConverter,
        reflect: false,
        hasChanged: notEqual
    };
    const microtaskPromise = Promise.resolve(true);
    const STATE_HAS_UPDATED = 1;
    const STATE_UPDATE_REQUESTED = 1 << 2;
    const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
    const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
    const STATE_HAS_CONNECTED = 1 << 5;
    /**
     * Base element class which manages element properties and attributes. When
     * properties change, the `update` method is asynchronously called. This method
     * should be supplied by subclassers to render updates as desired.
     */
    class UpdatingElement extends HTMLElement {
        constructor() {
            super();
            this._updateState = 0;
            this._instanceProperties = undefined;
            this._updatePromise = microtaskPromise;
            this._hasConnectedResolver = undefined;
            /**
             * Map with keys for any properties that have changed since the last
             * update cycle with previous values.
             */
            this._changedProperties = new Map();
            /**
             * Map with keys of properties that should be reflected when updated.
             */
            this._reflectingProperties = undefined;
            this.initialize();
        }
        /**
         * Returns a list of attributes corresponding to the registered properties.
         * @nocollapse
         */
        static get observedAttributes() {
            // note: piggy backing on this to ensure we're _finalized.
            this._finalize();
            const attributes = [];
            for (const [p, v] of this._classProperties) {
                const attr = this._attributeNameForProperty(p, v);
                if (attr !== undefined) {
                    this._attributeToPropertyMap.set(attr, p);
                    attributes.push(attr);
                }
            }
            return attributes;
        }
        /**
         * Ensures the private `_classProperties` property metadata is created.
         * In addition to `_finalize` this is also called in `createProperty` to
         * ensure the `@property` decorator can add property metadata.
         */
        /** @nocollapse */
        static _ensureClassProperties() {
            // ensure private storage for property declarations.
            if (!this.hasOwnProperty(JSCompiler_renameProperty$1('_classProperties', this))) {
                this._classProperties = new Map();
                // NOTE: Workaround IE11 not supporting Map constructor argument.
                const superProperties = Object.getPrototypeOf(this)._classProperties;
                if (superProperties !== undefined) {
                    superProperties.forEach((v, k) => this._classProperties.set(k, v));
                }
            }
        }
        /**
         * Creates a property accessor on the element prototype if one does not exist.
         * The property setter calls the property's `hasChanged` property option
         * or uses a strict identity check to determine whether or not to request
         * an update.
         * @nocollapse
         */
        static createProperty(name, options = defaultPropertyDeclaration) {
            // Note, since this can be called by the `@property` decorator which
            // is called before `_finalize`, we ensure storage exists for property
            // metadata.
            this._ensureClassProperties();
            this._classProperties.set(name, options);
            if (!options.noAccessor) {
                const superDesc = descriptorFromPrototype(name, this.prototype);
                let desc;
                // If there is a super accessor, capture it and "super" to it
                if (superDesc !== undefined && (superDesc.set && superDesc.get)) {
                    const { set, get } = superDesc;
                    desc = {
                        get() { return get.call(this); },
                        set(value) {
                            const oldValue = this[name];
                            set.call(this, value);
                            this.requestUpdate(name, oldValue);
                        },
                        configurable: true,
                        enumerable: true
                    };
                }
                else {
                    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
                    desc = {
                        get() { return this[key]; },
                        set(value) {
                            const oldValue = this[name];
                            this[key] = value;
                            this.requestUpdate(name, oldValue);
                        },
                        configurable: true,
                        enumerable: true
                    };
                }
                Object.defineProperty(this.prototype, name, desc);
            }
        }
        /**
         * Creates property accessors for registered properties and ensures
         * any superclasses are also finalized.
         * @nocollapse
         */
        static _finalize() {
            if (this.hasOwnProperty(JSCompiler_renameProperty$1('finalized', this)) &&
                this.finalized) {
                return;
            }
            // finalize any superclasses
            const superCtor = Object.getPrototypeOf(this);
            if (typeof superCtor._finalize === 'function') {
                superCtor._finalize();
            }
            this.finalized = true;
            this._ensureClassProperties();
            // initialize Map populated in observedAttributes
            this._attributeToPropertyMap = new Map();
            // make any properties
            // Note, only process "own" properties since this element will inherit
            // any properties defined on the superClass, and finalization ensures
            // the entire prototype chain is finalized.
            if (this.hasOwnProperty(JSCompiler_renameProperty$1('properties', this))) {
                const props = this.properties;
                // support symbols in properties (IE11 does not support this)
                const propKeys = [
                    ...Object.getOwnPropertyNames(props),
                    ...(typeof Object.getOwnPropertySymbols === 'function')
                        ? Object.getOwnPropertySymbols(props)
                        : []
                ];
                for (const p of propKeys) {
                    // note, use of `any` is due to TypeSript lack of support for symbol in
                    // index types
                    this.createProperty(p, props[p]);
                }
            }
        }
        /**
         * Returns the property name for the given attribute `name`.
         * @nocollapse
         */
        static _attributeNameForProperty(name, options) {
            const attribute = options.attribute;
            return attribute === false
                ? undefined
                : (typeof attribute === 'string'
                    ? attribute
                    : (typeof name === 'string' ? name.toLowerCase()
                        : undefined));
        }
        /**
         * Returns true if a property should request an update.
         * Called when a property value is set and uses the `hasChanged`
         * option for the property if present or a strict identity check.
         * @nocollapse
         */
        static _valueHasChanged(value, old, hasChanged = notEqual) {
            return hasChanged(value, old);
        }
        /**
         * Returns the property value for the given attribute value.
         * Called via the `attributeChangedCallback` and uses the property's
         * `converter` or `converter.fromAttribute` property option.
         * @nocollapse
         */
        static _propertyValueFromAttribute(value, options) {
            const type = options.type;
            const converter = options.converter || defaultConverter;
            const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);
            return fromAttribute ? fromAttribute(value, type) : value;
        }
        /**
         * Returns the attribute value for the given property value. If this
         * returns undefined, the property will *not* be reflected to an attribute.
         * If this returns null, the attribute will be removed, otherwise the
         * attribute will be set to the value.
         * This uses the property's `reflect` and `type.toAttribute` property options.
         * @nocollapse
         */
        static _propertyValueToAttribute(value, options) {
            if (options.reflect === undefined) {
                return;
            }
            const type = options.type;
            const converter = options.converter;
            const toAttribute = converter && converter.toAttribute ||
                defaultConverter.toAttribute;
            return toAttribute(value, type);
        }
        /**
         * Performs element initialization. By default captures any pre-set values for
         * registered properties.
         */
        initialize() { this._saveInstanceProperties(); }
        /**
         * Fixes any properties set on the instance before upgrade time.
         * Otherwise these would shadow the accessor and break these properties.
         * The properties are stored in a Map which is played back after the
         * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
         * (<=41), properties created for native platform properties like (`id` or
         * `name`) may not have default values set in the element constructor. On
         * these browsers native properties appear on instances and therefore their
         * default value will overwrite any element default (e.g. if the element sets
         * this.id = 'id' in the constructor, the 'id' will become '' since this is
         * the native platform default).
         */
        _saveInstanceProperties() {
            for (const [p] of this.constructor
                ._classProperties) {
                if (this.hasOwnProperty(p)) {
                    const value = this[p];
                    delete this[p];
                    if (!this._instanceProperties) {
                        this._instanceProperties = new Map();
                    }
                    this._instanceProperties.set(p, value);
                }
            }
        }
        /**
         * Applies previously saved instance properties.
         */
        _applyInstanceProperties() {
            for (const [p, v] of this._instanceProperties) {
                this[p] = v;
            }
            this._instanceProperties = undefined;
        }
        connectedCallback() {
            this._updateState = this._updateState | STATE_HAS_CONNECTED;
            // Ensure connection triggers an update. Updates cannot complete before
            // connection and if one is pending connection the `_hasConnectionResolver`
            // will exist. If so, resolve it to complete the update, otherwise
            // requestUpdate.
            if (this._hasConnectedResolver) {
                this._hasConnectedResolver();
                this._hasConnectedResolver = undefined;
            }
            else {
                this.requestUpdate();
            }
        }
        /**
         * Allows for `super.disconnectedCallback()` in extensions while
         * reserving the possibility of making non-breaking feature additions
         * when disconnecting at some point in the future.
         */
        disconnectedCallback() { }
        /**
         * Synchronizes property values when attributes change.
         */
        attributeChangedCallback(name, old, value) {
            if (old !== value) {
                this._attributeToProperty(name, value);
            }
        }
        _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
            const ctor = this.constructor;
            const attr = ctor._attributeNameForProperty(name, options);
            if (attr !== undefined) {
                const attrValue = ctor._propertyValueToAttribute(value, options);
                // an undefined value does not change the attribute.
                if (attrValue === undefined) {
                    return;
                }
                // Track if the property is being reflected to avoid
                // setting the property again via `attributeChangedCallback`. Note:
                // 1. this takes advantage of the fact that the callback is synchronous.
                // 2. will behave incorrectly if multiple attributes are in the reaction
                // stack at time of calling. However, since we process attributes
                // in `update` this should not be possible (or an extreme corner case
                // that we'd like to discover).
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
                if (attrValue == null) {
                    this.removeAttribute(attr);
                }
                else {
                    this.setAttribute(attr, attrValue);
                }
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
            }
        }
        _attributeToProperty(name, value) {
            // Use tracking info to avoid deserializing attribute value if it was
            // just set from a property setter.
            if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
                return;
            }
            const ctor = this.constructor;
            const propName = ctor._attributeToPropertyMap.get(name);
            if (propName !== undefined) {
                const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;
                // mark state reflecting
                this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
                this[propName] =
                    ctor._propertyValueFromAttribute(value, options);
                // mark state not reflecting
                this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
            }
        }
        /**
         * Requests an update which is processed asynchronously. This should
         * be called when an element should update based on some state not triggered
         * by setting a property. In this case, pass no arguments. It should also be
         * called when manually implementing a property setter. In this case, pass the
         * property `name` and `oldValue` to ensure that any configured property
         * options are honored. Returns the `updateComplete` Promise which is resolved
         * when the update completes.
         *
         * @param name {PropertyKey} (optional) name of requesting property
         * @param oldValue {any} (optional) old value of requesting property
         * @returns {Promise} A Promise that is resolved when the update completes.
         */
        requestUpdate(name, oldValue) {
            let shouldRequestUpdate = true;
            // if we have a property key, perform property update steps.
            if (name !== undefined && !this._changedProperties.has(name)) {
                const ctor = this.constructor;
                const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;
                if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
                    // track old value when changing.
                    this._changedProperties.set(name, oldValue);
                    // add to reflecting properties set
                    if (options.reflect === true &&
                        !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
                        if (this._reflectingProperties === undefined) {
                            this._reflectingProperties = new Map();
                        }
                        this._reflectingProperties.set(name, options);
                    }
                    // abort the request if the property should not be considered changed.
                }
                else {
                    shouldRequestUpdate = false;
                }
            }
            if (!this._hasRequestedUpdate && shouldRequestUpdate) {
                this._enqueueUpdate();
            }
            return this.updateComplete;
        }
        /**
         * Sets up the element to asynchronously update.
         */
        async _enqueueUpdate() {
            // Mark state updating...
            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
            let resolve;
            const previousUpdatePromise = this._updatePromise;
            this._updatePromise = new Promise((res) => resolve = res);
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await previousUpdatePromise;
            // Make sure the element has connected before updating.
            if (!this._hasConnected) {
                await new Promise((res) => this._hasConnectedResolver = res);
            }
            // Allow `performUpdate` to be asynchronous to enable scheduling of updates.
            const result = this.performUpdate();
            // Note, this is to avoid delaying an additional microtask unless we need
            // to.
            if (result != null &&
                typeof result.then === 'function') {
                await result;
            }
            resolve(!this._hasRequestedUpdate);
        }
        get _hasConnected() {
            return (this._updateState & STATE_HAS_CONNECTED);
        }
        get _hasRequestedUpdate() {
            return (this._updateState & STATE_UPDATE_REQUESTED);
        }
        get hasUpdated() { return (this._updateState & STATE_HAS_UPDATED); }
        /**
         * Performs an element update.
         *
         * You can override this method to change the timing of updates. For instance,
         * to schedule updates to occur just before the next frame:
         *
         * ```
         * protected async performUpdate(): Promise<unknown> {
         *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
         *   super.performUpdate();
         * }
         * ```
         */
        performUpdate() {
            // Mixin instance properties once, if they exist.
            if (this._instanceProperties) {
                this._applyInstanceProperties();
            }
            if (this.shouldUpdate(this._changedProperties)) {
                const changedProperties = this._changedProperties;
                this.update(changedProperties);
                this._markUpdated();
                if (!(this._updateState & STATE_HAS_UPDATED)) {
                    this._updateState = this._updateState | STATE_HAS_UPDATED;
                    this.firstUpdated(changedProperties);
                }
                this.updated(changedProperties);
            }
            else {
                this._markUpdated();
            }
        }
        _markUpdated() {
            this._changedProperties = new Map();
            this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
        }
        /**
         * Returns a Promise that resolves when the element has completed updating.
         * The Promise value is a boolean that is `true` if the element completed the
         * update without triggering another update. The Promise result is `false` if
         * a property was set inside `updated()`. This getter can be implemented to
         * await additional state. For example, it is sometimes useful to await a
         * rendered element before fulfilling this Promise. To do this, first await
         * `super.updateComplete` then any subsequent state.
         *
         * @returns {Promise} The Promise returns a boolean that indicates if the
         * update resolved without triggering another update.
         */
        get updateComplete() { return this._updatePromise; }
        /**
         * Controls whether or not `update` should be called when the element requests
         * an update. By default, this method always returns `true`, but this can be
         * customized to control when to update.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        shouldUpdate(_changedProperties) {
            return true;
        }
        /**
         * Updates the element. This method reflects property values to attributes.
         * It can be overridden to render and keep updated element DOM.
         * Setting properties inside this method will *not* trigger
         * another update.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        update(_changedProperties) {
            if (this._reflectingProperties !== undefined &&
                this._reflectingProperties.size > 0) {
                for (const [k, v] of this._reflectingProperties) {
                    this._propertyToAttribute(k, this[k], v);
                }
                this._reflectingProperties = undefined;
            }
        }
        /**
         * Invoked whenever the element is updated. Implement to perform
         * post-updating tasks via DOM APIs, for example, focusing an element.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        updated(_changedProperties) { }
        /**
         * Invoked when the element is first updated. Implement to perform one time
         * work on the element after update.
         *
         * Setting properties inside this method will trigger the element to update
         * again after this update cycle completes.
         *
         * * @param _changedProperties Map of changed properties with old values
         */
        firstUpdated(_changedProperties) { }
    }
    /**
     * Marks class as having finished creating properties.
     */
    UpdatingElement.finalized = true;
    //# sourceMappingURL=updating-element.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    //# sourceMappingURL=decorators.js.map

    /**
    @license
    Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */
    const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype);
    //# sourceMappingURL=css-tag.js.map

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    class LitElement extends UpdatingElement {
        /**
         * Array of styles to apply to the element. The styles should be defined
         * using the `css` tag function.
         */
        static get styles() { return []; }
        static get _uniqueStyles() {
            if (this._styles === undefined) {
                const styles = this.styles;
                // As a performance optimization to avoid duplicated styling that can
                // occur especially when composing via subclassing, de-duplicate styles
                // preserving the last item in the list. The last item is kept to
                // try to preserve cascade order with the assumption that it's most
                // important that last added styles override previous styles.
                const styleSet = styles.reduceRight((set, s) => {
                    set.add(s);
                    // on IE set.add does not return the set.
                    return set;
                }, new Set());
                // Array.form does not work on Set in IE
                this._styles = [];
                styleSet.forEach((v) => this._styles.unshift(v));
            }
            return this._styles;
        }
        /**
         * Performs element initialization. By default this calls `createRenderRoot`
         * to create the element `renderRoot` node and captures any pre-set values for
         * registered properties.
         */
        initialize() {
            super.initialize();
            this.renderRoot = this.createRenderRoot();
            // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
            // element's getRootNode(). While this could be done, we're choosing not to
            // support this now since it would require different logic around de-duping.
            if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
                this.adoptStyles();
            }
        }
        /**
         * Returns the node into which the element should render and by default
         * creates and returns an open shadowRoot. Implement to customize where the
         * element's DOM is rendered. For example, to render into the element's
         * childNodes, return `this`.
         * @returns {Element|DocumentFragment} Returns a node into which to render.
         */
        createRenderRoot() {
            return this.attachShadow({ mode: 'open' });
        }
        /**
         * Applies styling to the element shadowRoot using the `static get styles`
         * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
         * available and will fallback otherwise. When Shadow DOM is polyfilled,
         * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
         * is available but `adoptedStyleSheets` is not, styles are appended to the
         * end of the `shadowRoot` to [mimic spec
         * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
         */
        adoptStyles() {
            const styles = this.constructor._uniqueStyles;
            if (styles.length === 0) {
                return;
            }
            // There are three separate cases here based on Shadow DOM support.
            // (1) shadowRoot polyfilled: use ShadyCSS
            // (2) shadowRoot.adoptedStyleSheets available: use it.
            // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
            // rendering
            if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
                window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);
            }
            else if (supportsAdoptingStyleSheets) {
                this.renderRoot.adoptedStyleSheets =
                    styles.map((s) => s.styleSheet);
            }
            else {
                // This must be done after rendering so the actual style insertion is done
                // in `update`.
                this._needsShimAdoptedStyleSheets = true;
            }
        }
        connectedCallback() {
            super.connectedCallback();
            // Note, first update/render handles styleElement so we only call this if
            // connected after first update.
            if (this.hasUpdated && window.ShadyCSS !== undefined) {
                window.ShadyCSS.styleElement(this);
            }
        }
        /**
         * Updates the element. This method reflects property values to attributes
         * and calls `render` to render DOM via lit-html. Setting properties inside
         * this method will *not* trigger another update.
         * * @param _changedProperties Map of changed properties with old values
         */
        update(changedProperties) {
            super.update(changedProperties);
            const templateResult = this.render();
            if (templateResult instanceof TemplateResult) {
                this.constructor
                    .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
            }
            // When native Shadow DOM is used but adoptedStyles are not supported,
            // insert styling after rendering to ensure adoptedStyles have highest
            // priority.
            if (this._needsShimAdoptedStyleSheets) {
                this._needsShimAdoptedStyleSheets = false;
                this.constructor._uniqueStyles.forEach((s) => {
                    const style = document.createElement('style');
                    style.textContent = s.cssText;
                    this.renderRoot.appendChild(style);
                });
            }
        }
        /**
         * Invoked on each update to perform rendering tasks. This method must return
         * a lit-html TemplateResult. Setting properties inside this method will *not*
         * trigger the element to update.
         */
        render() { }
    }
    /**
     * Ensure this class is marked as `finalized` as an optimization ensuring
     * it will not needlessly try to `finalize`.
     */
    LitElement.finalized = true;
    /**
     * Render method used to render the lit-html TemplateResult to the element's
     * DOM.
     * @param {TemplateResult} Template to render.
     * @param {Element|DocumentFragment} Node into which to render.
     * @param {String} Element name.
     * @nocollapse
     */
    LitElement.render = render$1;
    //# sourceMappingURL=lit-element.js.map

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isFunction(x) {
        return typeof x === 'function';
    }
    //# sourceMappingURL=isFunction.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var _enable_super_gross_mode_that_will_cause_bad_things = false;
    var config = {
        Promise: undefined,
        set useDeprecatedSynchronousErrorHandling(value) {
            if (value) {
                var error = /*@__PURE__*/ new Error();
                /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
            }
            else if (_enable_super_gross_mode_that_will_cause_bad_things) {
                /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
            }
            _enable_super_gross_mode_that_will_cause_bad_things = value;
        },
        get useDeprecatedSynchronousErrorHandling() {
            return _enable_super_gross_mode_that_will_cause_bad_things;
        },
    };
    //# sourceMappingURL=config.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function hostReportError(err) {
        setTimeout(function () { throw err; });
    }
    //# sourceMappingURL=hostReportError.js.map

    /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
    var empty = {
        closed: true,
        next: function (value) { },
        error: function (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        },
        complete: function () { }
    };
    //# sourceMappingURL=Observer.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
    //# sourceMappingURL=isArray.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    //# sourceMappingURL=isObject.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var errorObject = { e: {} };
    //# sourceMappingURL=errorObject.js.map

    /** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        }
        catch (e) {
            errorObject.e = e;
            return errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    //# sourceMappingURL=tryCatch.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var UnsubscriptionError = UnsubscriptionErrorImpl;
    //# sourceMappingURL=UnsubscriptionError.js.map

    /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
    var Subscription = /*@__PURE__*/ (function () {
        function Subscription(unsubscribe) {
            this.closed = false;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this.closed = true;
            this._parent = null;
            this._parents = null;
            this._subscriptions = null;
            var index = -1;
            var len = _parents ? _parents.length : 0;
            while (_parent) {
                _parent.remove(this);
                _parent = ++index < len && _parents[index] || null;
            }
            if (isFunction(_unsubscribe)) {
                var trial = tryCatch(_unsubscribe).call(this);
                if (trial === errorObject) {
                    hasErrors = true;
                    errors = errors || (errorObject.e instanceof UnsubscriptionError ?
                        flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
                }
            }
            if (isArray(_subscriptions)) {
                index = -1;
                len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject(sub)) {
                        var trial = tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject.e;
                            if (err instanceof UnsubscriptionError) {
                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError(errors);
            }
        };
        Subscription.prototype.add = function (teardown) {
            if (!teardown || (teardown === Subscription.EMPTY)) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var subscription = teardown;
            switch (typeof teardown) {
                case 'function':
                    subscription = new Subscription(teardown);
                case 'object':
                    if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                        return subscription;
                    }
                    else if (this.closed) {
                        subscription.unsubscribe();
                        return subscription;
                    }
                    else if (typeof subscription._addParent !== 'function') {
                        var tmp = subscription;
                        subscription = new Subscription();
                        subscription._subscriptions = [tmp];
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            var subscriptions = this._subscriptions || (this._subscriptions = []);
            subscriptions.push(subscription);
            subscription._addParent(this);
            return subscription;
        };
        Subscription.prototype.remove = function (subscription) {
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.prototype._addParent = function (parent) {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            if (!_parent || _parent === parent) {
                this._parent = parent;
            }
            else if (!_parents) {
                this._parents = [parent];
            }
            else if (_parents.indexOf(parent) === -1) {
                _parents.push(parent);
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    function flattenUnsubscriptionErrors(errors) {
        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
    }
    //# sourceMappingURL=Subscription.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var rxSubscriber = typeof Symbol === 'function'
        ? /*@__PURE__*/ Symbol('rxSubscriber')
        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
    //# sourceMappingURL=rxSubscriber.js.map

    /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
    var Subscriber = /*@__PURE__*/ (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destinationOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this.syncErrorValue = null;
            _this.syncErrorThrown = false;
            _this.syncErrorThrowable = false;
            _this.isStopped = false;
            _this._parentSubscription = null;
            switch (arguments.length) {
                case 0:
                    _this.destination = empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        _this.destination = empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                            _this.destination = destinationOrNext;
                            destinationOrNext.add(_this);
                        }
                        else {
                            _this.syncErrorThrowable = true;
                            _this.destination = new SafeSubscriber(_this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    _this.syncErrorThrowable = true;
                    _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                    break;
            }
            return _this;
        }
        Subscriber.prototype[rxSubscriber] = function () { return this; };
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        Subscriber.prototype._unsubscribeAndRecycle = function () {
            var _a = this, _parent = _a._parent, _parents = _a._parents;
            this._parent = null;
            this._parents = null;
            this.unsubscribe();
            this.closed = false;
            this.isStopped = false;
            this._parent = _parent;
            this._parents = _parents;
            this._parentSubscription = null;
            return this;
        };
        return Subscriber;
    }(Subscription));
    var SafeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            _this._parentSubscriber = _parentSubscriber;
            var next;
            var context = _this;
            if (isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (observerOrNext !== empty) {
                    context = Object.create(observerOrNext);
                    if (isFunction(context.unsubscribe)) {
                        _this.add(context.unsubscribe.bind(context));
                    }
                    context.unsubscribe = _this.unsubscribe.bind(_this);
                }
            }
            _this._context = context;
            _this._next = next;
            _this._error = error;
            _this._complete = complete;
            return _this;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parentSubscriber = this._parentSubscriber;
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
                if (this._error) {
                    if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parentSubscriber.syncErrorThrowable) {
                    this.unsubscribe();
                    if (useDeprecatedSynchronousErrorHandling) {
                        throw err;
                    }
                    hostReportError(err);
                }
                else {
                    if (useDeprecatedSynchronousErrorHandling) {
                        _parentSubscriber.syncErrorValue = err;
                        _parentSubscriber.syncErrorThrown = true;
                    }
                    else {
                        hostReportError(err);
                    }
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            var _this = this;
            if (!this.isStopped) {
                var _parentSubscriber = this._parentSubscriber;
                if (this._complete) {
                    var wrappedComplete = function () { return _this._complete.call(_this._context); };
                    if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                        this.__tryOrUnsub(wrappedComplete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                if (config.useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                else {
                    hostReportError(err);
                }
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            if (!config.useDeprecatedSynchronousErrorHandling) {
                throw new Error('bad call');
            }
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    parent.syncErrorValue = err;
                    parent.syncErrorThrown = true;
                    return true;
                }
                else {
                    hostReportError(err);
                    return true;
                }
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parentSubscriber = this._parentSubscriber;
            this._context = null;
            this._parentSubscriber = null;
            _parentSubscriber.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));
    //# sourceMappingURL=Subscriber.js.map

    /** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
    function canReportError(observer) {
        while (observer) {
            var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
            if (closed_1 || isStopped) {
                return false;
            }
            else if (destination && destination instanceof Subscriber) {
                observer = destination;
            }
            else {
                observer = null;
            }
        }
        return true;
    }
    //# sourceMappingURL=canReportError.js.map

    /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber]) {
                return nextOrObserver[rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber(empty);
        }
        return new Subscriber(nextOrObserver, error, complete);
    }
    //# sourceMappingURL=toSubscriber.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';
    //# sourceMappingURL=observable.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function noop() { }
    //# sourceMappingURL=noop.js.map

    /** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
    function pipeFromArray(fns) {
        if (!fns) {
            return noop;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }
    //# sourceMappingURL=pipe.js.map

    /** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
    var Observable = /*@__PURE__*/ (function () {
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable$$1 = new Observable();
            observable$$1.source = this;
            observable$$1.operator = operator;
            return observable$$1;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            }
            else {
                sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                    this._subscribe(sink) :
                    this._trySubscribe(sink));
            }
            if (config.useDeprecatedSynchronousErrorHandling) {
                if (sink.syncErrorThrowable) {
                    sink.syncErrorThrowable = false;
                    if (sink.syncErrorThrown) {
                        throw sink.syncErrorValue;
                    }
                }
            }
            return sink;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    sink.syncErrorThrown = true;
                    sink.syncErrorValue = err;
                }
                if (canReportError(sink)) {
                    sink.error(err);
                }
                else {
                    console.warn(err);
                }
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscription;
                subscription = _this.subscribe(function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var source = this.source;
            return source && source.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            if (operations.length === 0) {
                return this;
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        if (!promiseCtor) {
            promiseCtor = config.Promise || Promise;
        }
        if (!promiseCtor) {
            throw new Error('no Promise impl found');
        }
        return promiseCtor;
    }
    //# sourceMappingURL=Observable.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
    //# sourceMappingURL=ObjectUnsubscribedError.js.map

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var SubjectSubscription = /*@__PURE__*/ (function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            var _this = _super.call(this) || this;
            _this.subject = subject;
            _this.subscriber = subscriber;
            _this.closed = false;
            return _this;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription));
    //# sourceMappingURL=SubjectSubscription.js.map

    /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
    var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            return _this;
        }
        return SubjectSubscriber;
    }(Subscriber));
    var Subject = /*@__PURE__*/ (function (_super) {
        __extends(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.observers = [];
            _this.closed = false;
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype[rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._trySubscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return _super.prototype._trySubscribe.call(this, subscriber);
            }
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = /*@__PURE__*/ (function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));
    //# sourceMappingURL=Subject.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function refCount() {
        return function refCountOperatorFunction(source) {
            return source.lift(new RefCountOperator(source));
        };
    }
    var RefCountOperator = /*@__PURE__*/ (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));
    //# sourceMappingURL=refCount.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
    var ConnectableObservable = /*@__PURE__*/ (function (_super) {
        __extends(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._refCount = 0;
            _this._isComplete = false;
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                this._isComplete = false;
                connection = this._connection = new Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
                else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));
    var connectableProto = ConnectableObservable.prototype;
    var connectableObservableDescriptor = {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
    var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this.connectable._isComplete = true;
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(SubjectSubscriber));
    var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
        __extends(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            var _this = _super.call(this, destination) || this;
            _this.connectable = connectable;
            return _this;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount$$1 = connectable._refCount;
            if (refCount$$1 <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount$$1 - 1;
            if (refCount$$1 > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber));
    //# sourceMappingURL=ConnectableObservable.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
    var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(GroupBySubscriber, _super);
        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.elementSelector = elementSelector;
            _this.durationSelector = durationSelector;
            _this.subjectSelector = subjectSelector;
            _this.groups = null;
            _this.attemptedToUnsubscribe = false;
            _this.count = 0;
            return _this;
        }
        GroupBySubscriber.prototype._next = function (value) {
            var key;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                this.error(err);
                return;
            }
            this._group(value, key);
        };
        GroupBySubscriber.prototype._group = function (value, key) {
            var groups = this.groups;
            if (!groups) {
                groups = this.groups = new Map();
            }
            var group = groups.get(key);
            var element;
            if (this.elementSelector) {
                try {
                    element = this.elementSelector(value);
                }
                catch (err) {
                    this.error(err);
                }
            }
            else {
                element = value;
            }
            if (!group) {
                group = (this.subjectSelector ? this.subjectSelector() : new Subject());
                groups.set(key, group);
                var groupedObservable = new GroupedObservable(key, group, this);
                this.destination.next(groupedObservable);
                if (this.durationSelector) {
                    var duration = void 0;
                    try {
                        duration = this.durationSelector(new GroupedObservable(key, group));
                    }
                    catch (err) {
                        this.error(err);
                        return;
                    }
                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
                }
            }
            if (!group.closed) {
                group.next(element);
            }
        };
        GroupBySubscriber.prototype._error = function (err) {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.error(err);
                });
                groups.clear();
            }
            this.destination.error(err);
        };
        GroupBySubscriber.prototype._complete = function () {
            var groups = this.groups;
            if (groups) {
                groups.forEach(function (group, key) {
                    group.complete();
                });
                groups.clear();
            }
            this.destination.complete();
        };
        GroupBySubscriber.prototype.removeGroup = function (key) {
            this.groups.delete(key);
        };
        GroupBySubscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.attemptedToUnsubscribe = true;
                if (this.count === 0) {
                    _super.prototype.unsubscribe.call(this);
                }
            }
        };
        return GroupBySubscriber;
    }(Subscriber));
    var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(GroupDurationSubscriber, _super);
        function GroupDurationSubscriber(key, group, parent) {
            var _this = _super.call(this, group) || this;
            _this.key = key;
            _this.group = group;
            _this.parent = parent;
            return _this;
        }
        GroupDurationSubscriber.prototype._next = function (value) {
            this.complete();
        };
        GroupDurationSubscriber.prototype._unsubscribe = function () {
            var _a = this, parent = _a.parent, key = _a.key;
            this.key = this.parent = null;
            if (parent) {
                parent.removeGroup(key);
            }
        };
        return GroupDurationSubscriber;
    }(Subscriber));
    var GroupedObservable = /*@__PURE__*/ (function (_super) {
        __extends(GroupedObservable, _super);
        function GroupedObservable(key, groupSubject, refCountSubscription) {
            var _this = _super.call(this) || this;
            _this.key = key;
            _this.groupSubject = groupSubject;
            _this.refCountSubscription = refCountSubscription;
            return _this;
        }
        GroupedObservable.prototype._subscribe = function (subscriber) {
            var subscription = new Subscription();
            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
            if (refCountSubscription && !refCountSubscription.closed) {
                subscription.add(new InnerRefCountSubscription(refCountSubscription));
            }
            subscription.add(groupSubject.subscribe(subscriber));
            return subscription;
        };
        return GroupedObservable;
    }(Observable));
    var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
        __extends(InnerRefCountSubscription, _super);
        function InnerRefCountSubscription(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            parent.count++;
            return _this;
        }
        InnerRefCountSubscription.prototype.unsubscribe = function () {
            var parent = this.parent;
            if (!parent.closed && !this.closed) {
                _super.prototype.unsubscribe.call(this);
                parent.count -= 1;
                if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                    parent.unsubscribe();
                }
            }
        };
        return InnerRefCountSubscription;
    }(Subscription));
    //# sourceMappingURL=groupBy.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
    var BehaviorSubject = /*@__PURE__*/ (function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject));
    //# sourceMappingURL=BehaviorSubject.js.map

    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
    var Action = /*@__PURE__*/ (function (_super) {
        __extends(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return this;
        };
        return Action;
    }(Subscription));
    //# sourceMappingURL=Action.js.map

    /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
    var AsyncAction = /*@__PURE__*/ (function (_super) {
        __extends(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && this.delay === delay && this.pending === false) {
                return id;
            }
            clearInterval(id);
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, delay) {
            var errored = false;
            var errorValue = undefined;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = !!e && e || new Error(e);
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype._unsubscribe = function () {
            var id = this.id;
            var scheduler = this.scheduler;
            var actions = scheduler.actions;
            var index = actions.indexOf(this);
            this.work = null;
            this.state = null;
            this.pending = false;
            this.scheduler = null;
            if (index !== -1) {
                actions.splice(index, 1);
            }
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
        };
        return AsyncAction;
    }(Action));
    //# sourceMappingURL=AsyncAction.js.map

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var QueueAction = /*@__PURE__*/ (function (_super) {
        __extends(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction));
    //# sourceMappingURL=QueueAction.js.map

    var Scheduler = /*@__PURE__*/ (function () {
        function Scheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            this.SchedulerAction = SchedulerAction;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            return new this.SchedulerAction(this, work).schedule(state, delay);
        };
        Scheduler.now = function () { return Date.now(); };
        return Scheduler;
    }());
    //# sourceMappingURL=Scheduler.js.map

    /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
    var AsyncScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) {
                now = Scheduler.now;
            }
            var _this = _super.call(this, SchedulerAction, function () {
                if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                    return AsyncScheduler.delegate.now();
                }
                else {
                    return now();
                }
            }) || this;
            _this.actions = [];
            _this.active = false;
            _this.scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) {
                delay = 0;
            }
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
                return AsyncScheduler.delegate.schedule(work, delay, state);
            }
            else {
                return _super.prototype.schedule.call(this, work, delay, state);
            }
        };
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this.active) {
                actions.push(action);
                return;
            }
            var error;
            this.active = true;
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (action = actions.shift());
            this.active = false;
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));
    //# sourceMappingURL=AsyncScheduler.js.map

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var QueueScheduler = /*@__PURE__*/ (function (_super) {
        __extends(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler));
    //# sourceMappingURL=QueueScheduler.js.map

    /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
    var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);
    //# sourceMappingURL=queue.js.map

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
    function empty$1(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }
    function emptyScheduled(scheduler) {
        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }
    //# sourceMappingURL=empty.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    //# sourceMappingURL=isScheduler.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var subscribeToArray = function (array) {
        return function (subscriber) {
            for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            if (!subscriber.closed) {
                subscriber.complete();
            }
        };
    };
    //# sourceMappingURL=subscribeToArray.js.map

    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
    function fromArray(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToArray(input));
        }
        else {
            return new Observable(function (subscriber) {
                var sub = new Subscription();
                var i = 0;
                sub.add(scheduler.schedule(function () {
                    if (i === input.length) {
                        subscriber.complete();
                        return;
                    }
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        sub.add(this.schedule());
                    }
                }));
                return sub;
            });
        }
    }
    //# sourceMappingURL=fromArray.js.map

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function scalar(value) {
        var result = new Observable(function (subscriber) {
            subscriber.next(value);
            subscriber.complete();
        });
        result._isScalar = true;
        result.value = value;
        return result;
    }
    //# sourceMappingURL=scalar.js.map

    /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */
    function of() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = args[args.length - 1];
        if (isScheduler(scheduler)) {
            args.pop();
        }
        else {
            scheduler = undefined;
        }
        switch (args.length) {
            case 0:
                return empty$1(scheduler);
            case 1:
                return scheduler ? fromArray(args, scheduler) : scalar(args[0]);
            default:
                return fromArray(args, scheduler);
        }
    }
    //# sourceMappingURL=of.js.map

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    function throwError(error, scheduler) {
        if (!scheduler) {
            return new Observable(function (subscriber) { return subscriber.error(error); });
        }
        else {
            return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
        }
    }
    function dispatch(_a) {
        var error = _a.error, subscriber = _a.subscriber;
        subscriber.error(error);
    }
    //# sourceMappingURL=throwError.js.map

    /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
    var Notification = /*@__PURE__*/ (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return of(this.value);
                case 'E':
                    return throwError(this.error);
                case 'C':
                    return empty$1();
            }
            throw new Error('unexpected notification kind value');
        };
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return Notification.undefinedValueNotification;
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());
    //# sourceMappingURL=Notification.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
    var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            var _this = _super.call(this, destination) || this;
            _this.scheduler = scheduler;
            _this.delay = delay;
            return _this;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            var destination = this.destination;
            destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification.createError(err));
            this.unsubscribe();
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification.createComplete());
            this.unsubscribe();
        };
        return ObserveOnSubscriber;
    }(Subscriber));
    var ObserveOnMessage = /*@__PURE__*/ (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());
    //# sourceMappingURL=observeOn.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
    var ReplaySubject = /*@__PURE__*/ (function (_super) {
        __extends(ReplaySubject, _super);
        function ReplaySubject(bufferSize, windowTime, scheduler) {
            if (bufferSize === void 0) {
                bufferSize = Number.POSITIVE_INFINITY;
            }
            if (windowTime === void 0) {
                windowTime = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this) || this;
            _this.scheduler = scheduler;
            _this._events = [];
            _this._infiniteTimeWindow = false;
            _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
            _this._windowTime = windowTime < 1 ? 1 : windowTime;
            if (windowTime === Number.POSITIVE_INFINITY) {
                _this._infiniteTimeWindow = true;
                _this.next = _this.nextInfiniteTimeWindow;
            }
            else {
                _this.next = _this.nextTimeWindow;
            }
            return _this;
        }
        ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
            var _events = this._events;
            _events.push(value);
            if (_events.length > this._bufferSize) {
                _events.shift();
            }
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype.nextTimeWindow = function (value) {
            this._events.push(new ReplayEvent(this._getNow(), value));
            this._trimBufferThenGetEvents();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            var _infiniteTimeWindow = this._infiniteTimeWindow;
            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
            var scheduler = this.scheduler;
            var len = _events.length;
            var subscription;
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
            else if (this.isStopped || this.hasError) {
                subscription = Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                subscription = new SubjectSubscription(this, subscriber);
            }
            if (scheduler) {
                subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
            }
            if (_infiniteTimeWindow) {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i]);
                }
            }
            else {
                for (var i = 0; i < len && !subscriber.closed; i++) {
                    subscriber.next(_events[i].value);
                }
            }
            if (this.hasError) {
                subscriber.error(this.thrownError);
            }
            else if (this.isStopped) {
                subscriber.complete();
            }
            return subscription;
        };
        ReplaySubject.prototype._getNow = function () {
            return (this.scheduler || queue).now();
        };
        ReplaySubject.prototype._trimBufferThenGetEvents = function () {
            var now = this._getNow();
            var _bufferSize = this._bufferSize;
            var _windowTime = this._windowTime;
            var _events = this._events;
            var eventsCount = _events.length;
            var spliceCount = 0;
            while (spliceCount < eventsCount) {
                if ((now - _events[spliceCount].time) < _windowTime) {
                    break;
                }
                spliceCount++;
            }
            if (eventsCount > _bufferSize) {
                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
            }
            if (spliceCount > 0) {
                _events.splice(0, spliceCount);
            }
            return _events;
        };
        return ReplaySubject;
    }(Subject));
    var ReplayEvent = /*@__PURE__*/ (function () {
        function ReplayEvent(time, value) {
            this.time = time;
            this.value = value;
        }
        return ReplayEvent;
    }());
    //# sourceMappingURL=ReplaySubject.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
    var AsyncSubject = /*@__PURE__*/ (function (_super) {
        __extends(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.value = null;
            _this.hasNext = false;
            _this.hasCompleted = false;
            return _this;
        }
        AsyncSubject.prototype._subscribe = function (subscriber) {
            if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription.EMPTY;
            }
            else if (this.hasCompleted && this.hasNext) {
                subscriber.next(this.value);
                subscriber.complete();
                return Subscription.EMPTY;
            }
            return _super.prototype._subscribe.call(this, subscriber);
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.hasCompleted) {
                this.value = value;
                this.hasNext = true;
            }
        };
        AsyncSubject.prototype.error = function (error) {
            if (!this.hasCompleted) {
                _super.prototype.error.call(this, error);
            }
        };
        AsyncSubject.prototype.complete = function () {
            this.hasCompleted = true;
            if (this.hasNext) {
                _super.prototype.next.call(this, this.value);
            }
            _super.prototype.complete.call(this);
        };
        return AsyncSubject;
    }(Subject));
    //# sourceMappingURL=AsyncSubject.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var nextHandle = 1;
    var tasksByHandle = {};
    function runIfPresent(handle) {
        var cb = tasksByHandle[handle];
        if (cb) {
            cb();
        }
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            tasksByHandle[handle] = cb;
            Promise.resolve().then(function () { return runIfPresent(handle); });
            return handle;
        },
        clearImmediate: function (handle) {
            delete tasksByHandle[handle];
        },
    };
    //# sourceMappingURL=Immediate.js.map

    /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
    var AsapAction = /*@__PURE__*/ (function (_super) {
        __extends(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                Immediate.clearImmediate(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));
    //# sourceMappingURL=AsapAction.js.map

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AsapScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));
    //# sourceMappingURL=AsapScheduler.js.map

    /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
    var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);
    //# sourceMappingURL=asap.js.map

    /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);
    //# sourceMappingURL=async.js.map

    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
    var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
        __extends(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                cancelAnimationFrame(id);
                scheduler.scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction));
    //# sourceMappingURL=AnimationFrameAction.js.map

    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
    var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
        __extends(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this.active = true;
            this.scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            var count = actions.length;
            action = action || actions.shift();
            do {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this.active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler));
    //# sourceMappingURL=AnimationFrameScheduler.js.map

    /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
    var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);
    //# sourceMappingURL=animationFrame.js.map

    /** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
    var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
        __extends(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(SchedulerAction, maxFrames) {
            if (SchedulerAction === void 0) {
                SchedulerAction = VirtualAction;
            }
            if (maxFrames === void 0) {
                maxFrames = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error, action;
            while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
                if (error = action.execute(action.state, action.delay)) {
                    break;
                }
            }
            if (error) {
                while (action = actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler));
    var VirtualAction = /*@__PURE__*/ (function (_super) {
        __extends(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) {
                index = scheduler.index += 1;
            }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            if (!this.id) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.active = false;
            var action = new VirtualAction(this.scheduler, this.work);
            this.add(action);
            return action.schedule(state, delay);
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction));
    //# sourceMappingURL=VirtualTimeScheduler.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=identity.js.map

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    //# sourceMappingURL=isObservable.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=ArgumentOutOfRangeError.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function EmptyErrorImpl() {
        Error.call(this);
        this.message = 'no elements in sequence';
        this.name = 'EmptyError';
        return this;
    }
    EmptyErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
    var EmptyError = EmptyErrorImpl;
    //# sourceMappingURL=EmptyError.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=TimeoutError.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    function map(project, thisArg) {
        return function mapOperation(source) {
            if (typeof project !== 'function') {
                throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
            }
            return source.lift(new MapOperator(project, thisArg));
        };
    }
    var MapOperator = /*@__PURE__*/ (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.count = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber));
    //# sourceMappingURL=map.js.map

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */
    //# sourceMappingURL=bindCallback.js.map

    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
    //# sourceMappingURL=bindNodeCallback.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var OuterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber));
    //# sourceMappingURL=OuterSubscriber.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var InnerSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.outerValue = outerValue;
            _this.outerIndex = outerIndex;
            _this.index = 0;
            return _this;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber));
    //# sourceMappingURL=InnerSubscriber.js.map

    /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
    var subscribeToPromise = function (promise) {
        return function (subscriber) {
            promise.then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, hostReportError);
            return subscriber;
        };
    };
    //# sourceMappingURL=subscribeToPromise.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = /*@__PURE__*/ getSymbolIterator();
    //# sourceMappingURL=iterator.js.map

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
    var subscribeToIterable = function (iterable) {
        return function (subscriber) {
            var iterator$$1 = iterable[iterator]();
            do {
                var item = iterator$$1.next();
                if (item.done) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(item.value);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
            if (typeof iterator$$1.return === 'function') {
                subscriber.add(function () {
                    if (iterator$$1.return) {
                        iterator$$1.return();
                    }
                });
            }
            return subscriber;
        };
    };
    //# sourceMappingURL=subscribeToIterable.js.map

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
    var subscribeToObservable = function (obj) {
        return function (subscriber) {
            var obs = obj[observable]();
            if (typeof obs.subscribe !== 'function') {
                throw new TypeError('Provided object does not correctly implement Symbol.observable');
            }
            else {
                return obs.subscribe(subscriber);
            }
        };
    };
    //# sourceMappingURL=subscribeToObservable.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
    //# sourceMappingURL=isArrayLike.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    //# sourceMappingURL=isPromise.js.map

    /** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
    var subscribeTo = function (result) {
        if (result instanceof Observable) {
            return function (subscriber) {
                if (result._isScalar) {
                    subscriber.next(result.value);
                    subscriber.complete();
                    return undefined;
                }
                else {
                    return result.subscribe(subscriber);
                }
            };
        }
        else if (result && typeof result[observable] === 'function') {
            return subscribeToObservable(result);
        }
        else if (isArrayLike(result)) {
            return subscribeToArray(result);
        }
        else if (isPromise(result)) {
            return subscribeToPromise(result);
        }
        else if (result && typeof result[iterator] === 'function') {
            return subscribeToIterable(result);
        }
        else {
            var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = "You provided " + value + " where a stream was expected."
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            throw new TypeError(msg);
        }
    };
    //# sourceMappingURL=subscribeTo.js.map

    /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, destination) {
        if (destination === void 0) {
            destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        }
        if (destination.closed) {
            return;
        }
        return subscribeTo(result)(destination);
    }
    //# sourceMappingURL=subscribeToResult.js.map

    /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
    var NONE = {};
    function combineLatest() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i] = arguments[_i];
        }
        var resultSelector = null;
        var scheduler = null;
        if (isScheduler(observables[observables.length - 1])) {
            scheduler = observables.pop();
        }
        if (typeof observables[observables.length - 1] === 'function') {
            resultSelector = observables.pop();
        }
        if (observables.length === 1 && isArray(observables[0])) {
            observables = observables[0];
        }
        return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
    }
    var CombineLatestOperator = /*@__PURE__*/ (function () {
        function CombineLatestOperator(resultSelector) {
            this.resultSelector = resultSelector;
        }
        CombineLatestOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
        };
        return CombineLatestOperator;
    }());
    var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(CombineLatestSubscriber, _super);
        function CombineLatestSubscriber(destination, resultSelector) {
            var _this = _super.call(this, destination) || this;
            _this.resultSelector = resultSelector;
            _this.active = 0;
            _this.values = [];
            _this.observables = [];
            return _this;
        }
        CombineLatestSubscriber.prototype._next = function (observable) {
            this.values.push(NONE);
            this.observables.push(observable);
        };
        CombineLatestSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                this.active = len;
                this.toRespond = len;
                for (var i = 0; i < len; i++) {
                    var observable = observables[i];
                    this.add(subscribeToResult(this, observable, observable, i));
                }
            }
        };
        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
            if ((this.active -= 1) === 0) {
                this.destination.complete();
            }
        };
        CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var values = this.values;
            var oldVal = values[outerIndex];
            var toRespond = !this.toRespond
                ? 0
                : oldVal === NONE ? --this.toRespond : this.toRespond;
            values[outerIndex] = innerValue;
            if (toRespond === 0) {
                if (this.resultSelector) {
                    this._tryResultSelector(values);
                }
                else {
                    this.destination.next(values.slice());
                }
            }
        };
        CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
            var result;
            try {
                result = this.resultSelector.apply(this, values);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return CombineLatestSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=combineLatest.js.map

    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
    function isInteropObservable(input) {
        return input && typeof input[observable] === 'function';
    }
    //# sourceMappingURL=isInteropObservable.js.map

    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
    function isIterable(input) {
        return input && typeof input[iterator] === 'function';
    }
    //# sourceMappingURL=isIterable.js.map

    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */
    function fromPromise(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToPromise(input));
        }
        else {
            return new Observable(function (subscriber) {
                var sub = new Subscription();
                sub.add(scheduler.schedule(function () {
                    return input.then(function (value) {
                        sub.add(scheduler.schedule(function () {
                            subscriber.next(value);
                            sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                        }));
                    }, function (err) {
                        sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                    });
                }));
                return sub;
            });
        }
    }
    //# sourceMappingURL=fromPromise.js.map

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */
    function fromIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        if (!scheduler) {
            return new Observable(subscribeToIterable(input));
        }
        else {
            return new Observable(function (subscriber) {
                var sub = new Subscription();
                var iterator$$1;
                sub.add(function () {
                    if (iterator$$1 && typeof iterator$$1.return === 'function') {
                        iterator$$1.return();
                    }
                });
                sub.add(scheduler.schedule(function () {
                    iterator$$1 = input[iterator]();
                    sub.add(scheduler.schedule(function () {
                        if (subscriber.closed) {
                            return;
                        }
                        var value;
                        var done;
                        try {
                            var result = iterator$$1.next();
                            value = result.value;
                            done = result.done;
                        }
                        catch (err) {
                            subscriber.error(err);
                            return;
                        }
                        if (done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(value);
                            this.schedule();
                        }
                    }));
                }));
                return sub;
            });
        }
    }
    //# sourceMappingURL=fromIterable.js.map

    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */
    function fromObservable(input, scheduler) {
        if (!scheduler) {
            return new Observable(subscribeToObservable(input));
        }
        else {
            return new Observable(function (subscriber) {
                var sub = new Subscription();
                sub.add(scheduler.schedule(function () {
                    var observable$$1 = input[observable]();
                    sub.add(observable$$1.subscribe({
                        next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                        error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                        complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                    }));
                }));
                return sub;
            });
        }
    }
    //# sourceMappingURL=fromObservable.js.map

    /** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */
    function from(input, scheduler) {
        if (!scheduler) {
            if (input instanceof Observable) {
                return input;
            }
            return new Observable(subscribeTo(input));
        }
        if (input != null) {
            if (isInteropObservable(input)) {
                return fromObservable(input, scheduler);
            }
            else if (isPromise(input)) {
                return fromPromise(input, scheduler);
            }
            else if (isArrayLike(input)) {
                return fromArray(input, scheduler);
            }
            else if (isIterable(input) || typeof input === 'string') {
                return fromIterable(input, scheduler);
            }
        }
        throw new TypeError((input !== null && typeof input || input) + ' is not observable');
    }
    //# sourceMappingURL=from.js.map

    /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'function') {
            return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
    }
    var MergeMapOperator = /*@__PURE__*/ (function () {
        function MergeMapOperator(project, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
        };
        return MergeMapOperator;
    }());
    var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, ish, value, index, innerSubscriber);
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=mergeMap.js.map

    /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
    //# sourceMappingURL=mergeAll.js.map

    /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
    //# sourceMappingURL=concatAll.js.map

    /** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */
    //# sourceMappingURL=concat.js.map

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
    //# sourceMappingURL=defer.js.map

    /** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */
    var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources) {
            var _this = _super.call(this, destination) || this;
            _this.sources = sources;
            _this.completed = 0;
            _this.haveValues = 0;
            var len = sources.length;
            _this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult(_this, source, null, i);
                if (innerSubscription) {
                    _this.add(innerSubscription);
                }
            }
            return _this;
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                destination.next(values);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=forkJoin.js.map

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
    //# sourceMappingURL=fromEvent.js.map

    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
    //# sourceMappingURL=fromEventPattern.js.map

    /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */
    //# sourceMappingURL=generate.js.map

    /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */
    //# sourceMappingURL=iif.js.map

    /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
    function isNumeric(val) {
        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
    }
    //# sourceMappingURL=isNumeric.js.map

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
    //# sourceMappingURL=interval.js.map

    /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
    //# sourceMappingURL=merge.js.map

    /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
    var NEVER = /*@__PURE__*/ new Observable(noop);
    //# sourceMappingURL=never.js.map

    /** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */
    //# sourceMappingURL=onErrorResumeNext.js.map

    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
    //# sourceMappingURL=pairs.js.map

    /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RaceSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RaceSubscriber, _super);
        function RaceSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasFirst = false;
            _this.observables = [];
            _this.subscriptions = [];
            return _this;
        }
        RaceSubscriber.prototype._next = function (observable) {
            this.observables.push(observable);
        };
        RaceSubscriber.prototype._complete = function () {
            var observables = this.observables;
            var len = observables.length;
            if (len === 0) {
                this.destination.complete();
            }
            else {
                for (var i = 0; i < len && !this.hasFirst; i++) {
                    var observable = observables[i];
                    var subscription = subscribeToResult(this, observable, observable, i);
                    if (this.subscriptions) {
                        this.subscriptions.push(subscription);
                    }
                    this.add(subscription);
                }
                this.observables = null;
            }
        };
        RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (!this.hasFirst) {
                this.hasFirst = true;
                for (var i = 0; i < this.subscriptions.length; i++) {
                    if (i !== outerIndex) {
                        var subscription = this.subscriptions[i];
                        subscription.unsubscribe();
                        this.remove(subscription);
                    }
                }
                this.subscriptions = null;
            }
            this.destination.next(innerValue);
        };
        return RaceSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=race.js.map

    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
    //# sourceMappingURL=range.js.map

    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
    //# sourceMappingURL=timer.js.map

    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
    //# sourceMappingURL=using.js.map

    /** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
    var ZipSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ZipSubscriber, _super);
        function ZipSubscriber(destination, resultSelector, values) {
            if (values === void 0) {
                values = Object.create(null);
            }
            var _this = _super.call(this, destination) || this;
            _this.iterators = [];
            _this.active = 0;
            _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
            _this.values = values;
            return _this;
        }
        ZipSubscriber.prototype._next = function (value) {
            var iterators = this.iterators;
            if (isArray(value)) {
                iterators.push(new StaticArrayIterator(value));
            }
            else if (typeof value[iterator] === 'function') {
                iterators.push(new StaticIterator(value[iterator]()));
            }
            else {
                iterators.push(new ZipBufferIterator(this.destination, this, value));
            }
        };
        ZipSubscriber.prototype._complete = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            this.unsubscribe();
            if (len === 0) {
                this.destination.complete();
                return;
            }
            this.active = len;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (iterator$$1.stillUnsubscribed) {
                    var destination = this.destination;
                    destination.add(iterator$$1.subscribe(iterator$$1, i));
                }
                else {
                    this.active--;
                }
            }
        };
        ZipSubscriber.prototype.notifyInactive = function () {
            this.active--;
            if (this.active === 0) {
                this.destination.complete();
            }
        };
        ZipSubscriber.prototype.checkIterators = function () {
            var iterators = this.iterators;
            var len = iterators.length;
            var destination = this.destination;
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                    return;
                }
            }
            var shouldComplete = false;
            var args = [];
            for (var i = 0; i < len; i++) {
                var iterator$$1 = iterators[i];
                var result = iterator$$1.next();
                if (iterator$$1.hasCompleted()) {
                    shouldComplete = true;
                }
                if (result.done) {
                    destination.complete();
                    return;
                }
                args.push(result.value);
            }
            if (this.resultSelector) {
                this._tryresultSelector(args);
            }
            else {
                destination.next(args);
            }
            if (shouldComplete) {
                destination.complete();
            }
        };
        ZipSubscriber.prototype._tryresultSelector = function (args) {
            var result;
            try {
                result = this.resultSelector.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return ZipSubscriber;
    }(Subscriber));
    var StaticIterator = /*@__PURE__*/ (function () {
        function StaticIterator(iterator$$1) {
            this.iterator = iterator$$1;
            this.nextResult = iterator$$1.next();
        }
        StaticIterator.prototype.hasValue = function () {
            return true;
        };
        StaticIterator.prototype.next = function () {
            var result = this.nextResult;
            this.nextResult = this.iterator.next();
            return result;
        };
        StaticIterator.prototype.hasCompleted = function () {
            var nextResult = this.nextResult;
            return nextResult && nextResult.done;
        };
        return StaticIterator;
    }());
    var StaticArrayIterator = /*@__PURE__*/ (function () {
        function StaticArrayIterator(array) {
            this.array = array;
            this.index = 0;
            this.length = 0;
            this.length = array.length;
        }
        StaticArrayIterator.prototype[iterator] = function () {
            return this;
        };
        StaticArrayIterator.prototype.next = function (value) {
            var i = this.index++;
            var array = this.array;
            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
        };
        StaticArrayIterator.prototype.hasValue = function () {
            return this.array.length > this.index;
        };
        StaticArrayIterator.prototype.hasCompleted = function () {
            return this.array.length === this.index;
        };
        return StaticArrayIterator;
    }());
    var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
        __extends(ZipBufferIterator, _super);
        function ZipBufferIterator(destination, parent, observable) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            _this.observable = observable;
            _this.stillUnsubscribed = true;
            _this.buffer = [];
            _this.isComplete = false;
            return _this;
        }
        ZipBufferIterator.prototype[iterator] = function () {
            return this;
        };
        ZipBufferIterator.prototype.next = function () {
            var buffer = this.buffer;
            if (buffer.length === 0 && this.isComplete) {
                return { value: null, done: true };
            }
            else {
                return { value: buffer.shift(), done: false };
            }
        };
        ZipBufferIterator.prototype.hasValue = function () {
            return this.buffer.length > 0;
        };
        ZipBufferIterator.prototype.hasCompleted = function () {
            return this.buffer.length === 0 && this.isComplete;
        };
        ZipBufferIterator.prototype.notifyComplete = function () {
            if (this.buffer.length > 0) {
                this.isComplete = true;
                this.parent.notifyInactive();
            }
            else {
                this.destination.complete();
            }
        };
        ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.buffer.push(innerValue);
            this.parent.checkIterators();
        };
        ZipBufferIterator.prototype.subscribe = function (value, index) {
            return subscribeToResult(this, this.observable, this, index);
        };
        return ZipBufferIterator;
    }(OuterSubscriber));
    //# sourceMappingURL=zip.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=index.js.map

    const rxmixin = (props, superClass) => {
        return class RxMixin extends superClass {
            firstUpdated() {
                super.firstUpdated();
                props().forEach(prop => {
                    if(prop.rx) {
                        this[`${prop.propKey}$`] = new BehaviorSubject();
                    }
                });
            }

            updated(changedProps) {
                super.updated(changedProps);
                changedProps.forEach((value, key) => {
                    if (this[`${key}$`] !== undefined && this[`${key}$`] !== null) {
                        this[`${key}$`].next(this[key]);
                    }
                });
            }

            static get properties() {
                return props().reduce((acc, prop) => {
                    return { ...acc, [prop.propKey]: prop.propValue }
                }, {})
            }
        } 
    };

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var AuditSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(AuditSubscriber, _super);
        function AuditSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            return _this;
        }
        AuditSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
            if (!this.throttled) {
                var duration = tryCatch(this.durationSelector)(value);
                if (duration === errorObject) {
                    this.destination.error(errorObject.e);
                }
                else {
                    var innerSubscription = subscribeToResult(this, duration);
                    if (!innerSubscription || innerSubscription.closed) {
                        this.clearThrottle();
                    }
                    else {
                        this.add(this.throttled = innerSubscription);
                    }
                }
            }
        };
        AuditSubscriber.prototype.clearThrottle = function () {
            var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
            if (throttled) {
                this.remove(throttled);
                this.throttled = null;
                throttled.unsubscribe();
            }
            if (hasValue) {
                this.value = null;
                this.hasValue = false;
                this.destination.next(value);
            }
        };
        AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
            this.clearThrottle();
        };
        AuditSubscriber.prototype.notifyComplete = function () {
            this.clearThrottle();
        };
        return AuditSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=audit.js.map

    /** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */
    //# sourceMappingURL=auditTime.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var BufferSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferSubscriber, _super);
        function BufferSubscriber(destination, closingNotifier) {
            var _this = _super.call(this, destination) || this;
            _this.buffer = [];
            _this.add(subscribeToResult(_this, closingNotifier));
            return _this;
        }
        BufferSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var buffer = this.buffer;
            this.buffer = [];
            this.destination.next(buffer);
        };
        return BufferSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=buffer.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferCountSubscriber, _super);
        function BufferCountSubscriber(destination, bufferSize) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.buffer = [];
            return _this;
        }
        BufferCountSubscriber.prototype._next = function (value) {
            var buffer = this.buffer;
            buffer.push(value);
            if (buffer.length == this.bufferSize) {
                this.destination.next(buffer);
                this.buffer = [];
            }
        };
        BufferCountSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer.length > 0) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        return BufferCountSubscriber;
    }(Subscriber));
    var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferSkipCountSubscriber, _super);
        function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
            var _this = _super.call(this, destination) || this;
            _this.bufferSize = bufferSize;
            _this.startBufferEvery = startBufferEvery;
            _this.buffers = [];
            _this.count = 0;
            return _this;
        }
        BufferSkipCountSubscriber.prototype._next = function (value) {
            var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
            this.count++;
            if (count % startBufferEvery === 0) {
                buffers.push([]);
            }
            for (var i = buffers.length; i--;) {
                var buffer = buffers[i];
                buffer.push(value);
                if (buffer.length === bufferSize) {
                    buffers.splice(i, 1);
                    this.destination.next(buffer);
                }
            }
        };
        BufferSkipCountSubscriber.prototype._complete = function () {
            var _a = this, buffers = _a.buffers, destination = _a.destination;
            while (buffers.length > 0) {
                var buffer = buffers.shift();
                if (buffer.length > 0) {
                    destination.next(buffer);
                }
            }
            _super.prototype._complete.call(this);
        };
        return BufferSkipCountSubscriber;
    }(Subscriber));
    //# sourceMappingURL=bufferCount.js.map

    /** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
    var Context = /*@__PURE__*/ (function () {
        function Context() {
            this.buffer = [];
        }
        return Context;
    }());
    var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferTimeSubscriber, _super);
        function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.bufferTimeSpan = bufferTimeSpan;
            _this.bufferCreationInterval = bufferCreationInterval;
            _this.maxBufferSize = maxBufferSize;
            _this.scheduler = scheduler;
            _this.contexts = [];
            var context = _this.openContext();
            _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
            if (_this.timespanOnly) {
                var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
            else {
                var closeState = { subscriber: _this, context: context };
                var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
            }
            return _this;
        }
        BufferTimeSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            var filledBufferContext;
            for (var i = 0; i < len; i++) {
                var context_1 = contexts[i];
                var buffer = context_1.buffer;
                buffer.push(value);
                if (buffer.length == this.maxBufferSize) {
                    filledBufferContext = context_1;
                }
            }
            if (filledBufferContext) {
                this.onBufferFull(filledBufferContext);
            }
        };
        BufferTimeSubscriber.prototype._error = function (err) {
            this.contexts.length = 0;
            _super.prototype._error.call(this, err);
        };
        BufferTimeSubscriber.prototype._complete = function () {
            var _a = this, contexts = _a.contexts, destination = _a.destination;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                destination.next(context_2.buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferTimeSubscriber.prototype._unsubscribe = function () {
            this.contexts = null;
        };
        BufferTimeSubscriber.prototype.onBufferFull = function (context) {
            this.closeContext(context);
            var closeAction = context.closeAction;
            closeAction.unsubscribe();
            this.remove(closeAction);
            if (!this.closed && this.timespanOnly) {
                context = this.openContext();
                var bufferTimeSpan = this.bufferTimeSpan;
                var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
                this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
            }
        };
        BufferTimeSubscriber.prototype.openContext = function () {
            var context = new Context();
            this.contexts.push(context);
            return context;
        };
        BufferTimeSubscriber.prototype.closeContext = function (context) {
            this.destination.next(context.buffer);
            var contexts = this.contexts;
            var spliceIndex = contexts ? contexts.indexOf(context) : -1;
            if (spliceIndex >= 0) {
                contexts.splice(contexts.indexOf(context), 1);
            }
        };
        return BufferTimeSubscriber;
    }(Subscriber));
    function dispatchBufferTimeSpanOnly(state) {
        var subscriber = state.subscriber;
        var prevContext = state.context;
        if (prevContext) {
            subscriber.closeContext(prevContext);
        }
        if (!subscriber.closed) {
            state.context = subscriber.openContext();
            state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
        }
    }
    function dispatchBufferCreation(state) {
        var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
        var context = subscriber.openContext();
        var action = this;
        if (!subscriber.closed) {
            subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
            action.schedule(state, bufferCreationInterval);
        }
    }
    function dispatchBufferClose(arg) {
        var subscriber = arg.subscriber, context = arg.context;
        subscriber.closeContext(context);
    }
    //# sourceMappingURL=bufferTime.js.map

    /** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
    var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferToggleSubscriber, _super);
        function BufferToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.openings = openings;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(subscribeToResult(_this, openings));
            return _this;
        }
        BufferToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].buffer.push(value);
            }
        };
        BufferToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_1 = contexts.shift();
                context_1.subscription.unsubscribe();
                context_1.buffer = null;
                context_1.subscription = null;
            }
            this.contexts = null;
            _super.prototype._error.call(this, err);
        };
        BufferToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            while (contexts.length > 0) {
                var context_2 = contexts.shift();
                this.destination.next(context_2.buffer);
                context_2.subscription.unsubscribe();
                context_2.buffer = null;
                context_2.subscription = null;
            }
            this.contexts = null;
            _super.prototype._complete.call(this);
        };
        BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
        };
        BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
            this.closeBuffer(innerSub.context);
        };
        BufferToggleSubscriber.prototype.openBuffer = function (value) {
            try {
                var closingSelector = this.closingSelector;
                var closingNotifier = closingSelector.call(this, value);
                if (closingNotifier) {
                    this.trySubscribe(closingNotifier);
                }
            }
            catch (err) {
                this._error(err);
            }
        };
        BufferToggleSubscriber.prototype.closeBuffer = function (context) {
            var contexts = this.contexts;
            if (contexts && context) {
                var buffer = context.buffer, subscription = context.subscription;
                this.destination.next(buffer);
                contexts.splice(contexts.indexOf(context), 1);
                this.remove(subscription);
                subscription.unsubscribe();
            }
        };
        BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
            var contexts = this.contexts;
            var buffer = [];
            var subscription = new Subscription();
            var context = { buffer: buffer, subscription: subscription };
            contexts.push(context);
            var innerSubscription = subscribeToResult(this, closingNotifier, context);
            if (!innerSubscription || innerSubscription.closed) {
                this.closeBuffer(context);
            }
            else {
                innerSubscription.context = context;
                this.add(innerSubscription);
                subscription.add(innerSubscription);
            }
        };
        return BufferToggleSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=bufferToggle.js.map

    /** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(BufferWhenSubscriber, _super);
        function BufferWhenSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.closingSelector = closingSelector;
            _this.subscribing = false;
            _this.openBuffer();
            return _this;
        }
        BufferWhenSubscriber.prototype._next = function (value) {
            this.buffer.push(value);
        };
        BufferWhenSubscriber.prototype._complete = function () {
            var buffer = this.buffer;
            if (buffer) {
                this.destination.next(buffer);
            }
            _super.prototype._complete.call(this);
        };
        BufferWhenSubscriber.prototype._unsubscribe = function () {
            this.buffer = null;
            this.subscribing = false;
        };
        BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openBuffer();
        };
        BufferWhenSubscriber.prototype.notifyComplete = function () {
            if (this.subscribing) {
                this.complete();
            }
            else {
                this.openBuffer();
            }
        };
        BufferWhenSubscriber.prototype.openBuffer = function () {
            var closingSubscription = this.closingSubscription;
            if (closingSubscription) {
                this.remove(closingSubscription);
                closingSubscription.unsubscribe();
            }
            var buffer = this.buffer;
            if (this.buffer) {
                this.destination.next(buffer);
            }
            this.buffer = [];
            var closingNotifier = tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject) {
                this.error(errorObject.e);
            }
            else {
                closingSubscription = new Subscription();
                this.closingSubscription = closingSubscription;
                this.add(closingSubscription);
                this.subscribing = true;
                closingSubscription.add(subscribeToResult(this, closingNotifier));
                this.subscribing = false;
            }
        };
        return BufferWhenSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=bufferWhen.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var CatchSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            var _this = _super.call(this, destination) || this;
            _this.selector = selector;
            _this.caught = caught;
            return _this;
        }
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                }
                catch (err2) {
                    _super.prototype.error.call(this, err2);
                    return;
                }
                this._unsubscribeAndRecycle();
                var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
                this.add(innerSubscriber);
                subscribeToResult(this, result, undefined, undefined, innerSubscriber);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=catchError.js.map

    /** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */
    //# sourceMappingURL=combineAll.js.map

    /** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */
    //# sourceMappingURL=combineLatest.js.map

    /** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */
    //# sourceMappingURL=concat.js.map

    /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
    //# sourceMappingURL=concatMap.js.map

    /** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */
    //# sourceMappingURL=concatMapTo.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var CountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(CountSubscriber, _super);
        function CountSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.count = 0;
            _this.index = 0;
            return _this;
        }
        CountSubscriber.prototype._next = function (value) {
            if (this.predicate) {
                this._tryPredicate(value);
            }
            else {
                this.count++;
            }
        };
        CountSubscriber.prototype._tryPredicate = function (value) {
            var result;
            try {
                result = this.predicate(value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.count++;
            }
        };
        CountSubscriber.prototype._complete = function () {
            this.destination.next(this.count);
            this.destination.complete();
        };
        return CountSubscriber;
    }(Subscriber));
    //# sourceMappingURL=count.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DebounceSubscriber, _super);
        function DebounceSubscriber(destination, durationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.durationSelector = durationSelector;
            _this.hasValue = false;
            _this.durationSubscription = null;
            return _this;
        }
        DebounceSubscriber.prototype._next = function (value) {
            try {
                var result = this.durationSelector.call(this, value);
                if (result) {
                    this._tryNext(value, result);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DebounceSubscriber.prototype._complete = function () {
            this.emitValue();
            this.destination.complete();
        };
        DebounceSubscriber.prototype._tryNext = function (value, duration) {
            var subscription = this.durationSubscription;
            this.value = value;
            this.hasValue = true;
            if (subscription) {
                subscription.unsubscribe();
                this.remove(subscription);
            }
            subscription = subscribeToResult(this, duration);
            if (subscription && !subscription.closed) {
                this.add(this.durationSubscription = subscription);
            }
        };
        DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        DebounceSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        DebounceSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                var value = this.value;
                var subscription = this.durationSubscription;
                if (subscription) {
                    this.durationSubscription = null;
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
                this.value = null;
                this.hasValue = false;
                _super.prototype._next.call(this, value);
            }
        };
        return DebounceSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=debounce.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
    var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DebounceTimeSubscriber, _super);
        function DebounceTimeSubscriber(destination, dueTime, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.dueTime = dueTime;
            _this.scheduler = scheduler;
            _this.debouncedSubscription = null;
            _this.lastValue = null;
            _this.hasValue = false;
            return _this;
        }
        DebounceTimeSubscriber.prototype._next = function (value) {
            this.clearDebounce();
            this.lastValue = value;
            this.hasValue = true;
            this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
        };
        DebounceTimeSubscriber.prototype._complete = function () {
            this.debouncedNext();
            this.destination.complete();
        };
        DebounceTimeSubscriber.prototype.debouncedNext = function () {
            this.clearDebounce();
            if (this.hasValue) {
                var lastValue = this.lastValue;
                this.lastValue = null;
                this.hasValue = false;
                this.destination.next(lastValue);
            }
        };
        DebounceTimeSubscriber.prototype.clearDebounce = function () {
            var debouncedSubscription = this.debouncedSubscription;
            if (debouncedSubscription !== null) {
                this.remove(debouncedSubscription);
                debouncedSubscription.unsubscribe();
                this.debouncedSubscription = null;
            }
        };
        return DebounceTimeSubscriber;
    }(Subscriber));
    function dispatchNext$2(subscriber) {
        subscriber.debouncedNext();
    }
    //# sourceMappingURL=debounceTime.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DefaultIfEmptySubscriber, _super);
        function DefaultIfEmptySubscriber(destination, defaultValue) {
            var _this = _super.call(this, destination) || this;
            _this.defaultValue = defaultValue;
            _this.isEmpty = true;
            return _this;
        }
        DefaultIfEmptySubscriber.prototype._next = function (value) {
            this.isEmpty = false;
            this.destination.next(value);
        };
        DefaultIfEmptySubscriber.prototype._complete = function () {
            if (this.isEmpty) {
                this.destination.next(this.defaultValue);
            }
            this.destination.complete();
        };
        return DefaultIfEmptySubscriber;
    }(Subscriber));
    //# sourceMappingURL=defaultIfEmpty.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=isDate.js.map

    /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
    var DelaySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DelaySubscriber, _super);
        function DelaySubscriber(destination, delay, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.delay = delay;
            _this.scheduler = scheduler;
            _this.queue = [];
            _this.active = false;
            _this.errored = false;
            return _this;
        }
        DelaySubscriber.dispatch = function (state) {
            var source = state.source;
            var queue = source.queue;
            var scheduler = state.scheduler;
            var destination = state.destination;
            while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
                queue.shift().notification.observe(destination);
            }
            if (queue.length > 0) {
                var delay_1 = Math.max(0, queue[0].time - scheduler.now());
                this.schedule(state, delay_1);
            }
            else {
                this.unsubscribe();
                source.active = false;
            }
        };
        DelaySubscriber.prototype._schedule = function (scheduler) {
            this.active = true;
            var destination = this.destination;
            destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
                source: this, destination: this.destination, scheduler: scheduler
            }));
        };
        DelaySubscriber.prototype.scheduleNotification = function (notification) {
            if (this.errored === true) {
                return;
            }
            var scheduler = this.scheduler;
            var message = new DelayMessage(scheduler.now() + this.delay, notification);
            this.queue.push(message);
            if (this.active === false) {
                this._schedule(scheduler);
            }
        };
        DelaySubscriber.prototype._next = function (value) {
            this.scheduleNotification(Notification.createNext(value));
        };
        DelaySubscriber.prototype._error = function (err) {
            this.errored = true;
            this.queue = [];
            this.destination.error(err);
            this.unsubscribe();
        };
        DelaySubscriber.prototype._complete = function () {
            this.scheduleNotification(Notification.createComplete());
            this.unsubscribe();
        };
        return DelaySubscriber;
    }(Subscriber));
    var DelayMessage = /*@__PURE__*/ (function () {
        function DelayMessage(time, notification) {
            this.time = time;
            this.notification = notification;
        }
        return DelayMessage;
    }());
    //# sourceMappingURL=delay.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DelayWhenSubscriber, _super);
        function DelayWhenSubscriber(destination, delayDurationSelector) {
            var _this = _super.call(this, destination) || this;
            _this.delayDurationSelector = delayDurationSelector;
            _this.completed = false;
            _this.delayNotifierSubscriptions = [];
            _this.index = 0;
            return _this;
        }
        DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(outerValue);
            this.removeSubscription(innerSub);
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            var value = this.removeSubscription(innerSub);
            if (value) {
                this.destination.next(value);
            }
            this.tryComplete();
        };
        DelayWhenSubscriber.prototype._next = function (value) {
            var index = this.index++;
            try {
                var delayNotifier = this.delayDurationSelector(value, index);
                if (delayNotifier) {
                    this.tryDelay(delayNotifier, value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        DelayWhenSubscriber.prototype._complete = function () {
            this.completed = true;
            this.tryComplete();
            this.unsubscribe();
        };
        DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
            subscription.unsubscribe();
            var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
            if (subscriptionIdx !== -1) {
                this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            }
            return subscription.outerValue;
        };
        DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
            var notifierSubscription = subscribeToResult(this, delayNotifier, value);
            if (notifierSubscription && !notifierSubscription.closed) {
                var destination = this.destination;
                destination.add(notifierSubscription);
                this.delayNotifierSubscriptions.push(notifierSubscription);
            }
        };
        DelayWhenSubscriber.prototype.tryComplete = function () {
            if (this.completed && this.delayNotifierSubscriptions.length === 0) {
                this.destination.complete();
            }
        };
        return DelayWhenSubscriber;
    }(OuterSubscriber));
    var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
        __extends(SubscriptionDelayObservable, _super);
        function SubscriptionDelayObservable(source, subscriptionDelay) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subscriptionDelay = subscriptionDelay;
            return _this;
        }
        SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
            this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
        };
        return SubscriptionDelayObservable;
    }(Observable));
    var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SubscriptionDelaySubscriber, _super);
        function SubscriptionDelaySubscriber(parent, source) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.source = source;
            _this.sourceSubscribed = false;
            return _this;
        }
        SubscriptionDelaySubscriber.prototype._next = function (unused) {
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype._error = function (err) {
            this.unsubscribe();
            this.parent.error(err);
        };
        SubscriptionDelaySubscriber.prototype._complete = function () {
            this.unsubscribe();
            this.subscribeToSource();
        };
        SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
            if (!this.sourceSubscribed) {
                this.sourceSubscribed = true;
                this.unsubscribe();
                this.source.subscribe(this.parent);
            }
        };
        return SubscriptionDelaySubscriber;
    }(Subscriber));
    //# sourceMappingURL=delayWhen.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DeMaterializeSubscriber, _super);
        function DeMaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        DeMaterializeSubscriber.prototype._next = function (value) {
            value.observe(this.destination);
        };
        return DeMaterializeSubscriber;
    }(Subscriber));
    //# sourceMappingURL=dematerialize.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DistinctSubscriber, _super);
        function DistinctSubscriber(destination, keySelector, flushes) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.values = new Set();
            if (flushes) {
                _this.add(subscribeToResult(_this, flushes));
            }
            return _this;
        }
        DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values.clear();
        };
        DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        DistinctSubscriber.prototype._next = function (value) {
            if (this.keySelector) {
                this._useKeySelector(value);
            }
            else {
                this._finalizeNext(value, value);
            }
        };
        DistinctSubscriber.prototype._useKeySelector = function (value) {
            var key;
            var destination = this.destination;
            try {
                key = this.keySelector(value);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this._finalizeNext(key, value);
        };
        DistinctSubscriber.prototype._finalizeNext = function (key, value) {
            var values = this.values;
            if (!values.has(key)) {
                values.add(key);
                this.destination.next(value);
            }
        };
        return DistinctSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=distinct.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
    var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(DistinctUntilChangedSubscriber, _super);
        function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
            var _this = _super.call(this, destination) || this;
            _this.keySelector = keySelector;
            _this.hasKey = false;
            if (typeof compare === 'function') {
                _this.compare = compare;
            }
            return _this;
        }
        DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
            return x === y;
        };
        DistinctUntilChangedSubscriber.prototype._next = function (value) {
            var keySelector = this.keySelector;
            var key = value;
            if (keySelector) {
                key = tryCatch(this.keySelector)(value);
                if (key === errorObject) {
                    return this.destination.error(errorObject.e);
                }
            }
            var result = false;
            if (this.hasKey) {
                result = tryCatch(this.compare)(this.key, key);
                if (result === errorObject) {
                    return this.destination.error(errorObject.e);
                }
            }
            else {
                this.hasKey = true;
            }
            if (Boolean(result) === false) {
                this.key = key;
                this.destination.next(value);
            }
        };
        return DistinctUntilChangedSubscriber;
    }(Subscriber));
    //# sourceMappingURL=distinctUntilChanged.js.map

    /** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */
    //# sourceMappingURL=distinctUntilKeyChanged.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var FilterSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.count = 0;
            return _this;
        }
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber));
    //# sourceMappingURL=filter.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
    var TapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TapSubscriber, _super);
        function TapSubscriber(destination, observerOrNext, error, complete) {
            var _this = _super.call(this, destination) || this;
            _this._tapNext = noop;
            _this._tapError = noop;
            _this._tapComplete = noop;
            _this._tapError = error || noop;
            _this._tapComplete = complete || noop;
            if (isFunction(observerOrNext)) {
                _this._context = _this;
                _this._tapNext = observerOrNext;
            }
            else if (observerOrNext) {
                _this._context = observerOrNext;
                _this._tapNext = observerOrNext.next || noop;
                _this._tapError = observerOrNext.error || noop;
                _this._tapComplete = observerOrNext.complete || noop;
            }
            return _this;
        }
        TapSubscriber.prototype._next = function (value) {
            try {
                this._tapNext.call(this._context, value);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(value);
        };
        TapSubscriber.prototype._error = function (err) {
            try {
                this._tapError.call(this._context, err);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.error(err);
        };
        TapSubscriber.prototype._complete = function () {
            try {
                this._tapComplete.call(this._context);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            return this.destination.complete();
        };
        return TapSubscriber;
    }(Subscriber));
    //# sourceMappingURL=tap.js.map

    /** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */
    //# sourceMappingURL=throwIfEmpty.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
    var TakeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TakeSubscriber, _super);
        function TakeSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        TakeSubscriber.prototype._next = function (value) {
            var total = this.total;
            var count = ++this.count;
            if (count <= total) {
                this.destination.next(value);
                if (count === total) {
                    this.destination.complete();
                    this.unsubscribe();
                }
            }
        };
        return TakeSubscriber;
    }(Subscriber));
    //# sourceMappingURL=take.js.map

    /** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */
    //# sourceMappingURL=elementAt.js.map

    /** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */
    //# sourceMappingURL=endWith.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var EverySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.thisArg = thisArg;
            _this.source = source;
            _this.index = 0;
            _this.thisArg = thisArg || _this;
            return _this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber));
    //# sourceMappingURL=every.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SwitchFirstSubscriber, _super);
        function SwitchFirstSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasCompleted = false;
            _this.hasSubscription = false;
            return _this;
        }
        SwitchFirstSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.hasSubscription = true;
                this.add(subscribeToResult(this, value));
            }
        };
        SwitchFirstSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
        };
        SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
            this.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return SwitchFirstSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=exhaust.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
    var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ExhaustMapSubscriber, _super);
        function ExhaustMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.hasSubscription = false;
            _this.hasCompleted = false;
            _this.index = 0;
            return _this;
        }
        ExhaustMapSubscriber.prototype._next = function (value) {
            if (!this.hasSubscription) {
                this.tryNext(value);
            }
        };
        ExhaustMapSubscriber.prototype.tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.hasSubscription = true;
            this._innerSub(result, value, index);
        };
        ExhaustMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, result, value, index, innerSubscriber);
        };
        ExhaustMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (!this.hasSubscription) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        ExhaustMapSubscriber.prototype.notifyError = function (err) {
            this.destination.error(err);
        };
        ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            destination.remove(innerSub);
            this.hasSubscription = false;
            if (this.hasCompleted) {
                this.destination.complete();
            }
        };
        return ExhaustMapSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=exhaustMap.js.map

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ExpandSubscriber, _super);
        function ExpandSubscriber(destination, project, concurrent, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.concurrent = concurrent;
            _this.scheduler = scheduler;
            _this.index = 0;
            _this.active = 0;
            _this.hasCompleted = false;
            if (concurrent < Number.POSITIVE_INFINITY) {
                _this.buffer = [];
            }
            return _this;
        }
        ExpandSubscriber.dispatch = function (arg) {
            var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
            subscriber.subscribeToProjection(result, value, index);
        };
        ExpandSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (destination.closed) {
                this._complete();
                return;
            }
            var index = this.index++;
            if (this.active < this.concurrent) {
                destination.next(value);
                var result = tryCatch(this.project)(value, index);
                if (result === errorObject) {
                    destination.error(errorObject.e);
                }
                else if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                }
                else {
                    var state = { subscriber: this, result: result, value: value, index: index };
                    var destination_1 = this.destination;
                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
            this.active++;
            var destination = this.destination;
            destination.add(subscribeToResult(this, result, value, index));
        };
        ExpandSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
            this.unsubscribe();
        };
        ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this._next(innerValue);
        };
        ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            var destination = this.destination;
            destination.remove(innerSub);
            this.active--;
            if (buffer && buffer.length > 0) {
                this._next(buffer.shift());
            }
            if (this.hasCompleted && this.active === 0) {
                this.destination.complete();
            }
        };
        return ExpandSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=expand.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
    var FinallySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(FinallySubscriber, _super);
        function FinallySubscriber(destination, callback) {
            var _this = _super.call(this, destination) || this;
            _this.add(new Subscription(callback));
            return _this;
        }
        return FinallySubscriber;
    }(Subscriber));
    //# sourceMappingURL=finalize.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(FindValueSubscriber, _super);
        function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.yieldIndex = yieldIndex;
            _this.thisArg = thisArg;
            _this.index = 0;
            return _this;
        }
        FindValueSubscriber.prototype.notifyComplete = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.unsubscribe();
        };
        FindValueSubscriber.prototype._next = function (value) {
            var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
            var index = this.index++;
            try {
                var result = predicate.call(thisArg || this, value, index, this.source);
                if (result) {
                    this.notifyComplete(this.yieldIndex ? index : value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        FindValueSubscriber.prototype._complete = function () {
            this.notifyComplete(this.yieldIndex ? -1 : undefined);
        };
        return FindValueSubscriber;
    }(Subscriber));
    //# sourceMappingURL=find.js.map

    /** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */
    //# sourceMappingURL=findIndex.js.map

    /** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
    //# sourceMappingURL=first.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(IgnoreElementsSubscriber, _super);
        function IgnoreElementsSubscriber() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IgnoreElementsSubscriber.prototype._next = function (unused) {
        };
        return IgnoreElementsSubscriber;
    }(Subscriber));
    //# sourceMappingURL=ignoreElements.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(IsEmptySubscriber, _super);
        function IsEmptySubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
            var destination = this.destination;
            destination.next(isEmpty);
            destination.complete();
        };
        IsEmptySubscriber.prototype._next = function (value) {
            this.notifyComplete(false);
        };
        IsEmptySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return IsEmptySubscriber;
    }(Subscriber));
    //# sourceMappingURL=isEmpty.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
    var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TakeLastSubscriber, _super);
        function TakeLastSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.ring = new Array();
            _this.count = 0;
            return _this;
        }
        TakeLastSubscriber.prototype._next = function (value) {
            var ring = this.ring;
            var total = this.total;
            var count = this.count++;
            if (ring.length < total) {
                ring.push(value);
            }
            else {
                var index = count % total;
                ring[index] = value;
            }
        };
        TakeLastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            var count = this.count;
            if (count > 0) {
                var total = this.count >= this.total ? this.total : this.count;
                var ring = this.ring;
                for (var i = 0; i < total; i++) {
                    var idx = (count++) % total;
                    destination.next(ring[idx]);
                }
            }
            destination.complete();
        };
        return TakeLastSubscriber;
    }(Subscriber));
    //# sourceMappingURL=takeLast.js.map

    /** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */
    //# sourceMappingURL=last.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var MapToSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MapToSubscriber, _super);
        function MapToSubscriber(destination, value) {
            var _this = _super.call(this, destination) || this;
            _this.value = value;
            return _this;
        }
        MapToSubscriber.prototype._next = function (x) {
            this.destination.next(this.value);
        };
        return MapToSubscriber;
    }(Subscriber));
    //# sourceMappingURL=mapTo.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
    var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MaterializeSubscriber, _super);
        function MaterializeSubscriber(destination) {
            return _super.call(this, destination) || this;
        }
        MaterializeSubscriber.prototype._next = function (value) {
            this.destination.next(Notification.createNext(value));
        };
        MaterializeSubscriber.prototype._error = function (err) {
            var destination = this.destination;
            destination.next(Notification.createError(err));
            destination.complete();
        };
        MaterializeSubscriber.prototype._complete = function () {
            var destination = this.destination;
            destination.next(Notification.createComplete());
            destination.complete();
        };
        return MaterializeSubscriber;
    }(Subscriber));
    //# sourceMappingURL=materialize.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var ScanSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ScanSubscriber, _super);
        function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this._seed = _seed;
            _this.hasSeed = hasSeed;
            _this.index = 0;
            return _this;
        }
        Object.defineProperty(ScanSubscriber.prototype, "seed", {
            get: function () {
                return this._seed;
            },
            set: function (value) {
                this.hasSeed = true;
                this._seed = value;
            },
            enumerable: true,
            configurable: true
        });
        ScanSubscriber.prototype._next = function (value) {
            if (!this.hasSeed) {
                this.seed = value;
                this.destination.next(value);
            }
            else {
                return this._tryNext(value);
            }
        };
        ScanSubscriber.prototype._tryNext = function (value) {
            var index = this.index++;
            var result;
            try {
                result = this.accumulator(this.seed, value, index);
            }
            catch (err) {
                this.destination.error(err);
            }
            this.seed = result;
            this.destination.next(result);
        };
        return ScanSubscriber;
    }(Subscriber));
    //# sourceMappingURL=scan.js.map

    /** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */
    //# sourceMappingURL=reduce.js.map

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
    //# sourceMappingURL=max.js.map

    /** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */
    //# sourceMappingURL=merge.js.map

    /** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
    //# sourceMappingURL=mergeMapTo.js.map

    /** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber PURE_IMPORTS_END */
    var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(MergeScanSubscriber, _super);
        function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
            var _this = _super.call(this, destination) || this;
            _this.accumulator = accumulator;
            _this.acc = acc;
            _this.concurrent = concurrent;
            _this.hasValue = false;
            _this.hasCompleted = false;
            _this.buffer = [];
            _this.active = 0;
            _this.index = 0;
            return _this;
        }
        MergeScanSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                var index = this.index++;
                var ish = tryCatch(this.accumulator)(this.acc, value);
                var destination = this.destination;
                if (ish === errorObject) {
                    destination.error(errorObject.e);
                }
                else {
                    this.active++;
                    this._innerSub(ish, value, index);
                }
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            subscribeToResult(this, ish, value, index, innerSubscriber);
        };
        MergeScanSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
            this.unsubscribe();
        };
        MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var destination = this.destination;
            this.acc = innerValue;
            this.hasValue = true;
            destination.next(innerValue);
        };
        MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            var destination = this.destination;
            destination.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                if (this.hasValue === false) {
                    this.destination.next(this.acc);
                }
                this.destination.complete();
            }
        };
        return MergeScanSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=mergeScan.js.map

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
    //# sourceMappingURL=min.js.map

    /** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
    //# sourceMappingURL=multicast.js.map

    /** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(OnErrorResumeNextSubscriber, _super);
        function OnErrorResumeNextSubscriber(destination, nextSources) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.nextSources = nextSources;
            return _this;
        }
        OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
            this.subscribeToNextSource();
        };
        OnErrorResumeNextSubscriber.prototype._error = function (err) {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype._complete = function () {
            this.subscribeToNextSource();
            this.unsubscribe();
        };
        OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
            var next = this.nextSources.shift();
            if (next) {
                var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
                var destination = this.destination;
                destination.add(innerSubscriber);
                subscribeToResult(this, next, undefined, undefined, innerSubscriber);
            }
            else {
                this.destination.complete();
            }
        };
        return OnErrorResumeNextSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=onErrorResumeNext.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(PairwiseSubscriber, _super);
        function PairwiseSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.hasPrev = false;
            return _this;
        }
        PairwiseSubscriber.prototype._next = function (value) {
            if (this.hasPrev) {
                this.destination.next([this.prev, value]);
            }
            else {
                this.hasPrev = true;
            }
            this.prev = value;
        };
        return PairwiseSubscriber;
    }(Subscriber));
    //# sourceMappingURL=pairwise.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=not.js.map

    /** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */
    //# sourceMappingURL=partition.js.map

    /** PURE_IMPORTS_START _map PURE_IMPORTS_END */
    //# sourceMappingURL=pluck.js.map

    /** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */
    //# sourceMappingURL=publish.js.map

    /** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */
    //# sourceMappingURL=publishBehavior.js.map

    /** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */
    //# sourceMappingURL=publishLast.js.map

    /** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */
    //# sourceMappingURL=publishReplay.js.map

    /** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */
    //# sourceMappingURL=race.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
    var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RepeatSubscriber, _super);
        function RepeatSubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RepeatSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.complete.call(this);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RepeatSubscriber;
    }(Subscriber));
    //# sourceMappingURL=repeat.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RepeatWhenSubscriber, _super);
        function RepeatWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            _this.sourceIsBeingSubscribedTo = true;
            return _this;
        }
        RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.sourceIsBeingSubscribedTo = true;
            this.source.subscribe(this);
        };
        RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
            if (this.sourceIsBeingSubscribedTo === false) {
                return _super.prototype.complete.call(this);
            }
        };
        RepeatWhenSubscriber.prototype.complete = function () {
            this.sourceIsBeingSubscribedTo = false;
            if (!this.isStopped) {
                if (!this.retries) {
                    this.subscribeToRetries();
                }
                if (!this.retriesSubscription || this.retriesSubscription.closed) {
                    return _super.prototype.complete.call(this);
                }
                this._unsubscribeAndRecycle();
                this.notifications.next();
            }
        };
        RepeatWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
            if (notifications) {
                notifications.unsubscribe();
                this.notifications = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            _super.prototype._unsubscribeAndRecycle.call(this);
            this._unsubscribe = _unsubscribe;
            return this;
        };
        RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
            this.notifications = new Subject();
            var retries = tryCatch(this.notifier)(this.notifications);
            if (retries === errorObject) {
                return _super.prototype.complete.call(this);
            }
            this.retries = retries;
            this.retriesSubscription = subscribeToResult(this, retries);
        };
        return RepeatWhenSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=repeatWhen.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var RetrySubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RetrySubscriber, _super);
        function RetrySubscriber(destination, count, source) {
            var _this = _super.call(this, destination) || this;
            _this.count = count;
            _this.source = source;
            return _this;
        }
        RetrySubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _a = this, source = _a.source, count = _a.count;
                if (count === 0) {
                    return _super.prototype.error.call(this, err);
                }
                else if (count > -1) {
                    this.count = count - 1;
                }
                source.subscribe(this._unsubscribeAndRecycle());
            }
        };
        return RetrySubscriber;
    }(Subscriber));
    //# sourceMappingURL=retry.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(RetryWhenSubscriber, _super);
        function RetryWhenSubscriber(destination, notifier, source) {
            var _this = _super.call(this, destination) || this;
            _this.notifier = notifier;
            _this.source = source;
            return _this;
        }
        RetryWhenSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var errors = this.errors;
                var retries = this.retries;
                var retriesSubscription = this.retriesSubscription;
                if (!retries) {
                    errors = new Subject();
                    retries = tryCatch(this.notifier)(errors);
                    if (retries === errorObject) {
                        return _super.prototype.error.call(this, errorObject.e);
                    }
                    retriesSubscription = subscribeToResult(this, retries);
                }
                else {
                    this.errors = null;
                    this.retriesSubscription = null;
                }
                this._unsubscribeAndRecycle();
                this.errors = errors;
                this.retries = retries;
                this.retriesSubscription = retriesSubscription;
                errors.next(err);
            }
        };
        RetryWhenSubscriber.prototype._unsubscribe = function () {
            var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
            if (errors) {
                errors.unsubscribe();
                this.errors = null;
            }
            if (retriesSubscription) {
                retriesSubscription.unsubscribe();
                this.retriesSubscription = null;
            }
            this.retries = null;
        };
        RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            var _unsubscribe = this._unsubscribe;
            this._unsubscribe = null;
            this._unsubscribeAndRecycle();
            this._unsubscribe = _unsubscribe;
            this.source.subscribe(this);
        };
        return RetryWhenSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=retryWhen.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SampleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SampleSubscriber, _super);
        function SampleSubscriber() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.hasValue = false;
            return _this;
        }
        SampleSubscriber.prototype._next = function (value) {
            this.value = value;
            this.hasValue = true;
        };
        SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.emitValue();
        };
        SampleSubscriber.prototype.notifyComplete = function () {
            this.emitValue();
        };
        SampleSubscriber.prototype.emitValue = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.value);
            }
        };
        return SampleSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=sample.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
    var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SampleTimeSubscriber, _super);
        function SampleTimeSubscriber(destination, period, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.period = period;
            _this.scheduler = scheduler;
            _this.hasValue = false;
            _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
            return _this;
        }
        SampleTimeSubscriber.prototype._next = function (value) {
            this.lastValue = value;
            this.hasValue = true;
        };
        SampleTimeSubscriber.prototype.notifyNext = function () {
            if (this.hasValue) {
                this.hasValue = false;
                this.destination.next(this.lastValue);
            }
        };
        return SampleTimeSubscriber;
    }(Subscriber));
    function dispatchNotification(state) {
        var subscriber = state.subscriber, period = state.period;
        subscriber.notifyNext();
        this.schedule(state, period);
    }
    //# sourceMappingURL=sampleTime.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
    var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SequenceEqualSubscriber, _super);
        function SequenceEqualSubscriber(destination, compareTo, comparor) {
            var _this = _super.call(this, destination) || this;
            _this.compareTo = compareTo;
            _this.comparor = comparor;
            _this._a = [];
            _this._b = [];
            _this._oneComplete = false;
            _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
            return _this;
        }
        SequenceEqualSubscriber.prototype._next = function (value) {
            if (this._oneComplete && this._b.length === 0) {
                this.emit(false);
            }
            else {
                this._a.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype._complete = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
            this.unsubscribe();
        };
        SequenceEqualSubscriber.prototype.checkValues = function () {
            var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
            while (_a.length > 0 && _b.length > 0) {
                var a = _a.shift();
                var b = _b.shift();
                var areEqual = false;
                if (comparor) {
                    areEqual = tryCatch(comparor)(a, b);
                    if (areEqual === errorObject) {
                        this.destination.error(errorObject.e);
                    }
                }
                else {
                    areEqual = a === b;
                }
                if (!areEqual) {
                    this.emit(false);
                }
            }
        };
        SequenceEqualSubscriber.prototype.emit = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
        };
        SequenceEqualSubscriber.prototype.nextB = function (value) {
            if (this._oneComplete && this._a.length === 0) {
                this.emit(false);
            }
            else {
                this._b.push(value);
                this.checkValues();
            }
        };
        SequenceEqualSubscriber.prototype.completeB = function () {
            if (this._oneComplete) {
                this.emit(this._a.length === 0 && this._b.length === 0);
            }
            else {
                this._oneComplete = true;
            }
        };
        return SequenceEqualSubscriber;
    }(Subscriber));
    var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SequenceEqualCompareToSubscriber, _super);
        function SequenceEqualCompareToSubscriber(destination, parent) {
            var _this = _super.call(this, destination) || this;
            _this.parent = parent;
            return _this;
        }
        SequenceEqualCompareToSubscriber.prototype._next = function (value) {
            this.parent.nextB(value);
        };
        SequenceEqualCompareToSubscriber.prototype._error = function (err) {
            this.parent.error(err);
            this.unsubscribe();
        };
        SequenceEqualCompareToSubscriber.prototype._complete = function () {
            this.parent.completeB();
            this.unsubscribe();
        };
        return SequenceEqualCompareToSubscriber;
    }(Subscriber));
    //# sourceMappingURL=sequenceEqual.js.map

    /** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
    //# sourceMappingURL=share.js.map

    /** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */
    //# sourceMappingURL=shareReplay.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
    var SingleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SingleSubscriber, _super);
        function SingleSubscriber(destination, predicate, source) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.source = source;
            _this.seenValue = false;
            _this.index = 0;
            return _this;
        }
        SingleSubscriber.prototype.applySingleValue = function (value) {
            if (this.seenValue) {
                this.destination.error('Sequence contains more than one element');
            }
            else {
                this.seenValue = true;
                this.singleValue = value;
            }
        };
        SingleSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this.tryNext(value, index);
            }
            else {
                this.applySingleValue(value);
            }
        };
        SingleSubscriber.prototype.tryNext = function (value, index) {
            try {
                if (this.predicate(value, index, this.source)) {
                    this.applySingleValue(value);
                }
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        SingleSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.index > 0) {
                destination.next(this.seenValue ? this.singleValue : undefined);
                destination.complete();
            }
            else {
                destination.error(new EmptyError);
            }
        };
        return SingleSubscriber;
    }(Subscriber));
    //# sourceMappingURL=single.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var SkipSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SkipSubscriber, _super);
        function SkipSubscriber(destination, total) {
            var _this = _super.call(this, destination) || this;
            _this.total = total;
            _this.count = 0;
            return _this;
        }
        SkipSubscriber.prototype._next = function (x) {
            if (++this.count > this.total) {
                this.destination.next(x);
            }
        };
        return SkipSubscriber;
    }(Subscriber));
    //# sourceMappingURL=skip.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
    var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SkipLastSubscriber, _super);
        function SkipLastSubscriber(destination, _skipCount) {
            var _this = _super.call(this, destination) || this;
            _this._skipCount = _skipCount;
            _this._count = 0;
            _this._ring = new Array(_skipCount);
            return _this;
        }
        SkipLastSubscriber.prototype._next = function (value) {
            var skipCount = this._skipCount;
            var count = this._count++;
            if (count < skipCount) {
                this._ring[count] = value;
            }
            else {
                var currentIndex = count % skipCount;
                var ring = this._ring;
                var oldValue = ring[currentIndex];
                ring[currentIndex] = value;
                this.destination.next(oldValue);
            }
        };
        return SkipLastSubscriber;
    }(Subscriber));
    //# sourceMappingURL=skipLast.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SkipUntilSubscriber, _super);
        function SkipUntilSubscriber(destination, notifier) {
            var _this = _super.call(this, destination) || this;
            _this.hasValue = false;
            var innerSubscriber = new InnerSubscriber(_this, undefined, undefined);
            _this.add(innerSubscriber);
            _this.innerSubscription = innerSubscriber;
            subscribeToResult(_this, notifier, undefined, undefined, innerSubscriber);
            return _this;
        }
        SkipUntilSubscriber.prototype._next = function (value) {
            if (this.hasValue) {
                _super.prototype._next.call(this, value);
            }
        };
        SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.hasValue = true;
            if (this.innerSubscription) {
                this.innerSubscription.unsubscribe();
            }
        };
        SkipUntilSubscriber.prototype.notifyComplete = function () {
        };
        return SkipUntilSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=skipUntil.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SkipWhileSubscriber, _super);
        function SkipWhileSubscriber(destination, predicate) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.skipping = true;
            _this.index = 0;
            return _this;
        }
        SkipWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            if (this.skipping) {
                this.tryCallPredicate(value);
            }
            if (!this.skipping) {
                destination.next(value);
            }
        };
        SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
            try {
                var result = this.predicate(value, this.index++);
                this.skipping = Boolean(result);
            }
            catch (err) {
                this.destination.error(err);
            }
        };
        return SkipWhileSubscriber;
    }(Subscriber));
    //# sourceMappingURL=skipWhile.js.map

    /** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */
    //# sourceMappingURL=startWith.js.map

    /** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
    var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
        __extends(SubscribeOnObservable, _super);
        function SubscribeOnObservable(source, delayTime, scheduler) {
            if (delayTime === void 0) {
                delayTime = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap;
            }
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.delayTime = delayTime;
            _this.scheduler = scheduler;
            if (!isNumeric(delayTime) || delayTime < 0) {
                _this.delayTime = 0;
            }
            if (!scheduler || typeof scheduler.schedule !== 'function') {
                _this.scheduler = asap;
            }
            return _this;
        }
        SubscribeOnObservable.create = function (source, delay, scheduler) {
            if (delay === void 0) {
                delay = 0;
            }
            if (scheduler === void 0) {
                scheduler = asap;
            }
            return new SubscribeOnObservable(source, delay, scheduler);
        };
        SubscribeOnObservable.dispatch = function (arg) {
            var source = arg.source, subscriber = arg.subscriber;
            return this.add(source.subscribe(subscriber));
        };
        SubscribeOnObservable.prototype._subscribe = function (subscriber) {
            var delay = this.delayTime;
            var source = this.source;
            var scheduler = this.scheduler;
            return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
                source: source, subscriber: subscriber
            });
        };
        return SubscribeOnObservable;
    }(Observable));
    //# sourceMappingURL=SubscribeOnObservable.js.map

    /** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */
    //# sourceMappingURL=subscribeOn.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
    var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(SwitchMapSubscriber, _super);
        function SwitchMapSubscriber(destination, project) {
            var _this = _super.call(this, destination) || this;
            _this.project = project;
            _this.index = 0;
            return _this;
        }
        SwitchMapSubscriber.prototype._next = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (error) {
                this.destination.error(error);
                return;
            }
            this._innerSub(result, value, index);
        };
        SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
            var innerSubscription = this.innerSubscription;
            if (innerSubscription) {
                innerSubscription.unsubscribe();
            }
            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
            var destination = this.destination;
            destination.add(innerSubscriber);
            this.innerSubscription = subscribeToResult(this, result, value, index, innerSubscriber);
        };
        SwitchMapSubscriber.prototype._complete = function () {
            var innerSubscription = this.innerSubscription;
            if (!innerSubscription || innerSubscription.closed) {
                _super.prototype._complete.call(this);
            }
            this.unsubscribe();
        };
        SwitchMapSubscriber.prototype._unsubscribe = function () {
            this.innerSubscription = null;
        };
        SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            destination.remove(innerSub);
            this.innerSubscription = null;
            if (this.isStopped) {
                _super.prototype._complete.call(this);
            }
        };
        SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        return SwitchMapSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=switchMap.js.map

    /** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */
    //# sourceMappingURL=switchAll.js.map

    /** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */
    //# sourceMappingURL=switchMapTo.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TakeUntilSubscriber, _super);
        function TakeUntilSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.seenValue = false;
            return _this;
        }
        TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.seenValue = true;
            this.complete();
        };
        TakeUntilSubscriber.prototype.notifyComplete = function () {
        };
        return TakeUntilSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=takeUntil.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
    var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TakeWhileSubscriber, _super);
        function TakeWhileSubscriber(destination, predicate) {
            var _this = _super.call(this, destination) || this;
            _this.predicate = predicate;
            _this.index = 0;
            return _this;
        }
        TakeWhileSubscriber.prototype._next = function (value) {
            var destination = this.destination;
            var result;
            try {
                result = this.predicate(value, this.index++);
            }
            catch (err) {
                destination.error(err);
                return;
            }
            this.nextOrComplete(value, result);
        };
        TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
            var destination = this.destination;
            if (Boolean(predicateResult)) {
                destination.next(value);
            }
            else {
                destination.complete();
            }
        };
        return TakeWhileSubscriber;
    }(Subscriber));
    //# sourceMappingURL=takeWhile.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ThrottleSubscriber, _super);
        function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.durationSelector = durationSelector;
            _this._leading = _leading;
            _this._trailing = _trailing;
            _this._hasValue = false;
            return _this;
        }
        ThrottleSubscriber.prototype._next = function (value) {
            this._hasValue = true;
            this._sendValue = value;
            if (!this._throttled) {
                if (this._leading) {
                    this.send();
                }
                else {
                    this.throttle(value);
                }
            }
        };
        ThrottleSubscriber.prototype.send = function () {
            var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
            if (_hasValue) {
                this.destination.next(_sendValue);
                this.throttle(_sendValue);
            }
            this._hasValue = false;
            this._sendValue = null;
        };
        ThrottleSubscriber.prototype.throttle = function (value) {
            var duration = this.tryDurationSelector(value);
            if (duration) {
                this.add(this._throttled = subscribeToResult(this, duration));
            }
        };
        ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
            try {
                return this.durationSelector(value);
            }
            catch (err) {
                this.destination.error(err);
                return null;
            }
        };
        ThrottleSubscriber.prototype.throttlingDone = function () {
            var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
            if (_throttled) {
                _throttled.unsubscribe();
            }
            this._throttled = null;
            if (_trailing) {
                this.send();
            }
        };
        ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.throttlingDone();
        };
        ThrottleSubscriber.prototype.notifyComplete = function () {
            this.throttlingDone();
        };
        return ThrottleSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=throttle.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
    var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(ThrottleTimeSubscriber, _super);
        function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
            var _this = _super.call(this, destination) || this;
            _this.duration = duration;
            _this.scheduler = scheduler;
            _this.leading = leading;
            _this.trailing = trailing;
            _this._hasTrailingValue = false;
            _this._trailingValue = null;
            return _this;
        }
        ThrottleTimeSubscriber.prototype._next = function (value) {
            if (this.throttled) {
                if (this.trailing) {
                    this._trailingValue = value;
                    this._hasTrailingValue = true;
                }
            }
            else {
                this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
                if (this.leading) {
                    this.destination.next(value);
                }
            }
        };
        ThrottleTimeSubscriber.prototype._complete = function () {
            if (this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this.destination.complete();
            }
            else {
                this.destination.complete();
            }
        };
        ThrottleTimeSubscriber.prototype.clearThrottle = function () {
            var throttled = this.throttled;
            if (throttled) {
                if (this.trailing && this._hasTrailingValue) {
                    this.destination.next(this._trailingValue);
                    this._trailingValue = null;
                    this._hasTrailingValue = false;
                }
                throttled.unsubscribe();
                this.remove(throttled);
                this.throttled = null;
            }
        };
        return ThrottleTimeSubscriber;
    }(Subscriber));
    function dispatchNext$3(arg) {
        var subscriber = arg.subscriber;
        subscriber.clearThrottle();
    }
    //# sourceMappingURL=throttleTime.js.map

    /** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */
    //# sourceMappingURL=timeInterval.js.map

    /** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(TimeoutWithSubscriber, _super);
        function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.absoluteTimeout = absoluteTimeout;
            _this.waitFor = waitFor;
            _this.withObservable = withObservable;
            _this.scheduler = scheduler;
            _this.action = null;
            _this.scheduleTimeout();
            return _this;
        }
        TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
            var withObservable = subscriber.withObservable;
            subscriber._unsubscribeAndRecycle();
            subscriber.add(subscribeToResult(subscriber, withObservable));
        };
        TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
            var action = this.action;
            if (action) {
                this.action = action.schedule(this, this.waitFor);
            }
            else {
                this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
            }
        };
        TimeoutWithSubscriber.prototype._next = function (value) {
            if (!this.absoluteTimeout) {
                this.scheduleTimeout();
            }
            _super.prototype._next.call(this, value);
        };
        TimeoutWithSubscriber.prototype._unsubscribe = function () {
            this.action = null;
            this.scheduler = null;
            this.withObservable = null;
        };
        return TimeoutWithSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=timeoutWith.js.map

    /** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */
    //# sourceMappingURL=timeout.js.map

    /** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */
    //# sourceMappingURL=timestamp.js.map

    /** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
    //# sourceMappingURL=toArray.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination) {
            var _this = _super.call(this, destination) || this;
            _this.window = new Subject();
            destination.next(_this.window);
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow();
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this._complete();
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
        };
        WindowSubscriber.prototype._unsubscribe = function () {
            this.window = null;
        };
        WindowSubscriber.prototype.openWindow = function () {
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var destination = this.destination;
            var newWindow = this.window = new Subject();
            destination.next(newWindow);
        };
        return WindowSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=window.js.map

    /** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
    var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(WindowCountSubscriber, _super);
        function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowSize = windowSize;
            _this.startWindowEvery = startWindowEvery;
            _this.windows = [new Subject()];
            _this.count = 0;
            destination.next(_this.windows[0]);
            return _this;
        }
        WindowCountSubscriber.prototype._next = function (value) {
            var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
            var destination = this.destination;
            var windowSize = this.windowSize;
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len && !this.closed; i++) {
                windows[i].next(value);
            }
            var c = this.count - windowSize + 1;
            if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
                windows.shift().complete();
            }
            if (++this.count % startWindowEvery === 0 && !this.closed) {
                var window_1 = new Subject();
                windows.push(window_1);
                destination.next(window_1);
            }
        };
        WindowCountSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().error(err);
                }
            }
            this.destination.error(err);
        };
        WindowCountSubscriber.prototype._complete = function () {
            var windows = this.windows;
            if (windows) {
                while (windows.length > 0 && !this.closed) {
                    windows.shift().complete();
                }
            }
            this.destination.complete();
        };
        WindowCountSubscriber.prototype._unsubscribe = function () {
            this.count = 0;
            this.windows = null;
        };
        return WindowCountSubscriber;
    }(Subscriber));
    //# sourceMappingURL=windowCount.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
    var CountedSubject = /*@__PURE__*/ (function (_super) {
        __extends(CountedSubject, _super);
        function CountedSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._numberOfNextedValues = 0;
            return _this;
        }
        CountedSubject.prototype.next = function (value) {
            this._numberOfNextedValues++;
            _super.prototype.next.call(this, value);
        };
        Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
            get: function () {
                return this._numberOfNextedValues;
            },
            enumerable: true,
            configurable: true
        });
        return CountedSubject;
    }(Subject));
    var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(WindowTimeSubscriber, _super);
        function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.windowTimeSpan = windowTimeSpan;
            _this.windowCreationInterval = windowCreationInterval;
            _this.maxWindowSize = maxWindowSize;
            _this.scheduler = scheduler;
            _this.windows = [];
            var window = _this.openWindow();
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                var closeState = { subscriber: _this, window: window, context: null };
                var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
                _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
                _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
            }
            else {
                var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
                _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
            }
            return _this;
        }
        WindowTimeSubscriber.prototype._next = function (value) {
            var windows = this.windows;
            var len = windows.length;
            for (var i = 0; i < len; i++) {
                var window_1 = windows[i];
                if (!window_1.closed) {
                    window_1.next(value);
                    if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                        this.closeWindow(window_1);
                    }
                }
            }
        };
        WindowTimeSubscriber.prototype._error = function (err) {
            var windows = this.windows;
            while (windows.length > 0) {
                windows.shift().error(err);
            }
            this.destination.error(err);
        };
        WindowTimeSubscriber.prototype._complete = function () {
            var windows = this.windows;
            while (windows.length > 0) {
                var window_2 = windows.shift();
                if (!window_2.closed) {
                    window_2.complete();
                }
            }
            this.destination.complete();
        };
        WindowTimeSubscriber.prototype.openWindow = function () {
            var window = new CountedSubject();
            this.windows.push(window);
            var destination = this.destination;
            destination.next(window);
            return window;
        };
        WindowTimeSubscriber.prototype.closeWindow = function (window) {
            window.complete();
            var windows = this.windows;
            windows.splice(windows.indexOf(window), 1);
        };
        return WindowTimeSubscriber;
    }(Subscriber));
    function dispatchWindowTimeSpanOnly(state) {
        var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
        if (window) {
            subscriber.closeWindow(window);
        }
        state.window = subscriber.openWindow();
        this.schedule(state, windowTimeSpan);
    }
    function dispatchWindowCreation(state) {
        var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
        var window = subscriber.openWindow();
        var action = this;
        var context = { action: action, subscription: null };
        var timeSpanState = { subscriber: subscriber, window: window, context: context };
        context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
        action.add(context.subscription);
        action.schedule(state, windowCreationInterval);
    }
    function dispatchWindowClose(state) {
        var subscriber = state.subscriber, window = state.window, context = state.context;
        if (context && context.action && context.subscription) {
            context.action.remove(context.subscription);
        }
        subscriber.closeWindow(window);
    }
    //# sourceMappingURL=windowTime.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(WindowToggleSubscriber, _super);
        function WindowToggleSubscriber(destination, openings, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.openings = openings;
            _this.closingSelector = closingSelector;
            _this.contexts = [];
            _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
            return _this;
        }
        WindowToggleSubscriber.prototype._next = function (value) {
            var contexts = this.contexts;
            if (contexts) {
                var len = contexts.length;
                for (var i = 0; i < len; i++) {
                    contexts[i].window.next(value);
                }
            }
        };
        WindowToggleSubscriber.prototype._error = function (err) {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_1 = contexts[index];
                    context_1.window.error(err);
                    context_1.subscription.unsubscribe();
                }
            }
            _super.prototype._error.call(this, err);
        };
        WindowToggleSubscriber.prototype._complete = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_2 = contexts[index];
                    context_2.window.complete();
                    context_2.subscription.unsubscribe();
                }
            }
            _super.prototype._complete.call(this);
        };
        WindowToggleSubscriber.prototype._unsubscribe = function () {
            var contexts = this.contexts;
            this.contexts = null;
            if (contexts) {
                var len = contexts.length;
                var index = -1;
                while (++index < len) {
                    var context_3 = contexts[index];
                    context_3.window.unsubscribe();
                    context_3.subscription.unsubscribe();
                }
            }
        };
        WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (outerValue === this.openings) {
                var closingSelector = this.closingSelector;
                var closingNotifier = tryCatch(closingSelector)(innerValue);
                if (closingNotifier === errorObject) {
                    return this.error(errorObject.e);
                }
                else {
                    var window_1 = new Subject();
                    var subscription = new Subscription();
                    var context_4 = { window: window_1, subscription: subscription };
                    this.contexts.push(context_4);
                    var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
                    if (innerSubscription.closed) {
                        this.closeWindow(this.contexts.length - 1);
                    }
                    else {
                        innerSubscription.context = context_4;
                        subscription.add(innerSubscription);
                    }
                    this.destination.next(window_1);
                }
            }
            else {
                this.closeWindow(this.contexts.indexOf(outerValue));
            }
        };
        WindowToggleSubscriber.prototype.notifyError = function (err) {
            this.error(err);
        };
        WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
            if (inner !== this.openSubscription) {
                this.closeWindow(this.contexts.indexOf(inner.context));
            }
        };
        WindowToggleSubscriber.prototype.closeWindow = function (index) {
            if (index === -1) {
                return;
            }
            var contexts = this.contexts;
            var context = contexts[index];
            var window = context.window, subscription = context.subscription;
            contexts.splice(index, 1);
            window.complete();
            subscription.unsubscribe();
        };
        return WindowToggleSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=windowToggle.js.map

    /** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
        __extends(WindowSubscriber, _super);
        function WindowSubscriber(destination, closingSelector) {
            var _this = _super.call(this, destination) || this;
            _this.destination = destination;
            _this.closingSelector = closingSelector;
            _this.openWindow();
            return _this;
        }
        WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype.notifyError = function (error, innerSub) {
            this._error(error);
        };
        WindowSubscriber.prototype.notifyComplete = function (innerSub) {
            this.openWindow(innerSub);
        };
        WindowSubscriber.prototype._next = function (value) {
            this.window.next(value);
        };
        WindowSubscriber.prototype._error = function (err) {
            this.window.error(err);
            this.destination.error(err);
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype._complete = function () {
            this.window.complete();
            this.destination.complete();
            this.unsubscribeClosingNotification();
        };
        WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
            if (this.closingNotification) {
                this.closingNotification.unsubscribe();
            }
        };
        WindowSubscriber.prototype.openWindow = function (innerSub) {
            if (innerSub === void 0) {
                innerSub = null;
            }
            if (innerSub) {
                this.remove(innerSub);
                innerSub.unsubscribe();
            }
            var prevWindow = this.window;
            if (prevWindow) {
                prevWindow.complete();
            }
            var window = this.window = new Subject();
            this.destination.next(window);
            var closingNotifier = tryCatch(this.closingSelector)();
            if (closingNotifier === errorObject) {
                var err = errorObject.e;
                this.destination.error(err);
                this.window.error(err);
            }
            else {
                this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
            }
        };
        return WindowSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=windowWhen.js.map

    /** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
    var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
        __extends(WithLatestFromSubscriber, _super);
        function WithLatestFromSubscriber(destination, observables, project) {
            var _this = _super.call(this, destination) || this;
            _this.observables = observables;
            _this.project = project;
            _this.toRespond = [];
            var len = observables.length;
            _this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                _this.toRespond.push(i);
            }
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                _this.add(subscribeToResult(_this, observable, observable, i));
            }
            return _this;
        }
        WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            var toRespond = this.toRespond;
            if (toRespond.length > 0) {
                var found = toRespond.indexOf(outerIndex);
                if (found !== -1) {
                    toRespond.splice(found, 1);
                }
            }
        };
        WithLatestFromSubscriber.prototype.notifyComplete = function () {
        };
        WithLatestFromSubscriber.prototype._next = function (value) {
            if (this.toRespond.length === 0) {
                var args = [value].concat(this.values);
                if (this.project) {
                    this._tryProject(args);
                }
                else {
                    this.destination.next(args);
                }
            }
        };
        WithLatestFromSubscriber.prototype._tryProject = function (args) {
            var result;
            try {
                result = this.project.apply(this, args);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return WithLatestFromSubscriber;
    }(OuterSubscriber));
    //# sourceMappingURL=withLatestFrom.js.map

    /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
    //# sourceMappingURL=zip.js.map

    /** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
    //# sourceMappingURL=zipAll.js.map

    /** PURE_IMPORTS_START  PURE_IMPORTS_END */
    //# sourceMappingURL=index.js.map

    /**
     * A special placeholder value used to specify "gaps" within curried functions,
     * allowing partial application of any combination of arguments, regardless of
     * their positions.
     *
     * If `g` is a curried ternary function and `_` is `R.__`, the following are
     * equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2, _)(1, 3)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @name __
     * @constant
     * @memberOf R
     * @since v0.6.0
     * @category Function
     * @example
     *
     *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');
     *      greet('Alice'); //=> 'Hello, Alice!'
     */

    function _isPlaceholder(a) {
           return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
    }

    /**
     * Optimized internal one-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry1(fn) {
      return function f1(a) {
        if (arguments.length === 0 || _isPlaceholder(a)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }

    /**
     * Optimized internal two-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry2(fn) {
      return function f2(a, b) {
        switch (arguments.length) {
          case 0:
            return f2;
          case 1:
            return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
              return fn(a, _b);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
              return fn(_a, b);
            }) : _isPlaceholder(b) ? _curry1(function (_b) {
              return fn(a, _b);
            }) : fn(a, b);
        }
      };
    }

    /**
     * Adds two values.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a
     * @param {Number} b
     * @return {Number}
     * @see R.subtract
     * @example
     *
     *      R.add(2, 3);       //=>  5
     *      R.add(7)(10);      //=> 17
     */
    var add = /*#__PURE__*/_curry2(function add(a, b) {
      return Number(a) + Number(b);
    });

    /**
     * Private `concat` function to merge two array-like objects.
     *
     * @private
     * @param {Array|Arguments} [set1=[]] An array-like object.
     * @param {Array|Arguments} [set2=[]] An array-like object.
     * @return {Array} A new, merged array.
     * @example
     *
     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     */
    function _concat(set1, set2) {
      set1 = set1 || [];
      set2 = set2 || [];
      var idx;
      var len1 = set1.length;
      var len2 = set2.length;
      var result = [];

      idx = 0;
      while (idx < len1) {
        result[result.length] = set1[idx];
        idx += 1;
      }
      idx = 0;
      while (idx < len2) {
        result[result.length] = set2[idx];
        idx += 1;
      }
      return result;
    }

    function _arity(n, fn) {
      /* eslint-disable no-unused-vars */
      switch (n) {
        case 0:
          return function () {
            return fn.apply(this, arguments);
          };
        case 1:
          return function (a0) {
            return fn.apply(this, arguments);
          };
        case 2:
          return function (a0, a1) {
            return fn.apply(this, arguments);
          };
        case 3:
          return function (a0, a1, a2) {
            return fn.apply(this, arguments);
          };
        case 4:
          return function (a0, a1, a2, a3) {
            return fn.apply(this, arguments);
          };
        case 5:
          return function (a0, a1, a2, a3, a4) {
            return fn.apply(this, arguments);
          };
        case 6:
          return function (a0, a1, a2, a3, a4, a5) {
            return fn.apply(this, arguments);
          };
        case 7:
          return function (a0, a1, a2, a3, a4, a5, a6) {
            return fn.apply(this, arguments);
          };
        case 8:
          return function (a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.apply(this, arguments);
          };
        case 9:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.apply(this, arguments);
          };
        case 10:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.apply(this, arguments);
          };
        default:
          throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
      }
    }

    /**
     * Internal curryN function.
     *
     * @private
     * @category Function
     * @param {Number} length The arity of the curried function.
     * @param {Array} received An array of arguments received thus far.
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curryN(length, received, fn) {
      return function () {
        var combined = [];
        var argsIdx = 0;
        var left = length;
        var combinedIdx = 0;
        while (combinedIdx < received.length || argsIdx < arguments.length) {
          var result;
          if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
            result = received[combinedIdx];
          } else {
            result = arguments[argsIdx];
            argsIdx += 1;
          }
          combined[combinedIdx] = result;
          if (!_isPlaceholder(result)) {
            left -= 1;
          }
          combinedIdx += 1;
        }
        return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
      };
    }

    /**
     * Returns a curried equivalent of the provided function, with the specified
     * arity. The curried function has two unusual capabilities. First, its
     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
     * following are equivalent:
     *
     *   - `g(1)(2)(3)`
     *   - `g(1)(2, 3)`
     *   - `g(1, 2)(3)`
     *   - `g(1, 2, 3)`
     *
     * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
     * "gaps", allowing partial application of any combination of arguments,
     * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
     * the following are equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @func
     * @memberOf R
     * @since v0.5.0
     * @category Function
     * @sig Number -> (* -> a) -> (* -> a)
     * @param {Number} length The arity for the returned function.
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curry
     * @example
     *
     *      const sumArgs = (...args) => R.sum(args);
     *
     *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
     *      const f = curriedAddFourNumbers(1, 2);
     *      const g = f(3);
     *      g(4); //=> 10
     */
    var curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {
      if (length === 1) {
        return _curry1(fn);
      }
      return _arity(length, _curryN(length, [], fn));
    });

    /**
     * Optimized internal three-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry3(fn) {
      return function f3(a, b, c) {
        switch (arguments.length) {
          case 0:
            return f3;
          case 1:
            return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            });
          case 2:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _curry1(function (_c) {
              return fn(a, b, _c);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
              return fn(_a, _b, c);
            }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _isPlaceholder(a) ? _curry1(function (_a) {
              return fn(_a, b, c);
            }) : _isPlaceholder(b) ? _curry1(function (_b) {
              return fn(a, _b, c);
            }) : _isPlaceholder(c) ? _curry1(function (_c) {
              return fn(a, b, _c);
            }) : fn(a, b, c);
        }
      };
    }

    /**
     * Tests whether or not an object is an array.
     *
     * @private
     * @param {*} val The object to test.
     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
     * @example
     *
     *      _isArray([]); //=> true
     *      _isArray(null); //=> false
     *      _isArray({}); //=> false
     */
    var _isArray = Array.isArray || function _isArray(val) {
      return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
    };

    function _isTransformer(obj) {
      return obj != null && typeof obj['@@transducer/step'] === 'function';
    }

    /**
     * Returns a function that dispatches with different strategies based on the
     * object in list position (last argument). If it is an array, executes [fn].
     * Otherwise, if it has a function with one of the given method names, it will
     * execute that function (functor case). Otherwise, if it is a transformer,
     * uses transducer [xf] to return a new transformer (transducer case).
     * Otherwise, it will default to executing [fn].
     *
     * @private
     * @param {Array} methodNames properties to check for a custom implementation
     * @param {Function} xf transducer to initialize if object is transformer
     * @param {Function} fn default ramda implementation
     * @return {Function} A function that dispatches on object in list position
     */
    function _dispatchable(methodNames, xf, fn) {
      return function () {
        if (arguments.length === 0) {
          return fn();
        }
        var args = Array.prototype.slice.call(arguments, 0);
        var obj = args.pop();
        if (!_isArray(obj)) {
          var idx = 0;
          while (idx < methodNames.length) {
            if (typeof obj[methodNames[idx]] === 'function') {
              return obj[methodNames[idx]].apply(obj, args);
            }
            idx += 1;
          }
          if (_isTransformer(obj)) {
            var transducer = xf.apply(null, args);
            return transducer(obj);
          }
        }
        return fn.apply(this, arguments);
      };
    }

    function _reduced(x) {
      return x && x['@@transducer/reduced'] ? x : {
        '@@transducer/value': x,
        '@@transducer/reduced': true
      };
    }

    var _xfBase = {
      init: function () {
        return this.xf['@@transducer/init']();
      },
      result: function (result) {
        return this.xf['@@transducer/result'](result);
      }
    };

    /**
     * Returns the larger of its two arguments.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig Ord a => a -> a -> a
     * @param {*} a
     * @param {*} b
     * @return {*}
     * @see R.maxBy, R.min
     * @example
     *
     *      R.max(789, 123); //=> 789
     *      R.max('a', 'b'); //=> 'b'
     */
    var max$1 = /*#__PURE__*/_curry2(function max(a, b) {
      return b > a ? b : a;
    });

    function _map(fn, functor) {
      var idx = 0;
      var len = functor.length;
      var result = Array(len);
      while (idx < len) {
        result[idx] = fn(functor[idx]);
        idx += 1;
      }
      return result;
    }

    function _isString(x) {
      return Object.prototype.toString.call(x) === '[object String]';
    }

    /**
     * Tests whether or not an object is similar to an array.
     *
     * @private
     * @category Type
     * @category List
     * @sig * -> Boolean
     * @param {*} x The object to test.
     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
     * @example
     *
     *      _isArrayLike([]); //=> true
     *      _isArrayLike(true); //=> false
     *      _isArrayLike({}); //=> false
     *      _isArrayLike({length: 10}); //=> false
     *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
     */
    var _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {
      if (_isArray(x)) {
        return true;
      }
      if (!x) {
        return false;
      }
      if (typeof x !== 'object') {
        return false;
      }
      if (_isString(x)) {
        return false;
      }
      if (x.nodeType === 1) {
        return !!x.length;
      }
      if (x.length === 0) {
        return true;
      }
      if (x.length > 0) {
        return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
      }
      return false;
    });

    var XWrap = /*#__PURE__*/function () {
      function XWrap(fn) {
        this.f = fn;
      }
      XWrap.prototype['@@transducer/init'] = function () {
        throw new Error('init not implemented on XWrap');
      };
      XWrap.prototype['@@transducer/result'] = function (acc) {
        return acc;
      };
      XWrap.prototype['@@transducer/step'] = function (acc, x) {
        return this.f(acc, x);
      };

      return XWrap;
    }();

    function _xwrap(fn) {
      return new XWrap(fn);
    }

    /**
     * Creates a function that is bound to a context.
     * Note: `R.bind` does not provide the additional argument-binding capabilities of
     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category Function
     * @category Object
     * @sig (* -> *) -> {*} -> (* -> *)
     * @param {Function} fn The function to bind to context
     * @param {Object} thisObj The context to bind `fn` to
     * @return {Function} A function that will execute in the context of `thisObj`.
     * @see R.partial
     * @example
     *
     *      const log = R.bind(console.log, console);
     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
     *      // logs {a: 2}
     * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
     */
    var bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {
      return _arity(fn.length, function () {
        return fn.apply(thisObj, arguments);
      });
    });

    function _arrayReduce(xf, acc, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        acc = xf['@@transducer/step'](acc, list[idx]);
        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }
        idx += 1;
      }
      return xf['@@transducer/result'](acc);
    }

    function _iterableReduce(xf, acc, iter) {
      var step = iter.next();
      while (!step.done) {
        acc = xf['@@transducer/step'](acc, step.value);
        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }
        step = iter.next();
      }
      return xf['@@transducer/result'](acc);
    }

    function _methodReduce(xf, acc, obj, methodName) {
      return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
    }

    var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

    function _reduce(fn, acc, list) {
      if (typeof fn === 'function') {
        fn = _xwrap(fn);
      }
      if (_isArrayLike(list)) {
        return _arrayReduce(fn, acc, list);
      }
      if (typeof list['fantasy-land/reduce'] === 'function') {
        return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
      }
      if (list[symIterator] != null) {
        return _iterableReduce(fn, acc, list[symIterator]());
      }
      if (typeof list.next === 'function') {
        return _iterableReduce(fn, acc, list);
      }
      if (typeof list.reduce === 'function') {
        return _methodReduce(fn, acc, list, 'reduce');
      }

      throw new TypeError('reduce: list must be array or iterable');
    }

    var XMap = /*#__PURE__*/function () {
      function XMap(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XMap.prototype['@@transducer/init'] = _xfBase.init;
      XMap.prototype['@@transducer/result'] = _xfBase.result;
      XMap.prototype['@@transducer/step'] = function (result, input) {
        return this.xf['@@transducer/step'](result, this.f(input));
      };

      return XMap;
    }();

    var _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {
      return new XMap(f, xf);
    });

    function _has(prop, obj) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var toString$1 = Object.prototype.toString;
    var _isArguments = /*#__PURE__*/function () {
      return toString$1.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
        return toString$1.call(x) === '[object Arguments]';
      } : function _isArguments(x) {
        return _has('callee', x);
      };
    }();

    // cover IE < 9 keys issues
    var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
    // Safari bug
    var hasArgsEnumBug = /*#__PURE__*/function () {

      return arguments.propertyIsEnumerable('length');
    }();

    var contains = function contains(list, item) {
      var idx = 0;
      while (idx < list.length) {
        if (list[idx] === item) {
          return true;
        }
        idx += 1;
      }
      return false;
    };

    /**
     * Returns a list containing the names of all the enumerable own properties of
     * the supplied object.
     * Note that the order of the output array is not guaranteed to be consistent
     * across different JS platforms.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig {k: v} -> [k]
     * @param {Object} obj The object to extract properties from
     * @return {Array} An array of the object's own properties.
     * @see R.keysIn, R.values
     * @example
     *
     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
     */
    var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? /*#__PURE__*/_curry1(function keys(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) : /*#__PURE__*/_curry1(function keys(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    });

    /**
     * Takes a function and
     * a [functor](https://github.com/fantasyland/fantasy-land#functor),
     * applies the function to each of the functor's values, and returns
     * a functor of the same shape.
     *
     * Ramda provides suitable `map` implementations for `Array` and `Object`,
     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
     *
     * Dispatches to the `map` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * Also treats functions as functors and will compose them together.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Functor f => (a -> b) -> f a -> f b
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {Array} list The list to be iterated over.
     * @return {Array} The new list.
     * @see R.transduce, R.addIndex
     * @example
     *
     *      const double = x => x * 2;
     *
     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
     *
     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
     * @symb R.map(f, [a, b]) = [f(a), f(b)]
     * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
     * @symb R.map(f, functor_o) = functor_o.map(f)
     */
    var map$1 = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
      switch (Object.prototype.toString.call(functor)) {
        case '[object Function]':
          return curryN(functor.length, function () {
            return fn.call(this, functor.apply(this, arguments));
          });
        case '[object Object]':
          return _reduce(function (acc, key) {
            acc[key] = fn(functor[key]);
            return acc;
          }, {}, keys(functor));
        default:
          return _map(fn, functor);
      }
    }));

    /**
     * Retrieve the value at a given path.
     *
     * @func
     * @memberOf R
     * @since v0.2.0
     * @category Object
     * @typedefn Idx = String | Int
     * @sig [Idx] -> {a} -> a | Undefined
     * @param {Array} path The path to use.
     * @param {Object} obj The object to retrieve the nested property from.
     * @return {*} The data at `path`.
     * @see R.prop
     * @example
     *
     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
     */
    var path = /*#__PURE__*/_curry2(function path(paths, obj) {
      var val = obj;
      var idx = 0;
      while (idx < paths.length) {
        if (val == null) {
          return;
        }
        val = val[paths[idx]];
        idx += 1;
      }
      return val;
    });

    /**
     * Returns a function that when supplied an object returns the indicated
     * property of that object, if it exists.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig s -> {s: a} -> a | Undefined
     * @param {String} p The property name
     * @param {Object} obj The object to query
     * @return {*} The value at `obj.p`.
     * @see R.path
     * @example
     *
     *      R.prop('x', {x: 100}); //=> 100
     *      R.prop('x', {}); //=> undefined
     *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
     */

    var prop = /*#__PURE__*/_curry2(function prop(p, obj) {
      return path([p], obj);
    });

    /**
     * Returns a new list by plucking the same named property off all objects in
     * the list supplied.
     *
     * `pluck` will work on
     * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
     * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Functor f => k -> f {k: v} -> f v
     * @param {Number|String} key The key name to pluck off of each object.
     * @param {Array} f The array or functor to consider.
     * @return {Array} The list of values for the given key.
     * @see R.props
     * @example
     *
     *      var getAges = R.pluck('age');
     *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
     *
     *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
     *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
     * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
     * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
     */
    var pluck$1 = /*#__PURE__*/_curry2(function pluck(p, list) {
      return map$1(prop(p), list);
    });

    /**
     * Returns a single item by iterating through the list, successively calling
     * the iterator function and passing it an accumulator value and the current
     * value from the array, and then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*. It may use
     * [`R.reduced`](#reduced) to shortcut the iteration.
     *
     * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
     * is *(value, acc)*.
     *
     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
     * arrays), unlike the native `Array.prototype.reduce` method. For more details
     * on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
     *
     * Dispatches to the `reduce` method of the third argument, if present. When
     * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
     * shortcuting, as this is not implemented by `reduce`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig ((a, b) -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @see R.reduced, R.addIndex, R.reduceRight
     * @example
     *
     *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
     *      //          -               -10
     *      //         / \              / \
     *      //        -   4           -6   4
     *      //       / \              / \
     *      //      -   3   ==>     -3   3
     *      //     / \              / \
     *      //    -   2           -1   2
     *      //   / \              / \
     *      //  0   1            0   1
     *
     * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
     */
    var reduce$1 = /*#__PURE__*/_curry3(_reduce);

    /**
     * ap applies a list of functions to a list of values.
     *
     * Dispatches to the `ap` method of the second argument, if present. Also
     * treats curried functions as applicatives.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category Function
     * @sig [a -> b] -> [a] -> [b]
     * @sig Apply f => f (a -> b) -> f a -> f b
     * @sig (r -> a -> b) -> (r -> a) -> (r -> b)
     * @param {*} applyF
     * @param {*} applyX
     * @return {*}
     * @example
     *
     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
     *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
     *
     *      // R.ap can also be used as S combinator
     *      // when only two functions are passed
     *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
     * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
     */
    var ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {
      return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
        return applyF(x)(applyX(x));
      } : _reduce(function (acc, f) {
        return _concat(acc, map$1(f, applyX));
      }, [], applyF);
    });

    /**
     * Determine if the passed argument is an integer.
     *
     * @private
     * @param {*} n
     * @category Type
     * @return {Boolean}
     */

    function _isFunction(x) {
      return Object.prototype.toString.call(x) === '[object Function]';
    }

    /**
     * "lifts" a function to be the specified arity, so that it may "map over" that
     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
     *
     * @func
     * @memberOf R
     * @since v0.7.0
     * @category Function
     * @sig Number -> (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The lifted function.
     * @see R.lift, R.ap
     * @example
     *
     *      const madd3 = R.liftN(3, (...args) => R.sum(args));
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     */
    var liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {
      var lifted = curryN(arity, fn);
      return curryN(arity, function () {
        return _reduce(ap, map$1(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
      });
    });

    /**
     * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
     *
     * @func
     * @memberOf R
     * @since v0.7.0
     * @category Function
     * @sig (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The lifted function.
     * @see R.liftN
     * @example
     *
     *      const madd3 = R.lift((a, b, c) => a + b + c);
     *
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     *
     *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
     *
     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
     */
    var lift = /*#__PURE__*/_curry1(function lift(fn) {
      return liftN(fn.length, fn);
    });

    /**
     * Returns a curried equivalent of the provided function. The curried function
     * has two unusual capabilities. First, its arguments needn't be provided one
     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
     * following are equivalent:
     *
     *   - `g(1)(2)(3)`
     *   - `g(1)(2, 3)`
     *   - `g(1, 2)(3)`
     *   - `g(1, 2, 3)`
     *
     * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
     * "gaps", allowing partial application of any combination of arguments,
     * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
     * the following are equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig (* -> a) -> (* -> a)
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curryN, R.partial
     * @example
     *
     *      const addFourNumbers = (a, b, c, d) => a + b + c + d;
     *
     *      const curriedAddFourNumbers = R.curry(addFourNumbers);
     *      const f = curriedAddFourNumbers(1, 2);
     *      const g = f(3);
     *      g(4); //=> 10
     */
    var curry = /*#__PURE__*/_curry1(function curry(fn) {
      return curryN(fn.length, fn);
    });

    /**
     * Returns the result of calling its first argument with the remaining
     * arguments. This is occasionally useful as a converging function for
     * [`R.converge`](#converge): the first branch can produce a function while the
     * remaining branches produce values to be passed to that function as its
     * arguments.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Function
     * @sig (*... -> a),*... -> a
     * @param {Function} fn The function to apply to the remaining arguments.
     * @param {...*} args Any number of positional arguments.
     * @return {*}
     * @see R.apply
     * @example
     *
     *      R.call(R.add, 1, 2); //=> 3
     *
     *      const indentN = R.pipe(R.repeat(' '),
     *                           R.join(''),
     *                           R.replace(/^(?!$)/gm));
     *
     *      const format = R.converge(R.call, [
     *                                  R.pipe(R.prop('indent'), indentN),
     *                                  R.prop('value')
     *                              ]);
     *
     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
     * @symb R.call(f, a, b) = f(a, b)
     */
    var call = /*#__PURE__*/curry(function call(fn) {
      return fn.apply(this, Array.prototype.slice.call(arguments, 1));
    });

    /**
     * `_makeFlat` is a helper function that returns a one-level or fully recursive
     * function based on the flag passed in.
     *
     * @private
     */
    function _makeFlat(recursive) {
      return function flatt(list) {
        var value, jlen, j;
        var result = [];
        var idx = 0;
        var ilen = list.length;

        while (idx < ilen) {
          if (_isArrayLike(list[idx])) {
            value = recursive ? flatt(list[idx]) : list[idx];
            j = 0;
            jlen = value.length;
            while (j < jlen) {
              result[result.length] = value[j];
              j += 1;
            }
          } else {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
        return result;
      };
    }

    function _forceReduced(x) {
      return {
        '@@transducer/value': x,
        '@@transducer/reduced': true
      };
    }

    var preservingReduced = function (xf) {
      return {
        '@@transducer/init': _xfBase.init,
        '@@transducer/result': function (result) {
          return xf['@@transducer/result'](result);
        },
        '@@transducer/step': function (result, input) {
          var ret = xf['@@transducer/step'](result, input);
          return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
        }
      };
    };

    var _flatCat = function _xcat(xf) {
      var rxf = preservingReduced(xf);
      return {
        '@@transducer/init': _xfBase.init,
        '@@transducer/result': function (result) {
          return rxf['@@transducer/result'](result);
        },
        '@@transducer/step': function (result, input) {
          return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
        }
      };
    };

    var _xchain = /*#__PURE__*/_curry2(function _xchain(f, xf) {
      return map$1(f, _flatCat(xf));
    });

    /**
     * `chain` maps a function over a list and concatenates the results. `chain`
     * is also known as `flatMap` in some libraries.
     *
     * Dispatches to the `chain` method of the second argument, if present,
     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
     *
     * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig Chain m => (a -> m b) -> m a -> m b
     * @param {Function} fn The function to map with
     * @param {Array} list The list to map over
     * @return {Array} The result of flat-mapping `list` with `fn`
     * @example
     *
     *      const duplicate = n => [n, n];
     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
     *
     *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
     */
    var chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {
      if (typeof monad === 'function') {
        return function (x) {
          return fn(monad(x))(x);
        };
      }
      return _makeFlat(false)(map$1(fn, monad));
    }));

    /**
     * Gives a single-word string description of the (native) type of a value,
     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
     * attempt to distinguish user Object types any further, reporting them all as
     * 'Object'.
     *
     * @func
     * @memberOf R
     * @since v0.8.0
     * @category Type
     * @sig (* -> {*}) -> String
     * @param {*} val The value to test
     * @return {String}
     * @example
     *
     *      R.type({}); //=> "Object"
     *      R.type(1); //=> "Number"
     *      R.type(false); //=> "Boolean"
     *      R.type('s'); //=> "String"
     *      R.type(null); //=> "Null"
     *      R.type([]); //=> "Array"
     *      R.type(/[A-z]/); //=> "RegExp"
     *      R.type(() => {}); //=> "Function"
     *      R.type(undefined); //=> "Undefined"
     */
    var type = /*#__PURE__*/_curry1(function type(val) {
      return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
    });

    /**
     * A function that returns the `!` of its argument. It will return `true` when
     * passed false-y value, and `false` when passed a truth-y one.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Logic
     * @sig * -> Boolean
     * @param {*} a any value
     * @return {Boolean} the logical inverse of passed argument.
     * @see R.complement
     * @example
     *
     *      R.not(true); //=> false
     *      R.not(false); //=> true
     *      R.not(0); //=> true
     *      R.not(1); //=> false
     */
    var not$1 = /*#__PURE__*/_curry1(function not(a) {
      return !a;
    });

    /**
     * Takes a function `f` and returns a function `g` such that if called with the same arguments
     * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
     *
     * `R.complement` may be applied to any functor
     *
     * @func
     * @memberOf R
     * @since v0.12.0
     * @category Logic
     * @sig (*... -> *) -> (*... -> Boolean)
     * @param {Function} f
     * @return {Function}
     * @see R.not
     * @example
     *
     *      const isNotNil = R.complement(R.isNil);
     *      isNil(null); //=> true
     *      isNotNil(null); //=> false
     *      isNil(7); //=> false
     *      isNotNil(7); //=> true
     */
    var complement = /*#__PURE__*/lift(not$1);

    function _pipe(f, g) {
      return function () {
        return g.call(this, f.apply(this, arguments));
      };
    }

    /**
     * This checks whether a function has a [methodname] function. If it isn't an
     * array it will execute that function otherwise it will default to the ramda
     * implementation.
     *
     * @private
     * @param {Function} fn ramda implemtation
     * @param {String} methodname property to check for a custom implementation
     * @return {Object} Whatever the return value of the method is.
     */
    function _checkForMethod(methodname, fn) {
      return function () {
        var length = arguments.length;
        if (length === 0) {
          return fn();
        }
        var obj = arguments[length - 1];
        return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
      };
    }

    /**
     * Returns the elements of the given list or string (or object with a `slice`
     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
     *
     * Dispatches to the `slice` method of the third argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig Number -> Number -> [a] -> [a]
     * @sig Number -> Number -> String -> String
     * @param {Number} fromIndex The start index (inclusive).
     * @param {Number} toIndex The end index (exclusive).
     * @param {*} list
     * @return {*}
     * @example
     *
     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
     *      R.slice(0, 3, 'ramda');                     //=> 'ram'
     */
    var slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
      return Array.prototype.slice.call(list, fromIndex, toIndex);
    }));

    /**
     * Returns all but the first element of the given list or string (or object
     * with a `tail` method).
     *
     * Dispatches to the `slice` method of the first argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.head, R.init, R.last
     * @example
     *
     *      R.tail([1, 2, 3]);  //=> [2, 3]
     *      R.tail([1, 2]);     //=> [2]
     *      R.tail([1]);        //=> []
     *      R.tail([]);         //=> []
     *
     *      R.tail('abc');  //=> 'bc'
     *      R.tail('ab');   //=> 'b'
     *      R.tail('a');    //=> ''
     *      R.tail('');     //=> ''
     */
    var tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));

    /**
     * Performs left-to-right function composition. The leftmost function may have
     * any arity; the remaining functions must be unary.
     *
     * In some libraries this function is named `sequence`.
     *
     * **Note:** The result of pipe is not automatically curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
     * @param {...Function} functions
     * @return {Function}
     * @see R.compose
     * @example
     *
     *      const f = R.pipe(Math.pow, R.negate, R.inc);
     *
     *      f(3, 4); // -(3^4) + 1
     * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
     */
    function pipe$1() {
      if (arguments.length === 0) {
        throw new Error('pipe requires at least one argument');
      }
      return _arity(arguments[0].length, reduce$1(_pipe, arguments[0], tail(arguments)));
    }

    /**
     * Returns a new list or string with the elements or characters in reverse
     * order.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {Array|String} list
     * @return {Array|String}
     * @example
     *
     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
     *      R.reverse([1, 2]);     //=> [2, 1]
     *      R.reverse([1]);        //=> [1]
     *      R.reverse([]);         //=> []
     *
     *      R.reverse('abc');      //=> 'cba'
     *      R.reverse('ab');       //=> 'ba'
     *      R.reverse('a');        //=> 'a'
     *      R.reverse('');         //=> ''
     */
    var reverse = /*#__PURE__*/_curry1(function reverse(list) {
      return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
    });

    /**
     * Performs right-to-left function composition. The rightmost function may have
     * any arity; the remaining functions must be unary.
     *
     * **Note:** The result of compose is not automatically curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
     * @param {...Function} ...functions The functions to compose
     * @return {Function}
     * @see R.pipe
     * @example
     *
     *      const classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
     *      const yellGreeting = R.compose(R.toUpper, classyGreeting);
     *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
     *
     *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
     *
     * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
     */
    function compose() {
      if (arguments.length === 0) {
        throw new Error('compose requires at least one argument');
      }
      return pipe$1.apply(this, reverse(arguments));
    }

    /**
     * Returns the nth element of the given list or string. If n is negative the
     * element at index length + n is returned.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Number -> [a] -> a | Undefined
     * @sig Number -> String -> String
     * @param {Number} offset
     * @param {*} list
     * @return {*}
     * @example
     *
     *      const list = ['foo', 'bar', 'baz', 'quux'];
     *      R.nth(1, list); //=> 'bar'
     *      R.nth(-1, list); //=> 'quux'
     *      R.nth(-99, list); //=> undefined
     *
     *      R.nth(2, 'abc'); //=> 'c'
     *      R.nth(3, 'abc'); //=> ''
     * @symb R.nth(-1, [a, b, c]) = c
     * @symb R.nth(0, [a, b, c]) = a
     * @symb R.nth(1, [a, b, c]) = b
     */
    var nth = /*#__PURE__*/_curry2(function nth(offset, list) {
      var idx = offset < 0 ? list.length + offset : offset;
      return _isString(list) ? list.charAt(idx) : list[idx];
    });

    /**
     * Returns the first element of the given list or string. In some libraries
     * this function is named `first`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> a | Undefined
     * @sig String -> String
     * @param {Array|String} list
     * @return {*}
     * @see R.tail, R.init, R.last
     * @example
     *
     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
     *      R.head([]); //=> undefined
     *
     *      R.head('abc'); //=> 'a'
     *      R.head(''); //=> ''
     */
    var head = /*#__PURE__*/nth(0);

    function _identity(x) {
      return x;
    }

    /**
     * A function that does nothing but return the parameter supplied to it. Good
     * as a default or placeholder function.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig a -> a
     * @param {*} x The value to return.
     * @return {*} The input value, `x`.
     * @example
     *
     *      R.identity(1); //=> 1
     *
     *      const obj = {};
     *      R.identity(obj) === obj; //=> true
     * @symb R.identity(a) = a
     */
    var identity$1 = /*#__PURE__*/_curry1(_identity);

    function _arrayFromIterator(iter) {
      var list = [];
      var next;
      while (!(next = iter.next()).done) {
        list.push(next.value);
      }
      return list;
    }

    function _includesWith(pred, x, list) {
      var idx = 0;
      var len = list.length;

      while (idx < len) {
        if (pred(x, list[idx])) {
          return true;
        }
        idx += 1;
      }
      return false;
    }

    function _functionName(f) {
      // String(x => x) evaluates to "x => x", so the pattern may not match.
      var match = String(f).match(/^function (\w*)/);
      return match == null ? '' : match[1];
    }

    // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    function _objectIs(a, b) {
      // SameValue algorithm
      if (a === b) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return a !== 0 || 1 / a === 1 / b;
      } else {
        // Step 6.a: NaN == NaN
        return a !== a && b !== b;
      }
    }

    var _objectIs$1 = typeof Object.is === 'function' ? Object.is : _objectIs;

    /**
     * private _uniqContentEquals function.
     * That function is checking equality of 2 iterator contents with 2 assumptions
     * - iterators lengths are the same
     * - iterators values are unique
     *
     * false-positive result will be returned for comparision of, e.g.
     * - [1,2,3] and [1,2,3,4]
     * - [1,1,1] and [1,2,3]
     * */

    function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
      var a = _arrayFromIterator(aIterator);
      var b = _arrayFromIterator(bIterator);

      function eq(_a, _b) {
        return _equals(_a, _b, stackA.slice(), stackB.slice());
      }

      // if *a* array contains any element that is not included in *b*
      return !_includesWith(function (b, aItem) {
        return !_includesWith(eq, aItem, b);
      }, b, a);
    }

    function _equals(a, b, stackA, stackB) {
      if (_objectIs$1(a, b)) {
        return true;
      }

      var typeA = type(a);

      if (typeA !== type(b)) {
        return false;
      }

      if (a == null || b == null) {
        return false;
      }

      if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
        return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
      }

      if (typeof a.equals === 'function' || typeof b.equals === 'function') {
        return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
      }

      switch (typeA) {
        case 'Arguments':
        case 'Array':
        case 'Object':
          if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
            return a === b;
          }
          break;
        case 'Boolean':
        case 'Number':
        case 'String':
          if (!(typeof a === typeof b && _objectIs$1(a.valueOf(), b.valueOf()))) {
            return false;
          }
          break;
        case 'Date':
          if (!_objectIs$1(a.valueOf(), b.valueOf())) {
            return false;
          }
          break;
        case 'Error':
          return a.name === b.name && a.message === b.message;
        case 'RegExp':
          if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
            return false;
          }
          break;
      }

      var idx = stackA.length - 1;
      while (idx >= 0) {
        if (stackA[idx] === a) {
          return stackB[idx] === b;
        }
        idx -= 1;
      }

      switch (typeA) {
        case 'Map':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
        case 'Set':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
        case 'Arguments':
        case 'Array':
        case 'Object':
        case 'Boolean':
        case 'Number':
        case 'String':
        case 'Date':
        case 'Error':
        case 'RegExp':
        case 'Int8Array':
        case 'Uint8Array':
        case 'Uint8ClampedArray':
        case 'Int16Array':
        case 'Uint16Array':
        case 'Int32Array':
        case 'Uint32Array':
        case 'Float32Array':
        case 'Float64Array':
        case 'ArrayBuffer':
          break;
        default:
          // Values of other types are only equal if identical.
          return false;
      }

      var keysA = keys(a);
      if (keysA.length !== keys(b).length) {
        return false;
      }

      var extendedStackA = stackA.concat([a]);
      var extendedStackB = stackB.concat([b]);

      idx = keysA.length - 1;
      while (idx >= 0) {
        var key = keysA[idx];
        if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
          return false;
        }
        idx -= 1;
      }
      return true;
    }

    /**
     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
     * cyclical data structures.
     *
     * Dispatches symmetrically to the `equals` methods of both arguments, if
     * present.
     *
     * @func
     * @memberOf R
     * @since v0.15.0
     * @category Relation
     * @sig a -> b -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      R.equals(1, 1); //=> true
     *      R.equals(1, '1'); //=> false
     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
     *
     *      const a = {}; a.v = a;
     *      const b = {}; b.v = b;
     *      R.equals(a, b); //=> true
     */
    var equals = /*#__PURE__*/_curry2(function equals(a, b) {
      return _equals(a, b, [], []);
    });

    function _indexOf(list, a, idx) {
      var inf, item;
      // Array.prototype.indexOf doesn't exist below IE9
      if (typeof list.indexOf === 'function') {
        switch (typeof a) {
          case 'number':
            if (a === 0) {
              // manually crawl the list to distinguish between +0 and -0
              inf = 1 / a;
              while (idx < list.length) {
                item = list[idx];
                if (item === 0 && 1 / item === inf) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            } else if (a !== a) {
              // NaN
              while (idx < list.length) {
                item = list[idx];
                if (typeof item === 'number' && item !== item) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            }
            // non-zero numbers can utilise Set
            return list.indexOf(a, idx);

          // all these types can utilise Set
          case 'string':
          case 'boolean':
          case 'function':
          case 'undefined':
            return list.indexOf(a, idx);

          case 'object':
            if (a === null) {
              // null can utilise Set
              return list.indexOf(a, idx);
            }
        }
      }
      // anything else not covered above, defer to R.equals
      while (idx < list.length) {
        if (equals(list[idx], a)) {
          return idx;
        }
        idx += 1;
      }
      return -1;
    }

    function _includes(a, list) {
      return _indexOf(list, a, 0) >= 0;
    }

    function _quote(s) {
      var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
      .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

      return '"' + escaped.replace(/"/g, '\\"') + '"';
    }

    /**
     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
     */
    var pad = function pad(n) {
      return (n < 10 ? '0' : '') + n;
    };

    var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
      return d.toISOString();
    } : function _toISOString(d) {
      return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
    };

    function _complement(f) {
      return function () {
        return !f.apply(this, arguments);
      };
    }

    function _filter(fn, list) {
      var idx = 0;
      var len = list.length;
      var result = [];

      while (idx < len) {
        if (fn(list[idx])) {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    }

    function _isObject(x) {
      return Object.prototype.toString.call(x) === '[object Object]';
    }

    var XFilter = /*#__PURE__*/function () {
      function XFilter(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFilter.prototype['@@transducer/init'] = _xfBase.init;
      XFilter.prototype['@@transducer/result'] = _xfBase.result;
      XFilter.prototype['@@transducer/step'] = function (result, input) {
        return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
      };

      return XFilter;
    }();

    var _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {
      return new XFilter(f, xf);
    });

    /**
     * Takes a predicate and a `Filterable`, and returns a new filterable of the
     * same type containing the members of the given filterable which satisfy the
     * given predicate. Filterable objects include plain objects or any object
     * that has a filter method such as `Array`.
     *
     * Dispatches to the `filter` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array} Filterable
     * @see R.reject, R.transduce, R.addIndex
     * @example
     *
     *      const isEven = n => n % 2 === 0;
     *
     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */
    var filter$1 = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {
      return _isObject(filterable) ? _reduce(function (acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }
        return acc;
      }, {}, keys(filterable)) :
      // else
      _filter(pred, filterable);
    }));

    /**
     * The complement of [`filter`](#filter).
     *
     * Acts as a transducer if a transformer is given in list position. Filterable
     * objects include plain objects or any object that has a filter method such
     * as `Array`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array}
     * @see R.filter, R.transduce, R.addIndex
     * @example
     *
     *      const isOdd = (n) => n % 2 === 1;
     *
     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */
    var reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {
      return filter$1(_complement(pred), filterable);
    });

    function _toString(x, seen) {
      var recur = function recur(y) {
        var xs = seen.concat([x]);
        return _includes(y, xs) ? '<Circular>' : _toString(y, xs);
      };

      //  mapPairs :: (Object, [String]) -> [String]
      var mapPairs = function (obj, keys$$1) {
        return _map(function (k) {
          return _quote(k) + ': ' + recur(obj[k]);
        }, keys$$1.slice().sort());
      };

      switch (Object.prototype.toString.call(x)) {
        case '[object Arguments]':
          return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
        case '[object Array]':
          return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
            return (/^\d+$/.test(k)
            );
          }, keys(x)))).join(', ') + ']';
        case '[object Boolean]':
          return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
        case '[object Date]':
          return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
        case '[object Null]':
          return 'null';
        case '[object Number]':
          return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
        case '[object String]':
          return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
        case '[object Undefined]':
          return 'undefined';
        default:
          if (typeof x.toString === 'function') {
            var repr = x.toString();
            if (repr !== '[object Object]') {
              return repr;
            }
          }
          return '{' + mapPairs(x, keys(x)).join(', ') + '}';
      }
    }

    /**
     * Returns the string representation of the given value. `eval`'ing the output
     * should result in a value equivalent to the input value. Many of the built-in
     * `toString` methods do not satisfy this requirement.
     *
     * If the given value is an `[object Object]` with a `toString` method other
     * than `Object.prototype.toString`, this method is invoked with no arguments
     * to produce the return value. This means user-defined constructor functions
     * can provide a suitable `toString` method. For example:
     *
     *     function Point(x, y) {
     *       this.x = x;
     *       this.y = y;
     *     }
     *
     *     Point.prototype.toString = function() {
     *       return 'new Point(' + this.x + ', ' + this.y + ')';
     *     };
     *
     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category String
     * @sig * -> String
     * @param {*} val
     * @return {String}
     * @example
     *
     *      R.toString(42); //=> '42'
     *      R.toString('abc'); //=> '"abc"'
     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
     */
    var toString$2 = /*#__PURE__*/_curry1(function toString(val) {
      return _toString(val, []);
    });

    /**
     * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
     * terms, to at least one element of the given list; `false` otherwise.
     * Works also with strings.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig a -> [a] -> Boolean
     * @param {Object} a The item to compare against.
     * @param {Array} list The array to consider.
     * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
     * @see R.includes
     * @deprecated since v0.26.0
     * @example
     *
     *      R.contains(3, [1, 2, 3]); //=> true
     *      R.contains(4, [1, 2, 3]); //=> false
     *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
     *      R.contains([42], [[42]]); //=> true
     *      R.contains('ba', 'banana'); //=>true
     */
    var contains$1 = /*#__PURE__*/_curry2(_includes);

    /**
     * Accepts a converging function and a list of branching functions and returns
     * a new function. The arity of the new function is the same as the arity of
     * the longest branching function. When invoked, this new function is applied
     * to some arguments, and each branching function is applied to those same
     * arguments. The results of each branching function are passed as arguments
     * to the converging function to produce the return value.
     *
     * @func
     * @memberOf R
     * @since v0.4.2
     * @category Function
     * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
     * @param {Function} after A function. `after` will be invoked with the return values of
     *        `fn1` and `fn2` as its arguments.
     * @param {Array} functions A list of functions.
     * @return {Function} A new function.
     * @see R.useWith
     * @example
     *
     *      const average = R.converge(R.divide, [R.sum, R.length])
     *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
     *
     *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
     *      strangeConcat("Yodel") //=> "YODELyodel"
     *
     * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
     */
    var converge = /*#__PURE__*/_curry2(function converge(after, fns) {
      return curryN(reduce$1(max$1, 0, pluck$1('length', fns)), function () {
        var args = arguments;
        var context = this;
        return after.apply(context, _map(function (fn) {
          return fn.apply(context, args);
        }, fns));
      });
    });

    var XReduceBy = /*#__PURE__*/function () {
      function XReduceBy(valueFn, valueAcc, keyFn, xf) {
        this.valueFn = valueFn;
        this.valueAcc = valueAcc;
        this.keyFn = keyFn;
        this.xf = xf;
        this.inputs = {};
      }
      XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
      XReduceBy.prototype['@@transducer/result'] = function (result) {
        var key;
        for (key in this.inputs) {
          if (_has(key, this.inputs)) {
            result = this.xf['@@transducer/step'](result, this.inputs[key]);
            if (result['@@transducer/reduced']) {
              result = result['@@transducer/value'];
              break;
            }
          }
        }
        this.inputs = null;
        return this.xf['@@transducer/result'](result);
      };
      XReduceBy.prototype['@@transducer/step'] = function (result, input) {
        var key = this.keyFn(input);
        this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
        this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
        return result;
      };

      return XReduceBy;
    }();

    var _xreduceBy = /*#__PURE__*/_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
      return new XReduceBy(valueFn, valueAcc, keyFn, xf);
    });

    /**
     * Groups the elements of the list according to the result of calling
     * the String-returning function `keyFn` on each element and reduces the elements
     * of each group to a single value via the reducer function `valueFn`.
     *
     * This function is basically a more general [`groupBy`](#groupBy) function.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.20.0
     * @category List
     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
     * @param {Function} valueFn The function that reduces the elements of each group to a single
     *        value. Receives two values, accumulator for a particular group and the current element.
     * @param {*} acc The (initial) accumulator value for each group.
     * @param {Function} keyFn The function that maps the list's element into a key.
     * @param {Array} list The array to group.
     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
     *         `valueFn` for elements which produced that key when passed to `keyFn`.
     * @see R.groupBy, R.reduce
     * @example
     *
     *      const groupNames = (acc, {name}) => acc.concat(name)
     *      const toGrade = ({score}) =>
     *        score < 65 ? 'F' :
     *        score < 70 ? 'D' :
     *        score < 80 ? 'C' :
     *        score < 90 ? 'B' : 'A'
     *
     *      var students = [
     *        {name: 'Abby', score: 83},
     *        {name: 'Bart', score: 62},
     *        {name: 'Curt', score: 88},
     *        {name: 'Dora', score: 92},
     *      ]
     *
     *      reduceBy(groupNames, [], toGrade, students)
     *      //=> {"A": ["Dora"], "B": ["Abby", "Curt"], "F": ["Bart"]}
     */
    var reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
      return _reduce(function (acc, elt) {
        var key = keyFn(elt);
        acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
        return acc;
      }, {}, list);
    }));

    /**
     * Counts the elements of a list according to how many match each value of a
     * key generated by the supplied function. Returns an object mapping the keys
     * produced by `fn` to the number of occurrences in the list. Note that all
     * keys are coerced to strings because of how JavaScript objects work.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig (a -> String) -> [a] -> {*}
     * @param {Function} fn The function used to map values to keys.
     * @param {Array} list The list to count elements from.
     * @return {Object} An object mapping keys to number of occurrences in the list.
     * @example
     *
     *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
     *
     *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];
     *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
     */
    var countBy = /*#__PURE__*/reduceBy(function (acc, elem) {
      return acc + 1;
    }, 0);

    /**
     * Decrements its argument.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number} n - 1
     * @see R.inc
     * @example
     *
     *      R.dec(42); //=> 41
     */
    var dec = /*#__PURE__*/add(-1);

    var _Set = /*#__PURE__*/function () {
      function _Set() {
        /* globals Set */
        this._nativeSet = typeof Set === 'function' ? new Set() : null;
        this._items = {};
      }

      // until we figure out why jsdoc chokes on this
      // @param item The item to add to the Set
      // @returns {boolean} true if the item did not exist prior, otherwise false
      //
      _Set.prototype.add = function (item) {
        return !hasOrAdd(item, true, this);
      };

      //
      // @param item The item to check for existence in the Set
      // @returns {boolean} true if the item exists in the Set, otherwise false
      //
      _Set.prototype.has = function (item) {
        return hasOrAdd(item, false, this);
      };

      //
      // Combines the logic for checking whether an item is a member of the set and
      // for adding a new item to the set.
      //
      // @param item       The item to check or add to the Set instance.
      // @param shouldAdd  If true, the item will be added to the set if it doesn't
      //                   already exist.
      // @param set        The set instance to check or add to.
      // @return {boolean} true if the item already existed, otherwise false.
      //
      return _Set;
    }();

    function hasOrAdd(item, shouldAdd, set) {
      var type = typeof item;
      var prevSize, newSize;
      switch (type) {
        case 'string':
        case 'number':
          // distinguish between +0 and -0
          if (item === 0 && 1 / item === -Infinity) {
            if (set._items['-0']) {
              return true;
            } else {
              if (shouldAdd) {
                set._items['-0'] = true;
              }
              return false;
            }
          }
          // these types can all utilise the native Set
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = {};
                set._items[type][item] = true;
              }
              return false;
            } else if (item in set._items[type]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][item] = true;
              }
              return false;
            }
          }

        case 'boolean':
          // set._items['boolean'] holds a two element array
          // representing [ falseExists, trueExists ]
          if (type in set._items) {
            var bIdx = item ? 1 : 0;
            if (set._items[type][bIdx]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][bIdx] = true;
              }
              return false;
            }
          } else {
            if (shouldAdd) {
              set._items[type] = item ? [false, true] : [true, false];
            }
            return false;
          }

        case 'function':
          // compare functions for reference equality
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = [item];
              }
              return false;
            }
            if (!_includes(item, set._items[type])) {
              if (shouldAdd) {
                set._items[type].push(item);
              }
              return false;
            }
            return true;
          }

        case 'undefined':
          if (set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type] = true;
            }
            return false;
          }

        case 'object':
          if (item === null) {
            if (!set._items['null']) {
              if (shouldAdd) {
                set._items['null'] = true;
              }
              return false;
            }
            return true;
          }
        /* falls through */
        default:
          // reduce the search size of heterogeneous sets by creating buckets
          // for each type.
          type = Object.prototype.toString.call(item);
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          // scan through all previously applied items
          if (!_includes(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
      }
    }

    /**
     * Removes the sub-list of `list` starting at index `start` and containing
     * `count` elements. _Note that this is not destructive_: it returns a copy of
     * the list with the changes.
     * <small>No lists have been harmed in the application of this function.</small>
     *
     * @func
     * @memberOf R
     * @since v0.2.2
     * @category List
     * @sig Number -> Number -> [a] -> [a]
     * @param {Number} start The position to start removing elements
     * @param {Number} count The number of elements to remove
     * @param {Array} list The list to remove from
     * @return {Array} A new Array with `count` elements from `start` removed.
     * @see R.without
     * @example
     *
     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
     */
    var remove = /*#__PURE__*/_curry3(function remove(start, count, list) {
      var result = Array.prototype.slice.call(list, 0);
      result.splice(start, count);
      return result;
    });

    var XTake = /*#__PURE__*/function () {
      function XTake(n, xf) {
        this.xf = xf;
        this.n = n;
        this.i = 0;
      }
      XTake.prototype['@@transducer/init'] = _xfBase.init;
      XTake.prototype['@@transducer/result'] = _xfBase.result;
      XTake.prototype['@@transducer/step'] = function (result, input) {
        this.i += 1;
        var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
        return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
      };

      return XTake;
    }();

    var _xtake = /*#__PURE__*/_curry2(function _xtake(n, xf) {
      return new XTake(n, xf);
    });

    /**
     * Returns the first `n` elements of the given list, string, or
     * transducer/transformer (or object with a `take` method).
     *
     * Dispatches to the `take` method of the second argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Number -> [a] -> [a]
     * @sig Number -> String -> String
     * @param {Number} n
     * @param {*} list
     * @return {*}
     * @see R.drop
     * @example
     *
     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
     *      R.take(3, 'ramda');               //=> 'ram'
     *
     *      const personnel = [
     *        'Dave Brubeck',
     *        'Paul Desmond',
     *        'Eugene Wright',
     *        'Joe Morello',
     *        'Gerry Mulligan',
     *        'Bob Bates',
     *        'Joe Dodge',
     *        'Ron Crotty'
     *      ];
     *
     *      const takeFive = R.take(5);
     *      takeFive(personnel);
     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
     * @symb R.take(-1, [a, b]) = [a, b]
     * @symb R.take(0, [a, b]) = []
     * @symb R.take(1, [a, b]) = [a]
     * @symb R.take(2, [a, b]) = [a, b]
     */
    var take$1 = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {
      return slice(0, n < 0 ? Infinity : n, xs);
    }));

    var XDropRepeatsWith = /*#__PURE__*/function () {
      function XDropRepeatsWith(pred, xf) {
        this.xf = xf;
        this.pred = pred;
        this.lastValue = undefined;
        this.seenFirstValue = false;
      }

      XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
      XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;
      XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
        var sameAsLast = false;
        if (!this.seenFirstValue) {
          this.seenFirstValue = true;
        } else if (this.pred(this.lastValue, input)) {
          sameAsLast = true;
        }
        this.lastValue = input;
        return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
      };

      return XDropRepeatsWith;
    }();

    var _xdropRepeatsWith = /*#__PURE__*/_curry2(function _xdropRepeatsWith(pred, xf) {
      return new XDropRepeatsWith(pred, xf);
    });

    /**
     * Returns the last element of the given list or string.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig [a] -> a | Undefined
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.init, R.head, R.tail
     * @example
     *
     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
     *      R.last([]); //=> undefined
     *
     *      R.last('abc'); //=> 'c'
     *      R.last(''); //=> ''
     */
    var last$1 = /*#__PURE__*/nth(-1);

    /**
     * Returns a new list without any consecutively repeating elements. Equality is
     * determined by applying the supplied predicate to each pair of consecutive elements. The
     * first element in a series of equal elements will be preserved.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category List
     * @sig ((a, a) -> Boolean) -> [a] -> [a]
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {Array} list The array to consider.
     * @return {Array} `list` without repeating elements.
     * @see R.transduce
     * @example
     *
     *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
     */
    var dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
      var result = [];
      var idx = 1;
      var len = list.length;
      if (len !== 0) {
        result[0] = list[0];
        while (idx < len) {
          if (!pred(last$1(result), list[idx])) {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
      }
      return result;
    }));

    /**
     * Returns a new list without any consecutively repeating elements.
     * [`R.equals`](#equals) is used to determine equality.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The array to consider.
     * @return {Array} `list` without repeating elements.
     * @see R.transduce
     * @example
     *
     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
     */
    var dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));

    /**
     * Returns the empty value of its argument's type. Ramda defines the empty
     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
     * types are supported if they define `<Type>.empty`,
     * `<Type>.prototype.empty` or implement the
     * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
     *
     * Dispatches to the `empty` method of the first argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category Function
     * @sig a -> a
     * @param {*} x
     * @return {*}
     * @example
     *
     *      R.empty(Just(42));      //=> Nothing()
     *      R.empty([1, 2, 3]);     //=> []
     *      R.empty('unicorns');    //=> ''
     *      R.empty({x: 1, y: 2});  //=> {}
     */
    var empty$2 = /*#__PURE__*/_curry1(function empty(x) {
      return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
        return arguments;
      }() : void 0 // else
      ;
    });

    /**
     * Returns a new list by pulling every item out of it (and all its sub-arrays)
     * and putting them in a new array, depth-first.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [b]
     * @param {Array} list The array to consider.
     * @return {Array} The flattened list.
     * @see R.unnest
     * @example
     *
     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
     */
    var flatten = /*#__PURE__*/_curry1( /*#__PURE__*/_makeFlat(true));

    /**
     * Returns a new function much like the supplied one, except that the first two
     * arguments' order is reversed.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
     * @param {Function} fn The function to invoke with its first two parameters reversed.
     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
     * @example
     *
     *      const mergeThree = (a, b, c) => [].concat(a, b, c);
     *
     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
     *
     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
     * @symb R.flip(f)(a, b, c) = f(b, a, c)
     */
    var flip = /*#__PURE__*/_curry1(function flip(fn) {
      return curryN(fn.length, function (a, b) {
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = b;
        args[1] = a;
        return fn.apply(this, args);
      });
    });

    /**
     * Splits a list into sub-lists stored in an object, based on the result of
     * calling a String-returning function on each element, and grouping the
     * results according to values returned.
     *
     * Dispatches to the `groupBy` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig (a -> String) -> [a] -> {String: [a]}
     * @param {Function} fn Function :: a -> String
     * @param {Array} list The array to group
     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
     *         that produced that key when passed to `fn`.
     * @see R.reduceBy, R.transduce
     * @example
     *
     *      const byGrade = R.groupBy(function(student) {
     *        const score = student.score;
     *        return score < 65 ? 'F' :
     *               score < 70 ? 'D' :
     *               score < 80 ? 'C' :
     *               score < 90 ? 'B' : 'A';
     *      });
     *      const students = [{name: 'Abby', score: 84},
     *                      {name: 'Eddy', score: 58},
     *                      // ...
     *                      {name: 'Jack', score: 69}];
     *      byGrade(students);
     *      // {
     *      //   'A': [{name: 'Dianne', score: 99}],
     *      //   'B': [{name: 'Abby', score: 84}]
     *      //   // ...,
     *      //   'F': [{name: 'Eddy', score: 58}]
     *      // }
     */
    var groupBy$1 = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {
      if (acc == null) {
        acc = [];
      }
      acc.push(item);
      return acc;
    }, null)));

    /**
     * Increments its argument.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number} n + 1
     * @see R.dec
     * @example
     *
     *      R.inc(42); //=> 43
     */
    var inc = /*#__PURE__*/add(1);

    /**
     * Given a function that generates a key, turns a list of objects into an
     * object indexing the objects by the given key. Note that if multiple
     * objects generate the same value for the indexing key only the last value
     * will be included in the generated object.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.19.0
     * @category List
     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
     * @param {Function} fn Function :: a -> String
     * @param {Array} array The array of objects to index
     * @return {Object} An object indexing each array element by the given property.
     * @example
     *
     *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
     *      R.indexBy(R.prop('id'), list);
     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
     */
    var indexBy = /*#__PURE__*/reduceBy(function (acc, elem) {
      return elem;
    }, null);

    /**
     * Returns all but the last element of the given list or string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.last, R.head, R.tail
     * @example
     *
     *      R.init([1, 2, 3]);  //=> [1, 2]
     *      R.init([1, 2]);     //=> [1]
     *      R.init([1]);        //=> []
     *      R.init([]);         //=> []
     *
     *      R.init('abc');  //=> 'ab'
     *      R.init('ab');   //=> 'a'
     *      R.init('a');    //=> ''
     *      R.init('');     //=> ''
     */
    var init = /*#__PURE__*/slice(0, -1);

    /**
     * Inserts the supplied element into the list, at the specified `index`. _Note that

     * this is not destructive_: it returns a copy of the list with the changes.
     * <small>No lists have been harmed in the application of this function.</small>
     *
     * @func
     * @memberOf R
     * @since v0.2.2
     * @category List
     * @sig Number -> a -> [a] -> [a]
     * @param {Number} index The position to insert the element
     * @param {*} elt The element to insert into the Array
     * @param {Array} list The list to insert into
     * @return {Array} A new Array with `elt` inserted at `index`.
     * @example
     *
     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
     */
    var insert = /*#__PURE__*/_curry3(function insert(idx, elt, list) {
      idx = idx < list.length && idx >= 0 ? idx : list.length;
      var result = Array.prototype.slice.call(list, 0);
      result.splice(idx, 0, elt);
      return result;
    });

    /**
     * Returns a new list containing only one copy of each element in the original
     * list, based upon the value returned by applying the supplied function to
     * each list element. Prefers the first item if the supplied function produces
     * the same value on two items. [`R.equals`](#equals) is used for comparison.
     *
     * @func
     * @memberOf R
     * @since v0.16.0
     * @category List
     * @sig (a -> b) -> [a] -> [a]
     * @param {Function} fn A function used to produce a value to use during comparisons.
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
     */
    var uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {
      var set = new _Set();
      var result = [];
      var idx = 0;
      var appliedItem, item;

      while (idx < list.length) {
        item = list[idx];
        appliedItem = fn(item);
        if (set.add(appliedItem)) {
          result.push(item);
        }
        idx += 1;
      }
      return result;
    });

    /**
     * Returns a new list containing only one copy of each element in the original
     * list. [`R.equals`](#equals) is used to determine equality.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
     *      R.uniq([1, '1']);     //=> [1, '1']
     *      R.uniq([[42], [42]]); //=> [[42]]
     */
    var uniq = /*#__PURE__*/uniqBy(identity$1);

    /**
     * Turns a named method with a specified arity into a function that can be
     * called directly supplied with arguments and a target object.
     *
     * The returned function is curried and accepts `arity + 1` parameters where
     * the final parameter is the target object.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
     * @param {Number} arity Number of arguments the returned function should take
     *        before the target object.
     * @param {String} method Name of the method to call.
     * @return {Function} A new curried function.
     * @see R.construct
     * @example
     *
     *      const sliceFrom = R.invoker(1, 'slice');
     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
     *      const sliceFrom6 = R.invoker(2, 'slice')(6);
     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
     * @symb R.invoker(0, 'method')(o) = o['method']()
     * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
     * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
     */
    var invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {
      return curryN(arity + 1, function () {
        var target = arguments[arity];
        if (target != null && _isFunction(target[method])) {
          return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
        }
        throw new TypeError(toString$2(target) + ' does not have a method named "' + method + '"');
      });
    });

    /**
     * See if an object (`val`) is an instance of the supplied constructor. This
     * function will check up the inheritance chain, if any.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category Type
     * @sig (* -> {*}) -> a -> Boolean
     * @param {Object} ctor A constructor
     * @param {*} val The value to test
     * @return {Boolean}
     * @example
     *
     *      R.is(Object, {}); //=> true
     *      R.is(Number, 1); //=> true
     *      R.is(Object, 1); //=> false
     *      R.is(String, 's'); //=> true
     *      R.is(String, new String('')); //=> true
     *      R.is(Object, new String('')); //=> true
     *      R.is(Object, 's'); //=> false
     *      R.is(Number, {}); //=> false
     */
    var is = /*#__PURE__*/_curry2(function is(Ctor, val) {
      return val != null && val.constructor === Ctor || val instanceof Ctor;
    });

    /**
     * Returns `true` if the given value is its type's empty value; `false`
     * otherwise.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Logic
     * @sig a -> Boolean
     * @param {*} x
     * @return {Boolean}
     * @see R.empty
     * @example
     *
     *      R.isEmpty([1, 2, 3]);   //=> false
     *      R.isEmpty([]);          //=> true
     *      R.isEmpty('');          //=> true
     *      R.isEmpty(null);        //=> false
     *      R.isEmpty({});          //=> true
     *      R.isEmpty({length: 0}); //=> false
     */
    var isEmpty$1 = /*#__PURE__*/_curry1(function isEmpty(x) {
      return x != null && equals(x, empty$2(x));
    });

    /**
     * Returns a string made by inserting the `separator` between each element and
     * concatenating all the elements into a single string.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig String -> [a] -> String
     * @param {Number|String} separator The string used to separate the elements.
     * @param {Array} xs The elements to join into a string.
     * @return {String} str The string made by concatenating `xs` with `separator`.
     * @see R.split
     * @example
     *
     *      const spacer = R.join(' ');
     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
     */
    var join = /*#__PURE__*/invoker(1, 'join');

    /**
     * juxt applies a list of functions to a list of values.
     *
     * @func
     * @memberOf R
     * @since v0.19.0
     * @category Function
     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
     * @param {Array} fns An array of functions
     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
     * @see R.applySpec
     * @example
     *
     *      const getRange = R.juxt([Math.min, Math.max]);
     *      getRange(3, 4, 9, -3); //=> [-3, 9]
     * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
     */
    var juxt = /*#__PURE__*/_curry1(function juxt(fns) {
      return converge(function () {
        return Array.prototype.slice.call(arguments, 0);
      }, fns);
    });

    function _isNumber(x) {
      return Object.prototype.toString.call(x) === '[object Number]';
    }

    /**
     * Returns the number of elements in the array by returning `list.length`.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig [a] -> Number
     * @param {Array} list The array to inspect.
     * @return {Number} The length of the array.
     * @example
     *
     *      R.length([]); //=> 0
     *      R.length([1, 2, 3]); //=> 3
     */
    var length = /*#__PURE__*/_curry1(function length(list) {
      return list != null && _isNumber(list.length) ? list.length : NaN;
    });

    /**
     * Adds together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The sum of all the numbers in the list.
     * @see R.reduce
     * @example
     *
     *      R.sum([2,4,6,8,100,1]); //=> 121
     */
    var sum = /*#__PURE__*/reduce$1(add, 0);

    /**
     * Multiplies two numbers. Equivalent to `a * b` but curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The first value.
     * @param {Number} b The second value.
     * @return {Number} The result of `a * b`.
     * @see R.divide
     * @example
     *
     *      const double = R.multiply(2);
     *      const triple = R.multiply(3);
     *      double(3);       //=>  6
     *      triple(4);       //=> 12
     *      R.multiply(2, 5);  //=> 10
     */
    var multiply = /*#__PURE__*/_curry2(function multiply(a, b) {
      return a * b;
    });

    function _createPartialApplicator(concat) {
      return _curry2(function (fn, args) {
        return _arity(Math.max(0, fn.length - args.length), function () {
          return fn.apply(this, concat(args, arguments));
        });
      });
    }

    /**
     * Takes a function `f` and a list of arguments, and returns a function `g`.
     * When applied, `g` returns the result of applying `f` to the arguments
     * provided to `g` followed by the arguments provided initially.
     *
     * @func
     * @memberOf R
     * @since v0.10.0
     * @category Function
     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
     * @param {Function} f
     * @param {Array} args
     * @return {Function}
     * @see R.partial
     * @example
     *
     *      const greet = (salutation, title, firstName, lastName) =>
     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
     *
     *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
     *
     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
     * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
     */
    var partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));

    /**
     * Takes a predicate and a list or other `Filterable` object and returns the
     * pair of filterable objects of the same type of elements which do and do not
     * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
     * that has a filter method such as `Array`.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
     * @param {Function} pred A predicate to determine which side the element belongs to.
     * @param {Array} filterable the list (or other filterable) to partition.
     * @return {Array} An array, containing first the subset of elements that satisfy the
     *         predicate, and second the subset of elements that do not satisfy.
     * @see R.filter, R.reject
     * @example
     *
     *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);
     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
     *
     *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
     */
    var partition$1 = /*#__PURE__*/juxt([filter$1, reject]);

    /**
     * Similar to `pick` except that this one includes a `key: undefined` pair for
     * properties that don't exist.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig [k] -> {k: v} -> {k: v}
     * @param {Array} names an array of String property names to copy onto a new object
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with only properties from `names` on it.
     * @see R.pick
     * @example
     *
     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
     */
    var pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {
      var result = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        var name = names[idx];
        result[name] = obj[name];
        idx += 1;
      }
      return result;
    });

    /**
     * Multiplies together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The product of all the numbers in the list.
     * @see R.reduce
     * @example
     *
     *      R.product([2,4,6,8,100,1]); //=> 38400
     */
    var product = /*#__PURE__*/reduce$1(multiply, 1);

    /**
     * Accepts a function `fn` and a list of transformer functions and returns a
     * new curried function. When the new function is invoked, it calls the
     * function `fn` with parameters consisting of the result of calling each
     * supplied handler on successive arguments to the new function.
     *
     * If more arguments are passed to the returned function than transformer
     * functions, those arguments are passed directly to `fn` as additional
     * parameters. If you expect additional arguments that don't need to be
     * transformed, although you can ignore them, it's best to pass an identity
     * function so that the new function reports the correct arity.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
     * @param {Function} fn The function to wrap.
     * @param {Array} transformers A list of transformer functions
     * @return {Function} The wrapped function.
     * @see R.converge
     * @example
     *
     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
     * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
     */
    var useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {
      return curryN(transformers.length, function () {
        var args = [];
        var idx = 0;
        while (idx < transformers.length) {
          args.push(transformers[idx].call(this, arguments[idx]));
          idx += 1;
        }
        return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
      });
    });

    /**
     * Reasonable analog to SQL `select` statement.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @category Relation
     * @sig [k] -> [{k: v}] -> [{k: v}]
     * @param {Array} props The property names to project
     * @param {Array} objs The objects to query
     * @return {Array} An array of objects with just the `props` properties.
     * @example
     *
     *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
     *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
     *      const kids = [abby, fred];
     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
     */
    var project = /*#__PURE__*/useWith(_map, [pickAll, identity$1]); // passing `identity` gives correct arity

    /**
     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Number -> Number -> [Number]
     * @param {Number} from The first number in the list.
     * @param {Number} to One more than the last number in the list.
     * @return {Array} The list of numbers in the set `[a, b)`.
     * @example
     *
     *      R.range(1, 5);    //=> [1, 2, 3, 4]
     *      R.range(50, 53);  //=> [50, 51, 52]
     */
    var range$1 = /*#__PURE__*/_curry2(function range(from, to) {
      if (!(_isNumber(from) && _isNumber(to))) {
        throw new TypeError('Both arguments to range must be numbers');
      }
      var result = [];
      var n = from;
      while (n < to) {
        result.push(n);
        n += 1;
      }
      return result;
    });

    /**
     * Splits a string into an array of strings based on the given
     * separator.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category String
     * @sig (String | RegExp) -> String -> [String]
     * @param {String|RegExp} sep The pattern.
     * @param {String} str The string to separate into an array.
     * @return {Array} The array of strings from `str` separated by `str`.
     * @see R.join
     * @example
     *
     *      const pathComponents = R.split('/');
     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
     *
     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
     */
    var split = /*#__PURE__*/invoker(1, 'split');

    /**
     * Checks if a list starts with the provided sublist.
     *
     * Similarly, checks if a string starts with the provided substring.
     *
     * @func
     * @memberOf R
     * @since v0.24.0
     * @category List
     * @sig [a] -> [a] -> Boolean
     * @sig String -> String -> Boolean
     * @param {*} prefix
     * @param {*} list
     * @return {Boolean}
     * @see R.endsWith
     * @example
     *
     *      R.startsWith('a', 'abc')                //=> true
     *      R.startsWith('b', 'abc')                //=> false
     *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
     *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
     */
    var startsWith = /*#__PURE__*/_curry2(function (prefix, list) {
      return equals(take$1(prefix.length, list), prefix);
    });

    /**
     * The lower case version of a string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to lower case.
     * @return {String} The lower case version of `str`.
     * @see R.toUpper
     * @example
     *
     *      R.toLower('XYZ'); //=> 'xyz'
     */
    var toLower = /*#__PURE__*/invoker(0, 'toLowerCase');

    /**
     * The upper case version of a string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to upper case.
     * @return {String} The upper case version of `str`.
     * @see R.toLower
     * @example
     *
     *      R.toUpper('abc'); //=> 'ABC'
     */
    var toUpper = /*#__PURE__*/invoker(0, 'toUpperCase');

    /**
     * Initializes a transducer using supplied iterator function. Returns a single
     * item by iterating through the list, successively calling the transformed
     * iterator function and passing it an accumulator value and the current value
     * from the array, and then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*. It will be
     * wrapped as a transformer to initialize the transducer. A transformer can be
     * passed directly in place of an iterator function. In both cases, iteration
     * may be stopped early with the [`R.reduced`](#reduced) function.
     *
     * A transducer is a function that accepts a transformer and returns a
     * transformer and can be composed directly.
     *
     * A transformer is an an object that provides a 2-arity reducing iterator
     * function, step, 0-arity initial value function, init, and 1-arity result
     * extraction function, result. The step function is used as the iterator
     * function in reduce. The result function is used to convert the final
     * accumulator into the return type and in most cases is
     * [`R.identity`](#identity). The init function can be used to provide an
     * initial accumulator, but is ignored by transduce.
     *
     * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
     *
     * @func
     * @memberOf R
     * @since v0.12.0
     * @category List
     * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array. Wrapped as transformer, if necessary, and used to
     *        initialize the transducer
     * @param {*} acc The initial accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @see R.reduce, R.reduced, R.into
     * @example
     *
     *      const numbers = [1, 2, 3, 4];
     *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
     *
     *      const isOdd = (x) => x % 2 === 1;
     *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
     *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
     */
    var transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {
      return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
    });

    var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
    var zeroWidth = '\u200b';
    var hasProtoTrim = typeof String.prototype.trim === 'function';
    /**
     * Removes (strips) whitespace from both ends of the string.
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to trim.
     * @return {String} Trimmed version of `str`.
     * @example
     *
     *      R.trim('   xyz  '); //=> 'xyz'
     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
     */
    var trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? /*#__PURE__*/_curry1(function trim(str) {
      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
      return str.replace(beginRx, '').replace(endRx, '');
    }) : /*#__PURE__*/_curry1(function trim(str) {
      return str.trim();
    });

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of the elements
     * of each list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig [*] -> [*] -> [*]
     * @param {Array} as The first list.
     * @param {Array} bs The second list.
     * @return {Array} The first and second lists concatenated, with
     *         duplicates removed.
     * @example
     *
     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
     */
    var union = /*#__PURE__*/_curry2( /*#__PURE__*/compose(uniq, _concat));

    /**
     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig Chain c => c (c a) -> c a
     * @param {*} list
     * @return {*}
     * @see R.flatten, R.chain
     * @example
     *
     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
     */
    var unnest = /*#__PURE__*/chain(_identity);

    /**
     * Creates a new list out of the two supplied by pairing up equally-positioned
     * items from both lists. The returned list is truncated to the length of the
     * shorter of the two input lists.
     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [b] -> [[a,b]]
     * @param {Array} list1 The first array to consider.
     * @param {Array} list2 The second array to consider.
     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
     * @example
     *
     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
     * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
     */
    var zip$2 = /*#__PURE__*/_curry2(function zip(a, b) {
      var rv = [];
      var idx = 0;
      var len = Math.min(a.length, b.length);
      while (idx < len) {
        rv[idx] = [a[idx], b[idx]];
        idx += 1;
      }
      return rv;
    });

    /**
     * Creates a new object out of a list of keys and a list of values.
     * Key/value pairing is truncated to the length of the shorter of the two lists.
     * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig [String] -> [*] -> {String: *}
     * @param {Array} keys The array that will be properties on the output object.
     * @param {Array} values The list of values on the output object.
     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
     * @example
     *
     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
     */
    var zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {
      var idx = 0;
      var len = Math.min(keys.length, values.length);
      var out = {};
      while (idx < len) {
        out[keys[idx]] = values[idx];
        idx += 1;
      }
      return out;
    });

    // import * as rxjs from 'rxjs';


    function keyValueMerger(keys$$1, values$$1) {
        let tmpObj = {};
        keys$$1.forEach((key, i) => tmpObj[key] = values$$1[i]);
        return tmpObj;
    }


     function setFactory({value, period, key}) {

        let set$$1 = {};

        if (key === 'fill') {
            for (let i = 0; i < period; i++) {
                set$$1[i] = value;    
            } 
        } else {
            for (let i = 0; i < period; i++) {
                set$$1[i] = 0;
            } 
            set$$1[key] = value;
        }

        return set$$1;
    }



    function setsPeriodOperator({sets, mode}) {

        let acc = 0;

        if (mode === 'multiply') {
            acc = 1;
        }

        let setKeys = Object.keys(sets[0]);

        let setValues = setKeys.map(setKey => {
            return sets.reduce((acc, set$$1, index) => {
                if (isNaN(Number(set$$1[setKey]))) {
                    return acc;
                } else {

                    if(mode === 'subtract' && index > 0) {
                        return acc = acc - Number(set$$1[setKey]);
                    } else if (mode === 'multiply') {
                        return acc = acc * Number(set$$1[setKey]);
                    } else {
                        return acc = acc + Number(set$$1[setKey]);
                    } 
                }
                
            }, acc);
        });

        return keyValueMerger(setKeys, setValues);
    }


    function setCompounder({set: set$$1, growthRate}) {
        return keyValueMerger(Object.keys(set$$1), Object.values(set$$1).map((value, index) => {
            return value * Math.pow((1 + Number(growthRate)), (index + 1));
        }));
    }


    function zipAndOperateSetsFactory(mode) {
        return function(maintOwnSets) {
            let setsPeriodOperatorData = {
                sets: isEmpty$1(maintOwnSets) ? setMaker({value: 0, period: 10, key: 0}) : maintOwnSets,
                mode: mode
            };
        
            return setsPeriodOperator(setsPeriodOperatorData);
        }
    }

    function setMaker({value, period, key}) {
        let setFactoryData = {
            value: value,
            period: period,
            key: key
        };

        return setFactory(setFactoryData)
    }


    function compoundedSetMaker({value, period, growthRate, key}) {
        let setFactoryData = {
            value: value,
            period: period,
            key: key
        };

        let setCompounderdata = {
            set: setFactory(setFactoryData),
            growthRate: growthRate
        };
        return setCompounder(setCompounderdata)
    }

    function getElement(name, item, index, arr) {
        // this.selectedmenu = 0;
        // this.selected = 0;

        switch(name) {
            case 'x-grid':
            return html`<x-grid .props=${item.json_schema} type="bar" class="${item.ui_schema.ui_classnames}-${index % 5}" @gridchanged="${e => this.gridChangedHandler(e, index)}"></x-grid>`

            case 'x-gridbox':
            return html`<x-gridbox .props=${item.json_schema} type="bar" class="${item.ui_schema.ui_classnames}-${index % 5}" @gridchanged="${e => this.gridChangedHandler(e, index)}"></x-gridbox>`


            case 'x-chart':
            return html`<x-chart .props=${item.json_schema} type="bar" class="${item.ui_schema.ui_classnames}-${index % 2}"></x-chart>`

            case 'x-main':
            return html`<x-main .props=${item.json_schema} scenario=${this.scenario} @scenariochanged="${e => this.scenarioChangedHandler(e)}" @tablechanged="${(e) => this.tableChangedHandler(e)}" @addrowchanged="${e => this.addRowChangedHandler(e)}" @removerowchanged="${e => this.removeRowChangedHandler(e)}" @rowchanged="${e => this.rowChangedHandler(e)}"  @gridchanged="${e => this.gridChangedHandler(e)}" @tablepagingchanged="${e => this.tablePagingChangedHandler(e)}"></x-main>
        `
            case 'x-header':
            return html`<x-header class="header" .props=${item.json_schema} selected=${this.selectedmenu} @menuchanged="${(event) => this.menuchangedHandler(event)}" @loggedout="${(event) => this.loggedoutHandler(event)}" @loggedin="${(event) => this.loggedinHandler(event)}"></x-header>
        `



            case 'x-menulogin':
            return html`<x-menulogin .props=${item.json_schema} @menuchanged="${(event) => this.menuchangedHandler(event)}"></x-menulogin>`

            case 'x-assumption-row-comment':
            return html`<div>${item.data_schema}</div>`

            case 'x-assumption-row-label':
            return html`<div>${this.removehidden ? html`<img src="../images/minus.svg" class="svg hidden" @click="${() => this.removeClickHandler()}">` : html``}${this.remove ? html`<img src="../images/minus.svg" class="svg" @click="${() => this.removeClickHandler()}">` : html``}${this.add ? html`<img src="../images/add-circular-outlined-button.svg" class="svg" @click="${() => this.addClickHandler()}">` : html``}${item.data_schema}</div>`

            case 'x-table-row-label':
            return html`
        <div class="label ${item.ui_schema.ui_options.color == 'header' ? 'header' : ''} ${item.ui_schema.ui_options.type == 'sum' ? 'label--sum' : ''}">${item.data_schema}</div>`

            // case 'x-rowslabel-label':
            // return html`
            // <div class="rowslabel">${item.data_schema}</div>
            // `
            case 'x-assumption-row':
            return html`<x-assumption-row
        class="${item.ui_schema.ui_classnames}"  
        ?remove=${length(arr.json_schema) > 2 && index % 2 === 0 && this.button.data_schema ? true : false}
        ?removehidden=${length(arr.json_schema) <= 2 && index % 2 === 0 && this.button.data_schema ? true : false}  
        ?add=${index % 2 !== 0 && this.button.data_schema ? true : false} 
        index=${index} 
        .props=${is(Array, item.json_schema) ? item.json_schema : item} 
        @removerow="${() => this.removeRowHandler(index)}" @addrow="${() => this.addRowHandler(index)}" 
        @rowchanged="${(event) => this.rowChangedHandler(event, index)}">
    </x-assumption-row>`

            case 'x-subheader':
            return html`<x-subheader class="${item.ui_schema.ui_classnames}" .props=${item.json_schema} @scenariochanged="${(e) => this.scenarioChangedHandler(e)}"></x-subheader>`


            case 'x-main-header':
            return html`<x-main-header class="${item.ui_schema.ui_classnames}" .props=${item.json_schema} ?page=${item.ui_schema.ui_options.page} @tablepagingchanged="${() => this.tablePagingChangedHandler()}"></x-main-header>`;

            case 'x-rowsandlabel':
            return html`<x-rowsandlabel class="${item.ui_schema.ui_classnames}" .props=${item.json_schema} selected=${this.selectedscenario} @rowchanged="${(event) => this.rowChangedHandler(event, index)}" @addrowchanged="${(event) => this.addRowChangedHandler(event, index)}" @removerowchanged="${(event) => this.removeRowChangedHandler(event, index)}"></x-rowsandlabel>`;

            case 'x-table-row':
            return html`<x-table-row class="${item.ui_schema.ui_classnames}" .props=${item.json_schema} @rowchanged="${(event) => this.rowChangedHandler(event, index)}"></x-table-row>`

            case 'x-table':
            return html`<x-table class="${item.ui_schema.ui_classnames}" .props=${item.json_schema} @tablechanged="${(event) => this.tableChangedHandler(event, index)}"></x-table>`

            case 'x-input':
            return html`<x-input class="${item.ui_schema.ui_classnames}" .props=${item} @cellchanged="${item.ui_schema.ui_actions && item.ui_schema.ui_actions.changeevent ? (event) => this.cellChangedHandler(event, index) : ''}"></x-input>`;

            case 'x-button':
            return html`<x-button class="${item.ui_schema.ui_classnames}" .props=${item} @click="${() => this.scenarioChangedHandler(index)}"></x-button>`;

            case 'x-menu-button':
            return html`<x-menu-button class="${item.ui_schema.ui_classnames}" .props=${item} @menuchanged="${() => this.menuchangedHandler(index)}"></x-menu-button>`;
            
            case 'x-icon':
            return html`<x-icon class="${item.ui_schema.ui_classnames}" .props=${item} @loggedout="${(e) => this.loggedoutHandler(e)}"  @loggedin="${(e) => this.loggedinHandler(e)}"></x-icon>`;
            
            case 'x-login':
            return html`<x-login .props=${item}></x-login>`

        }
    }


    function getData(value, index) {
        switch(value) {
            case 'color':
            return +this.scenario - 1 == index ? 'grey' : 'none'
            case 'page':
            return +this.page
            case 'selected':
            return +this.scenario - 1 == index ? true : false
            case 'selectedmenu':
            return +this.selectedmenu == index ? true : false
            default:
            return this.period.map((element, index) => {
                let fn = getFunction.call(this, value)["fn"];
                let prop$$1 = getFunction.call(this, value)["prop"];
                return fn(
                  element,
                  prop$$1,
                  index,
                  this.period
                );
              });
        }

      }

    async function recurse(item) {
        if(item.json_schema.type == 'String') {
            return await item.json_schema;
        }

        if(item.json_schema.type == 'Number') {
            return await item.json_schema;
        }

        if(item.json_schema.type == 'Boolean') {
            return await item.json_schema
        }

        if(item.json_schema.type == 'Array') {
            let orderedproperties = await Promise.all(item.data_schema.map(async (element, index) => {

                let ui_schema = {...item.ui_schema, merged: item.ui_schema.ui_merged ? item.ui_schema.ui_merged : false};
                
                if(ui_schema.ui_options) {
                    let values$$1 = await Promise.all(Object.keys(ui_schema.ui_options).map(async(key) => {

                        if(ui_schema.ui_options[key].fn) {
                            return await this[ui_schema.ui_options[key].fn].call(this, ui_schema.ui_options[key].parameter, index)
                        } else {
                            return await ui_schema.ui_options[key]
                        }
                    }));

                    
                    ui_schema = {...ui_schema, ui_options: zipObj(Object.keys(ui_schema.ui_options), values$$1)};

                    return await {...item, data_schema: item.data_schema[index], json_schema: item.json_schema.items, ui_schema: {...ui_schema, index: index}}   


                } else {
                    return await {...item, data_schema: item.data_schema[index], json_schema: item.json_schema.items, ui_schema: {...ui_schema, index: index}}   


                }

                // if(ui_schema.ui_options) {
                //     Object.keys(ui_schema.ui_options).forEach(async(key) => {
                //         if(ui_schema.ui_options[key].fn) {
                //             ui_schema = {...ui_schema, ui_options: {...ui_schema.ui_options, [key]: await this[ui_schema.ui_options[key].fn].call(this, ui_schema.ui_options[key].parameter, index)}}
                //         }
                //     })
                // }


            }));
            let respons = await Promise.all(orderedproperties.map(async(orderedproperty) => {
                return await {...orderedproperty, type: orderedproperty.json_schema.type, json_schema: await recurse.call(this, orderedproperty)};
            }));

            // console.log('RESPONS IN ARRAY', respons)

            return respons
        }
        
        if(item.json_schema.type == 'Object') {
            
            let orderedproperties = await Promise.all(item.ui_schema.ui_order.map(async(element, index) => {   
                    
                if(item.data_schema[element].fn) {
                    item.data_schema[element] = await this[item.data_schema[element].fn].call(this, item.data_schema[element].parameter);
                    return await {json_schema: {...item.json_schema.properties[element]}, name: element, ui_schema: {...item.ui_schema[element], name: element, merged: item.ui_schema.ui_merged ? item.ui_schema.ui_merged : false}, data_schema: item.data_schema[element]}

                } else {
                    return await {json_schema: {...item.json_schema.properties[element]}, name: element, ui_schema: {...item.ui_schema[element], name: element, merged: item.ui_schema.ui_merged ? item.ui_schema.ui_merged : false}, data_schema: item.data_schema[element]}
                }
            }));

            let respons = await Promise.all(orderedproperties.map(async(orderedproperty) => {
                return await {...orderedproperty, type: orderedproperty.json_schema.type, json_schema: await recurse.call(this, orderedproperty)}
            }));

            // console.log('RESPONS IN OBJECT', respons)

            return respons
        }
    }







    const rx = {
        latestCombiner: function(streams) {
            return combineLatest(...streams);
        },
        undefinedElementRemover: mergeMap(val => {
            let j = 0;
            if (val.length) {
                for(var i = 0; i < val.length; i++) {
                    if(val[i] === undefined) {
                        j = 1;
                    }
                }
            }

            if (j === 1) {
                return empty$1();
            } else {
                return of(val); 
            }
        }),
        zip: map((val) => {
            return zip$2(val[0], val[1]);
        }),
        singleMultiplier: mergeMap(x => {
            return of(x.reduce((acc, item) => acc*Number(item), 1));
          }),
        setMaker: mergeMap(values$$1 => {
            return of(setMaker({value: values$$1[0], period: values$$1[1], key: values$$1[2]}))
        }),
        compoundedSetMaker: mergeMap(values$$1 => {
            return of(compoundedSetMaker({value: values$$1[0], period: values$$1[1], growthRate: values$$1[2], key: 'fill'}))
        }),
        zipAndMultiplySets: mergeMap(sets => {
            return of(zipAndOperateSetsFactory('multiply')(sets))
        }),
        zipAndAddSets: mergeMap(sets => {
            return of(zipAndOperateSetsFactory('add')(sets))
        }),
        zipAndSubtractSets: mergeMap(sets => {
            return of(zipAndOperateSetsFactory('subtract')(sets))
        }),
        setMakerPeriod: function(period) {
            return mergeMap(values$$1 => {


                // let testArr = values.map(value => {
                //     return setMaker({value: value[1], period: period, key: value[0]})
                // })

                return of(values$$1.map(value => {
                    return setMaker({value: value[1], period: period, key: value[0]})
                }))

                //return of(testArr);


                //return of([setMaker({value: values[0][1], period: period, key: values[0][0]}), setMaker({value: values[1][1], period: period, key: values[1][0]}), setMaker({value: values[2][1], period: period, key: values[2][0]})])
            });
        },
    };


    async function getRenderData(schemas) {
            let orderedproperties = schemas.call(this).ui_schema.ui_order.map((item, index) => {
                return {json_schema: {...schemas.call(this).json_schema.properties[item]}, index: index, name: item, ui_schema: {...schemas.call(this).ui_schema[item], name: item, merged: schemas.call(this).ui_schema.ui_merged ? schemas.call(this).ui_schema.ui_merged : false}, data_schema: schemas.call(this).data_schema[item]};
            });
        
            let renderdata;

            renderdata = await Promise.all(orderedproperties.map(async(orderedproperty) => {
                return {...orderedproperty, type: orderedproperty.json_schema.type, json_schema: await recurse.call(this, orderedproperty)}
            }));

          return renderdata;
    }

    function sipper(arrays) {

       
        let longest = 0;
        if (arrays.length > 0) {
            arrays.forEach((array, index) => {
                if (array.length > arrays[longest].length) {
                    longest = index;
                }
            });

            return arrays[longest].map((item, index) => {
                return arrays.map((element, ind) => {
                    return element[index] != undefined ? element[index] : "HIDE";
                })
            })
        } else {
            return arrays;
        }
    }


    function getRateArr(arr, rate, sign) {

        return arr.map((item, index) => {
            switch(sign) {
                case '*':
                    return math.multiply( 1, math.pow((1 + +rate), index));
                case '/':
                    return math.divide(1, math.pow((1 + +rate), index + 1));
                default:
                console.log('Sorry, ' + sign + ' is not available.');
            }
            
        })
    }


    function distributeFn(item, index, length$$1, max$$1) {
        let sum$$1 = [];
        for (let i = 0; i < (index + 1); i++) {
            sum$$1.push(0);
        }

        for (let i = 0; i < (length$$1 - index - 1); i++) {
            if (i < max$$1) {
                sum$$1.push(item);
            } else {
                sum$$1.push(0);
            }
        }
        return sum$$1
    }

    /**
     * Converts values below zero to zero
     * @param {Array} arr array to work with
     */
    function trimArr(arr) {
        return arr.map(item => {
            return item >= 0 ? +item : 0;
        })
    }

    function prepareRender(processedSchema) {
        if (processedSchema != undefined && processedSchema.type == "Array") {
            return processedSchema.json_schema
        } else if (processedSchema != undefined && processedSchema != false) {
            return [processedSchema]
        } else {
            return undefined
        }
    }


    function toRender(renderdata) {
        return renderdata != undefined ? renderdata.map((item, index) => {
            if (!is(Array, item)) {
                
                if (item.ui_schema.merged != true) {
                    if (item.type == 'Array') {
                        
                        return item.json_schema.map((element, index) => {
                            
                            if (element.data_schema != 'HIDE') {
                                return getElement.call(this, element.ui_schema.ui_widget, element, index, item);
                            }
                        })
                    } else {
                        
                        if (item.data_schema != 'HIDE') {
                            if (item.ui_schema.ui_widget != undefined) {
                                return getElement.call(this, item.ui_schema.ui_widget, item, index, item);
                            } else {
                               
                                return item.data_schema
                            }
                            
                        }
                    }
                } else {
                    
                    if (item.type == 'Array' || item.type == 'Object') {
                        return toRender.call(this, item.json_schema)
                    } else {
                        return getElement.call(this, item.ui_schema.ui_widget, item, index, item);
                    }
                    
                }
            } else {
                return toRender.call(this, item)
            }

        }) : ""
    }

    function aggregater(arr) {
        return arr.map((item, index) => {
          let sum$$1 = 0;
          for (var i = 0; i <= index; i++) {
            sum$$1 = math.add(sum$$1, +arr[i]);
          }
          return sum$$1;
        });
      }

      function identity$2(item) {
        return item;
      }
      
      function getFunction(data) {
        switch (data) {
          case "identity":
            return {
              fn: identity$2.bind(this),
              prop: "identity"
            };
        }
      }

      function arrayMultiplier(array) {
        return array.reduce((acc, val) => {
          return val === "HIDE" ? +acc : +acc * +val;
        }, 1);
      }

      function mathRound(item) {
        return math.round(item);
      }

      function mathDivide(dividend, divisor) {
        return math.divide(dividend, divisor);
      }

      function getRealCosts(cost, period) {
        return period.map(() => {
          return +cost;
        });
      }

      function arrayAdder(array) {
        return array.reduce((acc, val) => {
          return val === "HIDE" ? +acc : +acc + +val;
        }, 0);
      }

      function arrayAggregator(arr) {
        return arr.map((item, index) => {
          let sum$$1 = 0;
          for (var i = 0; i <= index; i++) {
            sum$$1 = math.add(sum$$1, +arr[i]);
          }
          return sum$$1;
        });
      }


      function getPeriodArray(startyear, endyear) {
        return range$1(+startyear, +endyear + 1);
      }

      function addArraysAndSip(array) {
        return sipper(array).map(arrayAdder);
      }

    function multiplyArraysAndSip(array) {
        return sipper(array).map(arrayMultiplier);
      }

      function getPropertyFromName(name) {
          return this[name]
      }
      function getValuesFromObject(item) {
          return Object.values(item)
        }
    function getValuesFromObjectByName(name) {
        return getValuesFromObject(getPropertyFromName.call(this, name))
    }

    function getGrowthArray(item) {
        return getRateArr(getValuesFromObjectByName.call(this, item.space), getPropertyFromName.call(this, item.growthRate), "*")
    }

    function getDiscountArray(item) {
        return getRateArr(getValuesFromObjectByName.call(this, item.space), getPropertyFromName.call(this, item.discountRate), "/")
    }

    function createRealPriceArray(item) {
        return getRealCosts(getPropertyFromName.call(this, item.name), getPropertyFromName.call(this, item.period))
    }

    function createRealInvestmentPriceArray(item) {
        return getRealCosts(getPropertyFromName.call(this, item.investment), getPropertyFromName.call(this, item.period))
    }

    function createRealCostArray(item) {
        return multiplyArraysAndSip([getValuesFromObjectByName.call(this, item.space), createRealPriceArray.call(this, item)]).map(mathRound);
    }





    function getRealCostArray(item, realPriceArray) {
            return multiplyArraysAndSip([aggregater(getValuesFromObjectByName.call(this, item.space)), realPriceArray]).map(mathRound);
          }

    function getDiscountedRealCostArray(item, realPriceArray) {
        return multiplyArraysAndSip([getDiscountArray.call(this, item), getRealCostArray.call(this, item, realPriceArray)]).map(mathRound);
    }






    function createRealAggregatedCostArray(item) {
        return aggregater.call(this, createRealCostArray.call(this, item));
    }






    function createNominalAggregatedCostArray(item) {
        return multiplyArraysAndSip([getGrowthArray.call(this, item), createRealAggregatedCostArray.call(this, item)]).map(mathRound);
      }

      function createDiscountedNominalAggregatedCostArray(item) {
        return multiplyArraysAndSip([getDiscountArray.call(this, item), createNominalAggregatedCostArray.call(this, item)]).map(mathRound);
      }







    function createNominalCostArray(item) {
        return multiplyArraysAndSip([getGrowthArray.call(this, item), createRealCostArray.call(this, item)]).map(mathRound);
      }






    function createPositiveOnlyNominalCostArray(item) {
        return createNominalCostArray.call(this, item).map(item => {
          return item > 0 ? mathRound(item) : 0;
        });
      }

      function createDiscountedPositiveOnlyNominalCostArray(item) {
        return multiplyArraysAndSip([getDiscountArray.call(this, item), createPositiveOnlyNominalCostArray.call(this, item)]).map(mathRound);
      }






    function createDepreciationArray(item) {
        return mathRound(addArraysAndSip.call(this, trimArr.call(this, multiplyArraysAndSip.call(this, [createNominalCostArray.call(this, item), createRealInvestmentPriceArray.call(this, item)])).map(
          (element, index, arr) => {
            return distributeFn.call(this, 
              element,
              index,
              arr.length,
              mathRound(mathDivide(1, getPropertyFromName.call(this, item.name)))
            );
          }
        )));
      }


      function createDiscountedDepreciationArray(item) {
        return multiplyArraysAndSip([getDiscountArray.call(this, item), createDepreciationArray.call(this, item)]).map(mathRound);
      }

    let props$1 = () => ([
        { propKey: 'menu', propValue: {type: Object}, rx: true },
        { propKey: 'icon', propValue: {type: Object}, rx: true },
        { propKey: 'props', propValue: {type: Object}, rx: false },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
      ]);

    class XHeader extends rxmixin(props$1, LitElement) {

        constructor() {
            super();
            this.renderthis = false;
            this.okToRender = false;
        }

        menuchangedHandler(e) {
            let event = new CustomEvent('menuchanged', { detail: {value: e.detail.value} });
            this.dispatchEvent(event);        
        }

        loggedoutHandler(e) {
            let event = new CustomEvent('loggedout');
            this.dispatchEvent(event);  
        }

        loggedinHandler(e) {
            let event = new CustomEvent('loggedin');
            this.dispatchEvent(event);  
        }
        
          firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.menu$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.rendermenu = this.menu;
                this.rendericon = this.icon;
                // this.render = this.rendermenu
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    this.props.forEach(prop$$1 => {
                        if (prop$$1.name == 'menu') {
                            this.menu = prop$$1;
                        }
                        if (prop$$1.name == 'icon') {
                            this.icon = prop$$1;
                        }
                    });
                }        });

        }


        render() {
            return this.okToRender ? html`
            <style>
                .header {
                    display: grid;
         
                    padding-top: 10px;
                    grid-template-columns: repeat(12, 1fr);
                    grid-template-rows: repeat(1, 1fr);
                    grid-column-gap: 20px;
                    grid-template-areas: 
                        "logo    logo     logo     .    .     .    .     menu     menu     menu     menu     icon";                    
                }

                .logo {
                    grid-area: logo;
                    justify-self: start;
                }

                .img {
                    height: 5em;
                    width: 15.764705882352941em
                } 

                .menu {
                    grid-area: menu;
                    justify-self: end;
                    align-self: center;
                }

                .icon {
                    grid-area: icon;
                    justify-self: end;
                    align-self: center;
                }
            
            </style>
            <div class="header">
                <!-- <div class="logo"> <img src="./images/Crop.svg" alt="logo"></div> -->
                <div class="logo"><a href="http://www.parmaco.se"><svg class="img" viewBox="0 0 268 85" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 85H268V0H0V85Z" fill="#005F9A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M256.047 33.5951C252.849 33.5951 251.251 36.4139 251.251 42.051C251.251 47.7011 252.849 50.5261 256.047 50.5261C259.143 50.5261 260.691 47.7073 260.691 42.0703C260.691 36.4202 259.143 33.5951 256.047 33.5951ZM264.22 51.6169C262.316 54.2186 259.534 55.5191 255.875 55.5191C252.37 55.5191 249.657 54.1993 247.74 51.5595C245.822 48.9192 244.863 45.7241 244.863 41.9742C244.863 38.1607 245.834 34.9792 247.778 32.4276C249.721 29.8771 252.49 28.6016 256.085 28.6016C259.718 28.6016 262.458 29.9629 264.307 32.6857C266.155 35.4095 267.079 38.5245 267.079 42.0322C267.079 45.8202 266.126 49.0153 264.22 51.6169ZM230.929 33.5951C227.743 33.5951 226.152 36.4333 226.152 42.1084C226.152 45.3865 226.584 47.6084 227.45 48.776C228.317 49.9424 229.527 50.5261 231.082 50.5261C233.603 50.5261 235.145 48.8811 235.706 45.59L241.617 45.9538C241.236 49.0789 240.075 51.4538 238.137 53.08C236.198 54.7069 233.823 55.5191 231.014 55.5191C227.569 55.5191 224.769 54.3272 222.614 51.9421C220.459 49.557 219.382 46.2601 219.382 42.051C219.382 38.1095 220.424 34.8832 222.508 32.3702C224.594 29.8578 227.441 28.6016 231.052 28.6016C237.307 28.6016 240.829 31.9757 241.617 38.7223L235.228 39.1242C235.139 35.438 233.706 33.5951 230.929 33.5951ZM205.371 35.7568L202.589 44.9204H208.104L205.371 35.7568ZM211.146 55.1178L209.542 49.7417H201.126L199.494 55.1178H194.148L202.491 29.0034H209.551L217.699 55.1178H211.146ZM184.457 55.1178V33.8248L177.909 55.1178H173.735L167.312 33.8248V55.1178H162.201V29.0034H171.697L176.266 44.6339L181.073 29.0034H190.597V55.1178H184.457ZM149.574 34.915C149.141 34.3409 148.671 33.9873 148.162 33.8532C147.654 33.7191 146.7 33.652 145.302 33.652H141.697V40.3105H145.435C146.656 40.3105 147.542 40.2241 148.096 40.0513C148.648 39.879 149.141 39.4971 149.574 38.9042C150.005 38.3108 150.222 37.6315 150.222 36.8664C150.222 36.1394 150.005 35.4891 149.574 34.915ZM151.995 43.5721L156.801 55.1178H150.063L146.066 44.768H141.697V55.1178H135.557V29.0034H146.999C149.11 29.0034 150.803 29.2484 152.081 29.7395C153.359 30.2307 154.418 31.1322 155.257 32.4447C156.096 33.7577 156.516 35.2174 156.516 36.8232C156.516 39.958 155.008 42.2084 151.995 43.5721ZM119.449 35.7568L116.666 44.9204H122.183L119.449 35.7568ZM125.224 55.1178L123.62 49.7417H115.204L113.572 55.1178H108.226L116.569 29.0034H123.629L131.777 55.1178H125.224ZM100.89 34.6854C100.209 34.0607 99.1767 33.7475 97.7914 33.7475H93.8433V40.6731H97.8101C99.3229 40.6731 100.385 40.3224 100.995 39.621C101.605 38.9201 101.91 38.1164 101.91 37.2109C101.91 36.1525 101.569 35.3106 100.89 34.6854ZM107.288 40.7885C106.779 42.0129 106.06 42.9758 105.133 43.6767C104.205 44.3792 103.305 44.8442 102.435 45.0738C101.564 45.3035 100.2 45.4183 98.3437 45.4183H94.0529V55.1178H87.8555V29.0034H98.1148C100.403 29.0034 102.155 29.249 103.369 29.7401C104.583 30.2312 105.666 31.1077 106.621 32.3702C107.574 33.6332 108.05 35.1827 108.05 37.0193C108.05 38.3079 107.796 39.5641 107.288 40.7885V40.7885Z" fill="#FFFFFE"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M58.1634 27.6981C58.9271 28.3859 59.3102 29.2033 59.3102 30.1514L59.2971 44.5654H38.4175L27.6777 55.2313L79.0804 55.2364V22.8978C79.0804 21.0499 78.3155 19.4384 76.7868 18.0622C75.257 16.6878 73.4654 16 71.4098 16H0V69.427H19.7702V26.667H55.4352C56.4891 26.667 57.3985 27.0115 58.1634 27.6981" fill="#FFFFFE"/>
</svg></a></div>
                
                <div class="menu">
                    ${toRender.call(this, prepareRender(this.rendermenu))}
                </div>
                <div class="icon">
                    ${toRender.call(this, prepareRender(this.rendericon))}
                </div>
            </div>
            ` : html``
        }
    }

    customElements.define('x-header', XHeader);

    const propsmixin = (props, superClass) => {
        return class PropsMixin extends superClass {

            static get properties() {
                return props().reduce((acc, prop) => {
                    return { ...acc, [prop.propKey]: prop.propValue }
                }, {})
            }
        } 
    };

    let props$2 = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "selected", propValue: { type: Boolean }, rx: false },
        { propKey: "value", propValue: { type: String }, rx: false },
      ]);

    class XMenuButton extends propsmixin(props$2, LitElement) {

        clickHandler() {
            let event = new CustomEvent('menuchanged');
            this.dispatchEvent(event);
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    this.selected = this.props.ui_schema.ui_options.selected;
                    this.value = this.props.data_schema.value;
                }        });
        }

        render() {
           
            return html`
            <style>
            .button {
                display: flex;
                justify-content: center;
                align-items: center;                    
                font: var(--font-menu);
                color: var(--color-menu); 
                border-bottom: 2px solid var(--color-transparent);
            }

            .selected {
                transition: border-bottom 0.1s ease-in;
                border-bottom: 2px solid var(--color-attention);
            }

            </style>
            <div class="${this.selected ? 'selected' : ''} button" @click="${() => this.clickHandler()}">${this.value}</div>     
        `;
        }
    }

    customElements.define('x-menu-button', XMenuButton);

    const grid = html`<style>
      .col1span1 {
        grid-column: col-start 1 / span 1;
      }

      .col1span2 {
        grid-column: col-start 1 / span 2;
      }

      .col1span3 {
        grid-column: col-start 1 / span 3;
      }

      .col1span4 {
        grid-column: col-start 1 / span 4;
      }

      .col1span5 {
        grid-column: col-start 1 / span 5;
      }

      .col1span6 {
        grid-column: col-start 1 / span 6;
      }

      .col1span7 {
        grid-column: col-start 1 / span 7;
      }

      .col1span8 {
        grid-column: col-start 1 / span 8;
      }

      .col1span9 {
          grid-column: col-start 1 / span 9;
      }

      .col1span10 {
        grid-column: col-start 1 / span 10;
      }

      .col1span11 {
        grid-column: col-start 1 / span 11;
      }

      .col1span12 {
          grid-column: col-start 1 / span 12;
      }
      
      .col2span1 {
        grid-column: col-start 2 / span 1;
      }

      .col2span2 {
        grid-column: col-start 2 / span 2;
      }

      .col2span3 {
        grid-column: col-start 2 / span 3;
      }

      .col2span4 {
        grid-column: col-start 2 / span 4;
      }

      .col2span5 {
        grid-column: col-start 2 / span 5;
      }

      .col2span6 {
        grid-column: col-start 2 / span 6;
      }

      .col2span7 {
        grid-column: col-start 2 / span 7;
      }


      .col2span8 {
        grid-column: col-start 2 / span 8;
      }

      .col2span9 {
        grid-column: col-start 2 / span 9;
      }

      .col2span10 {
        grid-column: col-start 2 / span 10;
      }


      .col2span11 {
        grid-column: col-start 2 / span 11;
      }


      .col3span1 {
        grid-column: col-start 3 / span 1;
      }


      .col3span2 {
        grid-column: col-start 3 / span 2;
      }

      .col3span3 {
        grid-column: col-start 3 / span 3;
      }

      .col3span4 {
        grid-column: col-start 3 / span 4;
      }


      .col3span5 {
        grid-column: col-start 3 / span 5;
      }

      .col3span6 {
        grid-column: col-start 3 / span 6;
      }

      .col3span7 {
        grid-column: col-start 3 / span 7;
      }


      .col3span8 {
        grid-column: col-start 3 / span 8;
      }

      .col3span9 {
        grid-column: col-start 3 / span 9;
      }

      .col3span10 {
        grid-column: col-start 3 / span 10;
      }

      .col4span1 {
        grid-column: col-start 4 / span 1;
      }

      .col4span2 {
        grid-column: col-start 4 / span 2;
      }

      .col4span3 {
        grid-column: col-start 4 / span 3;
      }

      .col4span4 {
        grid-column: col-start 4 / span 4;
      }


      .col4span5 {
        grid-column: col-start 4 / span 5;
      }

      .col4span6 {
        grid-column: col-start 4 / span 6;
      }

      .col4span7 {
        grid-column: col-start 4 / span 7;
      }


      .col4span8 {
        grid-column: col-start 4 / span 8;
      }

      .col4span9 {
        grid-column: col-start 4 / span 9;
      }

      
      .col5span1 {
        grid-column: col-start 5 / span 1;
      }

      .col5span2 {
        grid-column: col-start 5 / span 2;
      }

      .col5span3 {
        grid-column: col-start 5 / span 3;
      }

      .col5span4 {
        grid-column: col-start 5 / span 4;
      }


      .col5span5 {
        grid-column: col-start 5 / span 5;
      }

      .col5span6 {
        grid-column: col-start 5 / span 6;
      }

      .col5span7 {
        grid-column: col-start 5 / span 7;
      }


      .col5span8 {
        grid-column: col-start 5 / span 8;
      }

      .col6span1 {
        grid-column: col-start 6 / span 1;
      }

      .col6span2 {
        grid-column: col-start 6 / span 2;
      }

      .col6span3 {
        grid-column: col-start 6 / span 3;
      }

      .col6span4 {
        grid-column: col-start 6 / span 4;
      }


      .col6span5 {
        grid-column: col-start 6 / span 5;
      }

      .col6span6 {
        grid-column: col-start 6 / span 6;
      }

      .col6span7 {
        grid-column: col-start 6 / span 7;
      }


      .col7span1 {
        grid-column: col-start 7 / span 1;
      }

      .col7span2 {
        grid-column: col-start 7 / span 2;
      }

      .col7span3 {
        grid-column: col-start 7 / span 3;
      }

      .col7span4 {
        grid-column: col-start 7 / span 4;
      }


      .col7span5 {
        grid-column: col-start 7 / span 5;
      }

      .col7span6 {
        grid-column: col-start 7 / span 6;
      }

      .col8span1 {
        grid-column: col-start 8 / span 1;
      }

      .col8span2 {
        grid-column: col-start 8 / span 2;
      }

      .col8span3 {
        grid-column: col-start 8 / span 3;
      }

      .col8span4 {
        grid-column: col-start 8 / span 4;
      }

      .col8span5 {
        grid-column: col-start 8 / span 5;
      }

      .col9span1 {
        grid-column: col-start 9 / span 1;
      }

      .col9span2 {
        grid-column: col-start 9 / span 2;
      }

      .col9span3 {
        grid-column: col-start 9 / span 3;
      }

      .col9span4 {
        grid-column: col-start 9 / span 4;
      }


      .col10span1 {
        grid-column: col-start 10 / span 1;
      }

      .col10span2 {
        grid-column: col-start 10 / span 2;
      }

      .col10span3 {
        grid-column: col-start 10 / span 3;
      }


      .col11span1 {
        grid-column: col-start 11 / span 1;
      }

      .col11span2 {
        grid-column: col-start 11 / span 2;
      }

      .col12span1 {
        grid-column: col-start 12 / span 1;
      }

      .grid-1 {
        display: grid;
        grid-template-columns: repeat(1, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-2 {
        display: grid;
        grid-template-columns: repeat(2, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-3 {
        display: grid;
        grid-template-columns: repeat(3, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-4 {
        display: grid;
        grid-template-columns: repeat(4, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-5 {
        display: grid;
        grid-template-columns: repeat(5, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-6 {
        display: grid;
        grid-template-columns: repeat(6, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-7 {
        display: grid;
        grid-template-columns: repeat(7, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-8 {
        display: grid;
        grid-template-columns: repeat(8, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-9 {
        display: grid;
        grid-template-columns: repeat(9, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-10 {
        display: grid;
        grid-template-columns: repeat(10, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-11 {
        display: grid;
        grid-template-columns: repeat(11, [col-start] 1fr);
        grid-gap: 20px;
      }

      .grid-12 {
        display: grid;
        grid-template-columns: repeat(12, [col-start] 1fr);
        grid-gap: 20px;
      }





      ::slotted(.col1span1) {
        grid-column: col-start 1 / span 1;
      }

      ::slotted(.col1span2) {
        grid-column: col-start 1 / span 2;
      }

      ::slotted(.col1span3) {
        grid-column: col-start 1 / span 3;
      }

      ::slotted(.col1span4) {
        grid-column: col-start 1 / span 4;
      }

      ::slotted(.col1span5) {
        grid-column: col-start 1 / span 5;
      }

      ::slotted(.col1span6) {
        grid-column: col-start 1 / span 6;
      }

      ::slotted(.col1span7) {
        grid-column: col-start 1 / span 7;
      }

      ::slotted(.col1span8) {
        grid-column: col-start 1 / span 8;
      }

      ::slotted(.col1span9) {
          grid-column: col-start 1 / span 9;
      }

      ::slotted(.col1span10) {
        grid-column: col-start 1 / span 10;
      }

      ::slotted(.col1span11) {
        grid-column: col-start 1 / span 11;
      }

      ::slotted(.col1span12) {
          grid-column: col-start 1 / span 12;
      }
      
      ::slotted(.col2span1) {
        grid-column: col-start 2 / span 1;
      }

      ::slotted(.col2span2) {
        grid-column: col-start 2 / span 2;
      }

      ::slotted(.col2span3) {
        grid-column: col-start 2 / span 3;
      }

      ::slotted(.col2span4) {
        grid-column: col-start 2 / span 4;
      }

      ::slotted(.col2span4) {
          grid-column: col-start 2 / span 4;
      }

      ::slotted(.col2span5) {
        grid-column: col-start 2 / span 5;
      }

      ::slotted(.col2span6) {
        grid-column: col-start 2 / span 6;
      }

      ::slotted(.col2span7) {
        grid-column: col-start 2 / span 7;
      }


      ::slotted(.col2span8) {
        grid-column: col-start 2 / span 8;
      }

      ::slotted(.col2span9) {
        grid-column: col-start 2 / span 9;
      }

      ::slotted(.col2span10) {
        grid-column: col-start 2 / span 10;
      }


      ::slotted(.col2span11) {
        grid-column: col-start 2 / span 11;
      }


      ::slotted(.col3span1) {
        grid-column: col-start 3 / span 1;
      }


      ::slotted(.col3span2) {
        grid-column: col-start 3 / span 2;
      }

      ::slotted(.col3span3) {
        grid-column: col-start 3 / span 3;
      }

      ::slotted(.col3span4) {
        grid-column: col-start 3 / span 4;
      }

      ::slotted(.col3span5) {
        grid-column: col-start 3 / span 5;
      }

      ::slotted(.col3span6) {
        grid-column: col-start 3 / span 6;
      }

      ::slotted(.col3span7) {
        grid-column: col-start 3 / span 7;
      }


      ::slotted(.col3span8) {
        grid-column: col-start 3 / span 8;
      }

      ::slotted(.col3span9) {
        grid-column: col-start 3 / span 9;
      }

      ::slotted(.col3span10) {
        grid-column: col-start 3 / span 10;
      }

      ::slotted(.col4span1) {
        grid-column: col-start 4 / span 1;
      }

      ::slotted(.col4span2) {
        grid-column: col-start 4 / span 2;
      }

      ::slotted(.col4span3) {
        grid-column: col-start 4 / span 3;
      }

      ::slotted(.col4span4) {
        grid-column: col-start 4 / span 4;
      }


      ::slotted(.col4span5) {
        grid-column: col-start 4 / span 5;
      }

      ::slotted(.col4span6) {
        grid-column: col-start 4 / span 6;
      }

      ::slotted(.col4span7) {
        grid-column: col-start 4 / span 7;
      }


      ::slotted(.col4span8) {
        grid-column: col-start 4 / span 8;
      }

      ::slotted(.col4span9) {
        grid-column: col-start 4 / span 9;
      }

      
      ::slotted(.col5span1) {
        grid-column: col-start 5 / span 1;
      }

      ::slotted(.col5span2) {
        grid-column: col-start 5 / span 2;
      }

      ::slotted(.col5span3) {
        grid-column: col-start 5 / span 3;
      }

      ::slotted(.col5span4) {
        grid-column: col-start 5 / span 4;
      }


      ::slotted(.col5span5) {
        grid-column: col-start 5 / span 5;
      }

      ::slotted(.col5span6) {
        grid-column: col-start 5 / span 6;
      }

      ::slotted(.col5span7) {
        grid-column: col-start 5 / span 7;
      }


      ::slotted(.col5span8) {
        grid-column: col-start 5 / span 8;
      }

      ::slotted(.col6span1) {
        grid-column: col-start 6 / span 1;
      }

      ::slotted(.col6span2) {
        grid-column: col-start 6 / span 2;
      }

      ::slotted(.col6span3) {
        grid-column: col-start 6 / span 3;
      }

      ::slotted(.col6span4) {
        grid-column: col-start 6 / span 4;
      }


      ::slotted(.col6span5) {
        grid-column: col-start 6 / span 5;
      }

      ::slotted(.col6span6) {
        grid-column: col-start 6 / span 6;
      }

      ::slotted(.col6span7) {
        grid-column: col-start 6 / span 7;
      }


      ::slotted(.col7span1) {
        grid-column: col-start 7 / span 1;
      }

      ::slotted(.col7span2) {
        grid-column: col-start 7 / span 2;
      }

      ::slotted(.col7span3) {
        grid-column: col-start 7 / span 3;
      }

      ::slotted(.col7span4) {
        grid-column: col-start 7 / span 4;
      }


      ::slotted(.col7span5) {
        grid-column: col-start 7 / span 5;
      }

      ::slotted(.col7span6) {
        grid-column: col-start 7 / span 6;
      }

      ::slotted(.col8span1) {
        grid-column: col-start 8 / span 1;
      }

      ::slotted(.col8span2) {
        grid-column: col-start 8 / span 2;
      }

      ::slotted(.col8span3) {
        grid-column: col-start 8 / span 3;
      }

      ::slotted(.col8span4) {
        grid-column: col-start 8 / span 4;
      }


      ::slotted(.col8span5) {
        grid-column: col-start 8 / span 5;
      }

      ::slotted(.col9span1) {
        grid-column: col-start 9 / span 1;
      }

      ::slotted(.col9span2) {
        grid-column: col-start 9 / span 2;
      }

      ::slotted(.col9span3) {
        grid-column: col-start 9 / span 3;
      }

      ::slotted(.col9span4) {
        grid-column: col-start 9 / span 4;
      }


      ::slotted(.col10span1) {
        grid-column: col-start 10 / span 1;
      }

      ::slotted(.col10span2) {
        grid-column: col-start 10 / span 2;
      }

      ::slotted(.col10span3) {
        grid-column: col-start 10 / span 3;
      }


      ::slotted(.col11span1) {
        grid-column: col-start 11 / span 1;
      }

      ::slotted(.col11span2) {
        grid-column: col-start 11 / span 2;
      }

      ::slotted(.col12span1) {
        grid-column: col-start 12 / span 1;
      }

      ::slotted(.grid-1) {
        display: grid;
        grid-template-columns: repeat(1, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-2) {
        display: grid;
        grid-template-columns: repeat(2, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-3) {
        display: grid;
        grid-template-columns: repeat(3, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-4) {
        display: grid;
        grid-template-columns: repeat(4, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-5) {
        display: grid;
        grid-template-columns: repeat(5, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-6) {
        display: grid;
        grid-template-columns: repeat(6, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-7) {
        display: grid;
        grid-template-columns: repeat(7, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-8) {
        display: grid;
        grid-template-columns: repeat(8, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-9) {
        display: grid;
        grid-template-columns: repeat(9, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-10) {
        display: grid;
        grid-template-columns: repeat(10, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-11) {
        display: grid;
        grid-template-columns: repeat(11, [col-start] 1fr);
        grid-gap: 20px;
      }

      ::slotted(.grid-12) {
        display: grid;
        grid-template-columns: repeat(12, [col-start] 1fr);
        grid-gap: 20px;
      }


      :host(.col1span1) {
        grid-column: col-start 1 / span 1;
      }

      :host(.col1span2) {
        grid-column: col-start 1 / span 2;
      }

      :host(.col1span3) {
        grid-column: col-start 1 / span 3;
      }

      :host(.col1span4) {
        grid-column: col-start 1 / span 4;
      }

      :host(.col1span5) {
        grid-column: col-start 1 / span 5;
      }

      :host(.col1span6) {
        grid-column: col-start 1 / span 6;
      }

      :host(.col1span7) {
        grid-column: col-start 1 / span 7;
      }

      :host(.col1span8) {
        grid-column: col-start 1 / span 8;
      }

      :host(.col1span9) {
          grid-column: col-start 1 / span 9;
      }

      :host(.col1span10) {
        grid-column: col-start 1 / span 10;
      }

      :host(.col1span11) {
        grid-column: col-start 1 / span 11;
      }

      :host(.col1span12) {
          grid-column: col-start 1 / span 12;
      }
      
      :host(.col2span1) {
        grid-column: col-start 2 / span 1;
      }

      :host(.col2span2) {
        grid-column: col-start 2 / span 2;
      }

      :host(.col2span3) {
        grid-column: col-start 2 / span 3;
      }

      :host(.col2span4) {
        grid-column: col-start 2 / span 4;
      }

      :host(.col2span5) {
        grid-column: col-start 2 / span 5;
      }

      :host(.col2span6) {
        grid-column: col-start 2 / span 6;
      }

      :host(.col2span7) {
        grid-column: col-start 2 / span 7;
      }


      :host(.col2span8) {
        grid-column: col-start 2 / span 8;
      }

      :host(.col2span9) {
        grid-column: col-start 2 / span 9;
      }

      :host(.col2span10) {
        grid-column: col-start 2 / span 10;
      }


      :host(.col2span11) {
        grid-column: col-start 2 / span 11;
      }


      :host(.col3span1) {
        grid-column: col-start 3 / span 1;
      }


      :host(.col3span2) {
        grid-column: col-start 3 / span 2;
      }

      :host(.col3span3) {
        grid-column: col-start 3 / span 3;
      }

      :host(.col3span4) {
        grid-column: col-start 3 / span 4;
      }


      :host(.col3span5) {
        grid-column: col-start 3 / span 5;
      }

      :host(.col3span6) {
        grid-column: col-start 3 / span 6;
      }

      :host(.col3span7) {
        grid-column: col-start 3 / span 7;
      }


      :host(.col3span8) {
        grid-column: col-start 3 / span 8;
      }

      :host(.col3span9) {
        grid-column: col-start 3 / span 9;
      }

      :host(.col3span10) {
        grid-column: col-start 3 / span 10;
      }

      :host(.col4span1) {
        grid-column: col-start 4 / span 1;
      }

      :host(.col4span2) {
        grid-column: col-start 4 / span 2;
      }

      :host(.col4span3) {
        grid-column: col-start 4 / span 3;
      }

      :host(.col4span4) {
        grid-column: col-start 4 / span 4;
      }


      :host(.col4span5) {
        grid-column: col-start 4 / span 5;
      }

      :host(.col4span6) {
        grid-column: col-start 4 / span 6;
      }

      :host(.col4span7) {
        grid-column: col-start 4 / span 7;
      }


      :host(.col4span8) {
        grid-column: col-start 4 / span 8;
      }

      :host(.col4span9) {
        grid-column: col-start 4 / span 9;
      }

      
      :host(.col5span1) {
        grid-column: col-start 5 / span 1;
      }

      :host(.col5span2) {
        grid-column: col-start 5 / span 2;
      }

      :host(.col5span3) {
        grid-column: col-start 5 / span 3;
      }

      :host(.col5span4) {
        grid-column: col-start 5 / span 4;
      }


      :host(.col5span5) {
        grid-column: col-start 5 / span 5;
      }

      :host(.col5span6) {
        grid-column: col-start 5 / span 6;
      }

      :host(.col5span7) {
        grid-column: col-start 5 / span 7;
      }


      :host(.col5span8) {
        grid-column: col-start 5 / span 8;
      }

      :host(.col6span1) {
        grid-column: col-start 6 / span 1;
      }

      :host(.col6span2) {
        grid-column: col-start 6 / span 2;
      }

      :host(.col6span3) {
        grid-column: col-start 6 / span 3;
      }

      :host(.col6span4) {
        grid-column: col-start 6 / span 4;
      }


      :host(.col6span5) {
        grid-column: col-start 6 / span 5;
      }

      :host(.col6span6) {
        grid-column: col-start 6 / span 6;
      }

      :host(.col6span7) {
        grid-column: col-start 6 / span 7;
      }


      :host(.col7span1) {
        grid-column: col-start 7 / span 1;
      }

      :host(.col7span2) {
        grid-column: col-start 7 / span 2;
      }

      :host(.col7span3) {
        grid-column: col-start 7 / span 3;
      }

      :host(.col7span4) {
        grid-column: col-start 7 / span 4;
      }


      :host(.col7span5) {
        grid-column: col-start 7 / span 5;
      }

      :host(.col7span6) {
        grid-column: col-start 7 / span 6;
      }

      :host(.col8span1) {
        grid-column: col-start 8 / span 1;
      }

      :host(.col8span2) {
        grid-column: col-start 8 / span 2;
      }

      :host(.col8span3) {
        grid-column: col-start 8 / span 3;
      }

      :host(.col8span4) {
        grid-column: col-start 8 / span 4;
      }

      :host(.col8span5) {
        grid-column: col-start 8 / span 5;
      }

      :host(.col9span1) {
        grid-column: col-start 9 / span 1;
      }

      :host(.col9span2) {
        grid-column: col-start 9 / span 2;
      }

      :host(.col9span3) {
        grid-column: col-start 9 / span 3;
      }

      :host(.col9span4) {
        grid-column: col-start 9 / span 4;
      }


      :host(.col10span1) {
        grid-column: col-start 10 / span 1;
      }

      :host(.col10span2) {
        grid-column: col-start 10 / span 2;
      }

      :host(.col10span3) {
        grid-column: col-start 10 / span 3;
      }


      :host(.col11span1) {
        grid-column: col-start 11 / span 1;
      }

      :host(.col11span2) {
        grid-column: col-start 11 / span 2;
      }

      :host(.col12span1) {
        grid-column: col-start 12 / span 1;
      }

      :host(.grid-1) {
        display: grid;
        grid-template-columns: repeat(1, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-2) {
        display: grid;
        grid-template-columns: repeat(2, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-3) {
        display: grid;
        grid-template-columns: repeat(3, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-4) {
        display: grid;
        grid-template-columns: repeat(4, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-5) {
        display: grid;
        grid-template-columns: repeat(5, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-6) {
        display: grid;
        grid-template-columns: repeat(6, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-7) {
        display: grid;
        grid-template-columns: repeat(7, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-8) {
        display: grid;
        grid-template-columns: repeat(8, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-9) {
        display: grid;
        grid-template-columns: repeat(9, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-10) {
        display: grid;
        grid-template-columns: repeat(10, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-11) {
        display: grid;
        grid-template-columns: repeat(11, [col-start] 1fr);
        grid-gap: 20px;
      }

      :host(.grid-12) {
        display: grid;
        grid-template-columns: repeat(12, [col-start] 1fr);
        grid-gap: 20px;
      }
  </style>`;

    let props$3 = () => ([
      ]);


    class XFooter extends rxmixin(props$3, LitElement) {
        constructor() {
            super();
            this.okToRender = true;
        }

        render() {
            return this.okToRender ? html`
        ${grid}
        <style>
            
                .footer-rows {
                    grid-template-rows: 30px auto;
                }

                .footer-headline {
                    font: var(--font-footer-headline);
                    color: var(--color-footer-headline); 
                    align-self: start;
                    white-space: nowrap;
                }

                .footer-body {
                    align-self: start;
                }

                .footer-body-section {
                    padding-bottom: 16px;
                }

                
                .footer-subhedline {
                    font: var(--font-footer-subheadline);
                    color: var(--color-footer-subheadline); 
                    padding-bottom: 5px;
                }


                .footer-subexplain {
                    font: var(--font-footer-subexplain);
                    color: var(--color-footer-subheadline); 
                }
            
        </style>



    
            <div class="grid-12">
                <div class="col1span4 grid-4 footer-rows">
                    <div class="col1span4 footer-headline">
                        OM MODELLEN
                    </div>
                    <div class="col1span4 footer-body">
                        <div class="footer-body-section">
                            <div class="footer-subhedline">
                                Information
                            </div>
                            <div class="footer-subexplain">
                            Med vårt kalkylprogram är det lätt att jämföra kostnadseffektiviteten i olika byggnadsalternativ. Kalkylprogrammet är utvecklat i samarbete med KTH och Sitemakr som är ett expertföretag specialiserat på webblösningar för den offentliga fastighetssektorn.</div>
                        </div>
                    </div>
                </div>
                <div class="col8span2 grid-2 footer-rows">
                    <div class="col1span2 footer-headline">
                        KONTAKTA OSS
                    </div>

                    <div class="col1span2 footer-body">
                        <div class="footer-body-section">
                            <div class="footer-subhedline">
                                Information
                            </div>
                            <div class="footer-subexplain">
                                08-783 24 12
                                info@parmaco.se
                            </div>
                        </div>
                        <div class="footer-body-section">
                            <div class="footer-subhedline">
                                
                            </div>
                            <div class="footer-subexplain">
                               
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col10span3 grid-3 footer-rows">

                        <div class="col1span3 footer-headline">
                                
                        </div>

                        <div class="col1span3 footer-body">
                            <div class="footer-body-section">
                                <div class="footer-subhedline">
                                    Webbsupport
                                </div>
                                <div class="footer-subexplain">
                                073-312 69 89
                                info@sitemakr.se
                                </div>
                            </div>
                            <div class="footer-body-section">
                                <whcg-search-box>
                                </whcg-search-box>
                            </div>
                        </div>       
                </div>
            </div>
        
            ` : html``
        }

    }

    window.customElements.define('x-footer', XFooter);

    let props$4 = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "data", propValue: { type: Object }, rx: true },
        { propKey: "comment", propValue: { type: String }, rx: true },
        { propKey: "label", propValue: { type: String }, rx: true },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
        { propKey: "page", propValue: { type: Boolean }, rx: false },
      ]);

    class XMainHeader extends rxmixin(props$4, LitElement) {
        constructor() {
            super();
            this.renderdata = false;
            this.rendercomment = false;
            this.renderlabel = false;
            this.okToRender = false;
            this.page = false;
        }

        leftHandler(e) {
            // console.log(e)
            if(page > 0) {
                page = +page - 1;
            }

            let event = new CustomEvent('tablepagingchanged');
            this.dispatchEvent(event);
            
        }

        rightHandler(e) {
            console.log(rowlength);

            if (+rowlength / (+page + 1) > 10) {
                page = +page + 1;
            }
            

            let event = new CustomEvent('tablepagingchanged');
            this.dispatchEvent(event);
        }

        firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.data$, this.comment$, this.label$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.renderdata = this.data;
                this.rendercomment = this.comment;
                this.renderlabel = this.label;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

          updated(changedProperties){
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
              if (propName === "props") {
                this.props.forEach(prop$$1 => {
                    if (prop$$1.name == 'label') {
                        this.label = prop$$1;
                    }
                    if (prop$$1.name == 'data') {
                        this.data = prop$$1;
                    }
                    if (prop$$1.name == 'comment') {
                        this.comment = prop$$1;
                    }
                });
              }        }); 
        }

        render() {
            
            return this.okToRender ? html`
              <style>
        
            .row {
                display: grid;
                grid-template-columns: repeat(10, 1fr);
                grid-column-gap: 20px;
                grid-template-areas: 
                    "label      label       label    .        data        comment         comment         comment         left         right";
                border-bottom: 2px solid var(--color-text);
                align-items: center;
                font: var(--font-main-header);
                color: var(--color-text); 
            }

            .label {
                grid-area: label; 

            }

            .data {
                grid-area: data; 
            }

            .comment {
                grid-area: comment;
            }

            .left {
                grid-area: left;
            }

            .right {
                grid-area: right;
                justify-self: end;
                display: grid;
                grid-gap: 20px;
                grid-template-columns: auto auto;
            }

            .arrow {
                max-height: 1.0em;
                max-width: 1.0em;
                margin-bottom: -2px;
            } 
    </style>
    <div class="row">
        <div class="label">${toRender.call(this, prepareRender(this.renderlabel))}</div>
        <div class="data">${toRender.call(this, prepareRender(this.renderdata))}</div>
        <div class="comment">${toRender.call(this, prepareRender(this.rendercomment))}</div>
        ${this.page ? html`<div class="right"><div @click="${e => this.leftHandler(e)}"><svg class="arrow" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 492 492" style="enable-background:new 0 0 492 492;" xml:space="preserve" width="512px" height="512px">
<g>
	<g>
		<path d="M198.608,246.104L382.664,62.04c5.068-5.056,7.856-11.816,7.856-19.024c0-7.212-2.788-13.968-7.856-19.032l-16.128-16.12    C361.476,2.792,354.712,0,347.504,0s-13.964,2.792-19.028,7.864L109.328,227.008c-5.084,5.08-7.868,11.868-7.848,19.084    c-0.02,7.248,2.76,14.028,7.848,19.112l218.944,218.932c5.064,5.072,11.82,7.864,19.032,7.864c7.208,0,13.964-2.792,19.032-7.864    l16.124-16.12c10.492-10.492,10.492-27.572,0-38.06L198.608,246.104z" fill="#FFFFFF"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg></div><div @click="${e => this.rightHandler(e)}"><svg class="arrow" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 492.004 492.004" style="enable-background:new 0 0 492.004 492.004;" xml:space="preserve" width="512px" height="512px">
<g>
	<g>
		<path d="M382.678,226.804L163.73,7.86C158.666,2.792,151.906,0,144.698,0s-13.968,2.792-19.032,7.86l-16.124,16.12    c-10.492,10.504-10.492,27.576,0,38.064L293.398,245.9l-184.06,184.06c-5.064,5.068-7.86,11.824-7.86,19.028    c0,7.212,2.796,13.968,7.86,19.04l16.124,16.116c5.068,5.068,11.824,7.86,19.032,7.86s13.968-2.792,19.032-7.86L382.678,265    c5.076-5.084,7.864-11.872,7.848-19.088C390.542,238.668,387.754,231.884,382.678,226.804z" fill="#FFFFFF"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>
</div></div>
` : ``}
    </div>
        ` : html``
        }
    }

    customElements.define('x-main-header', XMainHeader);


    // <div class="left">Tidigare</div>

    // import * as R from "ramda/es/index.js";
    // const MENU_SELECTED = 'MENU_SELECTED';
    // const ASSUMPTIONS_SCENARIO = "ASSUMPTIONS_SCENARIO";

    const ASSUMPTIONS_STARTYEAR = 'ASSUMPTIONS_STARTYEAR';
    const ASSUMPTIONS_ENDYEAR = 'ASSUMPTIONS_ENDYEAR';


    const ASSUMPTIONS_INVESTMENTS_FUTURE = 'ASSUMPTIONS_INVESTMENTS_FUTURE';
    const ASSUMPTIONS_INVESTMENTS_INITIAL = 'ASSUMPTIONS_INVESTMENTS_INITIAL';
    const ASSUMPTIONS_RENT_AMOUNT = 'ASSUMPTIONS_RENT_AMOUNT';
    const ASSUMPTIONS_RENT_PERIOD = 'ASSUMPTIONS_RENT_PERIOD';
    const ASSUMPTIONS_RENT_REMOVE = 'ASSUMPTIONS_RENT_REMOVE';
    const ASSUMPTIONS_RENT_ADD = 'ASSUMPTIONS_RENT_ADD';
    const ASSUMPTIONS_MAINTENANCE_PERMANENT = 'ASSUMPTIONS_MAINTENANCE_PERMANENT';
    const ASSUMPTIONS_MAINTENANCE_DYNAMIC = 'ASSUMPTIONS_MAINTENANCE_DYNAMIC';
    const ASSUMPTIONS_MAINTENANCE_NOTUSED = 'ASSUMPTIONS_MAINTENANCE_NOTUSED';
    const ASSUMPTIONS_RATES_INFLATION = 'ASSUMPTIONS_RATES_INFLATION';
    const ASSUMPTIONS_RATES_DISCOUNT = 'ASSUMPTIONS_RATES_DISCOUNT';

    const INVESTMENTPROGRAM_DEMAND = 'INVESTMENTPROGRAM_DEMAND';
    const INVESTMENTPROGRAM_VOLUMEDYNAMIC = 'INVESTMENTPROGRAM_VOLUMEDYNAMIC';
    const INVESTMENTPROGRAM_VOLUMEPERMANENT = 'INVESTMENTPROGRAM_VOLUMEPERMANENT';

    const STATIC_ASSUMPTIONS = 'STATIC_ASSUMPTIONS';
    const STATIC_INVESTMENT = 'STATIC_INVESTMENT';



    const KTH_COUNTY = 'KTH_COUNTY';
    const KTH_COUNTY_SELECTED = 'KTH_COUNTY_SELECTED';
    const KTH_MUNICIPALITY = 'KTH_MUNICIPALITY';
    const KTH_MUNICIPALITY_SELECTED = 'KTH_MUNICIPALITY_SELECTED';
    const KTH_LKF = 'KTH_LKF';
    const KTH_LKF_SELECTED = 'KTH_LKF_SELECTED';

    const action = {




        
      menu_selected: (payload) => {
        return {
            type: MENU_SELECTED,
            payload: payload
        };
    },
    assumptions_startyear: (payload) => {
        return {
            type: ASSUMPTIONS_STARTYEAR,
            payload: payload
        };
    },
    assumptions_endyear: (payload) => {
        return {
            type: ASSUMPTIONS_ENDYEAR,
            payload: payload
        };
    },
    assumptions_scenario: (payload) => {
        return {
            type: ASSUMPTIONS_SCENARIO,
            payload: payload
        };
    },
    assumptions_investments_future: (payload) => {
        return {
            type: ASSUMPTIONS_INVESTMENTS_FUTURE,
            payload: payload
        };
    },
    assumptions_investments_initial: (payload) => {
        return {
            type: ASSUMPTIONS_INVESTMENTS_INITIAL,
            payload: payload
        };
    },

    assumptions_rent_remove: (payload) => {
        return {
            type: ASSUMPTIONS_RENT_REMOVE,
            payload: payload
        };
    },

    assumptions_rent_add: (payload) => {
        return {
            type: ASSUMPTIONS_RENT_ADD,
            payload: payload
        };
    },

    assumptions_rent_amount: (payload) => {
        return {
            type: ASSUMPTIONS_RENT_AMOUNT,
            payload: payload
        };
    },
    assumptions_rent_period: (payload) => {
        return {
            type: ASSUMPTIONS_RENT_PERIOD,
            payload: payload
        };
    },
    assumptions_rent_after: (payload) => {
        return {
            type: ASSUMPTIONS_RENT_AFTER,
            payload: payload
        };
    },
    assumptions_maintenance_permanent: (payload) => {
        return {
            type: ASSUMPTIONS_MAINTENANCE_PERMANENT,
            payload: payload
        };
    },
    assumptions_maintenance_dynamic: (payload) => {
        return {
            type: ASSUMPTIONS_MAINTENANCE_DYNAMIC,
            payload: payload
        };
    },
    assumptions_maintenance_notused: (payload) => {
        return {
            type: ASSUMPTIONS_MAINTENANCE_NOTUSED,
            payload: payload
        };
    },
    assumptions_rates_inflation: (payload) => {
        return {
            type: ASSUMPTIONS_RATES_INFLATION,
            payload: payload
        };
    },
    assumptions_rates_discount: (payload) => {
        return {
            type: ASSUMPTIONS_RATES_DISCOUNT,
            payload: payload
        };
    },  
    investmentprogram_demand: (payload) => {
        return {
            type: INVESTMENTPROGRAM_DEMAND,
            payload: payload
        };
    },
    investmentprogram_volumedynamic: (payload) => {
        return {
            type: INVESTMENTPROGRAM_VOLUMEDYNAMIC,
            payload: payload            
        };
    },
    investmentprogram_volumepermanent: (payload) => {
        return {
            type: INVESTMENTPROGRAM_VOLUMEPERMANENT,
            payload: payload            
        };
    },
    static_assumptions: (payload) => {
        return {
            type: STATIC_ASSUMPTIONS,
            payload: payload            
        };
    },
    static_investment: (payload) => {
        return {
            type: STATIC_INVESTMENT,
            payload: payload            
        };
    },


    kth_county: (payload) => {
      return {
        type: KTH_COUNTY,
        payload: payload
      };
    },
    kth_county_selected: (payload) => {
      return {
        type: KTH_COUNTY_SELECTED,
        payload: payload
      };
    },
    kth_municipality: (payload) => {
      return {
        type: KTH_MUNICIPALITY,
        payload: payload
      };
    },
    kth_municipality_selected: (payload) => {
      return {
        type: KTH_MUNICIPALITY_SELECTED,
        payload: payload
      };
    },

    kth_lkf: (payload) => {
      return {
        type: KTH_LKF,
        payload: payload
      };
    },
    kth_lkf_selected: (payload) => {
      return {
        type: KTH_LKF_SELECTED,
        payload: payload
      };
    },
    };



    // kth_county: (payload) => {
    //   return {
    //     type: KTH_COUNTY,
    //     payload: payload
    //   };
    // },
    // kth_county_selected: (payload) => {
    //   return {
    //     type: KTH_COUNTY_SELECTED,
    //     payload: payload
    //   };
    // },
    // kth_municipality: (payload) => {
    //   return {
    //     type: KTH_MUNICIPALITY,
    //     payload: payload
    //   };
    // },
    // kth_municipality_selected: (payload) => {
    //   return {
    //     type: KTH_MUNICIPALITY_SELECTED,
    //     payload: payload
    //   };
    // },

    // kth_lkf: (payload) => {
    //   return {
    //     type: KTH_LKF,
    //     payload: payload
    //   };
    // },
    // kth_lkf_selected: (payload) => {
    //   return {
    //     type: KTH_LKF_SELECTED,
    //     payload: payload
    //   };
    // },
    // menu_selected: (payload) => {
    //   return {
    //     type: MENU_SELECTED,
    //     payload: payload
    //   };
    // },

    const reduxmixin = (props$$1, superClass) => {
        return class ReduxMixin extends superClass {

            static get properties() {
                return props$$1().reduce((acc, prop$$1) => {
                    return { ...acc, [prop$$1.propKey]: prop$$1.propValue }
                }, {})
            }
            
            valueChanged(e) {
              this.storeHolder.store.dispatch(action[`${e.path[0].id}Value`](e.detail.value));
            }

            stateChanged(state) {
                console.log('STATE', state);
                this.scenario = chosenScenario;
                props$$1().forEach(prop$$1 => {
                    if (prop$$1.path) {
                       
                        if(is(Array, prop$$1.path.reduce((acc, item) => {
                          
                                return acc[item]
                            }, state))) 
                        {
                            if (!equals(this[prop$$1.propKey], prop$$1.path.reduce((acc, item) => {
                                return acc[item]
                            }, state))) {
                                this[prop$$1.propKey] = [...prop$$1.path.reduce((acc, item) => {
                                    
                                    return acc[item]
                                }, state)];
                            }
                        } else if(is(Object, prop$$1.path.reduce((acc, item) => {
                                return acc[item]
                            }, state))) 
                        {
                        
                            this[prop$$1.propKey] = {...prop$$1.path.reduce((acc, item) => {
                            
                                return acc[item]
                            }, state)};
                        } else {
                            
                            if (!equals(this[prop$$1.propKey], prop$$1.path.reduce((acc, item) => {
                                return acc[item]
                            }, state))) {
                  
                                this[prop$$1.propKey] = prop$$1.path.reduce((acc, item) => {
                                   
                                    return acc[item]
                                }, state);
                            }
                        }
                    }
                });
            }

            
            // stateChanged(state) {
            //   props.forEach(prop => {
            //       if (this[prop.propKey] !== state[prop.propKey] && state[prop.propKey] != undefined) {
            //           this[prop.propKey] = state[prop.propKey];
            //       }
            //   });
            // }
        } 
    };

    let props$5 = () => ([
        { propKey: "data", propValue: { type: Object }, rx: true },
        { propKey: "comment", propValue: { type: String }, rx: true },
        { propKey: "label", propValue: { type: String }, rx: true },
        { propKey: "index", propValue: { type: Number }, rx: false },
        { propKey: "remove", propValue: { type: Boolean }, rx: false },
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "removehidden", propValue: { type: Boolean }, rx: false },
        { propKey: "add", propValue: { type: Boolean }, rx: false },
      ]);

     
    class XAssumptionRow extends rxmixin(props$5, LitElement) {

        constructor() {
            super();
            this.data = false;
            this.comment = false;
            this.label = false;
        }

        cellChangedHandler(e) {
            let event = new CustomEvent('rowchanged', { detail: {value: e.detail.value}}); 
            this.dispatchEvent(event);
        }


        removeClickHandler(e) {
            let event = new CustomEvent('removerow'); 
            this.dispatchEvent(event);
        }


        addClickHandler(e) {
            let event = new CustomEvent('addrow'); 
            this.dispatchEvent(event);
        }


        render() {    
            return this.okToRender ? html`
    
    <style>
        .tablerow {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-column-gap: 20px;
            grid-template-areas: 
                "label      label       label    label        data        comment         comment         comment         comment         comment";
        }

        .extra {
            padding-top: 30px;
        }

        .label {
            grid-area: label; 
            font: var(--font-table-row-label);
            color: var(--color-text);
            white-space: nowrap;
        }

        .avtalsperiod {
            font: var(--font-table-row-label-fat);
            color: var(--color-text);
            padding-bottom: 10px;
        }

        .data {
            grid-area: data;
        }

        .comment {
            grid-area: comment;
            font: var(--font-table-row-comment);
            color: var(--color-text);
        }

        .svg {
            fill: white;
            height: 18px;
            margin-left: -24px;
            padding-right: 6px;
            position: relative;
            left: -16px;
            top: 34px;
            opacity: 0.25;
        }

        .hidden {
            visibility: hidden;
        }

        .svg:hover {
            opacity: 1;
            transition: opacity .25s ease-in-out .0s;
        }

        .header {
            border: 1px solid var(--color-transparent);
            color: var(--color-text);
            font: var(--font-table-label);
        }
    </style>
    
    ${this.remove ? html`<div class="avtalsperiod ${this.index != 0 ? 'extra' : ''}">Avtalsperiod ${+this.index / 2 + 1}</div>` : html``}
    <div class=${(this.index != 0 && this.remove) ? 'tablerow' : 'tablerow'}>
        
        <div class="label ${this.renderlabel.ui_schema && this.renderlabel.ui_schema.ui_options && this.renderlabel.ui_schema.ui_options.color ? this.renderlabel.ui_schema.ui_options.color : ''}">
            ${this.remove && this.index == 0 ? html`<img src="./images/minus.svg" class="svg hidden" @click="${() => this.removeClickHandler()}">` : html``}
            ${this.remove && this.index != 0 ? html`<img src="./images/minus.svg" class="svg" @click="${() => this.removeClickHandler()}">` : html``}
            ${this.add ? html`<img src="./images/add-circular-outlined-button.svg" class="svg" @click="${() => this.addClickHandler()}">` : html``}
            ${this.renderlabel.data_schema}
        </div>
        <div class="data">
            ${toRender.call(this, prepareRender(this.renderdata))}
        </div>
        <div class="comment">
            ${toRender.call(this, prepareRender(this.rendercomment))}
        </div>    
    </div>
        ` : html``
        }

        firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.data$, this.label$, this.comment$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.renderdata = this.data;
                this.renderlabel = this.label;
                this.rendercomment = this.comment;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => { 
                if (propName === "props") {
                    if (is(Array, this.props)) {
                        this.props.forEach(prop$$1 => {
                            if(prop$$1.name == 'label') {
                                this.label = prop$$1;
                            }
                            if(prop$$1.name == 'data') {
                                this.data = prop$$1;
                            }
                            if(prop$$1.name == 'comment') {
                                this.comment = prop$$1;
                            }
                        });
                    } else {
                        if(this.props.name == 'label') {
                            this.label = this.props; 
                        }
                        if(this.props.name == 'data') {
                            this.data = this.props;
                        }
                        if(this.props.name == 'comment') {
                            this.comment = this.props;
                        }
                    }
                }        });
        }
    }

    customElements.define('x-assumption-row', XAssumptionRow);

    let props$6 = () => ([
        { propKey: "selected", propValue: { type: String }, rx: false },
        { propKey: "label", propValue: { type: String }, rx: true },
        { propKey: "button", propValue: { type: Boolean }, rx: true },
        { propKey: "data", propValue: { type: Object }, rx: true },
        { propKey: "rows", propValue: { type: Object }, rx: true },
        { propKey: "props", propValue: { type: Object }, rx: false }
      ]);

    class XRowsandlabel extends rxmixin(props$6, LitElement) {

        constructor() {
            super();
            this.rows = [];
            this.renderlabel = false;
            this.renderrows = false;
            this.okToRender = false;
        }

        getData(value, index) {
            return getData.call(this, value, index)
          }

          firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.label$, this.rows$, this.button$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.renderlabel = this.label;
                this.renderrows = this.rows;
                this.renderbutton = this.button;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        rowChangedHandler(e, index) {
            let event = new CustomEvent('rowchanged', { detail: {value: e.detail.value, row: index}}); 
            this.dispatchEvent(event);
        }

        removeRowHandler(index) {
            let event = new CustomEvent('removerowchanged', { detail: {row: index}}); 
            this.dispatchEvent(event);
        }

        addRowHandler(index) {
            let event = new CustomEvent('addrowchanged', { detail: {row: index}}); 
            this.dispatchEvent(event);
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => { 
                if (propName === "props") {
                    this.props.forEach((prop$$1, index) => {
                        if (prop$$1.name == 'label') {
                            this.label = prop$$1;
                        }
                        if (prop$$1.name == 'rows') {
                            this.rows = prop$$1;
                        }
                        if (!isNaN(+prop$$1.name)) {
                            this.rows[+prop$$1.name - 1] = prop$$1;
                        }
                        if (prop$$1.name == 'button') {
                            this.button = prop$$1;
                        }
                    });
                }          });
        }
        render() {
            
            return this.okToRender ? html`
            <style>

                .table {
                    display: grid;
                    grid-template-columns: repeat(1, 1fr);
                    grid-template-rows: 28px auto;
                    grid-column-gap: 20px;
                    grid-row-gap: 20px;
                }    

                .rowslabel{
                    font: var(--font-table-label);
                    color: var(--color-text);                    
                }

                .rows {
                    display: grid;
                    grid-template-columns: 1fr;
                    grid-row-gap: 20px;
                }
                

                .test {
                    color: white;
                }

            </style>
            
            <div class="table">
                ${toRender.call(this, prepareRender(this.renderlabel))}
                
                ${toRender.call(this, prepareRender(this.renderrows))}
     
            </div>`: html``
        }
    }

    customElements.define('x-rowsandlabel', XRowsandlabel);

    //set style to: currency, decimal or percent
    var formatOptionsDecimal = { style: 'decimal', currency: 'SEK', minimumFractionDigits: 0, maximumFractionDigits: 0, useGrouping: true};
    var formatOptionsPercent = { style: 'percent', minimumFractionDigits: 2, maximumFractionDigits: 2};
    //change formatting according to language 
    var decimalFormat = new Intl.NumberFormat('sv-SE', formatOptionsDecimal);

    var percentFormat = new Intl.NumberFormat('sv-SE', formatOptionsPercent);

    function test$1(item) {
      return item != " ";
    }

    function removeSpaces(item) {
      return pipe$1(
        split(""),
        filter$1(test$1)
      )(item).join("");
    }

    function isAnInteger(item) {
      let itemWithoutSpace = removeSpaces(item);
      if (
        !isNaN(itemWithoutSpace) &&
        typeof itemWithoutSpace !== "boolean" &&
        !startsWith("0", itemWithoutSpace) &&
        !startsWith(".", itemWithoutSpace) &&
        !startsWith(",", itemWithoutSpace)
      ) {
        return Number.isInteger(Number(itemWithoutSpace));
      } else {
        return item === "0";
      }
    }

    function isAPercent(item) {
      let itemWithoutSpace = removeSpaces(item);
      if (item == "0") {
        return true;
      }

      if (
        !isNaN(itemWithoutSpace) &&
        typeof itemWithoutSpace !== "boolean" &&
        !startsWith(".", itemWithoutSpace) &&
        !startsWith(",", itemWithoutSpace)
      ) {
        return Number(itemWithoutSpace) % 1 != 0 && Number(itemWithoutSpace) <= 1;
      } else {
        return false;
      }
    }

    let props$7 = () => [
      { propKey: "celltext", propValue: { type: String }, rx: false },
      { propKey: "color", propValue: { type: String }, rx: false },
      { propKey: "type", propValue: { type: String }, rx: false },
      { propKey: "amount", propValue: { type: String }, rx: false },
      { propKey: "readonly", propValue: { type: Boolean }, rx: false },
      { propKey: "format", propValue: { type: Boolean }, rx: false },
      { propKey: "changeevent", propValue: { type: Object }, rx: false },
      { propKey: "props", propValue: { type: Object }, rx: false }
    ];

    class XInput extends propsmixin(props$7, LitElement) {
      constructor() {
        super();
        this.readonly = false;
        this.format = false;
        this.changeevent = true;
        this.amount = 'kr';
      }

      blurHandler(e) {

        let value;
        if(e.path) {
          value = e.path[0].value;
        } else if(e.originalTarget) {
          value = e.originalTarget.value;
        } else {
          value = e.srcElement.value;
        }

        if (this.format && this.type) {
          if (this.type === "decimal") {
            
            if (isAnInteger(value)) {
              if (removeSpaces(value) != this.celltext) {
                let event = new CustomEvent("cellchanged", {
                  detail: { value: removeSpaces(value) }
                });
                this.changeevent ? this.dispatchEvent(event) : "";
              } else {
                this.shadowRoot.querySelector(
                  "#edcell"
                ).value = decimalFormat.format(this.celltext);
              }
            } else {
              this.shadowRoot.querySelector("#edcell").value = decimalFormat.format(
                this.celltext
              );
            }
          }

          if (this.type === "percent") {
            if (isAPercent(value)) {
              if (removeSpaces(value) != this.celltext) {
                let event = new CustomEvent("cellchanged", {
                  detail: { value: removeSpaces(value) }
                });
                this.changeevent ? this.dispatchEvent(event) : "";
              } else {
                this.shadowRoot.querySelector(
                  "#edcell"
                ).value = percentFormat.format(this.celltext);
              }
            } else {
              this.shadowRoot.querySelector("#edcell").value = percentFormat.format(
                this.celltext
              );
            }
          }
        } else {
          if (value != this.celltext) {
            let event = new CustomEvent("cellchanged", {
              detail: { value: removeSpaces(value) }
            });
            this.changeevent ? this.dispatchEvent(event) : "";
          } else {
            this.shadowRoot.querySelector("#edcell").value = this.celltext;
          }
        }
      }

      keydownHandler(e) {
        let validKeys = [
          "Delete",
          "Backspace",
          "Tab",
          "ArrowRight",
          "ArrowLeft",
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "-"
        ];

        if (this.type === "percent") {
          validKeys.push(".");
        }

        if (e.key === "Enter") {
          e.preventDefault();
          this.shadowRoot.querySelector("#edcell").blur();
        } else if (e.metaKey) {
          switch (e.key) {
            case "c":
              break;
            case "v":
              break;
          }
        } else if (contains$1(e.key, validKeys)) ; else {
          if (this.format) {
            e.preventDefault();
          }
        }
      }

      focusHandler(e) {
        if (!this.readonly) {
          this.shadowRoot.querySelector("#edcell").value = this.celltext;
          this.shadowRoot.querySelector("#edcell").select();
        } else {
          e.preventDefault();
          this.shadowRoot.querySelector("#edcell").blur();
        }
      }

      updated(changedProperties) {
        super.updated(changedProperties);
        changedProperties.forEach((oldValue, propName) => {
          if (propName == "celltext") {
            let celltext = this.celltext;

            if (this.amount) {
              if (this.amount == 'tkr') {
                celltext = +celltext / 1000;
                // console.log('AMOUNT', celltext)
              }
            }

            if (this.format) {
              if (this.type !== "percent") {
                this.shadowRoot.querySelector(
                  "#edcell"
                ).value = decimalFormat.format(celltext);
              } else {
                this.shadowRoot.querySelector(
                  "#edcell"
                ).value = percentFormat.format(celltext);
              }
            } else {
              this.shadowRoot.querySelector("#edcell").value = celltext;
            }
          }
          
          if (propName === "props") {


            // console.log('PROPS IN INPUT', this.props)
            if (this.props.ui_schema.ui_options) {
              this.color = this.props.ui_schema.ui_options.color;
              // this.type = this.props.ui_schema.ui_options.type;
              this.readonly = this.props.ui_schema.ui_options.readonly;
              this.format = this.props.ui_schema.ui_options.format;
              this.type = this.props.ui_schema.ui_options.type
                ? this.props.ui_schema.ui_options.type
                : this.type;
              this.amount = this.props.ui_schema.ui_options.amount
                ? this.props.ui_schema.ui_options.amount
                : this.amount;
            }

            if (this.props.ui_schema.ui_actions) {
              this.changeevent = this.props.ui_schema.ui_actions.changeevent;
            }

            this.celltext = this.props.data_schema;
          }
        });
      }

      render() {
        return html`
            <style>
            :host {
              align-self: end
            }

            .input {
                height: 3em;
                width: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
                font: var(--font-cell);
                border: 0px;
                box-sizing: border-box;
                text-align: right;
                padding: 0px;
                padding-right: 9px;
                border-radius: 0px;
            }
             .input:focus {
                outline: none !important;
                border:2px solid #FFC107;
                padding-right: 7px;
            }
            ::selection {
                background: #FFC107;
            }

            ::-moz-selection {
                background: #FFC107;
            } 
            
            .input--attention {
                background-color: var(--color-attention);
                color: var(--color-celltext);
            }

            .input--white {
                background-color: var(--color-text);
                color: var(--color-celltext);
                box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
            } 

            .input--none {
                background-color: var(--color-transparent);
                color: var(--color-text);
                font-weight: bold;
                text-align: center;
                padding-right: 0px;
            }

            .input--header {
                background-color: var(--color-transparent);
                color: var(--color-text);
                font: var(--font-table-rowheader);
                text-align: center;
                padding-right: 0px;
            }

            .input--sum {
                font: var(--font-cell-sum);
                background-color: #e6ac00;
            }
  
            </style>
            <input id="edcell" class="input ${
              this.type ? "input--" + this.type : ""
            } input--${this.color}" tabindex=${
      this.readonly ? "-1" : "0"
    } ?readonly=${this.readonly} @keydown="${event =>
      this.keydownHandler(event)}" @focus="${e =>
      this.focusHandler(e)}" @blur="${event =>
      this.blurHandler(event)}"></input>   
        `;
      }
    }

    customElements.define("x-input", XInput);

    let json_ref_array = {
        type: 'Object',
        properties: {
            rows: {
                type: 'Array',
                items: {
                    type: 'Object',
                    properties: {
                        label: {
                            type: 'String',
                        },
                        data: {
                            type: 'String',
                        },
                        comment: {
                            type: 'String',
                        },
                        button: {
                            type: 'Boolean',
                        }
                    }
                }
            },
            label: {
                type: 'Object',
                properties: {
                    label: {
                        type: 'String',
                    }
                }
            },
            button: {
                type: 'Boolean',
            }, 
        },
    };

    let json_ref_obj = {
        type: 'Object',
        properties: {
            1: {
                type: 'Object',
                properties: {
                    label: {
                        type: 'String',
                    },
                    data: {
                        type: 'String',
                    },
                    comment: {
                        type: 'String',
                    },
                    button: {
                        type: 'Boolean',
                    }
                }

            },
            2: {
                type: 'Object',
                properties: {
                    label: {
                        type: 'String',
                    },
                    data: {
                        type: 'String',
                    },
                    comment: {
                        type: 'String',
                    },
                    button: {
                        type: 'Boolean',
                    }
                }
            },
            // 3: {
            //     type: 'Object',
            //     properties: {
            //         label: {
            //             type: 'String',
            //         },
            //         data: {
            //             type: 'String',
            //         },
            //         comment: {
            //             type: 'String',
            //         },
            //         button: {
            //             type: 'Boolean',
            //         }
            //     }
            // },
            label: {
                type: 'Object',
                properties: {
                    label: {
                        type: 'String',
                    }
                }
            },
            button: {
                type: 'Boolean',
            }, 
        },
    };



    let ui_ref__obj = {
        ui_widget: "x-rowsandlabel",
        ui_classnames: "table",
        ui_order: [
            "1",
            "label",
            "button"
        ],
        1: {
            ui_widget: "x-assumption-row",
            ui_order: [
                "label",
                "data",
                "comment",
                "button"
            ],
            label: {
                ui_widget: "x-assumption-row-label",
            },
            data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'percent',
                },
                ui_actions: {
                    changeevent: true,
                }
            },
            comment: {
                ui_widget: "x-assumption-row-comment",
            },
        },
        label: {
            ui_widget: "x-assumption-row",
            ui_classnames: "header",
            ui_order: [
                "label",
            ],
            label: {
                // ui_classnames: "header",
                ui_options: {
                    color: 'header'
                }
            },
        },

    };


    let ui_ref__rates = {
        ...ui_ref__obj,
        ui_order: [
            "1",
            "2",
            "label",
            "button"
        ],
        1: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options: {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'percent',
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
        2: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options: {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'percent',
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
    };

    let ui_ref_invest = {
        ...ui_ref__obj,
        ui_order: [
            "1",
            "2",
            "label",
            "button"
        ],
        1: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'percent',
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
        2: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'decimal',
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
    };

    let ui_ref_maint = {
        ...ui_ref__obj,
        ui_order: [
            "1",
            "2",
            // "3",
            "label",
            "button"
        ],
        1: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'decimal'
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
        2: {
            ...ui_ref__obj[1], data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'decimal'
                },
                ui_actions: {
                    changeevent: true,
                }
            }
        },
        // 3: {
        //     ...ui_ref__obj[1], data: {
        //         ui_widget: "x-input",
        //         ui_options:  {
        //             format: true,
        //             readonly: false,
        //             color: 'white',
        //             type: 'decimal'
        //         },
        //         ui_actions: {
        //             changeevent: true,
        //         }
        //     }
        // },
    };



    let ui_ref_rent = {
        ui_widget: "x-rowsandlabel",
        ui_classnames: "table",
        ui_order: [
            "rows",
            "label",
            "button"
        ],
        rows: {
            ui_widget: "x-assumption-row",
            ui_order: [
                "label",
                "data",
                "comment",
                "button"
            ],
            label: {
                ui_widget: "x-assumption-row-label",
            },
            data: {
                ui_widget: "x-input",
                ui_options:  {
                    format: true,
                    readonly: false,
                    color: 'white',
                    type: 'decimal'
                },
                ui_actions: {
                    changeevent: true,
                }
            },
            comment: {
                ui_widget: "x-assumption-row-comment",
            },
        },
        label: {
            ui_widget: "x-assumption-row",
            ui_classnames: "header",
            ui_order: [
                "label",
            ],
            label: {
                // ui_classnames: "header",
                ui_options: {
                    color: 'header'
                }
            },
        },
    };


    function oneMainTablesschemas() {
        return {
            ui_schema: {
                ui_order: [
                    "investment",
                    "rent",
                    "maintenance",
                    "rates",
                ],
                investment: ui_ref_invest,
                rent: ui_ref_rent,
                maintenance: ui_ref_maint,
                rates: ui_ref__rates,
            },
            json_schema: {
                type: 'Object',
                properties: {
                    maintenance: json_ref_obj,
                    rates: json_ref_obj,
                    investment: json_ref_obj,
                    rent: json_ref_array,
                }
            },
            data_schema: {
                maintenance: {
                    1: {
                        label: "Kostnad för underhåll, permanenta lokaler",
                        data: this['maintenanceown'],
                        button: false,
                        comment:
                            "Eventuella underhållskostnader av egna lokaler samt oanvända lokaler. Underhållskostnader ska meddelas i prisnivå av startår. "
                    }, 
                    2: {
                        label: "Kostnad för underhåll, dynamiska lokaler",
                        data: this['maintenancerent'],
                        button: false,
                        comment: ""
                    }, 
                    // 3: {
                    //     label: "Kostnad för underhåll, oanvända lokaler",
                    //     data: this['maintenancenotused'],
                    //     button: false,
                    //     comment: ""
                    // },
                    label: {
                        label: "Kostnad för underhåll SEK / kvm",
                    },
                    button: false
                },
                rates: {
                    1: {
                        label: "Inflation per år",
                        data: this['inflation'],
                        button: false,
                        comment: "Inflation per år."
                    }, 
                    2: {
                        label: "Diskonteringsränta",
                        data: this['discount'],
                        button: false,
                        comment: "Diskonteringsränta för nuvärdeskalkyl."
                    },
                    label: {
                        label: "Inflation samt diskonteringsränta",
                    },
                    button: false
                },
                investment: {
                    1: {
                        label: "Reservation för kommande renoveringar",
                        data: this['reinvestment'],
                        button: false,
                        comment:
                            "Reservation av kommande renoveringar reflekterar försämring av teknisk kondition av fastighetsinnehav. Underhållsinvesteringar görs för att minska denna minskning av tekniskt värde."
                    },
                    2: {
                        label: "Investering SEK / kvm, nya lokaler",
                        data: this['investment'],
                        button: false,
                        comment:
                            "Pris per kvadratmeter av nya permanenta lokaler. Pris inkluderar en byggnad med samma funktionella och tekniska egenskaper som en dynamisk lokal. Investeringskostnader ska meddelas på prisnivå av startår."
                    },
                    label: {
                        label: "Reservation av kommande renoveringar samt investeringar",
                    },
             
                    button: false
                },
                rent: {
                    rows: pipe$1(zip$2, flatten)(this.amounts, this.periods),
                    label: {
                        label: "Hyreskostnader av dynamiska lokaler SEK / kvm / år",
                    },
                   
                    button: true
                }   
            }
        }
    }

    let schemaTemplate = {
        ui_schema: {
            ui_order: [
                "header",
            ],
            header: {
                ui_widget: "x-main-header",
                ui_classnames: "header",
                ui_order: [
                    "label",
                    "data",
                    "comment",
                ],
                ui_options: {
                    page: true
                }
            },
        },
        json_schema: {
            type: 'Object',
            properties: {
                header: {
                    type: 'Object',
                    properties: {
                        label: {
                            type: 'String',
                        },
                        data: {
                            type: 'String',
                        },
                        comment: {
                            type: 'String',
                        },
                    },
                },
            }
        },
    };

    let schemaTemplateOne = {
        ui_schema: {
            ui_order: [
                "header",
            ],
            header: {
                ui_widget: "x-main-header",
                ui_classnames: "header",
                ui_order: [
                    "label",
                    "data",
                    "comment",
                ],
                ui_options: {
                    page: false
                }
            },
        },
        json_schema: {
            type: 'Object',
            properties: {
                header: {
                    type: 'Object',
                    properties: {
                        label: {
                            type: 'String',
                        },
                        data: {
                            type: 'String',
                        },
                        comment: {
                            type: 'String',
                        },
                    },
                },
            }
        },
    };

    function oneMainHeaderSchemas() {
        return {
            ...schemaTemplateOne, 
            data_schema: {
                header: {
                    label: "Kostnadsslag",
                    data: "Scenariodata",
                    comment: "Kommentarer",
                }
            }
        }
    }

    function twoMainHeaderSchemas() {
        return {
            ...schemaTemplate, 
            data_schema: {
                header: {
                    label: "Antal kvadratmeter",
                    data: "",
                    comment: "",
                }
            }
        }
    }

    function threeHeaderSchemas() {
        return {
            ...schemaTemplate, 
            data_schema: {
                header: {
                    label: "Antal tkr",
                    data: "",
                    comment: "",
                }
            }
        }
    }

    function fourHeaderSchemas() {
        return {
            ...schemaTemplate, 
            data_schema: {
                header: {
                    label: "Grafer och Tabeller",
                    data: "",
                    comment: "",
                }
            }
        }
    }

    let props$8 = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "data", propValue: { type: Object }, rx: false },
        { propKey: "selected", propValue: { type: Boolean }, rx: false },
        { propKey: "value", propValue: { type: String }, rx: false },
        { propKey: "color", propValue: { type: String }, rx: false },
      ]);


    class XButton extends propsmixin(props$8, LitElement) {

        constructor() {
            super();
            this.selected = false;
        }

        clickHandler() {
            // console.log('click')
            let event = new CustomEvent('clickchanged');
            this.dispatchEvent(event);
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    if (this.props.ui_schema.ui_options) {
                        this.color = this.props.ui_schema.ui_options.color;
                        this.selected = this.props.ui_schema.ui_options.selected;
                    }

                    if (this.props.ui_schema.ui_actions) ;

                    this.value = this.props.data_schema.value;

                }        });
        }
        
        render() {
            
            return html`
            <style>
                .button {
                    display: flex;
                    justify-content: center;
                    align-items: center;                    
                    padding-left: 1.0em;
                    padding-right: 1.0em;
                    box-shadow: var(--shadow--small);
                    font: var(--font-scenario-button);
                    border: 1px solid var(--color-text);
                    color: var(--color-text);
                }

                .grey {
                    background-color: var(--color-grey); 
                    border: 1px solid var(--color-text);
                    color: var(--color-text);
                }

                .transparent {
                    background-color: var(--color-grey); 
                    border: 0px solid var(--color-text);
                    color: var(--color-text);
                }

                .grey.selected{
                    transition: background-color 0.1s ease-in;
                    background-color: var(--color-grey); 
                }
            </style>   
            
            <div class="button ${this.color} ${this.selected ? 'selected' : ''}" @click="${() => this.clickHandler()}">${this.value}</div> 
        `;
        }
    }

    customElements.define('x-button', XButton);

    let props$9 = () => ([
        {
            propKey: "props",
            propValue: { type: Object },
            rx: true
        },
        {
            propKey: "buttons",
            propValue: { type: Object },
            rx: true
        },
        {
            propKey: "headline",
            propValue: { type: Object },
            rx: true
        },
        {
            propKey: "okToRender",
            propValue: { type: Boolean },
            rx: false
        },
    ]);

    class XSubheader extends rxmixin(props$9, LitElement) {
        constructor() {
            super();
            this.rendertitle = false;
            this.renderbuttons = false;
            this.okToRender = false;
        }

        getData(value, index) {
            return getData.call(this, value, index)
          }

        scenarioChangedHandler(index) {
            let event = new CustomEvent('scenariochanged', { detail: {index: index }}); 
            this.dispatchEvent(event);
          }

        
          firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.buttons$, this.headline$])
            .pipe(rx.undefinedElementRemover)
            .subscribe((result) => {
                this.renderbuttons = this.buttons;
                this.rendertitle = this.headline;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    this.props.forEach(prop$$1 => {
                        if (prop$$1.name == 'buttons') {
                            this.buttons = prop$$1;
                        }
                        if (prop$$1.name == 'title') {
                            this.headline = prop$$1;
                        }
                    });
                }        });
        }



        render() {
            return this.okToRender ? 
            html`
            <style>
                .subheader {
                    display: grid;
                    grid-template-columns: repeat(12, 1fr);
                    grid-column-gap: 20px;
                    grid-template-areas: 
                        "title    title     title     title    title     title    title    boxes     boxes     boxes     boxes     boxes";
                }

                .title {                            
                    grid-area: title;
                    font: var(--font-subheader);
                    color: var(--color-text);
                    align-self: center;
                    /* visibility: ${this.hidetitle ? 'hidden' : 'visible'}; */
                } 

                .boxes {
                    display: grid;
                    grid-template-columns: repeat(1, 1fr);
                    grid-column-gap: 20px;
                    grid-template-areas: 
                    "firstbox";                    
                    grid-area: boxes;
                    align-self: center;
                    justify-self: end;  
                }

                .data {
                    grid-area: firstbox;
                    display: grid;
                    grid-template-columns: repeat(${this.renderbuttons.json_schema.length}, 1fr);
                    grid-template-rows: auto;
                    grid-column-gap: 6px;
                }
            </style>
            
            <div class="subheader">
                <div class="title">${this.rendertitle.data_schema}</div>
                <div class="boxes">
                    <div class="data">
                        ${toRender.call(this, prepareRender(this.renderbuttons))}   
                    </div>
                </div>
            </div>`
                : html``
        }
    }

    customElements.define('x-subheader', XSubheader);

    let schemaTemplate$1 = {
        ui_schema: {
            ui_order: [
                "subheader",
            ],
            subheader: {
                ui_widget: "x-subheader",
                ui_classnames: "subheader",
                ui_order: [
                    "buttons",
                    "title"
                ],
                buttons: {
                    ui_widget: "x-button",
                    ui_options:  {
                        color: {
                            fn: 'getData',
                            parameter: 'color'
                        },
                        selected: {
                            fn: 'getData',
                            parameter: 'selected'
                        }
                    },
                    ui_order: [
                        "value",
                    ]
                },
            }
            
        },
        json_schema: {
            type: 'Object',
            properties: {
                subheader: {
                    type: 'Object',
                    properties: {
                        buttons: {
                            type: 'Array',
                            items: {
                                type: 'Object',
                                properties: {
                                    value: {
                                        type: 'String',
                                    },
                                },
                            }
                        },
                        title: {
                            type: 'String',
                        },
                    }
                }
                
            }
        },
        data_schema: {
            subheader: {
                buttons: [
                    {
                        value: "Scenario 1",
                    },
                    {
                        value: "Scenario 2",
                    },
                    {
                        value: "Scenario 3",
                    }
                ],
                title: 'Antaganden'
            }  
        }
    };


    function oneSubheaderSchemas() {
        return {
            ...schemaTemplate$1,
            data_schema: {
                subheader: {
                    buttons: [
                        {
                            value: "Scenario 1",
                        },
                        {
                            value: "Scenario 2",
                        },
                        {
                            value: "Scenario 3",
                        }
                    ],
                    title: 'Antaganden'
                }  
            }
        }
    }

    function twoSubheaderSchemas() {
        return {
            ...schemaTemplate$1,
            data_schema: {
                subheader: {
                    buttons: [
                        {
                            value: "Scenario 1",
                        },
                        {
                            value: "Scenario 2",
                        },
                        {
                            value: "Scenario 3",
                        }
                    ],
                    title: 'Investeringsprogram'
                }  
            }
        }
    }

    function threeSubheaderSchemas() {
        return {
            ...schemaTemplate$1,
            data_schema: {
                subheader: {
                    buttons: [
                        {
                            value: "Scenario 1",
                        },
                        {
                            value: "Scenario 2",
                        },
                        {
                            value: "Scenario 3",
                        }
                    ],
                    title: 'Kostnader per år'
                }  
            }
        }
    }

    function fourSubheaderSchemas() {
        return {
            ...schemaTemplate$1,
            data_schema: {
                subheader: {
                    buttons: [
                        {
                            value: "Scenario 1",
                        },
                        {
                            value: "Scenario 2",
                        },
                        {
                            value: "Scenario 3",
                        }
                    ],
                    title: 'Resultat'
                }  
            }
        }
    }

    let props$a = () => [
      {
        propKey: "scenario",
        propValue: { type: String }
      },
      {
        propKey: "title",
        propValue: { type: String }
      },
      { 
        propKey: "renderdata", 
        propValue: { type: Array }, 
        rx: false 
      },
      { 
        propKey: "props", 
        propValue: { type: Object }, 
        rx: false 
      },
      { 
        propKey: "subheader", 
        propValue: { type: Object }, 
        rx: true 
      },
      { 
        propKey: "header", 
        propValue: { type: Object }, 
        rx: true 
      },
      { 
        propKey: "main", 
        propValue: { type: Object }, 
        rx: true 
      },
      // { 
      //   propKey: "hidesubheader", 
      //   propValue: { type: Boolean }, 
      //   rx: false 
      // },
    ];

    class XMain extends rxmixin(props$a, LitElement) {
      constructor() {
        super();
        this.rendermain = false;
        this.renderheader = false;
        this.rendersubheader = false;
        this.okToRender = false;
        this.scenario = chosenScenario;
        // this.hidesubheader = false
      }

      tablePagingChangedHandler() {
        let event = new CustomEvent('tablepagingchanged');
        this.dispatchEvent(event);
        // console.log(e)
      }

      scenarioChangedHandler(e) {
        let event = new CustomEvent('scenariochanged', { detail: {index: e.detail.index} });
        this.dispatchEvent(event);
      }

      gridChangedHandler(e, index) {
        let event = new CustomEvent('gridchanged', { detail: {...e.detail, table: index} });
        this.dispatchEvent(event);
      }

      tableChangedHandler(e, index) {
        //console.log('TCH: ', e, index)
        let event = new CustomEvent('tablechanged', { detail: {...e.detail, table: index} });
        this.dispatchEvent(event);
      }

      addRowChangedHandler(e, index) {
        let event = new CustomEvent('addrowchanged', { detail: {...e.detail, table: index} });
        this.dispatchEvent(event);
      }

      removeRowChangedHandler(e, index) {
        let event = new CustomEvent('removerowchanged', { detail: {...e.detail, table: index} });
        this.dispatchEvent(event);
      }

      rowChangedHandler(e, index) {
        let event = new CustomEvent('rowchanged', { detail: {...e.detail, table: index} });
        this.dispatchEvent(event);
      }

      firstUpdated() {
        super.firstUpdated();
        rx.latestCombiner([this.subheader$])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            this.rendersubheader = this.subheader;
            this.renderheader = this.header;
            this.rendermain = this.main;
            // this.renderscenario = this.scenario
            // this.rendertitle = this.title
            this.okToRender = true;
            this.requestUpdate();
          });
       
      }

    //   rx.latestCombiner([this.subheader$, this.header$, this.main$])
    //   .pipe(rx.undefinedElementRemover)
    //   .subscribe(() => {
    //     this.rendersubheader = this.subheader;
    //     this.renderheader = this.header;
    //     this.rendermain = this.main;
    //     this.renderscenario = this.scenario
    //     this.rendertitle = this.title
    //     this.okToRender = true
    //     this.requestUpdate();
    //   })

    // }

      updated(changedProperties) {
        super.updated(changedProperties);
        changedProperties.forEach((oldValue, propName) => {
            if (propName === "props") {
              
              this.props.forEach(prop$$1 => {
              
                if (prop$$1.name == 'subheader') {
                  this.subheader = prop$$1;
           
                }
                if (prop$$1.name == 'header') {
                  this.header = prop$$1;
                }
                if (prop$$1.name == 'main') {
                  this.main = prop$$1;
                }
              });
            }    });

    }


      render() {
        return this.okToRender ? html`
      ${grid}
      <style>
        .center {
          display: grid;
          grid-template-columns: repeat(12, 1fr);
          grid-template-rows: 90px auto 94px auto 200px;
          grid-column-gap: 20px;
          grid-template-areas:
            ".  .   .   .   .   .   .   .   .   .   .  ."
            "subheader  subheader   subheader   subheader   subheader   subheader   subheader   subheader   subheader   subheader   subheader  subheader"
            ".          .           .           .           .           .           .           .           .           .           .           ."
            "main       main        main        main        main        main        main        main        main        main        main        main"
            ".          .           .           .           .           .           .           .           .           .           .           .";

          grid-area: center;
        }

        .subheader {
          grid-area: subheader;
          /* position: sticky;
          top: 100px; */
          /* visibility: ${this.hidesubheader ? 'hidden' : 'visible'}; */
        }

        .main {
          grid-area: main;
          grid-template-columns: repeat(12, 1fr);
          grid-template-rows: auto;
          grid-column-gap: 20px;
          grid-row-gap: 3em;
          display: grid;
        }

        .header {
          grid-column-start: 1;
          grid-column-end: 13;
          /* position: sticky;
          top: 180px; */
        }

        .table {
          grid-column-start: 1;
          grid-column-end: 13;
          padding-bottom: 10px; 
          /* position: sticky;
          top: 180px; */

        }

        .table-0 {
          grid-column-start: 1;
          grid-column-end: 7;
          padding-bottom: 50px;

        }

        .tableone {
          grid-column-start: 1;
          grid-column-end: 13;
          padding-bottom: 50px;
        }

        .tabletwo {
          grid-column-start: 1;
          grid-column-end: 13;
          padding-bottom: 50px;
        }

        /* .tablechartone-0 {
          grid-column-start: 1;
          grid-column-end: 7;
          padding-bottom: 50px;
        }

        .tabletchartwo-0 {
          grid-column-start: 7;
          grid-column-end: 13;
          padding-bottom: 50px;
        } */

        .table-1 {
          grid-column-start: 7;
          grid-column-end: 13;
          padding-bottom: 50px;
        }

        .gridbox-0 {
          grid-column-start: 2;
          grid-column-end: 4;
          padding-bottom: 50px;
          align-self: start

        }

        .gridbox-1 {
          grid-column-start: 4;
          grid-column-end: 6;
          padding-bottom: 50px;
          align-self: start
        }

        .gridbox-2 {
          grid-column-start: 6;
          grid-column-end: 8;
          padding-bottom: 50px;
          align-self: start
        }

      </style>


      <div class="center">
          ${toRender.call(this, prepareRender(this.rendersubheader))}
        <div class="main">
          ${toRender.call(this, prepareRender(this.renderheader))}
          ${toRender.call(this, prepareRender(this.rendermain))}
        </div>
      </div>
      ` : html``
        ;
      }
    }

    customElements.define("x-main", XMain);

    function mergeSchemas() {
      return {
          ui_schema: {
              ui_order: [
                "xmain"
              ],
              xmain: {
                ui_widget: 'x-main',
                ui_order: [
                  "subheader",
                  "header",
                  "main",
                ],
                ui_merged: true,
                subheader: oneSubheaderSchemas.call(this).ui_schema,
                header: oneMainHeaderSchemas.call(this).ui_schema,
                main: oneMainTablesschemas.call(this).ui_schema,
              }
              
          },
          json_schema: {
              type: 'Object',
              properties: {
                  xmain: {
                      type: 'Object',
                      properties: {
                          subheader: oneSubheaderSchemas.call(this).json_schema,
                          header: oneMainHeaderSchemas.call(this).json_schema,
                          main: oneMainTablesschemas.call(this).json_schema,
                      }
                  }
              }
          },
          data_schema: {
            xmain: {
              subheader: oneSubheaderSchemas.call(this).data_schema,
              header: oneMainHeaderSchemas.call(this).data_schema,
              main: oneMainTablesschemas.call(this).data_schema,
            }
            
          }
      }
    }

    let props$b = () => [
      {
        propKey: "startyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "startyear"]
      },
      {
        propKey: "scenario",
        propValue: { type: String },
        rx: true,
      },
      {
        propKey: "investment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "initial"]
      },
      {
        propKey: "reinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "future"]
      },
      {
        propKey: "inflation",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "inflation"]
      },
      {
        propKey: "discount",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "discount"]
      },
      {
        propKey: "rentamount",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "rentperiod",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "maintenanceown",
        propValue: { type: Array },
        rx: true,
        path: [
          "assumptions",
          "maintenance",
          "scenario" + chosenScenario,
          "permanent"
        ]
      },
      {
        propKey: "maintenancerent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "dynamic"]
      },
      {
        propKey: "maintenancenotused",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "notused"]
      },
      { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
      { propKey: "periods", propValue: { type: Array }, rx: false },
      { propKey: "amounts", propValue: { type: Array }, rx: false }
    ];

    class XOne extends reduxmixin(props$b, rxmixin(props$b, LitElement)) {
      constructor() {
        super();
        this.renderxmain = false;
        this.okToRender = false;
        this.prevState = {};
        this.amounts = [];
        this.periods = [];
        this.scenario = chosenScenario;
      }

      getData(value, index) {
        return getData.call(this, value, index)
      }

      scenarioChangedHandler(e) {
        // console.log(e)
        chosenScenario = +e.detail.index + 1;
        page = 0;
        this.scenario = chosenScenario;
        // console.log(chosenScenario)
        this.stateChanged(this.storeHolder.store.getState(), props$b);
      }

      addRowChangedHandler(e) {
        this.storeHolder.store.dispatch(
          action.assumptions_rent_add({
            index: e.detail.row,
            scenario: chosenScenario
          })
        );
      }

      removeRowChangedHandler(e) {
        this.storeHolder.store.dispatch(
          action.assumptions_rent_remove({
            index: e.detail.row,
            scenario: chosenScenario
          })
        );
      }

      rowChangedHandler(e, index) {
        let group = e.detail.table;

        if (group == 0) {
          if (e.detail.row == 0) {
            this.storeHolder.store.dispatch(
              action.assumptions_investments_future({
                value: e.detail.value,
                scenario: chosenScenario
              })
            );
          }
          if (e.detail.row == 1) {
            this.storeHolder.store.dispatch(
              action.assumptions_investments_initial({
                value: e.detail.value,
                scenario: chosenScenario
              })
            );
          }
        }

        if (group == 1) {
          if (e.detail.row % 2 === 0) {
            this.storeHolder.store.dispatch(
              action.assumptions_rent_amount({
                value: e.detail.value,
                index: chosenScenario,
                scenario: chosenScenario,
                item: math.floor(Number(e.detail.row) / 2),
                order: math.floor(Number(e.detail.row) / 2)
              })
            );
          }
          if (e.detail.row % 2 === 1) {
            this.storeHolder.store.dispatch(
              action.assumptions_rent_period({
                value: e.detail.value,
                index: chosenScenario,
                scenario: chosenScenario,
                item: math.floor(Number(e.detail.row) / 2),
                order: math.floor(Number(e.detail.row) / 2)
              })
            );
          }
        }

        if (group == 2) {
          if (e.detail.row == 0) {
            this.storeHolder.store.dispatch(
              action.assumptions_maintenance_permanent({
                value: e.detail.value,
                scenario: chosenScenario
              })
            );
          }
          if (e.detail.row == 1) {
            this.storeHolder.store.dispatch(
              action.assumptions_maintenance_dynamic({
                value: e.detail.value,
                scenario: chosenScenario
              })
            );
          }
          if (e.detail.row == 2) {
            this.storeHolder.store.dispatch(
              action.assumptions_maintenance_notused({
                value: e.detail.value,
                scenario: chosenScenario
              })
            );
          }
        }

        if (group == 3) {
          if (e.detail.row == 0) {
            this.storeHolder.store.dispatch(
              action.assumptions_rates_inflation({ value: e.detail.value })
            );
          }
          if (e.detail.row == 1) {
            this.storeHolder.store.dispatch(
              action.assumptions_rates_discount({ value: e.detail.value })
            );
          }
        }
      }



      firstUpdated() {
        super.firstUpdated();

        rx.latestCombiner([
          this.rentamount$,
          this.rentperiod$,
          this.maintenanceown$,
          this.maintenancerent$,
          this.maintenancenotused$,
          this.inflation$,
          this.discount$,
          this.investment$,
          this.reinvestment$,
          this.scenario$
        ])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            this.amounts = this.rentamount.map(item => {
              return {
                label: "Hyreskostnader SEK / kvm / år",
                data: item,
                button: false,
                comment:
                  "Hyreskostnad per kvadratmeter per år av dynamiska lokaler. Informationen ska baseras på prisnivån av startåret."
              };
            });

            this.periods = this.rentperiod.map(item => {
              return {
                label: "Avtalslängd, antal år",
                data: item,
                button: false,
                comment: ""
              };
            });

            this.storeHolder.store.dispatch(
              action.assumptions_endyear({
                endyear: (
                  arrayAdder(this.rentperiod) +
                  +this.startyear -
                  1
                ).toString(),
                startyear: this.startyear,
                scenario: chosenScenario
              })
            );

            getRenderData.call(this, mergeSchemas)
            .then(renderdata => {
              renderdata.forEach(prop$$1 => {
                if (prop$$1.name == 'xmain') {
                  this.xmain = prop$$1;
                }
              });

              this.renderxmain = this.xmain;
              this.okToRender = true;
              this.requestUpdate();
            });
          });
      }

      render() {
        return this.okToRender ? html`
      ${toRender.call(this, prepareRender(this.renderxmain))}
        ` : html``
      }
    }

    customElements.define("x-one", XOne);

    let props$c = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "header", propValue: { type: Object }, rx: true },
        { propKey: "rows", propValue: { type: Object }, rx: true },
        { propKey: "sumrow", propValue: { type: Object }, rx: true },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
      ]);

    class XTable extends rxmixin(props$c, LitElement) {

        constructor() {
            super();
            this.okToRender = false;
            this.header = false;
            this.rows = false;
            this.sumrow = false;
          }

          getData(value, index) {
            return getData.call(this, value, index)
          }

        rowChangedHandler(e, index) {
            console.log('RCH: ', e, index);
            let event = new CustomEvent('tablechanged', { detail: {row: index, column: e.detail.column, value: e.detail.value}}); 
            this.dispatchEvent(event);
        }

        firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.header$, this.rows$, this.sumrow$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.renderheader = this.header;
                this.renderrows = this.rows;
                this.rendersumrow = this.sumrow;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        render() {
            
            return this.okToRender ? html`
            <style>
                .table {
                    display: grid;
                    grid-template-columns: repeat(1, 1fr);
                    grid-gap: 2px;                 
                }
            </style>
            
            <div class="table">
                ${toRender.call(this, prepareRender(this.renderheader))}
                ${toRender.call(this, prepareRender(this.renderrows))}
                ${toRender.call(this, prepareRender(this.rendersumrow))}
            </div>
            ` : html``
        }

        updated(changedProperties){
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
              if (propName === "props") {
                this.props.forEach(prop$$1 => {
                    if (prop$$1.name == 'header') {
                        this.header = prop$$1;
                    }
                    if (prop$$1.name == 'rows') {
                        this.rows = prop$$1;
                    }
                    if (prop$$1.name == 'sumrow') {
                        this.sumrow = prop$$1;
                    }
                });
              }        });   
        }
    }




    customElements.define('x-table', XTable);

    let props$d = () => ([
        { propKey: "label", propValue: { type: Array }, rx: true },
        { propKey: "data", propValue: { type: Array }, rx: true },
        { propKey: "type", propValue: { type: String }, rx: false },
        { propKey: "startyear", propValue: { type: String }, rx: false},
        { propKey: "endyear", propValue: { type: Array }, rx: false},
        { propKey: "format", propValue: { type: Boolean }, rx: false },
        { propKey: "readonly", propValue: { type: Boolean }, rx: false },
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
      ]);


    class XTableRow extends rxmixin(props$d, LitElement) {

        constructor() {
            super();
            this.readonly = false;
            this.label = false;
            this.data = false;
            this.okToRender = false;
            
        }


        cellChangedHandler(e, index) {
            let event = new CustomEvent('rowchanged', { detail: {column: index + 10 * page, value: e.detail.value }}); 
            this.dispatchEvent(event);
        }

        firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.data$, this.label$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(async () => {
                this.renderdata = this.data;
                this.renderlabel = this.label;
                let rowarr = await this.renderdata.json_schema;
                rowlength = rowarr.length;

                this.renderdata = {...this.renderdata, json_schema: [...slice(0 + 10 * page, 10 + 10 * page, await this.renderdata.json_schema)], data_schema: [...slice(0 + 10 * page, 10 + 10 * page, await this.renderdata.data_schema)]};

               
                if (this.renderdata && this.renderlabel) {
                    this.okToRender = true;
                    this.requestUpdate();
                }
            });

        }

        render() {

            return this.okToRender ? html`
            <style>
                .tablerow {
                    display: grid;
                    grid-template-columns: repeat(10, 1fr);
                    grid-column-gap: 20px;
                    grid-template-areas: 
                        "label    label    label      data    data      data    data      data    data     data";
                } 

                .label {
                    grid-area: label;
                    font: var(--font-table-row-label);
                    color: var(--color-text);
                }

                .data {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(1px,1fr));
                    grid-gap:2px;
                    grid-area: data;
                }

                .label--sum {
                    font: var(--font-table-row-label--sum);
                }

                .attention {
                    background-color: var(--color-attention);
                    border: 1px solid var(--color-attention);
                    color: var(--color-text);
                }

                .grey {
                    background-color: rgba(196, 196, 196, 0.16);
                    border: 1px solid var(--color-text);
                    color: var(--color-text);
                }

                .white {
                    border: 1px solid var(--color-text);
                    background-color: var(--color-text);
                    color: #575757;
                    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1); 
                } 

                .header {
                    border: 1px solid var(--color-transparent);
                    color: var(--color-text);
                    font: var(--font-table-label);
                }
            </style>
            
            <div class="tablerow">
                <div class="label ${this.renderlabel.ui_schema.ui_options.color == 'header' ? 'header' : ''} ${this.renderlabel.ui_schema.ui_options.type == 'sum' ? 'label--sum' : ''}">${this.renderlabel.data_schema}</div>
                <div class="data">
                    ${toRender.call(this, prepareRender(this.renderdata))}
                </div> 
            </div>
            ` : html``
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    if (is(Array, this.props)) {
                        this.props.forEach(prop$$1 => {
                            if (prop$$1.name == 'label') {
                                this.label = prop$$1;
                            }
                            if (prop$$1.name == 'data') {
                                this.data = prop$$1;
                            }
                        });
                    } else {
                        if (this.props.name == 'label') {
                            this.label = this.props;

                        }
                        if (this.props.name == 'data') {
                            this.data = this.props;
                        }
                    }
                }        });
        }
    }

    customElements.define('x-table-row', XTableRow);






     // console.log('DATA', this.renderdata)

    let ui_ref_header = {
        ui_widget: "x-table-row",
        ui_classnames: "header",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: false,
                readonly: true,
                color: 'header',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: false,
                readonly: true,
                color: 'none',
            },
        }
    };


    let ui_ref_rows = {
        ui_widget: "x-table-row",
        ui_classnames: "rows",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                color: 'white',
                type: 'decimal'
            },
            ui_actions: {
                changeevent: true,
            }
        }
    };

    let ui_ref_rows__aggregate = {
        ui_widget: "x-table-row",
        ui_classnames: "aggregaterow",
        ui_order: [
            "label",
            "data",
        ],
        label: {
            ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                color: 'attention',
            },
        }
    };


    let json_ref_table = {
        type: 'Object',
        properties: {
            header: {
                type: 'Object',
                properties: {
                    label: {
                        type: 'String',
                    },
                    data: {
                        type: 'Array',
                        items: {
                            type: 'Number',
                        }
                    }
                },
                
            },
            rows: {
                type: 'Array',
                items: {
                    type: 'Object',
                    properties: {
                        label: {
                            type: 'String',
                        },
                        data: {
                            type: 'Array',
                            items: {
                                type: 'Number',
                            },
                        }
                    },
                }
            },
        }
    };


    function twoMainTablesSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "inputtable",
                    "outputtable",
                ],
                inputtable: {
                    ui_widget: "x-table",
                    ui_classnames: "table",
                    ui_order: [
                        "header",
                        "rows",
                    ],
                    header: ui_ref_header,
                    rows: ui_ref_rows,
                },
                outputtable: {
                    ui_widget: "x-table",
                    ui_classnames: "table",
                    ui_order: [
                        "header",
                        "rows",
                    ],
                    header: ui_ref_header,
                    rows: ui_ref_rows__aggregate,
                },
            },
            json_schema: {
                type: 'Object',
                properties: {
                    inputtable: json_ref_table,
                    outputtable: json_ref_table,
                }
            },
            data_schema: {
                inputtable: {
                    header: {
                        label: "Förändrad efterfrågan och volym av lokaler",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Förändrad efterfrågan av lokalyta",
                            data: this.dataArray[0]  
                        },
                        {
                            label: "Förändrad lokalyta, dynamiska lokaler",
                            data: this.dataArray[1]
                        },
                        {
                            label: "Förändrad lokalyta, permanenta lokaler",
                            data: this.dataArray[2]
                        }
                    ]
                },
                outputtable: {
                    header: {
                        label: "Aggregerad efterfrågan och volym av lokaler",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Aggregerad efterfrågan av lokalyta",
                            data: this.aggregateDataArr[0]
                        },
                        {
                            label: "Aggregerad lokalyta, dynamiska lokaler",
                            data: this.aggregateDataArr[1]
                        },
                        {
                            label: "Aggregerad lokalyta, permanenta lokaler",
                            data: this.aggregateDataArr[2]
                        }
                    ]
                }
            }
        }
    }

    function mergeSchemas$1() {
      return {
          ui_schema: {
              ui_order: [
                "xmain"
              ],
              xmain: {
                ui_widget: 'x-main',
                ui_order: [
                  "subheader",
                  "header",
                  "main",
                ],
                ui_merged: true,
                subheader: twoSubheaderSchemas.call(this).ui_schema,
              header: twoMainHeaderSchemas.call(this).ui_schema,
              main: twoMainTablesSchemas.call(this).ui_schema,
              }
              
          },
          json_schema: {
              type: 'Object',
              properties: {
                  xmain: {
                      type: 'Object',
                      properties: {
                        subheader: twoSubheaderSchemas.call(this).json_schema,
                        header: twoMainHeaderSchemas.call(this).json_schema,
                        main: twoMainTablesSchemas.call(this).json_schema,
                      }
                  }
              }
          },
          data_schema: {
            xmain: {
              subheader: twoSubheaderSchemas.call(this).data_schema,
            header: twoMainHeaderSchemas.call(this).data_schema,
            main: twoMainTablesSchemas.call(this).data_schema,
            }
            
          }
      }
    }


    let props$e = () => [
      { 
        propKey: "data", 
        propValue: { type: Array }, 
        rx: false 
      },
      {
        propKey: "scenario",
        propValue: { type: String },
        rx: true,
      },
      {
        propKey: "startyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "startyear"]
      },
      {
        propKey: "endyear",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "scenario" + chosenScenario, "endyear"]
      },
      {
        propKey: "demandrow",
        propValue: { type: Object },
        rx: true,
        path: ["investmentprogram", "demand", "scenario" + chosenScenario]
      },
      {
        propKey: "volumedynamicrow",
        propValue: { type: Object },
        rx: true,
        path: ["investmentprogram", "volumedynamic", "scenario" + chosenScenario]
      },
      {
        propKey: "volumepermanentrow",
        propValue: { type: Object },
        rx: true,
        path: ["investmentprogram", "volumepermanent", "scenario" + chosenScenario]
      },
      { 
        propKey: "renderdata", 
        propValue: { type: Array }, 
        rx: false 
      },
      { 
        propKey: "newtable", 
        propValue: { type: Boolean }, 
        rx: true 
      },
    ];



    class XTwo extends reduxmixin(props$e, rxmixin(props$e, LitElement)) {
      constructor() {
        super();
        this.renderxmain = false;
        this.okToRender = false;
        this.scenario = chosenScenario;
        this.newtable = true;
      }

      getData(value, index) {
        return getData.call(this, value, index)
      }

      scenarioChangedHandler(e) {
        chosenScenario = +e.detail.index + 1;
        page = 0;
        this.scenario = chosenScenario;
        this.stateChanged(this.storeHolder.store.getState(), props$e);
      }

      tablePagingChangedHandler() {
        //console.log('HERE')
        this.newtable = !this.newtable;
      }



      tableChangedHandler(e) {
        let column = e.detail.column;
        let row = e.detail.row;
        let value = e.detail.value;
        let year = +this.startyear + +column;

        if (row == 0) {
          this.storeHolder.store.dispatch(
            action.investmentprogram_demand({
              key: year,
              value: value,
              years: getPeriodArray(this.startyear, this.endyear)
            })
          );
        }

        if (row == 1) {
          this.storeHolder.store.dispatch(
            action.investmentprogram_volumedynamic({
              key: year,
              value: value,
              years: getPeriodArray(this.startyear, this.endyear)
            })
          );
        }

        if (row == 2) {
          this.storeHolder.store.dispatch(
            action.investmentprogram_volumepermanent({
              key: year,
              value: value,
              years: getPeriodArray(this.startyear, this.endyear)
            })
          );
        }
      }

      firstUpdated() {
        super.firstUpdated();
        rx.latestCombiner([
          this.startyear$,
          this.endyear$,
          this.demandrow$,
          this.volumepermanentrow$,
          this.volumedynamicrow$,
          this.scenario$,
          this.newtable$
          // this.rentperiod$
        ])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            this.period = getPeriodArray(this.startyear, this.endyear);
            // this.period = this.rentperiod

            // this.storeHolder.store.dispatch(
            //   action.assumptions_endyear({
            //     endyear: (
            //       arrayAdder(this.rentperiod) +
            //       +this.startyear -
            //       1
            //     ).toString(),
            //     startyear: this.startyear,
            //     scenario: chosenScenario
            //   })
            // );

            this.dataArray = ["demandrow", "volumedynamicrow", "volumepermanentrow"]
              .map(item => this[item])
              .map(item => Object.values(item));

            this.aggregateDataArr = this.dataArray.map(arrayAggregator);

            getRenderData.call(this, mergeSchemas$1)
              .then(renderdata => {
                renderdata.forEach(prop$$1 => {
                  if (prop$$1.name == 'xmain') {
                    this.xmain = prop$$1;
                  }
                });

                this.renderxmain = this.xmain;
                this.okToRender = true;
                this.requestUpdate();
              });
          });
      }

      render() {
        return this.okToRender ? html`
      ${toRender.call(this, prepareRender(this.renderxmain))}
        ` : html``
      }
    }

    customElements.define("x-two", XTwo);

    let ui_ref_header$1 = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: false,
                readonly: true,
                nottabable: true,
                color: 'header',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: false,
                readonly: true,
                nottabable: true,
                color: 'none',
            },
        }
    };


    let ui_ref_rows$1 = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                amount: 'tkr',
                color: 'attention'
            },
        }
    };

    let ui_ref_sumrow = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
                type: 'sum',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'attention',
                amount: 'tkr',
                type: 'sum',
            },
        }
    };

    let json_ref_row = {
        type: 'Object',
        properties: {
            label: {
                type: 'String',
            },
            data: {
                type: 'Array',
                items: {
                    type: 'Number',
                }
            }
        },
    };

    let json_ref_table__sum = {
        type: 'Object',
        properties: {
            header: json_ref_row,
            rows: {
                type: 'Array',
                items: json_ref_row
            },
            sumrow: json_ref_row,
        }
    };

    function threeMainSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "table",
                ],
                table: {
                    ui_widget: "x-table",
                    ui_classnames: "table",
                    ui_order: [
                        "header",
                        "rows",
                        "sumrow",
                    ],
                    header: ui_ref_header$1,
                    rows: ui_ref_rows$1,
                    sumrow: ui_ref_sumrow,
                },
            },
            json_schema: {
                type: 'Object',
                properties: {
                    table: {
                        type: 'Array',
                        items: json_ref_table__sum
                    }
                }
            },
            data_schema: {
                table: [
                    {
                        header: {
                            label: "Kostnader av permanenta lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Investering i nya lokaler",
                                data: this.permanentInvestmentCosts
                            },
                            {
                                label: "Underhåll av egna lokaler",
                                data: this.permanentMaintenanceCosts
                            },
                            {
                                label: "Reservation för kommande renoveringar",
                                data: this.permanentReinvestmentCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippedpermanentCost
                        },
                    },
                    {
                        header: {
                            label: "Kostnader av dynamiska lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Hyra av dynamiska lokaler",
                                data: this.dynamicRentCosts
                            },
                            {
                                label: "Underhåll av dynamiska lokaler",
                                data: this.dynamicMaintenanceCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippeddynamicCost
                        }
                    },
                    {
                        header: {
                            label: "Diskonterade kostnader av permanenta lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Investering i nya lokaler",
                                data: this.discountedPermanentInvestmentCosts
                            },
                            {
                                label: "Underhåll av egna lokaler",
                                data: this.discountedPermanentMaintenanceCosts
                            },
                            {
                                label: "Reservation för kommande renoveringar",
                                data: this.discountedPermanentReinvestmentCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippeddiscountedpermanentCost
                        },
                    },
                    {
                        header: {
                            label: "Diskonterade kostnader av dynamiska lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Hyra av dynamiska lokaler",
                                data: this.discountedDynamicRentCosts
                            },
                            {
                                label: "Underhåll av dynamiska lokaler",
                                data: this.discountedDynamicMaintenanceCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippeddiscounteddynamicCost
                        }
                    },
                    {
                        header: {
                            label: "Aggregerade diskonterade kostnader av permanenta lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Investering i nya lokaler",
                                data: this.aggregatedDiscountedPermanentInvestmentCosts
                            },
                            {
                                label: "Underhåll av egna lokaler",
                                data: this.aggregatedDiscountedPermanentMaintenanceCosts
                            },
                            {
                                label: "Reservation för kommande renoveringar",
                                data: this.aggregatedDiscountedPermanentReinvestmentCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippedaggregateddiscountedpermanentCost
                        },
                    },
                    {
                        header: {
                            label: "Aggregerade diskonterade kostnader av dynamiska lokaler",
                            data: {
                                fn: 'getData',
                                parameter: 'identity'
                            }
                        },
                        rows: [
                            {
                                label: "Hyra av dynamiska lokaler",
                                data: this.aggregatedDiscountedDynamicRentCosts
                            },
                            {
                                label: "Underhåll av dynamiska lokaler",
                                data: this.aggregatedDiscountedDynamicMaintenanceCosts
                            },
                        ],
                        sumrow: {
                            label: "Summa kostnader",
                            data: this.sippedaggregateddiscounteddynamicCost
                        }
                    },
                ]
            }
        }
    }









    // let ui_ref_header = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         ui_options:  {
    //             format: false,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'header',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: false,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'none',
    //         },
    //     }
    // }


    // let ui_ref_rows = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'attention'
    //         },
    //     }
    // }

    // let ui_ref_sumrow = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //             type: 'sum',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'attention',
    //             type: 'sum',
    //         },
    //     }
    // }

    // let json_ref_row = {
    //     type: 'Object',
    //     properties: {
    //         label: {
    //             type: 'String',
    //         },
    //         data: {
    //             type: 'Array',
    //             items: {
    //                 type: 'Number',
    //             }
    //         }
    //     },
    // }

    // let json_ref_table__sum = {
    //     type: 'Object',
    //     properties: {
    //         header: json_ref_row,
    //         rows: {
    //             type: 'Array',
    //             items: json_ref_row
    //         },
    //         sumrow: json_ref_row,
    //     }
    // }

    // export function schemas() {

    //     return {
    //         ui_schema: {
    //             ui_order: [
    //                 "tableone",
    //                 "tabletwo",
    //                 "tablethree",
    //                 "tablefour",
    //                 "tablefive",
    //                 "tablesix",
    //             ],
    //             tableone: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tabletwo: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tablethree: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tablefour: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tablefive: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tablesix: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //         },
    //         json_schema: {
    //             type: 'Object',
    //             properties: {
    //                 tableone: json_ref_table__sum,
    //                 tabletwo: json_ref_table__sum,
    //                 tablethree: json_ref_table__sum,
    //                 tablefour: json_ref_table__sum,
    //                 tablefive: json_ref_table__sum,
    //                 tablesix: json_ref_table__sum,
    //             }
    //         },
    //         data_schema: {
    //             tableone: {
    //                 header: {
    //                     label: "Kostnader av permanenta lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Investering i nya lokaler",
    //                         data: this.permanentSingleCost[0]
    //                     },
    //                     {
    //                         label: "Underhållskostnad av egna lokaler",
    //                         data: this.permanentAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Minskning av tekniskt värde",
    //                         data: this.permanentPercentageCost[0]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader permanenta lokaler",
    //                     data: this.sippedpermanentCost
    //                 },
    //             },
    //             tabletwo: {
    //                 header: {
    //                     label: "Kostnader av dynamiska lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Underhållskostnad av dynamiska lokaler",
    //                         data: this.dynamicAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Hyreskostnader av dynamiska lokaler",
    //                         data: this.dynamicAnnualCost[1]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader dynamiska lokaler",
    //                     data: this.sippeddynamicCost
    //                 }
    //             },
    //             tablethree: {
    //                 header: {
    //                     label: "Diskonterade kostnader av permanenta lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Investering i nya lokaler",
    //                         data: this.discountedpermanentSingleCost[0]
    //                     },
    //                     {
    //                         label: "Underhållskostnad av egna lokaler",
    //                         data: this.discountedpermanentAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Minskning av tekniskt värde",
    //                         data: this.discountedpermanentPercentageCost[0]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader permanenta lokaler",
    //                     data: this.sippeddiscountedpermanentCost
    //                 },
    //             },
    //             tablefour: {
    //                 header: {
    //                     label: "Diskonterade kostnader av dynamiska lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Underhållskostnad av dynamiska lokaler",
    //                         data: this.discounteddynamicAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Hyreskostnader av dynamiska lokaler",
    //                         data: this.discounteddynamicAnnualCost[1]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader dynamiska lokaler",
    //                     data: this.sippeddiscounteddynamicCost
    //                 }
    //             },
    //             tablefive: {
    //                 header: {
    //                     label: "Aggregerade diskonterade kostnader av permanenta lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Investering i nya lokaler",
    //                         data: this.aggregateddiscountedpermanentSingleCost[0]
    //                     },
    //                     {
    //                         label: "Underhållskostnad av egna lokaler",
    //                         data: this.aggregateddiscountedpermanentAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Minskning av tekniskt värde",
    //                         data: this.aggregateddiscountedpermanentPercentageCost[0]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader permanenta lokaler",
    //                     data: this.sippedaggregateddiscountedpermanentCost
    //                 },
    //             },
    //             tablesix: {
    //                 header: {
    //                     label: "Aggregerade diskonterade kostnader av dynamiska lokaler",
    //                     data: {
    //                       fn: 'getData',
    //                       parameter: 'identity'
    //                   }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Underhållskostnad av dynamiska lokaler",
    //                         data: this.aggregateddiscounteddynamicAnnualCost[0]
    //                     },
    //                     {
    //                         label: "Hyreskostnader av dynamiska lokaler",
    //                         data: this.aggregateddiscounteddynamicAnnualCost[1]
    //                     },
    //                 ],
    //                 sumrow: {
    //                     label: "Summa kostnader dynamiska lokaler",
    //                     data: this.sippedaggregateddiscounteddynamicCost
    //                 }
    //             },
    //         }
    //     }
    // }

    function mergeSchemas$2() {
      return {
          ui_schema: {
              ui_order: [
                "xmain"
              ],
              xmain: {
                ui_widget: 'x-main',
                ui_order: [
                  "subheader",
                  "header",
                  "main",
                ],
                ui_merged: true,
                subheader: threeSubheaderSchemas.call(this).ui_schema,
          header: threeHeaderSchemas.call(this).ui_schema,
          main: threeMainSchemas.call(this).ui_schema
              }
              
          },
          json_schema: {
              type: 'Object',
              properties: {
                  xmain: {
                      type: 'Object',
                      properties: {
                        subheader: threeSubheaderSchemas.call(this).json_schema,
            header: threeHeaderSchemas.call(this).json_schema,
            main: threeMainSchemas.call(this).json_schema
                      }
                  }
              }
          },
          data_schema: {
            xmain: {
              subheader: threeSubheaderSchemas.call(this).data_schema,
          header: threeHeaderSchemas.call(this).data_schema,
          main: threeMainSchemas.call(this).data_schema
            }
            
          }
      }
    }



    let props$f = () => [
      { propKey: "comment", propValue: { type: String }, rx: false },
      {
        propKey: "startyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "startyear"]
      },
      {
        propKey: "scenario",
        rx: true,
        propValue: { type: String }
      },
      {
        propKey: "endyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "scenario" + chosenScenario, "endyear"]
      },
      {
        propKey: "demandrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "demand", "scenario" + chosenScenario]
      },
      {
        propKey: "volumedynamicrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumedynamic", "scenario" + chosenScenario]
      },
      {
        propKey: "volumepermanentrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumepermanent", "scenario" + chosenScenario]
      },
      {
        propKey: "scenariodynamicrentamounts",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariodynamicrentperiods",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenarioinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "initial"]
      },
      {
        propKey: "scenarioreinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "future"]
      },
      {
        propKey: "scenarioinflation",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "inflation"]
      },
      {
        propKey: "scenariodiscountrate",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "discount"]
      },
      {
        propKey: "scenariorent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariorentperiod",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenariomaintenanceown",
        propValue: { type: Array },
        rx: true,
        path: [
          "assumptions",
          "maintenance",
          "scenario" + chosenScenario,
          "permanent"
        ]
      },
      {
        propKey: "scenariomaintenancerent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "dynamic"]
      },
      {
        propKey: "scenariomaintenancenotused",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "notused"]
      },
      {
        propKey: "selectedpremises",
        propValue: { type: String },
        rx: true,
        path: ["menu", "selected"]
      },
      { propKey: "selected", propValue: { type: Number }, rx: true },
      { propKey: "renderdata", propValue: { type: Array }, rx: false },
      { 
        propKey: "newtable", 
        propValue: { type: Boolean }, 
        rx: true 
      },
    ];



    class XThree extends reduxmixin(props$f, rxmixin(props$f, LitElement)) {
      constructor() {
        super();
        this.renderxmain = false;
        this.okToRender = false;
        this.scenario = chosenScenario;
        this.newtable = true;
      }

      tablePagingChangedHandler() {
        console.log('HERE');
        this.newtable = !this.newtable;
      }

      firstUpdated() {
        super.firstUpdated();
        
        
        rx.latestCombiner([
          this.startyear$,
          this.endyear$,
          this.scenario$,
          this.newtable$
        ])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {

              function rangeFromPeriod(period) {
                  return range$1(0, +period);
                }
              
                let rentRealPriceArray = flatten([
                  ...this.scenariodynamicrentperiods
                    .map(rangeFromPeriod)
                    .map((arr, index) => {
                      return arr.map(year => {
                        return this.scenariodynamicrentamounts[index];
                      });
                    })
                ]);
            
                

              this.period = getPeriodArray(this.startyear, this.endyear);

              this.dynamicRentCosts = getRealCostArray.call(this, 
                  {
                    name: "dynamicrentcosts",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    discountRate: "scenariodiscountrate",
                  }, rentRealPriceArray
                );

                this.discountedDynamicRentCosts = getDiscountedRealCostArray.call(this, 
                  {
                    name: "dynamicrentcosts",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    discountRate: "scenariodiscountrate",
                  }, rentRealPriceArray
                );
                this.aggregatedDiscountedDynamicRentCosts = arrayAggregator(this.discountedDynamicRentCosts);
        



              this.dynamicMaintenanceCosts = createNominalAggregatedCostArray.call(this, 
                  {
                    name: "scenariomaintenancerent",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );

                this.discountedDynamicMaintenanceCosts = createDiscountedNominalAggregatedCostArray.call(this,
                  {
                    name: "scenariomaintenancerent",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );

                this.aggregatedDiscountedDynamicMaintenanceCosts = arrayAggregator(this.discountedDynamicMaintenanceCosts);




                this.permanentMaintenanceCosts = createNominalAggregatedCostArray.call(this, 
                  {
                    name: "scenariomaintenanceown",
                    type: "permanent",
                    method: "annual",
                    space: "volumepermanentrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );
              this.discountedPermanentMaintenanceCosts = createDiscountedNominalAggregatedCostArray.call(this,
                {
                  name: "scenariomaintenanceown",
                  type: "permanent",
                  method: "annual",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.aggregatedDiscountedPermanentMaintenanceCosts = arrayAggregator(this.discountedPermanentMaintenanceCosts);
      



              this.permanentInvestmentCosts = 
              createPositiveOnlyNominalCostArray.call(this, 
                {
                  name: "scenarioinvestment",
                  type: "permanent",
                  method: "single",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.discountedPermanentInvestmentCosts = createDiscountedPositiveOnlyNominalCostArray.call(this, 
                {
                  name: "scenarioinvestment",
                  type: "permanent",
                  method: "single",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.aggregatedDiscountedPermanentInvestmentCosts = arrayAggregator(this.discountedPermanentInvestmentCosts);

              


              this.permanentReinvestmentCosts = 
              createDepreciationArray.call(this, 
                {
                  name: "scenarioreinvestment",
                  investment: "scenarioinvestment",
                  type: "permanent",
                  method: "percentage",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
            this.discountedPermanentReinvestmentCosts = createDiscountedDepreciationArray.call(this, 
              {
                name: "scenarioreinvestment",
                investment: "scenarioinvestment",
                type: "permanent",
                method: "percentage",
                space: "volumepermanentrow",
                growthRate: "scenarioinflation",
                discountRate: "scenariodiscountrate",
                period: "period"
              }
            );
            this.aggregatedDiscountedPermanentReinvestmentCosts = arrayAggregator(this.discountedPermanentReinvestmentCosts);

            

            this.sippedpermanentCost = addArraysAndSip(
              [
                this.permanentMaintenanceCosts,
                this.permanentInvestmentCosts,
                this.permanentReinvestmentCosts
              ]
            );

            this.sippeddynamicCost = addArraysAndSip(
              [
                this.dynamicMaintenanceCosts,
                this.dynamicRentCosts
              ]
            );
            
            this.sippeddiscountedpermanentCost = addArraysAndSip(
              [
                this.discountedPermanentMaintenanceCosts,
                this.discountedPermanentInvestmentCosts,
                this.discountedPermanentReinvestmentCosts
              ]
            );

            this.sippeddiscounteddynamicCost = addArraysAndSip(
              [
                this.discountedDynamicMaintenanceCosts,
                this.discountedDynamicRentCosts
              ]
            );


            this.sippedaggregateddiscountedpermanentCost = addArraysAndSip(
              [
                this.aggregatedDiscountedPermanentMaintenanceCosts,
                this.aggregatedDiscountedPermanentInvestmentCosts,
                this.aggregatedDiscountedPermanentReinvestmentCosts
              ]
            );

            this.sippedaggregateddiscounteddynamicCost = addArraysAndSip(
              [
                this.aggregatedDiscountedDynamicMaintenanceCosts,
                this.aggregatedDiscountedDynamicRentCosts
              ]
            );

            getRenderData.call(this, mergeSchemas$2)
              .then(renderdata => {
                renderdata.forEach(prop$$1 => {
                  if (prop$$1.name == 'xmain') {
                    this.xmain = prop$$1;
                  }
                });

                this.renderxmain = this.xmain;
                this.okToRender = true;
                this.requestUpdate();
              });
          });
    }

    tableChangedHandler(e) {
        //console.log(e)
    }

      scenarioChangedHandler(e) {
        chosenScenario = +e.detail.index + 1;
        page = 0;
        this.scenario = chosenScenario;
        this.stateChanged(this.storeHolder.store.getState(), props$f);
      }

      getData(value, index) {
        return getData.call(this, value, index)
      }

      render() {
        return this.okToRender ? html`
      ${toRender.call(this, prepareRender(this.renderxmain))}
        ` : html``
      }
    }

    customElements.define("x-three", XThree);

    let ui_ref_header$2 = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: false,
                readonly: true,
                nottabable: true,
                color: 'header',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: false,
                readonly: true,
                nottabable: true,
                color: 'none',
            },
        }
    };

    let ui_ref_tableone_rows = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'attention'
            },
        }
    };

    let ui_ref_tabletwo_rows = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                amount: 'tkr',
                color: 'attention'
            },
        }
    };

    let ui_ref_tablechartone_rows = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'attention'
            },
        }
    };

    let ui_ref_tablecharttwo_rows = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                amount: 'tkr',
                color: 'attention'
            },
        }
    };

    let ui_ref_sumrow$1 = {
        ui_widget: "x-table-row",
        ui_order: [
            "label",
            "data"
        ],
        label: {
            // ui_widget: "x-table-row-label",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'white',
                type: 'sum',
            },
        },
        data: {
            ui_widget: "x-input",
            ui_options:  {
                format: true,
                readonly: true,
                nottabable: true,
                color: 'attention',
                amount: 'tkr',
                type: 'sum',
            },
        }
    };

    let json_ref_row$1 = {
        type: 'Object',
        properties: {
            label: {
                type: 'String',
            },
            data: {
                type: 'Array',
                items: {
                    type: 'Number',
                }
            }
        },
    };

    function fourMainSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "tablechartone",
                    "tablecharttwo",
                    "tableone",
                    "tabletwo",
                ],
                tablechartone: {
                    ui_widget: "x-chart",
                    ui_classnames: "table",
                    ui_order: [
                        "header",
                        "rows",
                        // "sumrow",
                    ],
                    header: ui_ref_header$2,
                    rows: ui_ref_tablechartone_rows,
                    sumrow: ui_ref_sumrow$1,
                },
                tablecharttwo: {
                    ui_widget: "x-chart",
                    ui_classnames: "table",
                    ui_order: [
                        "header",
                        "rows",
                        // "sumrow",
                    ],
                    header: ui_ref_header$2,
                    rows: ui_ref_tablecharttwo_rows,
                    sumrow: ui_ref_sumrow$1,
                },
                tableone: {
                    ui_widget: "x-table",
                    ui_classnames: "tableone",
                    ui_order: [
                        "header",
                        "rows",
                        // "sumrow",
                    ],
                    header: ui_ref_header$2,
                    rows: ui_ref_tableone_rows,
                    sumrow: ui_ref_sumrow$1,
                },
                tabletwo: {
                    ui_widget: "x-table",
                    ui_classnames: "tabletwo",
                    ui_order: [
                        "header",
                        "rows",
                        "sumrow",
                    ],
                    header: ui_ref_header$2,
                    rows: ui_ref_tabletwo_rows,
                    sumrow: ui_ref_sumrow$1,
                },
            },
            json_schema: {
                type: 'Object',
                properties: {
                    tableone: {
                        type: 'Object',
                        properties: {
                            header: json_ref_row$1,
                            rows: {
                                type: 'Array',
                                items: json_ref_row$1
                            },
                            sumrow: json_ref_row$1,
                        }
                    },
                    tabletwo: {
                        type: 'Object',
                        properties: {
                            header: json_ref_row$1,
                            rows: {
                                type: 'Array',
                                items: json_ref_row$1
                            },
                            sumrow: json_ref_row$1,
                        }
                    },
                    tablechartone: {
                        type: 'Object',
                        properties: {
                            header: json_ref_row$1,
                            rows: {
                                type: 'Array',
                                items: json_ref_row$1
                            },
                            sumrow: json_ref_row$1,
                        }
                    },
                    tablecharttwo: {
                        type: 'Object',
                        properties: {
                            header: json_ref_row$1,
                            rows: {
                                type: 'Array',
                                items: json_ref_row$1
                            },
                            sumrow: json_ref_row$1,
                        }
                    },
                    // tablechart: {
                    //     type: 'Array',
                    //     items: json_ref_table__sum
                    // }
                }
            },
            data_schema: {
                tablechartone: {
                    header: {
                        label: "Aggregerad efterfrågan och volym av lokaler (kvm)",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Permanenta lokaler",
                            data: this.aggregateDataArr[2]
                        },
                        {
                            label: "Dynamiska lokaler",
                            data: this.aggregateDataArr[1]
                        },
                        {
                            label: "Efterfrågan av lokaler",
                            data: this.aggregateDataArr[0]
                        },
                    ],
                },
                tablecharttwo: {
                    header: {
                        label: "Aggregerade diskonterade kostnader (tkr)",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Permanenta lokaler",
                            data: this.sippedaggregateddiscountedpermanentCost
                        },
                        {
                            label: "Dynamiska lokaler",
                            data: this.sippedaggregateddiscounteddynamicCost
                        },
                    ],
                }, 
                tableone: {
                    header: {
                        label: "Aggregerad efterfrågan och volym av lokaler (kvm)",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Efterfrågan av lokaler",
                            data: this.aggregateDataArr[0]
                        },
                        {
                            label: "Volym av dynamiska lokaler",
                            data: this.aggregateDataArr[1]
                        },
                        {
                            label: "Volym av permanenta lokaler",
                            data: this.aggregateDataArr[2]
                        }
                    ],
                },
                tabletwo: {
                    header: {
                        label: "Aggregerade diskonterade kostnader (tkr)",
                        data: {
                            fn: 'getData',
                            parameter: 'identity'
                        }
                    },
                    rows: [
                        {
                            label: "Permanenta lokaler",
                            data: this.sippedaggregateddiscountedpermanentCost
                        },
                        {
                            label: "Dynamiska lokaler",
                            data: this.sippedaggregateddiscounteddynamicCost
                        },
                    ],
                    sumrow: {
                        label: "Besparingspotential",
                        data: this.sippedaggregateddiscountedDiffCost
                    }
                },
            }
        }
    }






    // let ui_ref_header = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         // ui_widget: "x-table-row-label",
    //         ui_options:  {
    //             format: false,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'header',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: false,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'none',
    //         },
    //     }
    // }


    // let ui_ref_rows = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         // ui_widget: "x-table-row-label",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'attention'
    //         },
    //     }
    // }

    // let ui_ref_tableone_rows = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         // ui_widget: "x-table-row-label",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'attention'
    //         },
    //     }
    // }

    // let ui_ref_tabletwo_rows = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         // ui_widget: "x-table-row-label",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             amount: 'tkr',
    //             color: 'attention'
    //         },
    //     }
    // }

    // let ui_ref_sumrow = {
    //     ui_widget: "x-table-row",
    //     ui_order: [
    //         "label",
    //         "data"
    //     ],
    //     label: {
    //         // ui_widget: "x-table-row-label",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'white',
    //             type: 'sum',
    //         },
    //     },
    //     data: {
    //         ui_widget: "x-input",
    //         ui_options:  {
    //             format: true,
    //             readonly: true,
    //             nottabable: true,
    //             color: 'attention',
    //             type: 'sum',
    //         },
    //     }
    // }

    // let json_ref_row = {
    //     type: 'Object',
    //     properties: {
    //         label: {
    //             type: 'String',
    //         },
    //         data: {
    //             type: 'Array',
    //             items: {
    //                 type: 'Number',
    //             }
    //         }
    //     },
    // }

    // let json_ref_table__sum = {
    //     type: 'Object',
    //     properties: {
    //         header: json_ref_row,
    //         rows: {
    //             type: 'Array',
    //             items: json_ref_row
    //         },
    //         sumrow: json_ref_row,
    //     }
    // }

    // export function fourMainSchemas() {

    //     return {
    //         ui_schema: {
    //             ui_order: [
    //                 "tablechart",
    //                 "tableone",
    //                 "tabletwo",
    //             ],
    //             tablechart: {
    //                 ui_widget: "x-chart",
    //                 ui_classnames: "table",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     // "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tableone: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "tableone",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     // "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_tableone_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //             tabletwo: {
    //                 ui_widget: "x-table",
    //                 ui_classnames: "tabletwo",
    //                 ui_order: [
    //                     "header",
    //                     "rows",
    //                     // "sumrow",
    //                 ],
    //                 header: ui_ref_header,
    //                 rows: ui_ref_tabletwo_rows,
    //                 sumrow: ui_ref_sumrow,
    //             },
    //         },
    //         json_schema: {
    //             type: 'Object',
    //             properties: {
    //                 tableone: {
    //                     type: 'Object',
    //                     properties: {
    //                         header: json_ref_row,
    //                         rows: {
    //                             type: 'Array',
    //                             items: json_ref_row
    //                         },
    //                         sumrow: json_ref_row,
    //                     }
    //                 },
    //                 tabletwo: {
    //                     type: 'Object',
    //                     properties: {
    //                         header: json_ref_row,
    //                         rows: {
    //                             type: 'Array',
    //                             items: json_ref_row
    //                         },
    //                         sumrow: json_ref_row,
    //                     }
    //                 },
    //                 tablechart: {
    //                     type: 'Array',
    //                     items: json_ref_table__sum
    //                 }
    //             }
    //         },
    //         data_schema: {
    //             tablechart: [
    //                 {
    //                     header: {
    //                         label: "Aggregerade diskonterade kostnader (tkr)",
    //                         data: {
    //                             fn: 'getData',
    //                             parameter: 'identity'
    //                         }
    //                     },
    //                     rows: [
    //                         {
    //                             label: "Permanenta lokaler",
    //                             data: this.sippedaggregateddiscountedpermanentCost
    //                         },
    //                         {
    //                             label: "Dynamiska lokaler",
    //                             data: this.sippedaggregateddiscounteddynamicCost
    //                         },
    //                     ],
    //                 },
    //                 {
    //                     header: {
    //                         label: "Aggregerad efterfrågan och volym av lokaler (kvm)",
    //                         data: {
    //                             fn: 'getData',
    //                             parameter: 'identity'
    //                         }
    //                     },
    //                     rows: [
    //                         {
    //                             label: "Permanenta lokaler",
    //                             data: this.aggregateDataArr[2]
    //                         },
    //                         {
    //                             label: "Dynamiska lokaler",
    //                             data: this.aggregateDataArr[1]
    //                         },
    //                         {
    //                             label: "Efterfrågan av lokaler",
    //                             data: this.aggregateDataArr[0]
    //                         },
    //                     ],
    //                 },
    //             ],
    //             tableone: {
    //                 header: {
    //                     label: "Aggregerad efterfrågan och volym av lokaler (kvm)",
    //                     data: {
    //                         fn: 'getData',
    //                         parameter: 'identity'
    //                     }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Efterfrågan av lokaler",
    //                         data: this.aggregateDataArr[0]
    //                     },
    //                     {
    //                         label: "Volym av dynamiska lokaler",
    //                         data: this.aggregateDataArr[1]
    //                     },
    //                     {
    //                         label: "Volym av permanenta lokaler",
    //                         data: this.aggregateDataArr[2]
    //                     }
    //                 ],
    //             },
    //             tabletwo: {
    //                 header: {
    //                     label: "Aggregerade diskonterade kostnader (tkr)",
    //                     data: {
    //                         fn: 'getData',
    //                         parameter: 'identity'
    //                     }
    //                 },
    //                 rows: [
    //                     {
    //                         label: "Permanenta lokaler",
    //                         data: this.sippedaggregateddiscountedpermanentCost
    //                     },
    //                     {
    //                         label: "Dynamiska lokaler",
    //                         data: this.sippedaggregateddiscounteddynamicCost
    //                     },
    //                 ],
    //             },
    //         }
    //     }
    // }

    let props$g = () => [
        { propKey: "value", propValue: { type: Array }, rx: false },
        { propKey: "valuedyn", propValue: { type: Array }, rx: false },
        { propKey: "valueperm", propValue: { type: Array }, rx: false },
        { propKey: "type", propValue: { type: String }, rx: false },
        { propKey: "label", propValue: { type: Array }, rx: false },
        { propKey: "props", propValue: { type: Array }, rx: false },
        { propKey: "test", propValue: { type: Array }, rx: false },
        { propKey: "years", propValue: { type: Array }, rx: false }
      ];


    class XChart extends rxmixin(props$g, LitElement) {


        render() {
            let canvas;

            if (this.props) {
                canvas = html`<canvas id="myChart"></canvas>`;
              } else {
                canvas = html``;
              }

            return html`
        <style>
            .thediv {
                font-size: var(--parmaco-font-size-m);
                border: 1px solid var(--whcg-shade-20pct);
                border-radius: 5px 5px 4px 4px;
                background-color: var(--whcg-shade-10pct);
                ;
                ;
            }
        </style>
        <div class="thediv" style="width: ${this.offsetWidth}px; height: 400px">
            ${canvas}
        </div>
        `;
        }


        constructor() {
            super();
            // this.width = '200px';
            // this.height = '200px';
            this.legendposition = 'bottom';
            this.legendfontsize = 14;
            this.legendfontfamily = 'Arial';
            this.stacked = false;

        }

        connectedCallback() {
            super.connectedCallback();
            window.addEventListener('resize', (event) => {
                this.shadowRoot.querySelector('.thediv').style.width = `${this.offsetWidth}px`;
                this.props = [...this.props];
              });
        }

        updated(changedProps) {
            super.updated(changedProps);


            if (changedProps.has('props')) {
                let years = this.props[0].json_schema[1].data_schema;
                let title = this.props[0].json_schema[0].data_schema;
                let data = [];

                console.log('TP', this.props);
                data = this.props[1].json_schema.map(schema => {
                    return {data: schema.ui_schema.data.ui_options && schema.ui_schema.data.ui_options.amount == 'tkr' ? schema.json_schema[1].data_schema.map(item => +item / 1000) : schema.json_schema[1].data_schema,
                    label: schema.json_schema[0].data_schema}
                });
                this._chartJs({years: years, data: data, title: title});
            }
            
        }



        _chartJs(data) {
            var ctx = this.shadowRoot.querySelector('#myChart');

            if (this.thechart != null) {
                this.thechart.destroy();
            }
            if (this.type == 'line') ;

        

            
            this.thechart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.years,
                    datasets: data.data.map((dataItem, index) => {
                        return {
                            label: dataItem.label,
                            data: dataItem.data,
                            fill: false,
                            showLine: true,
                            spanGaps: false,
                            backgroundColor: [
                                `rgba(${255 * 1 / (+index + 1)}, 99, 132, ${0.2 * (+index + 1)})`,
                                // `rgba(54, 162, 235, ${0.2 * (+index + 1)})`,
                                // `rgba(255, 206, 86, ${0.2 * (+index + 1)})`,
                                // `rgba(75, 192, 192, ${0.2 * (+index + 1)})`,
                                // `rgba(153, 102, 255, ${0.2 * (+index + 1)})`,
                                // `rgba(255, 159, 64, ${0.2 * (+index + 1)})`
                            ],
                            borderColor: [
                                `rgba(${255}, ${50 * (+index * 2 + 1)}, ${0 * 2 / (+index + 1)}, 1)`,
                                // `rgba(54, 162, 235, 1)`,
                                // `rgba(255, 206, 86, 1)`,
                                // `rgba(75, 192, 192, 1)`,
                                // `rgba(153, 102, 255, 1)`,
                                // `rgba(255, 159, 64, 1)`
                            ],
                            // borderWidth: index == 2 && data.data.length == 3 ? 4 : index == 1 && data.data.length == 2 ? 4 : 2,
                            // borderDash: index == 0 && data.data.length == 3 ? [10, 5] : []
                            borderWidth: 2,
                            borderDash: index == 0 ? [16, 12] : index == 1 ? [16, 12] : [],
                            borderDashOffset: index == 0 ? 8 : 0, 
                            // borderDash: index == 0 ? [16, 12] : index == 1 ? [19, 14] : []
                        }
                    })
                },
                options: {
                    title: {
                        display: true,
                        text: data.title,
                        fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        fontColor: '#FFFFFF',
                        fontSize: this.offsetWidth / 45,
                        fontStyle: 'normal',
                        padding: 30
                    },
                    layout: {
                        padding: {
                            left: 20,
                            right: 30,
                            top: 0,
                            bottom: 10
                        },
                    },
                    legend: {
                        position: this.legendposition,
                        labels: {
                            fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                            fontColor: '#FFFFFF',
                            fontSize: this.offsetWidth / 60,
                            boxWidth: this.offsetWidth / 50
                        }
                    },
                    // scaleLabel,
                    
                    maintainAspectRatio: false,
                    scales: {
                        xAxes: [
                            {
                                ticks: {
                                    beginAtZero: true,
                                    fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                    fontColor: '#FFFFFF',
                                    fontSize: this.offsetWidth / 60
                                },
                                gridLines: {
                                }
                            }
                        ],
                        yAxes: [
                            {
                                ticks: {
                                    beginAtZero: true,
                                    fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                                    fontColor: '#FFFFFF',
                                    fontSize: this.offsetWidth / 60,
                                    callback: function(value) {
                                        return  value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
                                    }
                                },
                                gridLines: {
                                }
                            }
                        ]
                    }
                }
            });

                    // let areadata = {
            //     // labels: this.label,
            //     labels: ["Passed"],
            //     datasets: [{
            //         label: 'Utv av efterfrågan',
            //         data: this.props[0],
            //         borderColor: [
            //             'hsla(360, 100%, 100%, 1)'
            //         ],
            //         borderWidth: 2,
            //         type: 'line',
            //         fill: false,
            //         showLine: true,
            //         spanGaps: false
            //     },
            //     {
            //         label: 'Hyrda lokaler',
            //         data: this.props[1],
            //         backgroundColor: 'hsla(75, 30%, 33%, 1)',
            //         borderColor: 'hsla(360, 100%, 100%, 1)',
                   
            //         borderWidth: 1,
            //         fill: fill
            //     },
            //     {
            //         label: 'Egna lokaler',
            //         data: this.props[2],
            //         backgroundColor: 'hsla(275, 30%, 33%, 1)',
            //         borderColor: 'hsla(360, 100%, 100%, 1)',
                   
            //         borderWidth: 1,
            //         fill: fill
            //     }
            //     ]
            // }

            // let costdata = {
            //     // labels: this.label,
            //     labels: ["Passed"],
            //     datasets: [{
            //         label: 'Aggregerade diskonterade kostnader för hyrda lokaler',
            //         data: this.props[0],
            //         backgroundColor: 'hsla(275, 30%, 33%, 1)',
            //         borderColor: 'hsla(360, 100%, 100%, 1)',
            //         borderWidth: 1,
            //         fill: fill,
            //         // showLine: true,
            //         // spanGaps: false
            //     },
            //     {
            //         label: 'Aggregerade diskonterade kostnader för ägda lokaler',
            //         data: this.props[1],
            //         backgroundColor: 'hsla(75, 30%, 33%, 1)',
            //         borderColor: 'hsla(360, 100%, 100%, 1)',
            //         borderWidth: 1,
            //         fill: fill
            //     },
            //     ]
            // }

            // this.thechart = new Chart(ctx, {
            //     type: this.type,
            //     data: data,

            //     options: {
            //         legend: {
            //             position: this.legendposition,
            //             labels: {
            //                 fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            //                 fontColor: '#FFFFFF',
            //                 fontSize: 14,
            //                 boxWidth: 14
            //             }
            //         },
            //         scales: {
            //             yAxes: [{
            //                 ticks: {
            //                     beginAtZero:true
            //                 }
            //             }],
            //             yAxes: [{
            //                 ticks: {
            //                     fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            //                     fontColor: '#FFFFFF',
            //                     fontSize: 14
            //                 },
            //                 gridLines: {
            //                 }
            //             }],
            //             xAxes: [{
            //                 ticks: {
            //                     fontFamily: "'Exo 2', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            //                     fontColor: '#FFFFFF',
            //                     fontSize: 14
            //                 },
            //                 gridLines: {
            //                 }
            //             }]
            //         },
            //         responsive: true,
            //         maintainAspectRatio: false,
            //         layout: {
            //             padding: {
            //                 left: 15,
            //                 right: 15,
            //                 top: 50,
            //                 bottom: 20
            //             }
            //         }
            //     }
            // });



        }


    }

    window.customElements.define('x-chart', XChart);



        // static get properties() {
        //     return {
                // type: {
                //     type: String
                // },
                // value: {
                //     type: Object
                // },
                // width: {
                //     type: String
                // },
                // height: {
                //     type: String
                // },
                // legendposition: {
                //     type: String 
                // },

                // legendfontsize: {
                //     type: Number
                // },

                // legendfontfamily: {
                //     type: String
                // },

                // stacked: {
                //     type: Boolean
                // }
        //     }
        // }

    function mergeSchemas$3() {
      return {
          ui_schema: {
              ui_order: [
                "xmain"
              ],
              xmain: {
                ui_widget: 'x-main',
                ui_order: [
                  "subheader",
                  "header",
                  "main",
                ],
                ui_merged: true,
                subheader: fourSubheaderSchemas.call(this).ui_schema,
          header: fourHeaderSchemas.call(this).ui_schema,
          main: fourMainSchemas.call(this).ui_schema
              }
              
          },
          json_schema: {
              type: 'Object',
              properties: {
                  xmain: {
                      type: 'Object',
                      properties: {
                        subheader: fourSubheaderSchemas.call(this).json_schema,
            header: fourHeaderSchemas.call(this).json_schema,
            main: fourMainSchemas.call(this).json_schema
                      }
                  }
              }
          },
          data_schema: {
            xmain: {
              subheader: fourSubheaderSchemas.call(this).data_schema,
          header: fourHeaderSchemas.call(this).data_schema,
          main: fourMainSchemas.call(this).data_schema
            }
            
          }
      }
    }



    let props$h = () => [
      { propKey: "comment", propValue: { type: String }, rx: false },
      {
        propKey: "startyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "startyear"]
      },
      {
        propKey: "scenario",
        rx: true,
        propValue: { type: String }
      },
      {
        propKey: "endyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "scenario" + chosenScenario, "endyear"]
      },
      {
        propKey: "demandrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "demand", "scenario" + chosenScenario]
      },
      {
        propKey: "volumedynamicrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumedynamic", "scenario" + chosenScenario]
      },
      {
        propKey: "volumepermanentrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumepermanent", "scenario" + chosenScenario]
      },
      {
        propKey: "scenariodynamicrentamounts",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariodynamicrentperiods",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenarioinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "initial"]
      },
      {
        propKey: "scenarioreinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "future"]
      },
      {
        propKey: "scenarioinflation",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "inflation"]
      },
      {
        propKey: "scenariodiscountrate",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "discount"]
      },
      {
        propKey: "scenariorent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariorentperiod",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenariomaintenanceown",
        propValue: { type: Array },
        rx: true,
        path: [
          "assumptions",
          "maintenance",
          "scenario" + chosenScenario,
          "permanent"
        ]
      },
      {
        propKey: "scenariomaintenancerent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "dynamic"]
      },
      {
        propKey: "scenariomaintenancenotused",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "notused"]
      },
      {
        propKey: "selectedpremises",
        propValue: { type: String },
        rx: true,
        path: ["menu", "selected"]
      },
      { propKey: "selected", propValue: { type: Number }, rx: true },
      { propKey: "renderdata", propValue: { type: Array }, rx: false },
      { 
        propKey: "newtable", 
        propValue: { type: Boolean }, 
        rx: true 
      },
    ];



    class XFour extends reduxmixin(props$h, rxmixin(props$h, LitElement)) {
      constructor() {
        super();
        this.renderxmain = false;
        this.okToRender = false;
        this.scenario = chosenScenario;
        this.newtable = true;
      }

      tablePagingChangedHandler() {
        // console.log('HERE')
        this.newtable = !this.newtable;
      }

      firstUpdated() {
        super.firstUpdated();
        
        
        rx.latestCombiner([
          this.startyear$,
          this.endyear$,
          this.scenario$,
          this.newtable$
        ])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {

              function rangeFromPeriod(period) {
                  return range$1(0, +period);
                }
              
                let rentRealPriceArray = flatten([
                  ...this.scenariodynamicrentperiods
                    .map(rangeFromPeriod)
                    .map((arr, index) => {
                      return arr.map(year => {
                        return this.scenariodynamicrentamounts[index];
                      });
                    })
                ]);


              this.dataArray = ["demandrow", "volumedynamicrow", "volumepermanentrow"]
                .map(item => this[item])
                .map(item => Object.values(item));
      
              this.aggregateDataArr = this.dataArray.map(arrayAggregator);
            
              

              this.period = getPeriodArray(this.startyear, this.endyear);

              this.dynamicRentCosts = getRealCostArray.call(this, 
                  {
                    name: "dynamicrentcosts",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    discountRate: "scenariodiscountrate",
                  }, rentRealPriceArray
                );

                this.discountedDynamicRentCosts = getDiscountedRealCostArray.call(this, 
                  {
                    name: "dynamicrentcosts",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    discountRate: "scenariodiscountrate",
                  }, rentRealPriceArray
                );
                this.aggregatedDiscountedDynamicRentCosts = arrayAggregator(this.discountedDynamicRentCosts);
        



              this.dynamicMaintenanceCosts = createNominalAggregatedCostArray.call(this, 
                  {
                    name: "scenariomaintenancerent",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );

                this.discountedDynamicMaintenanceCosts = createDiscountedNominalAggregatedCostArray.call(this,
                  {
                    name: "scenariomaintenancerent",
                    type: "dynamic",
                    method: "annual",
                    space: "volumedynamicrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );

                this.aggregatedDiscountedDynamicMaintenanceCosts = arrayAggregator(this.discountedDynamicMaintenanceCosts);




                this.permanentMaintenanceCosts = createNominalAggregatedCostArray.call(this, 
                  {
                    name: "scenariomaintenanceown",
                    type: "permanent",
                    method: "annual",
                    space: "volumepermanentrow",
                    growthRate: "scenarioinflation",
                    discountRate: "scenariodiscountrate",
                    period: "period"
                  }
                );
              this.discountedPermanentMaintenanceCosts = createDiscountedNominalAggregatedCostArray.call(this,
                {
                  name: "scenariomaintenanceown",
                  type: "permanent",
                  method: "annual",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.aggregatedDiscountedPermanentMaintenanceCosts = arrayAggregator(this.discountedPermanentMaintenanceCosts);
      



              this.permanentInvestmentCosts = 
              createPositiveOnlyNominalCostArray.call(this, 
                {
                  name: "scenarioinvestment",
                  type: "permanent",
                  method: "single",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.discountedPermanentInvestmentCosts = createDiscountedPositiveOnlyNominalCostArray.call(this, 
                {
                  name: "scenarioinvestment",
                  type: "permanent",
                  method: "single",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
              this.aggregatedDiscountedPermanentInvestmentCosts = arrayAggregator(this.discountedPermanentInvestmentCosts);

              


              this.permanentReinvestmentCosts = 
              createDepreciationArray.call(this, 
                {
                  name: "scenarioreinvestment",
                  investment: "scenarioinvestment",
                  type: "permanent",
                  method: "percentage",
                  space: "volumepermanentrow",
                  growthRate: "scenarioinflation",
                  discountRate: "scenariodiscountrate",
                  period: "period"
                }
              );
            this.discountedPermanentReinvestmentCosts = createDiscountedDepreciationArray.call(this, 
              {
                name: "scenarioreinvestment",
                investment: "scenarioinvestment",
                type: "permanent",
                method: "percentage",
                space: "volumepermanentrow",
                growthRate: "scenarioinflation",
                discountRate: "scenariodiscountrate",
                period: "period"
              }
            );
            this.aggregatedDiscountedPermanentReinvestmentCosts = arrayAggregator(this.discountedPermanentReinvestmentCosts);

            

            this.sippedpermanentCost = addArraysAndSip(
              [
                this.permanentMaintenanceCosts,
                this.permanentInvestmentCosts,
                this.permanentReinvestmentCosts
              ]
            );

            this.sippeddynamicCost = addArraysAndSip(
              [
                this.dynamicMaintenanceCosts,
                this.dynamicRentCosts
              ]
            );
            
            this.sippeddiscountedpermanentCost = addArraysAndSip(
              [
                this.discountedPermanentMaintenanceCosts,
                this.discountedPermanentInvestmentCosts,
                this.discountedPermanentReinvestmentCosts
              ]
            );

            this.sippeddiscounteddynamicCost = addArraysAndSip(
              [
                this.discountedDynamicMaintenanceCosts,
                this.discountedDynamicRentCosts
              ]
            );


            this.sippedaggregateddiscountedpermanentCost = addArraysAndSip(
              [
                this.aggregatedDiscountedPermanentMaintenanceCosts,
                this.aggregatedDiscountedPermanentInvestmentCosts,
                this.aggregatedDiscountedPermanentReinvestmentCosts
              ]
            );
            

            this.sippedaggregateddiscounteddynamicCost = addArraysAndSip(
              [
                this.aggregatedDiscountedDynamicMaintenanceCosts,
                this.aggregatedDiscountedDynamicRentCosts,
              ]
            );


            this.sippedaggregateddiscountedDiffCost = zip$2(this.sippedaggregateddiscountedpermanentCost, this.sippedaggregateddiscounteddynamicCost).map(item => {
              return +item[0] - +item[1]
            });

            getRenderData.call(this, mergeSchemas$3)
              .then(renderdata => {
                renderdata.forEach(prop$$1 => {
                  if (prop$$1.name == 'xmain') {
                    this.xmain = prop$$1;
                  }
                });

                this.renderxmain = this.xmain;



                let years = this.period;
                this.label = years;

                this.chartdemand = this.sippedaggregateddiscounteddynamicCost;

                this.chartvaldynamic = this.sippedaggregateddiscountedpermanentCost;

                this.chartvalpermanent = this.sippeddiscounteddynamicCost;

                this.costChartArrays = [this.sippeddiscountedpermanentCost, this.sippedaggregateddiscountedpermanentCost];

                // this.areaChartArrays = this.aggregateDataArr.map(item => {
                //     return item.map(item => {
                //         return item[result[2]]
                //     })
                // })


                this.testchart = this.chartvalpermanent;




                this.okToRender = true;
                this.requestUpdate();
              });
          });
    }

    tableChangedHandler(e) {
        //console.log(e)
    }

      scenarioChangedHandler(e) {
        chosenScenario = +e.detail.index + 1;
        page = 0;
        this.scenario = chosenScenario;
        this.stateChanged(this.storeHolder.store.getState(), props$h);
      }

      getData(value, index) {
        return getData.call(this, value, index)
      }

      render() {
        return this.okToRender ? html`
      ${toRender.call(this, prepareRender(this.renderxmain))}
        ` : html``
      }


    }

    customElements.define("x-four", XFour);



    // render() {
    //   return this.okToRender ? html`
    //        <style>
        
    //     .main {
    //         display: grid;
    //         grid-template-columns: repeat(12, 1fr);
    //         grid-template-rows: auto 50px auto;
    //         grid-column-gap: 20px;
    //         grid-template-areas: 
    //             ".      label    label      label    label      label    label      label    label      label    label      . "
    //             ".      .          .          .         .          .        .          .        .          .        .       ."
    //             ".      tableone       tableone           tableone       tableone           tableone   tabletwo      tabletwo    tabletwo      tabletwo      tabletwo         ."
                
    //             ;
                
    //         /* background-color: var(--color-bg); */

    //         height: 100%
    //     }

    //     .label {
    //         grid-area: label;
    //         /* background-color: var(--color-bg); */
          
    //         font: var(--font-mainheader);
    //         color: var(--color-text, white);
    //         border-bottom: 2px solid #FFFFFF; 

    //         display: flex;
    //         align-items: center;
    //         height: 50px;                                                                                        
    //     } 

    //     .tabletwo {
    //         grid-area: tabletwo;
    //         justify-self: end;

    //     }

    //     .tableone {
    //         grid-area: tableone;
    //         justify-self: start;
            
    //     }

    //     .tablethree {
    //         grid-area: tablethree;
    //     }

    //     .comment {
    //         grid-area: comment;
    //         justify-self: end;
    //         align-self: center;
    //         /* background-color: var(--colro-bg, blue); */
    //         color: var(--color-text, white);
    //         font: var(--font-rowcomment);
    //     }   


    // </style>
    //     <div class="main">
    //         <div class="label">Result</div>
            
    //             <x-chart .props="${this.testchart}" .test=${this.renderxmain} .years=${this.period} type="bar" class="tableone"></x-chart>
                

    //         <div class="comment">
    //         </div>
    //     </div>
    //       ` : html``
    // }

    class Lumo extends HTMLElement {
      static get version() {
        return '1.4.0';
      }
    }

    customElements.define('vaadin-lumo-styles', Lumo);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /** @type {Promise<void>} */
    let readyPromise = null;

    /** @type {?function(?function())} */
    let whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;

    /** @type {function()} */
    let resolveFn;

    /**
     * @param {?function()} callback
     */
    function documentWait(callback) {
      requestAnimationFrame(function() {
        if (whenReady) {
          whenReady(callback);
        } else {
          if (!readyPromise) {
            readyPromise = new Promise((resolve) => {resolveFn = resolve;});
            if (document.readyState === 'complete') {
              resolveFn();
            } else {
              document.addEventListener('readystatechange', () => {
                if (document.readyState === 'complete') {
                  resolveFn();
                }
              });
            }
          }
          readyPromise.then(function(){ callback && callback(); });
        }
      });
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const SEEN_MARKER = '__seenByShadyCSS';
    const CACHED_STYLE = '__shadyCSSCachedStyle';

    /** @type {?function(!HTMLStyleElement)} */
    let transformFn = null;

    /** @type {?function()} */
    let validateFn = null;

    /**
    This interface is provided to add document-level <style> elements to ShadyCSS for processing.
    These styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles
    In addition, these styles may also need to be processed for @apply rules and CSS Custom Properties

    To add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`

    In addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.
    This function will be called when calculating styles.

    An example usage of the document-level styling api can be found in `examples/document-style-lib.js`

    @unrestricted
    */
    class CustomStyleInterface {
      constructor() {
        /** @type {!Array<!CustomStyleProvider>} */
        this['customStyles'] = [];
        this['enqueued'] = false;
        // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;
        documentWait(() => {
          if (window['ShadyCSS']['flushCustomStyles']) {
            window['ShadyCSS']['flushCustomStyles']();
          }
        });
      }
      /**
       * Queue a validation for new custom styles to batch style recalculations
       */
      enqueueDocumentValidation() {
        if (this['enqueued'] || !validateFn) {
          return;
        }
        this['enqueued'] = true;
        documentWait(validateFn);
      }
      /**
       * @param {!HTMLStyleElement} style
       */
      addCustomStyle(style) {
        if (!style[SEEN_MARKER]) {
          style[SEEN_MARKER] = true;
          this['customStyles'].push(style);
          this.enqueueDocumentValidation();
        }
      }
      /**
       * @param {!CustomStyleProvider} customStyle
       * @return {HTMLStyleElement}
       */
      getStyleForCustomStyle(customStyle) {
        if (customStyle[CACHED_STYLE]) {
          return customStyle[CACHED_STYLE];
        }
        let style;
        if (customStyle['getStyle']) {
          style = customStyle['getStyle']();
        } else {
          style = customStyle;
        }
        return style;
      }
      /**
       * @return {!Array<!CustomStyleProvider>}
       */
      processStyles() {
        const cs = this['customStyles'];
        for (let i = 0; i < cs.length; i++) {
          const customStyle = cs[i];
          if (customStyle[CACHED_STYLE]) {
            continue;
          }
          const style = this.getStyleForCustomStyle(customStyle);
          if (style) {
            // HTMLImports polyfill may have cloned the style into the main document,
            // which is referenced with __appliedElement.
            const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);
            if (transformFn) {
              transformFn(styleToTransform);
            }
            customStyle[CACHED_STYLE] = styleToTransform;
          }
        }
        return cs;
      }
    }

    /* eslint-disable no-self-assign */
    CustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;
    CustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;
    CustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;
    /* eslint-enable no-self-assign */

    Object.defineProperties(CustomStyleInterface.prototype, {
      'transformCallback': {
        /** @return {?function(!HTMLStyleElement)} */
        get() {
          return transformFn;
        },
        /** @param {?function(!HTMLStyleElement)} fn */
        set(fn) {
          transformFn = fn;
        }
      },
      'validateCallback': {
        /** @return {?function()} */
        get() {
          return validateFn;
        },
        /**
         * @param {?function()} fn
         * @this {CustomStyleInterface}
         */
        set(fn) {
          let needsEnqueue = false;
          if (!validateFn) {
            needsEnqueue = true;
          }
          validateFn = fn;
          if (needsEnqueue) {
            this.enqueueDocumentValidation();
          }
        },
      }
    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const VAR_ASSIGN = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi;
    const MIXIN_MATCH = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi;
    const MEDIA_MATCH = /@media\s(.*)/;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @param {Element} element
     * @param {Object=} properties
     */
    function updateNativeProperties(element, properties) {
      // remove previous properties
      for (let p in properties) {
        // NOTE: for bc with shim, don't apply null values.
        if (p === null) {
          element.style.removeProperty(p);
        } else {
          element.style.setProperty(p, properties[p]);
        }
      }
    }

    /**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */
    function getComputedStyleValue(element, property) {
      /**
       * @const {string}
       */
      const value = window.getComputedStyle(element).getPropertyValue(property);
      if (!value) {
        return '';
      } else {
        return value.trim();
      }
    }

    /**
     * return true if `cssText` contains a mixin definition or consumption
     * @param {string} cssText
     * @return {boolean}
     */
    function detectMixin(cssText) {
      const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);
      // reset state of the regexes
      MIXIN_MATCH.lastIndex = 0;
      VAR_ASSIGN.lastIndex = 0;
      return has;
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);
    let nativeCssVariables_;

    /**
     * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings
     */
    function calcCssVariables(settings) {
      if (settings && settings['shimcssproperties']) {
        nativeCssVariables_ = false;
      } else {
        // chrome 49 has semi-working css vars, check if box-shadow works
        // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782
        // However, shim css custom properties are only supported with ShadyDOM enabled,
        // so fall back on native if we do not detect ShadyDOM
        // Edge 15: custom properties used in ::before and ::after will also be used in the parent element
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/
        nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) &&
          window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));
      }
    }

    /** @type {string | undefined} */
    let cssBuild;
    if (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {
      cssBuild = window.ShadyCSS.cssBuild;
    }

    if (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {
      nativeCssVariables_ = window.ShadyCSS.nativeCss;
    } else if (window.ShadyCSS) {
      calcCssVariables(window.ShadyCSS);
      // reset window variable to let ShadyCSS API take its place
      window.ShadyCSS = undefined;
    } else {
      calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);
    }

    // Hack for type error under new type inference which doesn't like that
    // nativeCssVariables is updated in a function and assigns the type
    // `function(): ?` instead of `boolean`.
    const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const customStyleInterface = new CustomStyleInterface();

    if (!window.ShadyCSS) {
      window.ShadyCSS = {
        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         * @param {string=} elementExtends
         */
        prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars

        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         */
        prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars

        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         * @param {string=} elementExtends
         */
        prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars

        /**
         * @param {Element} element
         * @param {Object=} properties
         */
        styleSubtree(element, properties) {
          customStyleInterface.processStyles();
          updateNativeProperties(element, properties);
        },

        /**
         * @param {Element} element
         */
        styleElement(element) { // eslint-disable-line no-unused-vars
          customStyleInterface.processStyles();
        },

        /**
         * @param {Object=} properties
         */
        styleDocument(properties) {
          customStyleInterface.processStyles();
          updateNativeProperties(document.body, properties);
        },

        /**
         * @param {Element} element
         * @param {string} property
         * @return {string}
         */
        getComputedStyleValue(element, property) {
          return getComputedStyleValue(element, property);
        },

        flushCustomStyles() {},
        nativeCss: nativeCssVariables,
        nativeShadow: nativeShadow,
        cssBuild: cssBuild
      };
    }

    window.ShadyCSS.CustomStyleInterface = customStyleInterface;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /* eslint-disable no-unused-vars */
    /**
     * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
     * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
     *
     * @param {string} prop Property name
     * @param {?Object} obj Reference object
     * @return {string} Potentially renamed property name
     */
    window.JSCompiler_renameProperty = function(prop, obj) {
      return prop;
    };

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let CSS_URL_RX = /(url\()([^)]*)(\))/g;
    let ABS_URL = /(^\/)|(^#)|(^[\w-\d]*:)/;
    let workingURL;
    let resolveDoc;
    /**
     * Resolves the given URL against the provided `baseUri'.
     *
     * Note that this function performs no resolution for URLs that start
     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
     * URL resolution, use `window.URL`.
     *
     * @param {string} url Input URL to resolve
     * @param {?string=} baseURI Base URI to resolve the URL against
     * @return {string} resolved URL
     */
    function resolveUrl(url, baseURI) {
      if (url && ABS_URL.test(url)) {
        return url;
      }
      // Lazy feature detection.
      if (workingURL === undefined) {
        workingURL = false;
        try {
          const u = new URL('b', 'http://a');
          u.pathname = 'c%20d';
          workingURL = (u.href === 'http://a/c%20d');
        } catch (e) {
          // silently fail
        }
      }
      if (!baseURI) {
        baseURI = document.baseURI || window.location.href;
      }
      if (workingURL) {
        return (new URL(url, baseURI)).href;
      }
      // Fallback to creating an anchor into a disconnected document.
      if (!resolveDoc) {
        resolveDoc = document.implementation.createHTMLDocument('temp');
        resolveDoc.base = resolveDoc.createElement('base');
        resolveDoc.head.appendChild(resolveDoc.base);
        resolveDoc.anchor = resolveDoc.createElement('a');
        resolveDoc.body.appendChild(resolveDoc.anchor);
      }
      resolveDoc.base.href = baseURI;
      resolveDoc.anchor.href = url;
      return resolveDoc.anchor.href || url;

    }

    /**
     * Resolves any relative URL's in the given CSS text against the provided
     * `ownerDocument`'s `baseURI`.
     *
     * @param {string} cssText CSS text to process
     * @param {string} baseURI Base URI to resolve the URL against
     * @return {string} Processed CSS text with resolved URL's
     */
    function resolveCss(cssText, baseURI) {
      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {
        return pre + '\'' +
          resolveUrl(url.replace(/["']/g, ''), baseURI) +
          '\'' + post;
      });
    }

    /**
     * Returns a path from a given `url`. The path includes the trailing
     * `/` from the url.
     *
     * @param {string} url Input URL to transform
     * @return {string} resolved path
     */
    function pathFromUrl(url) {
      return url.substring(0, url.lastIndexOf('/') + 1);
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
    const useShadow = !(window.ShadyDOM);
    const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);
    const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);


    /**
     * Globally settable property that is automatically assigned to
     * `ElementMixin` instances, useful for binding in templates to
     * make URL's relative to an application's root.  Defaults to the main
     * document URL, but can be overridden by users.  It may be useful to set
     * `rootPath` to provide a stable application mount path when
     * using client side routing.
     */
    let rootPath = undefined ||
      pathFromUrl(document.baseURI || window.location.href);

    /**
     * A global callback used to sanitize any value before inserting it into the DOM.
     * The callback signature is:
     *
     *  function sanitizeDOMValue(value, name, type, node) { ... }
     *
     * Where:
     *
     * `value` is the value to sanitize.
     * `name` is the name of an attribute or property (for example, href).
     * `type` indicates where the value is being inserted: one of property, attribute, or text.
     * `node` is the node where the value is being inserted.
     *
     * @type {(function(*,string,string,Node):*)|undefined}
     */
    let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;

    /**
     * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
     * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
     * scrolling performance.
     * Defaults to `false` for backwards compatibility.
     */
    let passiveTouchGestures = false;

    /**
     * Setting to ensure Polymer template evaluation only occurs based on tempates
     * defined in trusted script.  When true, `<dom-module>` re-registration is
     * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`
     * templates will only evaluate in the context of a trusted element template.
     */
    let strictTemplatePolicy = false;

    /**
     * Setting to enable dom-module lookup from Polymer.Element.  By default,
     * templates must be defined in script using the `static get template()`
     * getter and the `html` tag function.  To enable legacy loading of templates
     * via dom-module, set this flag to true.
     */
    let allowTemplateFromDomModule = false;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let modules = {};
    let lcModules = {};
    /**
     * Sets a dom-module into the global registry by id.
     *
     * @param {string} id dom-module id
     * @param {DomModule} module dom-module instance
     * @return {void}
     */
    function setModule(id, module) {
      // store id separate from lowercased id so that
      // in all cases mixedCase id will stored distinctly
      // and lowercase version is a fallback
      modules[id] = lcModules[id.toLowerCase()] = module;
    }
    /**
     * Retrieves a dom-module from the global registry by id.
     *
     * @param {string} id dom-module id
     * @return {DomModule!} dom-module instance
     */
    function findModule(id) {
      return modules[id] || lcModules[id.toLowerCase()];
    }

    function styleOutsideTemplateCheck(inst) {
      if (inst.querySelector('style')) {
        console.warn('dom-module %s has style outside template', inst.id);
      }
    }

    /**
     * The `dom-module` element registers the dom it contains to the name given
     * by the module's id attribute. It provides a unified database of dom
     * accessible via its static `import` API.
     *
     * A key use case of `dom-module` is for providing custom element `<template>`s
     * via HTML imports that are parsed by the native HTML parser, that can be
     * relocated during a bundling pass and still looked up by `id`.
     *
     * Example:
     *
     *     <dom-module id="foo">
     *       <img src="stuff.png">
     *     </dom-module>
     *
     * Then in code in some other location that cannot access the dom-module above
     *
     *     let img = customElements.get('dom-module').import('foo', 'img');
     *
     * @customElement
     * @extends HTMLElement
     * @summary Custom element that provides a registry of relocatable DOM content
     *   by `id` that is agnostic to bundling.
     * @unrestricted
     */
    class DomModule extends HTMLElement {

      static get observedAttributes() { return ['id']; }

      /**
       * Retrieves the element specified by the css `selector` in the module
       * registered by `id`. For example, this.import('foo', 'img');
       * @param {string} id The id of the dom-module in which to search.
       * @param {string=} selector The css selector by which to find the element.
       * @return {Element} Returns the element which matches `selector` in the
       * module registered at the specified `id`.
       *
       * @export
       * @nocollapse Referred to indirectly in style-gather.js
       */
      static import(id, selector) {
        if (id) {
          let m = findModule(id);
          if (m && selector) {
            return m.querySelector(selector);
          }
          return m;
        }
        return null;
      }

      /* eslint-disable no-unused-vars */
      /**
       * @param {string} name Name of attribute.
       * @param {?string} old Old value of attribute.
       * @param {?string} value Current value of attribute.
       * @param {?string} namespace Attribute namespace.
       * @return {void}
       * @override
       */
      attributeChangedCallback(name, old, value, namespace) {
        if (old !== value) {
          this.register();
        }
      }
      /* eslint-enable no-unused-args */

      /**
       * The absolute URL of the original location of this `dom-module`.
       *
       * This value will differ from this element's `ownerDocument` in the
       * following ways:
       * - Takes into account any `assetpath` attribute added during bundling
       *   to indicate the original location relative to the bundled location
       * - Uses the HTMLImports polyfill's `importForElement` API to ensure
       *   the path is relative to the import document's location since
       *   `ownerDocument` is not currently polyfilled
       */
      get assetpath() {
        // Don't override existing assetpath.
        if (!this.__assetpath) {
          // note: assetpath set via an attribute must be relative to this
          // element's location; accomodate polyfilled HTMLImports
          const owner = window.HTMLImports && HTMLImports.importForElement ?
            HTMLImports.importForElement(this) || document : this.ownerDocument;
          const url = resolveUrl(
            this.getAttribute('assetpath') || '', owner.baseURI);
          this.__assetpath = pathFromUrl(url);
        }
        return this.__assetpath;
      }

      /**
       * Registers the dom-module at a given id. This method should only be called
       * when a dom-module is imperatively created. For
       * example, `document.createElement('dom-module').register('foo')`.
       * @param {string=} id The id at which to register the dom-module.
       * @return {void}
       */
      register(id) {
        id = id || this.id;
        if (id) {
          // Under strictTemplatePolicy, reject and null out any re-registered
          // dom-module since it is ambiguous whether first-in or last-in is trusted
          if (strictTemplatePolicy && findModule(id) !== undefined) {
            setModule(id, null);
            throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);
          }
          this.id = id;
          setModule(id, this);
          styleOutsideTemplateCheck(this);
        }
      }
    }

    DomModule.prototype['modules'] = modules;

    customElements.define('dom-module', DomModule);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';
    const INCLUDE_ATTR = 'include';
    const SHADY_UNSCOPED_ATTR = 'shady-unscoped';

    /**
     * @param {string} moduleId .
     * @return {?DomModule} .
     */
    function importModule(moduleId) {
      return /** @type {?DomModule} */(DomModule.import(moduleId));
    }

    function styleForImport(importDoc) {
      // NOTE: polyfill affordance.
      // under the HTMLImports polyfill, there will be no 'body',
      // but the import pseudo-doc can be used directly.
      let container = importDoc.body ? importDoc.body : importDoc;
      const importCss = resolveCss(container.textContent,
        importDoc.baseURI);
      const style = document.createElement('style');
      style.textContent = importCss;
      return style;
    }


    /**
     * Returns a list of <style> elements in a space-separated list of `dom-module`s.
     *
     * @function
     * @param {string} moduleIds List of dom-module id's within which to
     * search for css.
     * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
     */
    function stylesFromModules(moduleIds) {
     const modules = moduleIds.trim().split(/\s+/);
     const styles = [];
     for (let i=0; i < modules.length; i++) {
       styles.push(...stylesFromModule(modules[i]));
     }
     return styles;
    }

    /**
     * Returns a list of <style> elements in a given `dom-module`.
     * Styles in a `dom-module` can come either from `<style>`s within the
     * first `<template>`, or else from one or more
     * `<link rel="import" type="css">` links outside the template.
     *
     * @param {string} moduleId dom-module id to gather styles from
     * @return {!Array<!HTMLStyleElement>} Array of contained styles.
     */
    function stylesFromModule(moduleId) {
      const m = importModule(moduleId);

      if (!m) {
        console.warn('Could not find style data in module named', moduleId);
        return [];
      }

      if (m._styles === undefined) {
        const styles = [];
        // module imports: <link rel="import" type="css">
        styles.push(..._stylesFromModuleImports(m));
        // include css from the first template in the module
        const template = /** @type {?HTMLTemplateElement} */(
            m.querySelector('template'));
        if (template) {
          styles.push(...stylesFromTemplate(template,
            /** @type {templateWithAssetPath} */(m).assetpath));
        }

        m._styles = styles;
      }

      return m._styles;
    }

    /**
     * Returns the `<style>` elements within a given template.
     *
     * @param {!HTMLTemplateElement} template Template to gather styles from
     * @param {string} baseURI baseURI for style content
     * @return {!Array<!HTMLStyleElement>} Array of styles
     */
    function stylesFromTemplate(template, baseURI) {
      if (!template._styles) {
        const styles = [];
        // if element is a template, get content from its .content
        const e$ = template.content.querySelectorAll('style');
        for (let i=0; i < e$.length; i++) {
          let e = e$[i];
          // support style sharing by allowing styles to "include"
          // other dom-modules that contain styling
          let include = e.getAttribute(INCLUDE_ATTR);
          if (include) {
            styles.push(...stylesFromModules(include).filter(function(item, index, self) {
              return self.indexOf(item) === index;
            }));
          }
          if (baseURI) {
            e.textContent = resolveCss(e.textContent, baseURI);
          }
          styles.push(e);
        }
        template._styles = styles;
      }
      return template._styles;
    }

    /**
     * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
     *
     * @param {string} moduleId Id of `dom-module` to gather CSS from
     * @return {!Array<!HTMLStyleElement>} Array of contained styles.
     */
    function stylesFromModuleImports(moduleId) {
     let m = importModule(moduleId);
     return m ? _stylesFromModuleImports(m) : [];
    }

    /**
     * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
     * @return {!Array<!HTMLStyleElement>} Array of contained styles
     */
    function _stylesFromModuleImports(module) {
      const styles = [];
      const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);
      for (let i=0; i < p$.length; i++) {
        let p = p$[i];
        if (p.import) {
          const importDoc = p.import;
          const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);
          if (unscoped && !importDoc._unscopedStyle) {
            const style = styleForImport(importDoc);
            style.setAttribute(SHADY_UNSCOPED_ATTR, '');
            importDoc._unscopedStyle = style;
          } else if (!importDoc._style) {
            importDoc._style = styleForImport(importDoc);
          }
          styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);
        }
      }
      return styles;
    }

    /**
     *
     * Returns CSS text of styles in a space-separated list of `dom-module`s.
     * Note: This method is deprecated, use `stylesFromModules` instead.
     *
     * @deprecated
     * @param {string} moduleIds List of dom-module id's within which to
     * search for css.
     * @return {string} Concatenated CSS content from specified `dom-module`s
     */
    function cssFromModules(moduleIds) {
     let modules = moduleIds.trim().split(/\s+/);
     let cssText = '';
     for (let i=0; i < modules.length; i++) {
       cssText += cssFromModule(modules[i]);
     }
     return cssText;
    }

    /**
     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`
     * can come either from `<style>`s within the first `<template>`, or else
     * from one or more `<link rel="import" type="css">` links outside the
     * template.
     *
     * Any `<styles>` processed are removed from their original location.
     * Note: This method is deprecated, use `styleFromModule` instead.
     *
     * @deprecated
     * @param {string} moduleId dom-module id to gather styles from
     * @return {string} Concatenated CSS content from specified `dom-module`
     */
    function cssFromModule(moduleId) {
      let m = importModule(moduleId);
      if (m && m._cssText === undefined) {
        // module imports: <link rel="import" type="css">
        let cssText = _cssFromModuleImports(m);
        // include css from the first template in the module
        let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));
        if (t) {
          cssText += cssFromTemplate(t,
            /** @type {templateWithAssetPath} */(m).assetpath);
        }
        m._cssText = cssText || null;
      }
      if (!m) {
        console.warn('Could not find style data in module named', moduleId);
      }
      return m && m._cssText || '';
    }

    /**
     * Returns CSS text of `<styles>` within a given template.
     *
     * Any `<styles>` processed are removed from their original location.
     * Note: This method is deprecated, use `styleFromTemplate` instead.
     *
     * @deprecated
     * @param {!HTMLTemplateElement} template Template to gather styles from
     * @param {string} baseURI Base URI to resolve the URL against
     * @return {string} Concatenated CSS content from specified template
     */
    function cssFromTemplate(template, baseURI) {
      let cssText = '';
      const e$ = stylesFromTemplate(template, baseURI);
      // if element is a template, get content from its .content
      for (let i=0; i < e$.length; i++) {
        let e = e$[i];
        if (e.parentNode) {
          e.parentNode.removeChild(e);
        }
        cssText += e.textContent;
      }
      return cssText;
    }

    /**
     * @deprecated
     * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
     * @return {string} Concatenated CSS content from links in the dom-module
     */
    function _cssFromModuleImports(module) {
      let cssText = '';
      let styles = _stylesFromModuleImports(module);
      for (let i=0; i < styles.length; i++) {
        cssText += styles[i].textContent;
      }
      return cssText;
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const attr = 'include';

    const CustomStyleInterface$1 = window.ShadyCSS.CustomStyleInterface;

    /**
     * Custom element for defining styles in the main document that can take
     * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
     * for style encapsulation, custom properties, and custom mixins.
     *
     * - Document styles defined in a `<custom-style>` are shimmed to ensure they
     *   do not leak into local DOM when running on browsers without native
     *   Shadow DOM.
     * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector
     *   to define custom properties that apply to all custom elements.
     * - Custom mixins can be defined in a `<custom-style>`, if you import the optional
     *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)
     *   (`shadycss/apply-shim.html`).
     *
     * To use:
     *
     * - Import `custom-style.html`.
     * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that
     *   contains the CSS rules you want to shim.
     *
     * For example:
     *
     * ```html
     * <!-- import apply shim--only required if using mixins -->
     * <link rel="import" href="bower_components/shadycss/apply-shim.html">
     * <!-- import custom-style element -->
     * <link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">
     *
     * <custom-style>
     *   <style>
     *     html {
     *       --custom-color: blue;
     *       --custom-mixin: {
     *         font-weight: bold;
     *         color: red;
     *       };
     *     }
     *   </style>
     * </custom-style>
     * ```
     *
     * @customElement
     * @extends HTMLElement
     * @summary Custom element for defining styles in the main document that can
     *   take advantage of Polymer's style scoping and custom properties shims.
     */
    class CustomStyle extends HTMLElement {
      constructor() {
        super();
        this._style = null;
        CustomStyleInterface$1.addCustomStyle(this);
      }
      /**
       * Returns the light-DOM `<style>` child this element wraps.  Upon first
       * call any style modules referenced via the `include` attribute will be
       * concatenated to this element's `<style>`.
       *
       * @export
       * @return {HTMLStyleElement} This element's light-DOM `<style>`
       */
      getStyle() {
        if (this._style) {
          return this._style;
        }
        const style = /** @type {HTMLStyleElement} */(this.querySelector('style'));
        if (!style) {
          return null;
        }
        this._style = style;
        const include = style.getAttribute(attr);
        if (include) {
          style.removeAttribute(attr);
          style.textContent = cssFromModules(include) + style.textContent;
        }
        /*
        HTML Imports styling the main document are deprecated in Chrome
        https://crbug.com/523952

        If this element is not in the main document, then it must be in an HTML Import document.
        In that case, move the custom style to the main document.

        The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
        cases of ordering w.r.t the main document styles.
        */
        if (this.ownerDocument !== window.document) {
          window.document.head.appendChild(this);
        }
        return this._style;
      }
    }

    window.customElements.define('custom-style', CustomStyle);

    const $_documentContainer = document.createElement('template');

    $_documentContainer.innerHTML = `<custom-style>
  <style>
    html {
      /* Base (background) */
      --lumo-base-color: #FFF;

      /* Tint */
      --lumo-tint-5pct: hsla(0, 0%, 100%, 0.3);
      --lumo-tint-10pct: hsla(0, 0%, 100%, 0.37);
      --lumo-tint-20pct: hsla(0, 0%, 100%, 0.44);
      --lumo-tint-30pct: hsla(0, 0%, 100%, 0.5);
      --lumo-tint-40pct: hsla(0, 0%, 100%, 0.57);
      --lumo-tint-50pct: hsla(0, 0%, 100%, 0.64);
      --lumo-tint-60pct: hsla(0, 0%, 100%, 0.7);
      --lumo-tint-70pct: hsla(0, 0%, 100%, 0.77);
      --lumo-tint-80pct: hsla(0, 0%, 100%, 0.84);
      --lumo-tint-90pct: hsla(0, 0%, 100%, 0.9);
      --lumo-tint: #FFF;

      /* Shade */
      --lumo-shade-5pct: hsla(214, 61%, 25%, 0.05);
      --lumo-shade-10pct: hsla(214, 57%, 24%, 0.1);
      --lumo-shade-20pct: hsla(214, 53%, 23%, 0.16);
      --lumo-shade-30pct: hsla(214, 50%, 22%, 0.26);
      --lumo-shade-40pct: hsla(214, 47%, 21%, 0.38);
      --lumo-shade-50pct: hsla(214, 45%, 20%, 0.5);
      --lumo-shade-60pct: hsla(214, 43%, 19%, 0.61);
      --lumo-shade-70pct: hsla(214, 42%, 18%, 0.72);
      --lumo-shade-80pct: hsla(214, 41%, 17%, 0.83);
      --lumo-shade-90pct: hsla(214, 40%, 16%, 0.94);
      --lumo-shade: hsl(214, 35%, 15%);

      /* Contrast */
      --lumo-contrast-5pct: var(--lumo-shade-5pct);
      --lumo-contrast-10pct: var(--lumo-shade-10pct);
      --lumo-contrast-20pct: var(--lumo-shade-20pct);
      --lumo-contrast-30pct: var(--lumo-shade-30pct);
      --lumo-contrast-40pct: var(--lumo-shade-40pct);
      --lumo-contrast-50pct: var(--lumo-shade-50pct);
      --lumo-contrast-60pct: var(--lumo-shade-60pct);
      --lumo-contrast-70pct: var(--lumo-shade-70pct);
      --lumo-contrast-80pct: var(--lumo-shade-80pct);
      --lumo-contrast-90pct: var(--lumo-shade-90pct);
      --lumo-contrast: var(--lumo-shade);

      /* Text */
      --lumo-header-text-color: var(--lumo-contrast);
      --lumo-body-text-color: var(--lumo-contrast-90pct);
      --lumo-secondary-text-color: var(--lumo-contrast-70pct);
      --lumo-tertiary-text-color: var(--lumo-contrast-50pct);
      --lumo-disabled-text-color: var(--lumo-contrast-30pct);

      /* Primary */
      --lumo-primary-color: hsl(214, 90%, 52%);
      --lumo-primary-color-50pct: hsla(214, 90%, 52%, 0.5);
      --lumo-primary-color-10pct: hsla(214, 90%, 52%, 0.1);
      --lumo-primary-text-color: var(--lumo-primary-color);
      --lumo-primary-contrast-color: #FFF;

      /* Error */
      --lumo-error-color: hsl(3, 100%, 61%);
      --lumo-error-color-50pct: hsla(3, 100%, 60%, 0.5);
      --lumo-error-color-10pct: hsla(3, 100%, 60%, 0.1);
      --lumo-error-text-color: hsl(3, 92%, 53%);
      --lumo-error-contrast-color: #FFF;

      /* Success */
      --lumo-success-color: hsl(145, 80%, 42%); /* hsl(144,82%,37%); */
      --lumo-success-color-50pct: hsla(145, 76%, 44%, 0.55);
      --lumo-success-color-10pct: hsla(145, 76%, 44%, 0.12);
      --lumo-success-text-color: hsl(145, 100%, 32%);
      --lumo-success-contrast-color: #FFF;
    }
  </style>
</custom-style><dom-module id="lumo-color">
  <template>
    <style>
      [theme~="dark"] {
        /* Base (background) */
        --lumo-base-color: hsl(214, 35%, 21%);

        /* Tint */
        --lumo-tint-5pct: hsla(214, 65%, 85%, 0.06);
        --lumo-tint-10pct: hsla(214, 60%, 80%, 0.14);
        --lumo-tint-20pct: hsla(214, 64%, 82%, 0.23);
        --lumo-tint-30pct: hsla(214, 69%, 84%, 0.32);
        --lumo-tint-40pct: hsla(214, 73%, 86%, 0.41);
        --lumo-tint-50pct: hsla(214, 78%, 88%, 0.5);
        --lumo-tint-60pct: hsla(214, 82%, 90%, 0.6);
        --lumo-tint-70pct: hsla(214, 87%, 92%, 0.7);
        --lumo-tint-80pct: hsla(214, 91%, 94%, 0.8);
        --lumo-tint-90pct: hsla(214, 96%, 96%, 0.9);
        --lumo-tint: hsl(214, 100%, 98%);

        /* Shade */
        --lumo-shade-5pct: hsla(214, 0%, 0%, 0.07);
        --lumo-shade-10pct: hsla(214, 4%, 2%, 0.15);
        --lumo-shade-20pct: hsla(214, 8%, 4%, 0.23);
        --lumo-shade-30pct: hsla(214, 12%, 6%, 0.32);
        --lumo-shade-40pct: hsla(214, 16%, 8%, 0.41);
        --lumo-shade-50pct: hsla(214, 20%, 10%, 0.5);
        --lumo-shade-60pct: hsla(214, 24%, 12%, 0.6);
        --lumo-shade-70pct: hsla(214, 28%, 13%, 0.7);
        --lumo-shade-80pct: hsla(214, 32%, 13%, 0.8);
        --lumo-shade-90pct: hsla(214, 33%, 13%, 0.9);
        --lumo-shade: hsl(214, 33%, 13%);

        /* Contrast */
        --lumo-contrast-5pct: var(--lumo-tint-5pct);
        --lumo-contrast-10pct: var(--lumo-tint-10pct);
        --lumo-contrast-20pct: var(--lumo-tint-20pct);
        --lumo-contrast-30pct: var(--lumo-tint-30pct);
        --lumo-contrast-40pct: var(--lumo-tint-40pct);
        --lumo-contrast-50pct: var(--lumo-tint-50pct);
        --lumo-contrast-60pct: var(--lumo-tint-60pct);
        --lumo-contrast-70pct: var(--lumo-tint-70pct);
        --lumo-contrast-80pct: var(--lumo-tint-80pct);
        --lumo-contrast-90pct: var(--lumo-tint-90pct);
        --lumo-contrast: var(--lumo-tint);

        /* Text */
        --lumo-header-text-color: var(--lumo-contrast);
        --lumo-body-text-color: var(--lumo-contrast-90pct);
        --lumo-secondary-text-color: var(--lumo-contrast-70pct);
        --lumo-tertiary-text-color: var(--lumo-contrast-50pct);
        --lumo-disabled-text-color: var(--lumo-contrast-30pct);

        /* Primary */
        --lumo-primary-color: hsl(214, 86%, 55%);
        --lumo-primary-color-50pct: hsla(214, 86%, 55%, 0.5);
        --lumo-primary-color-10pct: hsla(214, 90%, 63%, 0.1);
        --lumo-primary-text-color: hsl(214, 100%, 70%);
        --lumo-primary-contrast-color: #FFF;

        /* Error */
        --lumo-error-color: hsl(3, 90%, 63%);
        --lumo-error-color-50pct: hsla(3, 90%, 63%, 0.5);
        --lumo-error-color-10pct: hsla(3, 90%, 63%, 0.1);
        --lumo-error-text-color: hsl(3, 100%, 67%);

        /* Success */
        --lumo-success-color: hsl(145, 65%, 42%);
        --lumo-success-color-50pct: hsla(145, 65%, 42%, 0.5);
        --lumo-success-color-10pct: hsla(145, 65%, 42%, 0.1);
        --lumo-success-text-color: hsl(145, 85%, 47%);
      }

      html {
        color: var(--lumo-body-text-color);
        background-color: var(--lumo-base-color);
      }

      [theme~="dark"] {
        color: var(--lumo-body-text-color);
        background-color: var(--lumo-base-color);
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: var(--lumo-header-text-color);
      }

      a {
        color: var(--lumo-primary-text-color);
      }

      blockquote {
        color: var(--lumo-secondary-text-color);
      }

      code,
      pre {
        background-color: var(--lumo-contrast-10pct);
        border-radius: var(--lumo-border-radius-m);
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-color-legacy">
  <template>
    <style include="lumo-color">
      :host {
        color: var(--lumo-body-text-color) !important;
        background-color: var(--lumo-base-color) !important;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer.content);

    const $_documentContainer$1 = document.createElement('template');

    $_documentContainer$1.innerHTML = `<custom-style>
  <style>
    @font-face {
      font-family: 'lumo-icons';
      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAABEgAAsAAAAAIiwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAQwAAAFZAIUuKY21hcAAAAYgAAAD4AAADrsCU8d5nbHlmAAACgAAAC2MAABd4h9To2WhlYWQAAA3kAAAAMQAAADYSnCkuaGhlYQAADhgAAAAdAAAAJAbpA35obXR4AAAOOAAAABAAAACspBAAAGxvY2EAAA5IAAAAWAAAAFh55IAsbWF4cAAADqAAAAAfAAAAIAFKAXBuYW1lAAAOwAAAATEAAAIuUUJZCHBvc3QAAA/0AAABKwAAAelm8SzVeJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGS+yDiBgZWBgamKaQ8DA0MPhGZ8wGDIyAQUZWBlZsAKAtJcUxgcXjG+0mIO+p/FEMUcxDANKMwIkgMABn8MLQB4nO3SWW6DMABF0UtwCEnIPM/zhLK8LqhfXRybSP14XUYtHV9hGYQwQBNIo3cUIPkhQeM7rib1ekqnXg981XuC1qvy84lzojleh3puxL0hPjGjRU473teloEefAUNGjJkwZcacBUtWrNmwZceeA0dOnLlw5cadB09elPGhGf+j0NTI/65KfXerT6JhqKnpRKtgOpuqaTrtKjPUlqHmhto21I7pL6i6hlqY3q7qGWrfUAeGOjTUkaGODXViqFNDnRnq3FAXhro01JWhrg11Y6hbQ90Z6t5QD4Z6NNSToZ4N9WKoV0O9GerdUB+G+jTUl6GWRvkL24BkEXictVh9bFvVFb/nxvbz+7Rf/N6zHcd2bCfP+Wgc1Z9N0jpNnEL6kbRVS6HA2hQYGh9TGR1CbCqa2rXrWOkQE/sHNJgmtZvoVNZqE1B1DNHxzTQxCehUTYiJTQyENui0qSLezr3PduyQfgmRWOfde8+9551z7rnn/O4jLoJ/bRP0UaKQMLFJjpBAvphLZC3Dk0ok7WBzR2/upJs7Ryw/nfFbln/uuN/apCvwrKLrSvUqRufbm5pn0fs0w4gYxnGVP6qHnO4bWiDQGQgwtS6lm3lB3QoX1M2vwEmuzirF39y+Es2+DJ8d1pkyqBIqoze3D1+Zz4DrFoazxI8dWwMrDlZ2DMqQAR9AROsJU+2cmlTPazTco52F1xTa2a2+K8vvq92dVHmtLoPeQX/AZPRYGthDYOeZjBjKoFsVGulR3lWU95WeCK44qHU7MhWUGUKZDT3oKUcG2GWuh+EDDfUYA/jhAhl0TOsJNYSEu7mQmi3UzfXwZKA4BsVsHLXQYGgRW95uEtpJ1Vfn9XiLriRBlFEqxsDjA09yCNUoQxxwd7KWSTt2y3GTKiflqHRSoWZc3m11Wa/fJdFgXD4sSYfleJBKd8GMz7J8dZn/cGRCcKGDnA2Ge3fKzcvlnTDNthGWLXzX/WaXtUAmRgeLlHSr30r0G9UTXMb0AtmwzOoy73fkSlHZkduw/TYuU9cAD4YutPoxTTsA3797wVr4Z/1NC5zARHr4vtxJjxIfiZMhMkbWk+14BnJZKwqGZwDfswLyxWDSg11rFLJF7Nopxjd1h1/QOT+oezgfu3Yq+Hk+duf5x+40o1GTkaIgikK/IEnC6aYxCUBaZJSN4XTYFjU/YMNIKqJwhDGOCCI8FDXnXmXjtGhGJyShqjAOnBOkW2JG9S7GgYeMWAU5JzhnWmBOaOM+CKEPoqSfFDC2Unq+DLlUgUVUFFLZGJg6jtlojsdsa8kPObPuJdi5dnBdBsLJMGTWDa4t2JvtwuPo9s+Y86suv/W33QG1rAaOAUV+vx4K6f2D04PVKlC7WLSrZzAi45ZV6lIC7WoXqmRyvUqoVwrzUoVsIjeTXWQv+RH5GTlBXiB/In8ln0IbBCAFOajAJrgZYyOHWqOfUe/aHjI12R6OQo1jCgt215l+4f6XPb+0MNou0V+43n2F77tSfRb24d7zitgnKmvYHs69zugaPvBwv6ioXkb2LdL65Atw51uLkXlu1bhMMRcXSPcYoqKIRlh34lQP8/5JbuUFye4vxD6/6MxFF11C0uVLr9Ulgw44tS3pMViNLUExbycFgLIct+QDMibRimx1ydUz8FXZiuOIDBOMVX2nUZc+huNE5XUJ81uiJoiabwqaVF0uacKbau/pl4R2VW0XXlJra6boVrYG646TF5NYzwy4vjENVrDlcNpZPl8DH6XX8XWCx0mvWVZY6KFLrvsY66/zPict5FnxaNUR/juvZCM3TvD60E2W1tZizbXTPDuabcm0nbbzpWKpmA1ayBQ8giedLUM+A0kNjBjQjmuYz7YrgIXYvmF63ZLBwSXrpn9Tb9wwdd/U1H0PMQK3XcO8ul3WT7PyPPdpy0TemKxNRcJNauiXJnnUDpUppQWs4SnUIy0EESGYqJYQLGHxzaGWwVIaS6Y7mQFM8ZjYDQ3axjf61SWjU33JwOZA1pwaG1L9mzf71aHRdX1JHw6Fp0aXhNwbqyeGNg4NbdzGCBxoz4ZXjy4Nu69Zr6sDY6vMrLU5nA1P8JkbdWXJ6ERfMryvNh1JfQ9+T4dIhGvK9w3dxjBBzatsQ/MlOHVIDnYpDz6odAXlQ01t2Pa5Iafd8MMpxAeDKP0C6CjgVLT5osB6icUx01lWjXxzT/GyRF2welEM5Z/7jG3VjQ1SrNn5IbyzOG5dobB3/QHxyZvsXcoz8IoEwS7plCg+zxHQk424q9BfEpkESJbFHQusDBSWFkuBkoPO0kLKwRVYjxGXlHTcTDQMJ/H6TX9afkO7mnraTO1feTnZAXLu4cp7HAXMmNG1yeFk9TgS/NHhZR/4QoBTr/ZB+6hCgyl15Nq1UbN6nE1/ZnP1U2cizCBpvs8cJQZJ4LkYx5N/yZPAUZNQQ0V4f3BQllWrK3YRzl30dOT6RVn2upNur6woSa8CqpdT/aKnBM4o3jNur9d9xqtUT6veBEt9Ca9at+ERzEEhUkR8sa5mQ4aVvJoVeEA8zI4ei5mULXFGyU7z/6TAeYLVcpzSWZY8PYYF5yrTV60sT0+XV141vX++Wf16V2bFeGVPZXxFpkvyeKTWLlzfW0mnKxsY6Y3294/0998SCfX1blm5pbcvFGlq/r07MRAMhYIDiW5JFKWW3vdrEpCsZSJG+om7Zu/PSScZJhNkLbmW5Wsr12pWqW5zKtlwRS4bFOxUw17mCzy6lskCDl1WYOGWDYrADrMA7BDDweWWNd5koiJnR1dz+ytLP2q0SqPB1lnK2ccB7RYe4FSoPks3iB3t4txTSHctb2sy1ivk0pvHuCNm6w1f6wxv3+OCgN78LqdQnUVh7R0oTAp0zOf2rbW770Vu5C2dIyGdTnHo8zSji7dppj0USoVCz+lhRMTh53Teq9VbGfbjuSbAooSdXayY4PYHg374C6f7gl1B/DXuJ4/QXxOBdJFJspFsI3egpoWUUCjlTIFnNYNl+ZyZKmBeYKGHkD1QyDlhaKbKwKcIJqJ4TLJ2OmdY/JWXae4DdGBw8HZ7eXcgFF2zr2SoalDry5iKqoa0Puhe3hPQ2s3elTYM+MI+n3rK0KgL7/La3GeMLt6m7u912vGnvtORiIa0qBmhqVi+XW9XNBmqb8eVgKzIHfGI5bNoG7X0UCzeISmqIcO/nY8FH7U8avX9fx/ST+hx0sezPw9Qy8Mum3GWf2N4Uy/yIYGVBXbJHWIZp7dfTcptdMTr9Qmq7DaiK/ukqCL4kt4RUfS5XPnMtmT22/mQFqF7emSqtrlu8SVElxDRJrZODkpuwe0VfTfjdEp1f7A7v+fozNBXUJ/6WTuK2TtFlpFVZAZ3LcFvUi1Z2p2YT+EMAkGJVStOzLTAPg4IqWIAlzRSjOBkl2zxj3TKycpzT/MnvX3uaSMWM+gU0rkXjohhefVRMaps3/kLMSKv23lT23uxQrkQjyOJleMDsdhAnD6ZGElWZ5MjCXzCE/hkWX+WF4knzGhVOyK2eQZekV3eyo0zL8kuYWCnDCvjjhAkcTPOBDXVdoav3HVcFnQjLvtV9S2p0zA6JegPwMQxt+yFb3ll9zGlq/5dRKb3cEyQYoaNYpharJ7xCB7AWxsLY3jjZXY0XsZj0Wjwc9I6PP/dKABnCZaqHpaZEACxk4ZeLZSKNgZABl+lYQX1sJQOSX3n6r410evcoud5JeAGUXVP9H1tZOKejTq4Ono0z0erro1FrnOpohva1d/hTdtVsQdKN5W9RlT3NjD0nznyKNTgKAMfWNWcyodV0IGLPIHOF0o4JyqufaK4z6WIIzuGh3d8c8cwQg8ER+OVxyrjdm8vNuhts4LoOihGxIMuUdgzwiYN7xhh1+oZnJNuTG7gQZvu4XWZ9GAZZjGEubwePqYhtKDTH+9VQkl17/iGybsnJ+8+sKtyPrcll9ty65Zsdst/9iqpEKh7M5VdBxh3csOdNc6tW3I1uyM1PzOXegSOrLFsFNI2O27M+TF2ApnN9MUv5ud6LjxIvEQnHRzxIu4IsA9MLFkJn2tcZoZ7ON7dXe7ujrc8HrusPKamlqXwd77lQUuLpilau4PUMapueBb7irU4RoUXEYXuVuIGlRGmOp+2lNkaRPVziOqmlaZvaqG4dFgSj0jxEJWrv12IUWntmw+rfQarRE0Aph4ocI6nlUlGqs+u3/+T/ethW62PpHp2eHbZstnh/wOO95yDAHicY2BkYGAAYi2NOJ94fpuvDNzML4AiDNc/fzqEoP+/Zp7KdAvI5WBgAokCAGkcDfgAAAB4nGNgZGBgDvqfBSRfMAAB81QGRgZUoA0AVvYDbwAAAHicY2BgYGB+MTQwAM8EJo8AAAAAAE4AmgDoAQoBLAFOAXABmgHEAe4CGgKcAugEmgS8BNYE8gUOBSoFegXQBf4GRAZmBrYHGAeQCBgIUghqCP4JRgm+CdoKBAo8CoIKuArwC1ALlgu8eJxjYGRgYNBmTGEQZQABJiDmAkIGhv9gPgMAGJQBvAB4nG2RPU7DMBiG3/QP0UoIBGJh8QILavozdmRo9w7d09RpUzlx5LgVvQMn4BAcgoEzcAgOwVvzSZVQbcnf48fvFysJgGt8IcJxROiG9TgauODuj5ukG+EW+UG4jR4ehTv0Q+EunjER7uEWmk+IWpc0d3gVbuAKb8JN+nfhFvlDuI17fAp36L+Fu1jgR7iHp+jF7Arbz1Nb1nO93pnEncSJFtrVuS3VKB6e5EyX2iVer9TyoOr9eux9pjJnCzW1pdfGWFU5u9WpjzfeV5PBIBMfp7aAwQ4FLPrIkbKWqDHn+67pDRK4s4lzbsEux5qHvcIIMb/nueSMyTKkE3jWFdNLHLjW2PPmMa1Hxn3GjGW/wjT0HtOG09JU4WxLk9LH2ISuiv9twJn9y8fh9uIXI+BknAAAAHicbY7ZboMwEEW5CVBCSLrv+76kfJRjTwHFsdGAG+Xvy5JUfehIHp0rnxmNN/D6ir3/a4YBhvARIMQOIowQY4wEE0yxiz3s4wCHOMIxTnCKM5zjApe4wjVucIs73OMBj3jCM17wije84wMzfHqJ0EVmUkmmJo77oOmrHvfIRZbXsTCZplTZldlgb3TYGVHProwFs11t1A57tcON2rErR3PBqcwF1/6ctI6k0GSU4JHMSS6WghdJQ99sTbfuN7QLJ9vQ37dNrgyktnIxlDYLJNuqitpRbYWKFNuyDT6pog6oOYKHtKakeakqKjHXpPwlGRcsC+OqxLIiJpXqoqqDMreG2l5bv9Ri3TRX+c23DZna9WFFgmXuO6Ps1Jm/w6ErW8N3FbHn/QC444j0AA==) format('woff');
      font-weight: normal;
      font-style: normal;
    }

    html {
      --lumo-icons-align-center: "\\ea01";
      --lumo-icons-align-left: "\\ea02";
      --lumo-icons-align-right: "\\ea03";
      --lumo-icons-angle-down: "\\ea04";
      --lumo-icons-angle-left: "\\ea05";
      --lumo-icons-angle-right: "\\ea06";
      --lumo-icons-angle-up: "\\ea07";
      --lumo-icons-arrow-down: "\\ea08";
      --lumo-icons-arrow-left: "\\ea09";
      --lumo-icons-arrow-right: "\\ea0a";
      --lumo-icons-arrow-up: "\\ea0b";
      --lumo-icons-bar-chart: "\\ea0c";
      --lumo-icons-bell: "\\ea0d";
      --lumo-icons-calendar: "\\ea0e";
      --lumo-icons-checkmark: "\\ea0f";
      --lumo-icons-chevron-down: "\\ea10";
      --lumo-icons-chevron-left: "\\ea11";
      --lumo-icons-chevron-right: "\\ea12";
      --lumo-icons-chevron-up: "\\ea13";
      --lumo-icons-clock: "\\ea14";
      --lumo-icons-cog: "\\ea15";
      --lumo-icons-cross: "\\ea16";
      --lumo-icons-download: "\\ea17";
      --lumo-icons-dropdown: "\\ea18";
      --lumo-icons-edit: "\\ea19";
      --lumo-icons-error: "\\ea1a";
      --lumo-icons-eye: "\\ea1b";
      --lumo-icons-eye-disabled: "\\ea1c";
      --lumo-icons-menu: "\\ea1d";
      --lumo-icons-minus: "\\ea1e";
      --lumo-icons-ordered-list: "\\ea1f";
      --lumo-icons-phone: "\\ea20";
      --lumo-icons-photo: "\\ea21";
      --lumo-icons-play: "\\ea22";
      --lumo-icons-plus: "\\ea23";
      --lumo-icons-redo: "\\ea24";
      --lumo-icons-reload: "\\ea25";
      --lumo-icons-search: "\\ea26";
      --lumo-icons-undo: "\\ea27";
      --lumo-icons-unordered-list: "\\ea28";
      --lumo-icons-upload: "\\ea29";
      --lumo-icons-user: "\\ea2a";
    }
  </style>
</custom-style>`;

    document.head.appendChild($_documentContainer$1.content);

    const $_documentContainer$2 = document.createElement('template');

    $_documentContainer$2.innerHTML = `<custom-style>
  <style>
    html {
      --lumo-size-xs: 1.625rem;
      --lumo-size-s: 1.875rem;
      --lumo-size-m: 2.25rem;
      --lumo-size-l: 2.75rem;
      --lumo-size-xl: 3.5rem;

      /* Icons */
      --lumo-icon-size-s: 1.25em;
      --lumo-icon-size-m: 1.5em;
      --lumo-icon-size-l: 2.25em;
      /* For backwards compatibility */
      --lumo-icon-size: var(--lumo-icon-size-m);
    }
  </style>
</custom-style>`;

    document.head.appendChild($_documentContainer$2.content);

    const $_documentContainer$3 = document.createElement('template');

    $_documentContainer$3.innerHTML = `<custom-style>
  <style>
    html {
      /* Square */
      --lumo-space-xs: 0.25rem;
      --lumo-space-s: 0.5rem;
      --lumo-space-m: 1rem;
      --lumo-space-l: 1.5rem;
      --lumo-space-xl: 2.5rem;

      /* Wide */
      --lumo-space-wide-xs: calc(var(--lumo-space-xs) / 2) var(--lumo-space-xs);
      --lumo-space-wide-s: calc(var(--lumo-space-s) / 2) var(--lumo-space-s);
      --lumo-space-wide-m: calc(var(--lumo-space-m) / 2) var(--lumo-space-m);
      --lumo-space-wide-l: calc(var(--lumo-space-l) / 2) var(--lumo-space-l);
      --lumo-space-wide-xl: calc(var(--lumo-space-xl) / 2) var(--lumo-space-xl);

      /* Tall */
      --lumo-space-tall-xs: var(--lumo-space-xs) calc(var(--lumo-space-xs) / 2);
      --lumo-space-tall-s: var(--lumo-space-s) calc(var(--lumo-space-s) / 2);
      --lumo-space-tall-m: var(--lumo-space-m) calc(var(--lumo-space-m) / 2);
      --lumo-space-tall-l: var(--lumo-space-l) calc(var(--lumo-space-l) / 2);
      --lumo-space-tall-xl: var(--lumo-space-xl) calc(var(--lumo-space-xl) / 2);
    }
  </style>
</custom-style>`;

    document.head.appendChild($_documentContainer$3.content);

    const $_documentContainer$4 = document.createElement('template');

    $_documentContainer$4.innerHTML = `<custom-style>
  <style>
    html {
      /* Border radius */
      --lumo-border-radius-s: 0.25em; /* Checkbox, badge, date-picker year indicator, etc */
      --lumo-border-radius-m: 0.25em; /* Button, text field, menu overlay, etc */
      --lumo-border-radius-l: 0.5em; /* Dialog, notification, etc */
      --lumo-border-radius: var(--lumo-border-radius-m); /* Backwards compatibility */

      /* Shadow */
      --lumo-box-shadow-xs: 0 1px 4px -1px var(--lumo-shade-50pct);
      --lumo-box-shadow-s: 0 2px 4px -1px var(--lumo-shade-20pct), 0 3px 12px -1px var(--lumo-shade-30pct);
      --lumo-box-shadow-m: 0 2px 6px -1px var(--lumo-shade-20pct), 0 8px 24px -4px var(--lumo-shade-40pct);
      --lumo-box-shadow-l: 0 3px 18px -2px var(--lumo-shade-20pct), 0 12px 48px -6px var(--lumo-shade-40pct);
      --lumo-box-shadow-xl: 0 4px 24px -3px var(--lumo-shade-20pct), 0 18px 64px -8px var(--lumo-shade-40pct);

      /* Clickable element cursor */
      --lumo-clickable-cursor: default;
    }
  </style>
</custom-style>`;

    document.head.appendChild($_documentContainer$4.content);

    const $_documentContainer$5 = document.createElement('template');

    $_documentContainer$5.innerHTML = `<custom-style>
  <style>
    html {
      /* Font families */
      --lumo-font-family: -apple-system, BlinkMacSystemFont, "Roboto", "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";

      /* Font sizes */
      --lumo-font-size-xxs: .75rem;
      --lumo-font-size-xs: .8125rem;
      --lumo-font-size-s: .875rem;
      --lumo-font-size-m: 1rem;
      --lumo-font-size-l: 1.125rem;
      --lumo-font-size-xl: 1.375rem;
      --lumo-font-size-xxl: 1.75rem;
      --lumo-font-size-xxxl: 2.5rem;

      /* Line heights */
      --lumo-line-height-xs: 1.25;
      --lumo-line-height-s: 1.375;
      --lumo-line-height-m: 1.625;
    }

  </style>
</custom-style><dom-module id="lumo-typography">
  <template>
    <style>
      html {
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size, var(--lumo-font-size-m));
        line-height: var(--lumo-line-height-m);
        -webkit-text-size-adjust: 100%;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      /* Can’t combine with the above selector because that doesn’t work in browsers without native shadow dom */
      :host {
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size, var(--lumo-font-size-m));
        line-height: var(--lumo-line-height-m);
        -webkit-text-size-adjust: 100%;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      small,
      [theme~="font-size-s"] {
        font-size: var(--lumo-font-size-s);
        line-height: var(--lumo-line-height-s);
      }

      [theme~="font-size-xs"] {
        font-size: var(--lumo-font-size-xs);
        line-height: var(--lumo-line-height-xs);
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-weight: 600;
        line-height: var(--lumo-line-height-xs);
        margin-top: 1.25em;
      }

      h1 {
        font-size: var(--lumo-font-size-xxxl);
        margin-bottom: 0.75em;
      }

      h2 {
        font-size: var(--lumo-font-size-xxl);
        margin-bottom: 0.5em;
      }

      h3 {
        font-size: var(--lumo-font-size-xl);
        margin-bottom: 0.5em;
      }

      h4 {
        font-size: var(--lumo-font-size-l);
        margin-bottom: 0.5em;
      }

      h5 {
        font-size: var(--lumo-font-size-m);
        margin-bottom: 0.25em;
      }

      h6 {
        font-size: var(--lumo-font-size-xs);
        margin-bottom: 0;
        text-transform: uppercase;
        letter-spacing: 0.03em;
      }

      p,
      blockquote {
        margin-top: 0.5em;
        margin-bottom: 0.75em;
      }

      a {
        text-decoration: none;
      }

      a:hover {
        text-decoration: underline;
      }

      hr {
        display: block;
        align-self: stretch;
        height: 1px;
        border: 0;
        padding: 0;
        margin: var(--lumo-space-s) calc(var(--lumo-border-radius-m) / 2);
        background-color: var(--lumo-contrast-10pct);
      }

      blockquote {
        border-left: 2px solid var(--lumo-contrast-30pct);
      }

      b,
      strong {
        font-weight: 600;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$5.content);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Class representing a static string value which can be used to filter
     * strings by asseting that they have been created via this class. The
     * `value` property returns the string passed to the constructor.
     */
    class LiteralString {
      constructor(string) {
        /** @type {string} */
        this.value = string.toString();
      }
      /**
       * @return {string} LiteralString string value
       * @override
       */
      toString() {
        return this.value;
      }
    }

    /**
     * @param {*} value Object to stringify into HTML
     * @return {string} HTML stringified form of `obj`
     */
    function literalValue(value) {
      if (value instanceof LiteralString) {
        return /** @type {!LiteralString} */(value).value;
      } else {
        throw new Error(
            `non-literal value passed to Polymer's htmlLiteral function: ${value}`
        );
      }
    }

    /**
     * @param {*} value Object to stringify into HTML
     * @return {string} HTML stringified form of `obj`
     */
    function htmlValue(value) {
      if (value instanceof HTMLTemplateElement) {
        return /** @type {!HTMLTemplateElement } */(value).innerHTML;
      } else if (value instanceof LiteralString) {
        return literalValue(value);
      } else {
        throw new Error(
            `non-template value passed to Polymer's html function: ${value}`);
      }
    }

    /**
     * A template literal tag that creates an HTML <template> element from the
     * contents of the string.
     *
     * This allows you to write a Polymer Template in JavaScript.
     *
     * Templates can be composed by interpolating `HTMLTemplateElement`s in
     * expressions in the JavaScript template literal. The nested template's
     * `innerHTML` is included in the containing template.  The only other
     * values allowed in expressions are those returned from `htmlLiteral`
     * which ensures only literal values from JS source ever reach the HTML, to
     * guard against XSS risks.
     *
     * All other values are disallowed in expressions to help prevent XSS
     * attacks; however, `htmlLiteral` can be used to compose static
     * string values into templates. This is useful to compose strings into
     * places that do not accept html, like the css text of a `style`
     * element.
     *
     * Example:
     *
     *     static get template() {
     *       return html`
     *         <style>:host{ content:"..." }</style>
     *         <div class="shadowed">${this.partialTemplate}</div>
     *         ${super.template}
     *       `;
     *     }
     *     static get partialTemplate() { return html`<span>Partial!</span>`; }
     *
     * @param {!ITemplateArray} strings Constant parts of tagged template literal
     * @param {...*} values Variable parts of tagged template literal
     * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
     */
    const html$1 = function html(strings, ...values) {
      const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));
      template.innerHTML = values.reduce((acc, v, idx) =>
          acc + htmlValue(v) + strings[idx + 1], strings[0]);
      return template;
    };

    const $_documentContainer$6 = html$1`<dom-module id="lumo-checkbox" theme-for="vaadin-checkbox">
  <template>
    <style include="lumo-checkbox-style lumo-checkbox-effects">
      /* IE11 only */
      ::-ms-backdrop,
      [part="checkbox"] {
        line-height: 1;
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-style">
  <template>
    <style>
      :host {
        -webkit-tap-highlight-color: transparent;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: default;
        outline: none;
      }

      [part="label"]:not([empty]) {
        margin: 0.1875em 0.875em 0.1875em 0.375em;
      }

      [part="checkbox"] {
        width: calc(1em + 2px);
        height: calc(1em + 2px);
        margin: 0.1875em;
        position: relative;
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-20pct);
        transition: transform 0.2s cubic-bezier(.12, .32, .54, 2), background-color 0.15s;
        pointer-events: none;
        line-height: 1.2;
      }

      :host([indeterminate]) [part="checkbox"],
      :host([checked]) [part="checkbox"] {
        background-color: var(--lumo-primary-color);
      }

      /* Needed to align the checkbox nicely on the baseline */
      [part="checkbox"]::before {
        content: "\\2003";
      }

      /* Checkmark */
      [part="checkbox"]::after {
        content: "";
        display: inline-block;
        width: 0;
        height: 0;
        border: 0 solid var(--lumo-primary-contrast-color);
        border-width: 0.1875em 0 0 0.1875em;
        box-sizing: border-box;
        transform-origin: 0 0;
        position: absolute;
        top: 0.8125em;
        left: 0.5em;
        transform: scale(0.55) rotate(-135deg);
        opacity: 0;
      }

      :host([checked]) [part="checkbox"]::after {
        opacity: 1;
        width: 0.625em;
        height: 1.0625em;
      }

      /* Indeterminate checkmark */

      :host([indeterminate]) [part="checkbox"]::after {
        transform: none;
        opacity: 1;
        top: 45%;
        height: 10%;
        left: 22%;
        right: 22%;
        width: auto;
        border: 0;
        background-color: var(--lumo-primary-contrast-color);
        transition: opacity 0.25s;
      }

      /* Focus ring */

      :host([focus-ring]) [part="checkbox"] {
        box-shadow: 0 0 0 3px var(--lumo-primary-color-50pct);
      }

      /* Disabled */

      :host([disabled]) {
        pointer-events: none;
        color: var(--lumo-disabled-text-color);
      }

      :host([disabled]) [part="label"] ::slotted(*) {
        color: inherit;
      }

      :host([disabled]) [part="checkbox"] {
        background-color: var(--lumo-contrast-10pct);
      }

      :host([disabled]) [part="checkbox"]::after {
        border-color: var(--lumo-contrast-30pct);
      }

      :host([indeterminate][disabled]) [part="checkbox"]::after {
        background-color: var(--lumo-contrast-30pct);
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-checkbox-effects">
  <template>
    <style>
      /* Transition the checkmark if activated with the mouse (disabled for grid select-all this way) */
      :host(:hover) [part="checkbox"]::after {
        transition: width 0.1s, height 0.25s;
      }

      /* Used for activation "halo" */
      [part="checkbox"]::before {
        color: transparent;
        display: inline-block;
        width: 100%;
        height: 100%;
        border-radius: inherit;
        background-color: inherit;
        transform: scale(1.4);
        opacity: 0;
        transition: transform 0.1s, opacity 0.8s;
      }

      /* Hover */

      :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
        background-color: var(--lumo-contrast-30pct);
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part="checkbox"] {
          background-color: var(--lumo-contrast-20pct);
        }
      }

      /* Active */

      :host([active]) [part="checkbox"] {
        transform: scale(0.9);
        transition-duration: 0.05s;
      }

      :host([active][checked]) [part="checkbox"] {
        transform: scale(1.1);
      }

      :host([active]:not([checked])) [part="checkbox"]::before {
        transition-duration: 0.01s, 0.01s;
        transform: scale(0);
        opacity: 0.4;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$6.content);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // unique global id for deduping mixins.
    let dedupeId = 0;

    /* eslint-disable valid-jsdoc */
    /**
     * Wraps an ES6 class expression mixin such that the mixin is only applied
     * if it has not already been applied its base argument. Also memoizes mixin
     * applications.
     *
     * @template T
     * @param {T} mixin ES6 class expression mixin to wrap
     * @return {T}
     * @suppress {invalidCasts}
     */
    const dedupingMixin = function(mixin) {
      let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;
      if (!mixinApplications) {
        mixinApplications = new WeakMap();
        /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;
      }
      // maintain a unique id for each mixin
      let mixinDedupeId = dedupeId++;
      function dedupingMixin(base) {
        let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;
        if (baseSet && baseSet[mixinDedupeId]) {
          return base;
        }
        let map = mixinApplications;
        let extended = map.get(base);
        if (!extended) {
          extended = /** @type {!Function} */(mixin)(base);
          map.set(base, extended);
        }
        // copy inherited mixin set from the extended class, or the base class
        // NOTE: we avoid use of Set here because some browser (IE11)
        // cannot extend a base Set via the constructor.
        let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);
        mixinSet[mixinDedupeId] = true;
        /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;
        return extended;
      }

      return dedupingMixin;
    };
    /* eslint-enable valid-jsdoc */

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Module with utilities for manipulating structured data path strings.
     *
     * @summary Module with utilities for manipulating structured data path strings.
     */

    /**
     * Returns true if the given string is a structured data path (has dots).
     *
     * Example:
     *
     * ```
     * isPath('foo.bar.baz') // true
     * isPath('foo')         // false
     * ```
     *
     * @param {string} path Path string
     * @return {boolean} True if the string contained one or more dots
     */
    function isPath(path) {
      return path.indexOf('.') >= 0;
    }

    /**
     * Returns the root property name for the given path.
     *
     * Example:
     *
     * ```
     * root('foo.bar.baz') // 'foo'
     * root('foo')         // 'foo'
     * ```
     *
     * @param {string} path Path string
     * @return {string} Root property name
     */
    function root(path) {
      let dotIndex = path.indexOf('.');
      if (dotIndex === -1) {
        return path;
      }
      return path.slice(0, dotIndex);
    }

    /**
     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
     * Returns true if the given path is an ancestor of the base path.
     *
     * Example:
     *
     * ```
     * isAncestor('foo.bar', 'foo')         // true
     * isAncestor('foo.bar', 'foo.bar')     // false
     * isAncestor('foo.bar', 'foo.bar.baz') // false
     * ```
     *
     * @param {string} base Path string to test against.
     * @param {string} path Path string to test.
     * @return {boolean} True if `path` is an ancestor of `base`.
     */
    function isAncestor(base, path) {
      //     base.startsWith(path + '.');
      return base.indexOf(path + '.') === 0;
    }

    /**
     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
     *
     * Example:
     *
     * ```
     * isDescendant('foo.bar', 'foo.bar.baz') // true
     * isDescendant('foo.bar', 'foo.bar')     // false
     * isDescendant('foo.bar', 'foo')         // false
     * ```
     *
     * @param {string} base Path string to test against.
     * @param {string} path Path string to test.
     * @return {boolean} True if `path` is a descendant of `base`.
     */
    function isDescendant(base, path) {
      //     path.startsWith(base + '.');
      return path.indexOf(base + '.') === 0;
    }

    /**
     * Replaces a previous base path with a new base path, preserving the
     * remainder of the path.
     *
     * User must ensure `path` has a prefix of `base`.
     *
     * Example:
     *
     * ```
     * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
     * ```
     *
     * @param {string} base Current base string to remove
     * @param {string} newBase New base string to replace with
     * @param {string} path Path to translate
     * @return {string} Translated string
     */
    function translate(base, newBase, path) {
      return newBase + path.slice(base.length);
    }

    /**
     * @param {string} base Path string to test against
     * @param {string} path Path string to test
     * @return {boolean} True if `path` is equal to `base`
     */
    function matches(base, path) {
      return (base === path) ||
             isAncestor(base, path) ||
             isDescendant(base, path);
    }

    /**
     * Converts array-based paths to flattened path.  String-based paths
     * are returned as-is.
     *
     * Example:
     *
     * ```
     * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
     * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
     * ```
     *
     * @param {string | !Array<string|number>} path Input path
     * @return {string} Flattened path
     */
    function normalize(path) {
      if (Array.isArray(path)) {
        let parts = [];
        for (let i=0; i<path.length; i++) {
          let args = path[i].toString().split('.');
          for (let j=0; j<args.length; j++) {
            parts.push(args[j]);
          }
        }
        return parts.join('.');
      } else {
        return path;
      }
    }

    /**
     * Splits a path into an array of property names. Accepts either arrays
     * of path parts or strings.
     *
     * Example:
     *
     * ```
     * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
     * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
     * ```
     *
     * @param {string | !Array<string|number>} path Input path
     * @return {!Array<string>} Array of path parts
     * @suppress {checkTypes}
     */
    function split$1(path) {
      if (Array.isArray(path)) {
        return normalize(path).split('.');
      }
      return path.toString().split('.');
    }

    /**
     * Reads a value from a path.  If any sub-property in the path is `undefined`,
     * this method returns `undefined` (will never throw.
     *
     * @param {Object} root Object from which to dereference path from
     * @param {string | !Array<string|number>} path Path to read
     * @param {Object=} info If an object is provided to `info`, the normalized
     *  (flattened) path will be set to `info.path`.
     * @return {*} Value at path, or `undefined` if the path could not be
     *  fully dereferenced.
     */
    function get(root, path, info) {
      let prop = root;
      let parts = split$1(path);
      // Loop over path parts[0..n-1] and dereference
      for (let i=0; i<parts.length; i++) {
        if (!prop) {
          return;
        }
        let part = parts[i];
        prop = prop[part];
      }
      if (info) {
        info.path = parts.join('.');
      }
      return prop;
    }

    /**
     * Sets a value to a path.  If any sub-property in the path is `undefined`,
     * this method will no-op.
     *
     * @param {Object} root Object from which to dereference path from
     * @param {string | !Array<string|number>} path Path to set
     * @param {*} value Value to set to path
     * @return {string | undefined} The normalized version of the input path
     */
    function set$1(root, path, value) {
      let prop = root;
      let parts = split$1(path);
      let last = parts[parts.length-1];
      if (parts.length > 1) {
        // Loop over path parts[0..n-2] and dereference
        for (let i=0; i<parts.length-1; i++) {
          let part = parts[i];
          prop = prop[part];
          if (!prop) {
            return;
          }
        }
        // Set value to object at end of path
        prop[last] = value;
      } else {
        // Simple property set
        prop[path] = value;
      }
      return parts.join('.');
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const caseMap = {};
    const DASH_TO_CAMEL = /-[a-z]/g;
    const CAMEL_TO_DASH = /([A-Z])/g;

    /**
     * @fileoverview Module with utilities for converting between "dash-case" and
     * "camelCase" identifiers.
     */

    /**
     * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
     * (e.g. `fooBarBaz`).
     *
     * @param {string} dash Dash-case identifier
     * @return {string} Camel-case representation of the identifier
     */
    function dashToCamelCase(dash) {
      return caseMap[dash] || (
        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,
          (m) => m[1].toUpperCase()
        )
      );
    }

    /**
     * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
     * (e.g. `foo-bar-baz`).
     *
     * @param {string} camel Camel-case identifier
     * @return {string} Dash-case representation of the identifier
     */
    function camelToDashCase(camel) {
      return caseMap[camel] || (
        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()
      );
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // Microtask implemented using Mutation Observer
    let microtaskCurrHandle = 0;
    let microtaskLastHandle = 0;
    let microtaskCallbacks = [];
    let microtaskNodeContent = 0;
    let microtaskNode = document.createTextNode('');
    new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});

    function microtaskFlush() {
      const len = microtaskCallbacks.length;
      for (let i = 0; i < len; i++) {
        let cb = microtaskCallbacks[i];
        if (cb) {
          try {
            cb();
          } catch (e) {
            setTimeout(() => { throw e; });
          }
        }
      }
      microtaskCallbacks.splice(0, len);
      microtaskLastHandle += len;
    }

    /**
     * Async interface wrapper around `setTimeout`.
     *
     * @namespace
     * @summary Async interface wrapper around `setTimeout`.
     */
    const timeOut = {
      /**
       * Returns a sub-module with the async interface providing the provided
       * delay.
       *
       * @memberof timeOut
       * @param {number=} delay Time to wait before calling callbacks in ms
       * @return {!AsyncInterface} An async timeout interface
       */
      after(delay) {
        return {
          run(fn) { return window.setTimeout(fn, delay); },
          cancel(handle) {
            window.clearTimeout(handle);
          }
        };
      },
      /**
       * Enqueues a function called in the next task.
       *
       * @memberof timeOut
       * @param {!Function} fn Callback to run
       * @param {number=} delay Delay in milliseconds
       * @return {number} Handle used for canceling task
       */
      run(fn, delay) {
        return window.setTimeout(fn, delay);
      },
      /**
       * Cancels a previously enqueued `timeOut` callback.
       *
       * @memberof timeOut
       * @param {number} handle Handle returned from `run` of callback to cancel
       * @return {void}
       */
      cancel(handle) {
        window.clearTimeout(handle);
      }
    };

    /**
     * Async interface wrapper around `requestAnimationFrame`.
     *
     * @namespace
     * @summary Async interface wrapper around `requestAnimationFrame`.
     */
    const animationFrame$1 = {
      /**
       * Enqueues a function called at `requestAnimationFrame` timing.
       *
       * @memberof animationFrame
       * @param {function(number):void} fn Callback to run
       * @return {number} Handle used for canceling task
       */
      run(fn) {
        return window.requestAnimationFrame(fn);
      },
      /**
       * Cancels a previously enqueued `animationFrame` callback.
       *
       * @memberof animationFrame
       * @param {number} handle Handle returned from `run` of callback to cancel
       * @return {void}
       */
      cancel(handle) {
        window.cancelAnimationFrame(handle);
      }
    };

    /**
     * Async interface wrapper around `requestIdleCallback`.  Falls back to
     * `setTimeout` on browsers that do not support `requestIdleCallback`.
     *
     * @namespace
     * @summary Async interface wrapper around `requestIdleCallback`.
     */
    const idlePeriod = {
      /**
       * Enqueues a function called at `requestIdleCallback` timing.
       *
       * @memberof idlePeriod
       * @param {function(!IdleDeadline):void} fn Callback to run
       * @return {number} Handle used for canceling task
       */
      run(fn) {
        return window.requestIdleCallback ?
          window.requestIdleCallback(fn) :
          window.setTimeout(fn, 16);
      },
      /**
       * Cancels a previously enqueued `idlePeriod` callback.
       *
       * @memberof idlePeriod
       * @param {number} handle Handle returned from `run` of callback to cancel
       * @return {void}
       */
      cancel(handle) {
        window.cancelIdleCallback ?
          window.cancelIdleCallback(handle) :
          window.clearTimeout(handle);
      }
    };

    /**
     * Async interface for enqueuing callbacks that run at microtask timing.
     *
     * Note that microtask timing is achieved via a single `MutationObserver`,
     * and thus callbacks enqueued with this API will all run in a single
     * batch, and not interleaved with other microtasks such as promises.
     * Promises are avoided as an implementation choice for the time being
     * due to Safari bugs that cause Promises to lack microtask guarantees.
     *
     * @namespace
     * @summary Async interface for enqueuing callbacks that run at microtask
     *   timing.
     */
    const microTask = {

      /**
       * Enqueues a function called at microtask timing.
       *
       * @memberof microTask
       * @param {!Function=} callback Callback to run
       * @return {number} Handle used for canceling task
       */
      run(callback) {
        microtaskNode.textContent = microtaskNodeContent++;
        microtaskCallbacks.push(callback);
        return microtaskCurrHandle++;
      },

      /**
       * Cancels a previously enqueued `microTask` callback.
       *
       * @memberof microTask
       * @param {number} handle Handle returned from `run` of callback to cancel
       * @return {void}
       */
      cancel(handle) {
        const idx = handle - microtaskLastHandle;
        if (idx >= 0) {
          if (!microtaskCallbacks[idx]) {
            throw new Error('invalid async handle: ' + handle);
          }
          microtaskCallbacks[idx] = null;
        }
      }

    };

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /** @const {!AsyncInterface} */
    const microtask = microTask;

    /**
     * Element class mixin that provides basic meta-programming for creating one
     * or more property accessors (getter/setter pair) that enqueue an async
     * (batched) `_propertiesChanged` callback.
     *
     * For basic usage of this mixin, call `MyClass.createProperties(props)`
     * once at class definition time to create property accessors for properties
     * named in props, implement `_propertiesChanged` to react as desired to
     * property changes, and implement `static get observedAttributes()` and
     * include lowercase versions of any property names that should be set from
     * attributes. Last, call `this._enableProperties()` in the element's
     * `connectedCallback` to enable the accessors.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin for reacting to property changes from
     *   generated property accessors.
     */
    const PropertiesChanged = dedupingMixin(
        /**
         * @template T
         * @param {function(new:T)} superClass Class to apply mixin to.
         * @return {function(new:T)} superClass with mixin applied.
         */
        (superClass) => {

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_PropertiesChanged}
       * @unrestricted
       */
      class PropertiesChanged extends superClass {

        /**
         * Creates property accessors for the given property names.
         * @param {!Object} props Object whose keys are names of accessors.
         * @return {void}
         * @protected
         */
        static createProperties(props) {
          const proto = this.prototype;
          for (let prop in props) {
            // don't stomp an existing accessor
            if (!(prop in proto)) {
              proto._createPropertyAccessor(prop);
            }
          }
        }

        /**
         * Returns an attribute name that corresponds to the given property.
         * The attribute name is the lowercased property name. Override to
         * customize this mapping.
         * @param {string} property Property to convert
         * @return {string} Attribute name corresponding to the given property.
         *
         * @protected
         */
        static attributeNameForProperty(property) {
          return property.toLowerCase();
        }

        /**
         * Override point to provide a type to which to deserialize a value to
         * a given property.
         * @param {string} name Name of property
         *
         * @protected
         */
        static typeForProperty(name) { } //eslint-disable-line no-unused-vars

        /**
         * Creates a setter/getter pair for the named property with its own
         * local storage.  The getter returns the value in the local storage,
         * and the setter calls `_setProperty`, which updates the local storage
         * for the property and enqueues a `_propertiesChanged` callback.
         *
         * This method may be called on a prototype or an instance.  Calling
         * this method may overwrite a property value that already exists on
         * the prototype/instance by creating the accessor.
         *
         * @param {string} property Name of the property
         * @param {boolean=} readOnly When true, no setter is created; the
         *   protected `_setProperty` function must be used to set the property
         * @return {void}
         * @protected
         * @override
         */
        _createPropertyAccessor(property, readOnly) {
          this._addPropertyToAttributeMap(property);
          if (!this.hasOwnProperty('__dataHasAccessor')) {
            this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);
          }
          if (!this.__dataHasAccessor[property]) {
            this.__dataHasAccessor[property] = true;
            this._definePropertyAccessor(property, readOnly);
          }
        }

        /**
         * Adds the given `property` to a map matching attribute names
         * to property names, using `attributeNameForProperty`. This map is
         * used when deserializing attribute values to properties.
         *
         * @param {string} property Name of the property
         * @override
         */
        _addPropertyToAttributeMap(property) {
          if (!this.hasOwnProperty('__dataAttributes')) {
            this.__dataAttributes = Object.assign({}, this.__dataAttributes);
          }
          if (!this.__dataAttributes[property]) {
            const attr = this.constructor.attributeNameForProperty(property);
            this.__dataAttributes[attr] = property;
          }
        }

        /**
         * Defines a property accessor for the given property.
         * @param {string} property Name of the property
         * @param {boolean=} readOnly When true, no setter is created
         * @return {void}
         * @override
         */
         _definePropertyAccessor(property, readOnly) {
          Object.defineProperty(this, property, {
            /* eslint-disable valid-jsdoc */
            /** @this {PropertiesChanged} */
            get() {
              return this._getProperty(property);
            },
            /** @this {PropertiesChanged} */
            set: readOnly ? function () {} : function (value) {
              this._setProperty(property, value);
            }
            /* eslint-enable */
          });
        }

        constructor() {
          super();
          this.__dataEnabled = false;
          this.__dataReady = false;
          this.__dataInvalid = false;
          this.__data = {};
          this.__dataPending = null;
          this.__dataOld = null;
          this.__dataInstanceProps = null;
          this.__serializing = false;
          this._initializeProperties();
        }

        /**
         * Lifecycle callback called when properties are enabled via
         * `_enableProperties`.
         *
         * Users may override this function to implement behavior that is
         * dependent on the element having its property data initialized, e.g.
         * from defaults (initialized from `constructor`, `_initializeProperties`),
         * `attributeChangedCallback`, or values propagated from host e.g. via
         * bindings.  `super.ready()` must be called to ensure the data system
         * becomes enabled.
         *
         * @return {void}
         * @public
         * @override
         */
        ready() {
          this.__dataReady = true;
          this._flushProperties();
        }

        /**
         * Initializes the local storage for property accessors.
         *
         * Provided as an override point for performing any setup work prior
         * to initializing the property accessor system.
         *
         * @return {void}
         * @protected
         * @override
         */
        _initializeProperties() {
          // Capture instance properties; these will be set into accessors
          // during first flush. Don't set them here, since we want
          // these to overwrite defaults/constructor assignments
          for (let p in this.__dataHasAccessor) {
            if (this.hasOwnProperty(p)) {
              this.__dataInstanceProps = this.__dataInstanceProps || {};
              this.__dataInstanceProps[p] = this[p];
              delete this[p];
            }
          }
        }

        /**
         * Called at ready time with bag of instance properties that overwrote
         * accessors when the element upgraded.
         *
         * The default implementation sets these properties back into the
         * setter at ready time.  This method is provided as an override
         * point for customizing or providing more efficient initialization.
         *
         * @param {Object} props Bag of property values that were overwritten
         *   when creating property accessors.
         * @return {void}
         * @protected
         * @override
         */
        _initializeInstanceProperties(props) {
          Object.assign(this, props);
        }

        /**
         * Updates the local storage for a property (via `_setPendingProperty`)
         * and enqueues a `_proeprtiesChanged` callback.
         *
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @return {void}
         * @protected
         * @override
         */
        _setProperty(property, value) {
          if (this._setPendingProperty(property, value)) {
            this._invalidateProperties();
          }
        }

        /**
         * Returns the value for the given property.
         * @param {string} property Name of property
         * @return {*} Value for the given property
         * @protected
         * @override
         */
        _getProperty(property) {
          return this.__data[property];
        }

        /* eslint-disable no-unused-vars */
        /**
         * Updates the local storage for a property, records the previous value,
         * and adds it to the set of "pending changes" that will be passed to the
         * `_propertiesChanged` callback.  This method does not enqueue the
         * `_propertiesChanged` callback.
         *
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @param {boolean=} ext Not used here; affordance for closure
         * @return {boolean} Returns true if the property changed
         * @protected
         * @override
         */
        _setPendingProperty(property, value, ext) {
          let old = this.__data[property];
          let changed = this._shouldPropertyChange(property, value, old);
          if (changed) {
            if (!this.__dataPending) {
              this.__dataPending = {};
              this.__dataOld = {};
            }
            // Ensure old is captured from the last turn
            if (this.__dataOld && !(property in this.__dataOld)) {
              this.__dataOld[property] = old;
            }
            this.__data[property] = value;
            this.__dataPending[property] = value;
          }
          return changed;
        }
        /* eslint-enable */

        /**
         * Marks the properties as invalid, and enqueues an async
         * `_propertiesChanged` callback.
         *
         * @return {void}
         * @protected
         * @override
         */
        _invalidateProperties() {
          if (!this.__dataInvalid && this.__dataReady) {
            this.__dataInvalid = true;
            microtask.run(() => {
              if (this.__dataInvalid) {
                this.__dataInvalid = false;
                this._flushProperties();
              }
            });
          }
        }

        /**
         * Call to enable property accessor processing. Before this method is
         * called accessor values will be set but side effects are
         * queued. When called, any pending side effects occur immediately.
         * For elements, generally `connectedCallback` is a normal spot to do so.
         * It is safe to call this method multiple times as it only turns on
         * property accessors once.
         *
         * @return {void}
         * @protected
         * @override
         */
        _enableProperties() {
          if (!this.__dataEnabled) {
            this.__dataEnabled = true;
            if (this.__dataInstanceProps) {
              this._initializeInstanceProperties(this.__dataInstanceProps);
              this.__dataInstanceProps = null;
            }
            this.ready();
          }
        }

        /**
         * Calls the `_propertiesChanged` callback with the current set of
         * pending changes (and old values recorded when pending changes were
         * set), and resets the pending set of changes. Generally, this method
         * should not be called in user code.
         *
         * @return {void}
         * @protected
         * @override
         */
        _flushProperties() {
          const props = this.__data;
          const changedProps = this.__dataPending;
          const old = this.__dataOld;
          if (this._shouldPropertiesChange(props, changedProps, old)) {
            this.__dataPending = null;
            this.__dataOld = null;
            this._propertiesChanged(props, changedProps, old);
          }
        }

        /**
         * Called in `_flushProperties` to determine if `_propertiesChanged`
         * should be called. The default implementation returns true if
         * properties are pending. Override to customize when
         * `_propertiesChanged` is called.
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {boolean} true if changedProps is truthy
         * @override
         */
        _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
          return Boolean(changedProps);
        }

        /**
         * Callback called when any properties with accessors created via
         * `_createPropertyAccessor` have been set.
         *
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {void}
         * @protected
         * @override
         */
        _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
        }

        /**
         * Method called to determine whether a property value should be
         * considered as a change and cause the `_propertiesChanged` callback
         * to be enqueued.
         *
         * The default implementation returns `true` if a strict equality
         * check fails. The method always returns false for `NaN`.
         *
         * Override this method to e.g. provide stricter checking for
         * Objects/Arrays when using immutable patterns.
         *
         * @param {string} property Property name
         * @param {*} value New property value
         * @param {*} old Previous property value
         * @return {boolean} Whether the property should be considered a change
         *   and enqueue a `_proeprtiesChanged` callback
         * @protected
         * @override
         */
        _shouldPropertyChange(property, value, old) {
          return (
            // Strict equality check
            (old !== value &&
              // This ensures (old==NaN, value==NaN) always returns false
              (old === old || value === value))
          );
        }

        /**
         * Implements native Custom Elements `attributeChangedCallback` to
         * set an attribute value to a property via `_attributeToProperty`.
         *
         * @param {string} name Name of attribute that changed
         * @param {?string} old Old attribute value
         * @param {?string} value New attribute value
         * @param {?string} namespace Attribute namespace.
         * @return {void}
         * @suppress {missingProperties} Super may or may not implement the callback
         * @override
         */
        attributeChangedCallback(name, old, value, namespace) {
          if (old !== value) {
            this._attributeToProperty(name, value);
          }
          if (super.attributeChangedCallback) {
            super.attributeChangedCallback(name, old, value, namespace);
          }
        }

        /**
         * Deserializes an attribute to its associated property.
         *
         * This method calls the `_deserializeValue` method to convert the string to
         * a typed value.
         *
         * @param {string} attribute Name of attribute to deserialize.
         * @param {?string} value of the attribute.
         * @param {*=} type type to deserialize to, defaults to the value
         * returned from `typeForProperty`
         * @return {void}
         * @override
         */
        _attributeToProperty(attribute, value, type) {
          if (!this.__serializing) {
            const map = this.__dataAttributes;
            const property = map && map[attribute] || attribute;
            this[property] = this._deserializeValue(value, type ||
              this.constructor.typeForProperty(property));
          }
        }

        /**
         * Serializes a property to its associated attribute.
         *
         * @suppress {invalidCasts} Closure can't figure out `this` is an element.
         *
         * @param {string} property Property name to reflect.
         * @param {string=} attribute Attribute name to reflect to.
         * @param {*=} value Property value to refect.
         * @return {void}
         * @override
         */
        _propertyToAttribute(property, attribute, value) {
          this.__serializing = true;
          value = (arguments.length < 3) ? this[property] : value;
          this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,
            attribute || this.constructor.attributeNameForProperty(property));
          this.__serializing = false;
        }

        /**
         * Sets a typed value to an HTML attribute on a node.
         *
         * This method calls the `_serializeValue` method to convert the typed
         * value to a string.  If the `_serializeValue` method returns `undefined`,
         * the attribute will be removed (this is the default for boolean
         * type `false`).
         *
         * @param {Element} node Element to set attribute to.
         * @param {*} value Value to serialize.
         * @param {string} attribute Attribute name to serialize to.
         * @return {void}
         * @override
         */
        _valueToNodeAttribute(node, value, attribute) {
          const str = this._serializeValue(value);
          if (str === undefined) {
            node.removeAttribute(attribute);
          } else {
            node.setAttribute(attribute, str);
          }
        }

        /**
         * Converts a typed JavaScript value to a string.
         *
         * This method is called when setting JS property values to
         * HTML attributes.  Users may override this method to provide
         * serialization for custom types.
         *
         * @param {*} value Property value to serialize.
         * @return {string | undefined} String serialized from the provided
         * property  value.
         * @override
         */
        _serializeValue(value) {
          switch (typeof value) {
            case 'boolean':
              return value ? '' : undefined;
            default:
              return value != null ? value.toString() : undefined;
          }
        }

        /**
         * Converts a string to a typed JavaScript value.
         *
         * This method is called when reading HTML attribute values to
         * JS properties.  Users may override this method to provide
         * deserialization for custom `type`s. Types for `Boolean`, `String`,
         * and `Number` convert attributes to the expected types.
         *
         * @param {?string} value Value to deserialize.
         * @param {*=} type Type to deserialize the string to.
         * @return {*} Typed value deserialized from the provided string.
         * @override
         */
        _deserializeValue(value, type) {
          switch (type) {
            case Boolean:
              return (value !== null);
            case Number:
              return Number(value);
            default:
              return value;
          }
        }

      }

      return PropertiesChanged;
    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // Save map of native properties; this forms a blacklist or properties
    // that won't have their values "saved" by `saveAccessorValue`, since
    // reading from an HTMLElement accessor from the context of a prototype throws
    const nativeProperties = {};
    let proto = HTMLElement.prototype;
    while (proto) {
      let props = Object.getOwnPropertyNames(proto);
      for (let i=0; i<props.length; i++) {
        nativeProperties[props[i]] = true;
      }
      proto = Object.getPrototypeOf(proto);
    }

    /**
     * Used to save the value of a property that will be overridden with
     * an accessor. If the `model` is a prototype, the values will be saved
     * in `__dataProto`, and it's up to the user (or downstream mixin) to
     * decide how/when to set these values back into the accessors.
     * If `model` is already an instance (it has a `__data` property), then
     * the value will be set as a pending property, meaning the user should
     * call `_invalidateProperties` or `_flushProperties` to take effect
     *
     * @param {Object} model Prototype or instance
     * @param {string} property Name of property
     * @return {void}
     * @private
     */
    function saveAccessorValue(model, property) {
      // Don't read/store value for any native properties since they could throw
      if (!nativeProperties[property]) {
        let value = model[property];
        if (value !== undefined) {
          if (model.__data) {
            // Adding accessor to instance; update the property
            // It is the user's responsibility to call _flushProperties
            model._setPendingProperty(property, value);
          } else {
            // Adding accessor to proto; save proto's value for instance-time use
            if (!model.__dataProto) {
              model.__dataProto = {};
            } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {
              model.__dataProto = Object.create(model.__dataProto);
            }
            model.__dataProto[property] = value;
          }
        }
      }
    }

    /**
     * Element class mixin that provides basic meta-programming for creating one
     * or more property accessors (getter/setter pair) that enqueue an async
     * (batched) `_propertiesChanged` callback.
     *
     * For basic usage of this mixin:
     *
     * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use
     *     `dash-case` attribute names to represent `camelCase` property names.
     * -   Implement the `_propertiesChanged` callback on the class.
     * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate
     *     property accessors for each observed attribute. This must be called before the first
     *     instance is created, for example, by calling it before calling `customElements.define`.
     *     It can also be called lazily from the element's `constructor`, as long as it's guarded so
     *     that the call is only made once, when the first instance is created.
     * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable
     *     the accessors.
     *
     * Any `observedAttributes` will automatically be
     * deserialized via `attributeChangedCallback` and set to the associated
     * property using `dash-case`-to-`camelCase` convention.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertiesChanged
     * @summary Element class mixin for reacting to property changes from
     *   generated property accessors.
     */
    const PropertyAccessors = dedupingMixin(superClass => {

      /**
       * @constructor
       * @extends {superClass}
       * @implements {Polymer_PropertiesChanged}
       * @unrestricted
       * @private
       */
       const base = PropertiesChanged(superClass);

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_PropertyAccessors}
       * @extends {base}
       * @unrestricted
       */
      class PropertyAccessors extends base {

        /**
         * Generates property accessors for all attributes in the standard
         * static `observedAttributes` array.
         *
         * Attribute names are mapped to property names using the `dash-case` to
         * `camelCase` convention
         *
         * @return {void}
         */
        static createPropertiesForAttributes() {
          let a$ = this.observedAttributes;
          for (let i=0; i < a$.length; i++) {
            this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));
          }
        }

        /**
         * Returns an attribute name that corresponds to the given property.
         * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
         * @param {string} property Property to convert
         * @return {string} Attribute name corresponding to the given property.
         *
         * @protected
         */
        static attributeNameForProperty(property) {
          return camelToDashCase(property);
        }

        /**
         * Overrides PropertiesChanged implementation to initialize values for
         * accessors created for values that already existed on the element
         * prototype.
         *
         * @return {void}
         * @protected
         */
        _initializeProperties() {
          if (this.__dataProto) {
            this._initializeProtoProperties(this.__dataProto);
            this.__dataProto = null;
          }
          super._initializeProperties();
        }

        /**
         * Called at instance time with bag of properties that were overwritten
         * by accessors on the prototype when accessors were created.
         *
         * The default implementation sets these properties back into the
         * setter at instance time.  This method is provided as an override
         * point for customizing or providing more efficient initialization.
         *
         * @param {Object} props Bag of property values that were overwritten
         *   when creating property accessors.
         * @return {void}
         * @protected
         */
        _initializeProtoProperties(props) {
          for (let p in props) {
            this._setProperty(p, props[p]);
          }
        }

        /**
         * Ensures the element has the given attribute. If it does not,
         * assigns the given value to the attribute.
         *
         * @suppress {invalidCasts} Closure can't figure out `this` is infact an element
         *
         * @param {string} attribute Name of attribute to ensure is set.
         * @param {string} value of the attribute.
         * @return {void}
         */
        _ensureAttribute(attribute, value) {
          const el = /** @type {!HTMLElement} */(this);
          if (!el.hasAttribute(attribute)) {
            this._valueToNodeAttribute(el, value, attribute);
          }
        }

        /**
         * Overrides PropertiesChanged implemention to serialize objects as JSON.
         *
         * @param {*} value Property value to serialize.
         * @return {string | undefined} String serialized from the provided property value.
         */
        _serializeValue(value) {
          /* eslint-disable no-fallthrough */
          switch (typeof value) {
            case 'object':
              if (value instanceof Date) {
                return value.toString();
              } else if (value) {
                try {
                  return JSON.stringify(value);
                } catch(x) {
                  return '';
                }
              }

            default:
              return super._serializeValue(value);
          }
        }

        /**
         * Converts a string to a typed JavaScript value.
         *
         * This method is called by Polymer when reading HTML attribute values to
         * JS properties.  Users may override this method on Polymer element
         * prototypes to provide deserialization for custom `type`s.  Note,
         * the `type` argument is the value of the `type` field provided in the
         * `properties` configuration object for a given property, and is
         * by convention the constructor for the type to deserialize.
         *
         *
         * @param {?string} value Attribute value to deserialize.
         * @param {*=} type Type to deserialize the string to.
         * @return {*} Typed value deserialized from the provided string.
         */
        _deserializeValue(value, type) {
          /**
           * @type {*}
           */
          let outValue;
          switch (type) {
            case Object:
              try {
                outValue = JSON.parse(/** @type {string} */(value));
              } catch(x) {
                // allow non-JSON literals like Strings and Numbers
                outValue = value;
              }
              break;
            case Array:
              try {
                outValue = JSON.parse(/** @type {string} */(value));
              } catch(x) {
                outValue = null;
                console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);
              }
              break;
            case Date:
              outValue = isNaN(value) ? String(value) : Number(value);
              outValue = new Date(outValue);
              break;
            default:
              outValue = super._deserializeValue(value, type);
              break;
          }
          return outValue;
        }
        /* eslint-enable no-fallthrough */

        /**
         * Overrides PropertiesChanged implementation to save existing prototype
         * property value so that it can be reset.
         * @param {string} property Name of the property
         * @param {boolean=} readOnly When true, no setter is created
         *
         * When calling on a prototype, any overwritten values are saved in
         * `__dataProto`, and it is up to the subclasser to decide how/when
         * to set those properties back into the accessor.  When calling on an
         * instance, the overwritten value is set via `_setPendingProperty`,
         * and the user should call `_invalidateProperties` or `_flushProperties`
         * for the values to take effect.
         * @protected
         * @return {void}
         */
        _definePropertyAccessor(property, readOnly) {
          saveAccessorValue(this, property);
          super._definePropertyAccessor(property, readOnly);
        }

        /**
         * Returns true if this library created an accessor for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if an accessor was created
         */
        _hasAccessor(property) {
          return this.__dataHasAccessor && this.__dataHasAccessor[property];
        }

        /**
         * Returns true if the specified property has a pending change.
         *
         * @param {string} prop Property name
         * @return {boolean} True if property has a pending change
         * @protected
         */
        _isPropertyPending(prop) {
          return Boolean(this.__dataPending && (prop in this.__dataPending));
        }

      }

      return PropertyAccessors;

    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // 1.x backwards-compatible auto-wrapper for template type extensions
    // This is a clear layering violation and gives favored-nation status to
    // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
    // a.) to ease 1.x backwards-compatibility due to loss of `is`, and
    // b.) to maintain if/repeat capability in parser-constrained elements
    //     (e.g. table, select) in lieu of native CE type extensions without
    //     massive new invention in this space (e.g. directive system)
    const templateExtensions = {
      'dom-if': true,
      'dom-repeat': true
    };
    function wrapTemplateExtension(node) {
      let is = node.getAttribute('is');
      if (is && templateExtensions[is]) {
        let t = node;
        t.removeAttribute('is');
        node = t.ownerDocument.createElement(is);
        t.parentNode.replaceChild(node, t);
        node.appendChild(t);
        while(t.attributes.length) {
          node.setAttribute(t.attributes[0].name, t.attributes[0].value);
          t.removeAttribute(t.attributes[0].name);
        }
      }
      return node;
    }

    function findTemplateNode(root, nodeInfo) {
      // recursively ascend tree until we hit root
      let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);
      // unwind the stack, returning the indexed node at each level
      if (parent) {
        // note: marginally faster than indexing via childNodes
        // (http://jsperf.com/childnodes-lookup)
        for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {
          if (nodeInfo.parentIndex === i++) {
            return n;
          }
        }
      } else {
        return root;
      }
    }

    // construct `$` map (from id annotations)
    function applyIdToMap(inst, map, node, nodeInfo) {
      if (nodeInfo.id) {
        map[nodeInfo.id] = node;
      }
    }

    // install event listeners (from event annotations)
    function applyEventListener(inst, node, nodeInfo) {
      if (nodeInfo.events && nodeInfo.events.length) {
        for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {
          inst._addMethodEventListenerToNode(node, e.name, e.value, inst);
        }
      }
    }

    // push configuration references at configure time
    function applyTemplateContent(inst, node, nodeInfo) {
      if (nodeInfo.templateInfo) {
        node._templateInfo = nodeInfo.templateInfo;
      }
    }

    function createNodeEventHandler(context, eventName, methodName) {
      // Instances can optionally have a _methodHost which allows redirecting where
      // to find methods. Currently used by `templatize`.
      context = context._methodHost || context;
      let handler = function(e) {
        if (context[methodName]) {
          context[methodName](e, e.detail);
        } else {
          console.warn('listener method `' + methodName + '` not defined');
        }
      };
      return handler;
    }

    /**
     * Element mixin that provides basic template parsing and stamping, including
     * the following template-related features for stamped templates:
     *
     * - Declarative event listeners (`on-eventname="listener"`)
     * - Map of node id's to stamped node instances (`this.$.id`)
     * - Nested template content caching/removal and re-installation (performance
     *   optimization)
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin that provides basic template parsing and stamping
     */
    const TemplateStamp = dedupingMixin(
        /**
         * @template T
         * @param {function(new:T)} superClass Class to apply mixin to.
         * @return {function(new:T)} superClass with mixin applied.
         */
        (superClass) => {

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_TemplateStamp}
       */
      class TemplateStamp extends superClass {

        /**
         * Scans a template to produce template metadata.
         *
         * Template-specific metadata are stored in the object returned, and node-
         * specific metadata are stored in objects in its flattened `nodeInfoList`
         * array.  Only nodes in the template that were parsed as nodes of
         * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
         * contains an `index` (`childNodes` index in parent) and optionally
         * `parent`, which points to node info of its parent (including its index).
         *
         * The template metadata object returned from this method has the following
         * structure (many fields optional):
         *
         * ```js
         *   {
         *     // Flattened list of node metadata (for nodes that generated metadata)
         *     nodeInfoList: [
         *       {
         *         // `id` attribute for any nodes with id's for generating `$` map
         *         id: {string},
         *         // `on-event="handler"` metadata
         *         events: [
         *           {
         *             name: {string},   // event name
         *             value: {string},  // handler method name
         *           }, ...
         *         ],
         *         // Notes when the template contained a `<slot>` for shady DOM
         *         // optimization purposes
         *         hasInsertionPoint: {boolean},
         *         // For nested `<template>`` nodes, nested template metadata
         *         templateInfo: {object}, // nested template metadata
         *         // Metadata to allow efficient retrieval of instanced node
         *         // corresponding to this metadata
         *         parentInfo: {number},   // reference to parent nodeInfo>
         *         parentIndex: {number},  // index in parent's `childNodes` collection
         *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
         *       },
         *       ...
         *     ],
         *     // When true, the template had the `strip-whitespace` attribute
         *     // or was nested in a template with that setting
         *     stripWhitespace: {boolean},
         *     // For nested templates, nested template content is moved into
         *     // a document fragment stored here; this is an optimization to
         *     // avoid the cost of nested template cloning
         *     content: {DocumentFragment}
         *   }
         * ```
         *
         * This method kicks off a recursive treewalk as follows:
         *
         * ```
         *    _parseTemplate <---------------------+
         *      _parseTemplateContent              |
         *        _parseTemplateNode  <------------|--+
         *          _parseTemplateNestedTemplate --+  |
         *          _parseTemplateChildNodes ---------+
         *          _parseTemplateNodeAttributes
         *            _parseTemplateNodeAttribute
         *
         * ```
         *
         * These methods may be overridden to add custom metadata about templates
         * to either `templateInfo` or `nodeInfo`.
         *
         * Note that this method may be destructive to the template, in that
         * e.g. event annotations may be removed after being noted in the
         * template metadata.
         *
         * @param {!HTMLTemplateElement} template Template to parse
         * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
         *   template, for parsing nested templates
         * @return {!TemplateInfo} Parsed template metadata
         */
        static _parseTemplate(template, outerTemplateInfo) {
          // since a template may be re-used, memo-ize metadata
          if (!template._templateInfo) {
            let templateInfo = template._templateInfo = {};
            templateInfo.nodeInfoList = [];
            templateInfo.stripWhiteSpace =
              (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||
              template.hasAttribute('strip-whitespace');
            this._parseTemplateContent(template, templateInfo, {parent: null});
          }
          return template._templateInfo;
        }

        static _parseTemplateContent(template, templateInfo, nodeInfo) {
          return this._parseTemplateNode(template.content, templateInfo, nodeInfo);
        }

        /**
         * Parses template node and adds template and node metadata based on
         * the current node, and its `childNodes` and `attributes`.
         *
         * This method may be overridden to add custom node or template specific
         * metadata based on this node.
         *
         * @param {Node} node Node to parse
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         */
        static _parseTemplateNode(node, templateInfo, nodeInfo) {
          let noted;
          let element = /** @type {Element} */(node);
          if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {
            noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;
          } else if (element.localName === 'slot') {
            // For ShadyDom optimization, indicating there is an insertion point
            templateInfo.hasInsertionPoint = true;
          }
          if (element.firstChild) {
            noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;
          }
          if (element.hasAttributes && element.hasAttributes()) {
            noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;
          }
          return noted;
        }

        /**
         * Parses template child nodes for the given root node.
         *
         * This method also wraps whitelisted legacy template extensions
         * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
         * wrappers, collapses text nodes, and strips whitespace from the template
         * if the `templateInfo.stripWhitespace` setting was provided.
         *
         * @param {Node} root Root node whose `childNodes` will be parsed
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {void}
         */
        static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {
          if (root.localName === 'script' || root.localName === 'style') {
            return;
          }
          for (let node=root.firstChild, parentIndex=0, next; node; node=next) {
            // Wrap templates
            if (node.localName == 'template') {
              node = wrapTemplateExtension(node);
            }
            // collapse adjacent textNodes: fixes an IE issue that can cause
            // text nodes to be inexplicably split =(
            // note that root.normalize() should work but does not so we do this
            // manually.
            next = node.nextSibling;
            if (node.nodeType === Node.TEXT_NODE) {
              let /** Node */ n = next;
              while (n && (n.nodeType === Node.TEXT_NODE)) {
                node.textContent += n.textContent;
                next = n.nextSibling;
                root.removeChild(n);
                n = next;
              }
              // optionally strip whitespace
              if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {
                root.removeChild(node);
                continue;
              }
            }
            let childInfo = { parentIndex, parentInfo: nodeInfo };
            if (this._parseTemplateNode(node, templateInfo, childInfo)) {
              childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;
            }
            // Increment if not removed
            if (node.parentNode) {
              parentIndex++;
            }
          }
        }

        /**
         * Parses template content for the given nested `<template>`.
         *
         * Nested template info is stored as `templateInfo` in the current node's
         * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
         * It will then be the responsibility of the host to set it back to the
         * template and for users stamping nested templates to use the
         * `_contentForTemplate` method to retrieve the content for this template
         * (an optimization to avoid the cost of cloning nested template content).
         *
         * @param {HTMLTemplateElement} node Node to parse (a <template>)
         * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
         *   that includes the template `node`
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         */
        static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {
          let templateInfo = this._parseTemplate(node, outerTemplateInfo);
          let content = templateInfo.content =
            node.content.ownerDocument.createDocumentFragment();
          content.appendChild(node.content);
          nodeInfo.templateInfo = templateInfo;
          return true;
        }

        /**
         * Parses template node attributes and adds node metadata to `nodeInfo`
         * for nodes of interest.
         *
         * @param {Element} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template.
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         */
        static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {
          // Make copy of original attribute list, since the order may change
          // as attributes are added and removed
          let noted = false;
          let attrs = Array.from(node.attributes);
          for (let i=attrs.length-1, a; (a=attrs[i]); i--) {
            noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;
          }
          return noted;
        }

        /**
         * Parses a single template node attribute and adds node metadata to
         * `nodeInfo` for attributes of interest.
         *
         * This implementation adds metadata for `on-event="handler"` attributes
         * and `id` attributes.
         *
         * @param {Element} node Node to parse
         * @param {!TemplateInfo} templateInfo Template metadata for current template
         * @param {!NodeInfo} nodeInfo Node metadata for current template.
         * @param {string} name Attribute name
         * @param {string} value Attribute value
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         */
        static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
          // events (on-*)
          if (name.slice(0, 3) === 'on-') {
            node.removeAttribute(name);
            nodeInfo.events = nodeInfo.events || [];
            nodeInfo.events.push({
              name: name.slice(3),
              value
            });
            return true;
          }
          // static id
          else if (name === 'id') {
            nodeInfo.id = value;
            return true;
          }
          return false;
        }

        /**
         * Returns the `content` document fragment for a given template.
         *
         * For nested templates, Polymer performs an optimization to cache nested
         * template content to avoid the cost of cloning deeply nested templates.
         * This method retrieves the cached content for a given template.
         *
         * @param {HTMLTemplateElement} template Template to retrieve `content` for
         * @return {DocumentFragment} Content fragment
         */
        static _contentForTemplate(template) {
          let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;
          return (templateInfo && templateInfo.content) || template.content;
        }

        /**
         * Clones the provided template content and returns a document fragment
         * containing the cloned dom.
         *
         * The template is parsed (once and memoized) using this library's
         * template parsing features, and provides the following value-added
         * features:
         * * Adds declarative event listeners for `on-event="handler"` attributes
         * * Generates an "id map" for all nodes with id's under `$` on returned
         *   document fragment
         * * Passes template info including `content` back to templates as
         *   `_templateInfo` (a performance optimization to avoid deep template
         *   cloning)
         *
         * Note that the memoized template parsing process is destructive to the
         * template: attributes for bindings and declarative event listeners are
         * removed after being noted in notes, and any nested `<template>.content`
         * is removed and stored in notes as well.
         *
         * @param {!HTMLTemplateElement} template Template to stamp
         * @return {!StampedTemplate} Cloned template content
         * @override
         */
        _stampTemplate(template) {
          // Polyfill support: bootstrap the template if it has not already been
          if (template && !template.content &&
              window.HTMLTemplateElement && HTMLTemplateElement.decorate) {
            HTMLTemplateElement.decorate(template);
          }
          let templateInfo = this.constructor._parseTemplate(template);
          let nodeInfo = templateInfo.nodeInfoList;
          let content = templateInfo.content || template.content;
          let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));
          // NOTE: ShadyDom optimization indicating there is an insertion point
          dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;
          let nodes = dom.nodeList = new Array(nodeInfo.length);
          dom.$ = {};
          for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {
            let node = nodes[i] = findTemplateNode(dom, info);
            applyIdToMap(this, dom.$, node, info);
            applyTemplateContent(this, node, info);
            applyEventListener(this, node, info);
          }
          dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign
          return dom;
        }

        /**
         * Adds an event listener by method name for the event provided.
         *
         * This method generates a handler function that looks up the method
         * name at handling time.
         *
         * @param {!EventTarget} node Node to add listener on
         * @param {string} eventName Name of event
         * @param {string} methodName Name of method
         * @param {*=} context Context the method will be called on (defaults
         *   to `node`)
         * @return {Function} Generated handler function
         * @override
         */
        _addMethodEventListenerToNode(node, eventName, methodName, context) {
          context = context || node;
          let handler = createNodeEventHandler(context, eventName, methodName);
          this._addEventListenerToNode(node, eventName, handler);
          return handler;
        }

        /**
         * Override point for adding custom or simulated event handling.
         *
         * @param {!EventTarget} node Node to add event listener to
         * @param {string} eventName Name of event
         * @param {function(!Event):void} handler Listener function to add
         * @return {void}
         * @override
         */
        _addEventListenerToNode(node, eventName, handler) {
          node.addEventListener(eventName, handler);
        }

        /**
         * Override point for adding custom or simulated event handling.
         *
         * @param {!EventTarget} node Node to remove event listener from
         * @param {string} eventName Name of event
         * @param {function(!Event):void} handler Listener function to remove
         * @return {void}
         * @override
         */
        _removeEventListenerFromNode(node, eventName, handler) {
          node.removeEventListener(eventName, handler);
        }

      }

      return TemplateStamp;

    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // Monotonically increasing unique ID used for de-duping effects triggered
    // from multiple properties in the same turn
    let dedupeId$1 = 0;

    /**
     * Property effect types; effects are stored on the prototype using these keys
     * @enum {string}
     */
    const TYPES = {
      COMPUTE: '__computeEffects',
      REFLECT: '__reflectEffects',
      NOTIFY: '__notifyEffects',
      PROPAGATE: '__propagateEffects',
      OBSERVE: '__observeEffects',
      READ_ONLY: '__readOnly'
    };

    /** @const {RegExp} */
    const capitalAttributeRegex = /[A-Z]/;

    /**
     * Ensures that the model has an own-property map of effects for the given type.
     * The model may be a prototype or an instance.
     *
     * Property effects are stored as arrays of effects by property in a map,
     * by named type on the model. e.g.
     *
     *   __computeEffects: {
     *     foo: [ ... ],
     *     bar: [ ... ]
     *   }
     *
     * If the model does not yet have an effect map for the type, one is created
     * and returned.  If it does, but it is not an own property (i.e. the
     * prototype had effects), the the map is deeply cloned and the copy is
     * set on the model and returned, ready for new effects to be added.
     *
     * @param {Object} model Prototype or instance
     * @param {string} type Property effect type
     * @return {Object} The own-property map of effects for the given type
     * @private
     */
    function ensureOwnEffectMap(model, type) {
      let effects = model[type];
      if (!effects) {
        effects = model[type] = {};
      } else if (!model.hasOwnProperty(type)) {
        effects = model[type] = Object.create(model[type]);
        for (let p in effects) {
          let protoFx = effects[p];
          let instFx = effects[p] = Array(protoFx.length);
          for (let i=0; i<protoFx.length; i++) {
            instFx[i] = protoFx[i];
          }
        }
      }
      return effects;
    }

    // -- effects ----------------------------------------------

    /**
     * Runs all effects of a given type for the given set of property changes
     * on an instance.
     *
     * @param {!PropertyEffectsType} inst The instance with effects to run
     * @param {Object} effects Object map of property-to-Array of effects
     * @param {Object} props Bag of current property changes
     * @param {Object=} oldProps Bag of previous values for changed properties
     * @param {boolean=} hasPaths True with `props` contains one or more paths
     * @param {*=} extraArgs Additional metadata to pass to effect function
     * @return {boolean} True if an effect ran for this property
     * @private
     */
    function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {
      if (effects) {
        let ran = false;
        let id = dedupeId$1++;
        for (let prop in props) {
          if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {
            ran = true;
          }
        }
        return ran;
      }
      return false;
    }

    /**
     * Runs a list of effects for a given property.
     *
     * @param {!PropertyEffectsType} inst The instance with effects to run
     * @param {Object} effects Object map of property-to-Array of effects
     * @param {number} dedupeId Counter used for de-duping effects
     * @param {string} prop Name of changed property
     * @param {*} props Changed properties
     * @param {*} oldProps Old properties
     * @param {boolean=} hasPaths True with `props` contains one or more paths
     * @param {*=} extraArgs Additional metadata to pass to effect function
     * @return {boolean} True if an effect ran for this property
     * @private
     */
    function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {
      let ran = false;
      let rootProperty = hasPaths ? root(prop) : prop;
      let fxs = effects[rootProperty];
      if (fxs) {
        for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {
          if ((!fx.info || fx.info.lastRun !== dedupeId) &&
              (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {
            if (fx.info) {
              fx.info.lastRun = dedupeId;
            }
            fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);
            ran = true;
          }
        }
      }
      return ran;
    }

    /**
     * Determines whether a property/path that has changed matches the trigger
     * criteria for an effect.  A trigger is a descriptor with the following
     * structure, which matches the descriptors returned from `parseArg`.
     * e.g. for `foo.bar.*`:
     * ```
     * trigger: {
     *   name: 'a.b',
     *   structured: true,
     *   wildcard: true
     * }
     * ```
     * If no trigger is given, the path is deemed to match.
     *
     * @param {string} path Path or property that changed
     * @param {DataTrigger} trigger Descriptor
     * @return {boolean} Whether the path matched the trigger
     */
    function pathMatchesTrigger(path, trigger) {
      if (trigger) {
        let triggerPath = trigger.name;
        return (triggerPath == path) ||
          (trigger.structured && isAncestor(triggerPath, path)) ||
          (trigger.wildcard && isDescendant(triggerPath, path));
      } else {
        return true;
      }
    }

    /**
     * Implements the "observer" effect.
     *
     * Calls the method with `info.methodName` on the instance, passing the
     * new and old values.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {void}
     * @private
     */
    function runObserverEffect(inst, property, props, oldProps, info) {
      let fn = typeof info.method === "string" ? inst[info.method] : info.method;
      let changedProp = info.property;
      if (fn) {
        fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);
      } else if (!info.dynamicFn) {
        console.warn('observer method `' + info.method + '` not defined');
      }
    }

    /**
     * Runs "notify" effects for a set of changed properties.
     *
     * This method differs from the generic `runEffects` method in that it
     * will dispatch path notification events in the case that the property
     * changed was a path and the root property for that path didn't have a
     * "notify" effect.  This is to maintain 1.0 behavior that did not require
     * `notify: true` to ensure object sub-property notifications were
     * sent.
     *
     * @param {!PropertyEffectsType} inst The instance with effects to run
     * @param {Object} notifyProps Bag of properties to notify
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */
    function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {
      // Notify
      let fxs = inst[TYPES.NOTIFY];
      let notified;
      let id = dedupeId$1++;
      // Try normal notify effects; if none, fall back to try path notification
      for (let prop in notifyProps) {
        if (notifyProps[prop]) {
          if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {
            notified = true;
          } else if (hasPaths && notifyPath(inst, prop, props)) {
            notified = true;
          }
        }
      }
      // Flush host if we actually notified and host was batching
      // And the host has already initialized clients; this prevents
      // an issue with a host observing data changes before clients are ready.
      let host;
      if (notified && (host = inst.__dataHost) && host._invalidateProperties) {
        host._invalidateProperties();
      }
    }

    /**
     * Dispatches {property}-changed events with path information in the detail
     * object to indicate a sub-path of the property was changed.
     *
     * @param {!PropertyEffectsType} inst The element from which to fire the event
     * @param {string} path The path that was changed
     * @param {Object} props Bag of current property changes
     * @return {boolean} Returns true if the path was notified
     * @private
     */
    function notifyPath(inst, path, props) {
      let rootProperty = root(path);
      if (rootProperty !== path) {
        let eventName = camelToDashCase(rootProperty) + '-changed';
        dispatchNotifyEvent(inst, eventName, props[path], path);
        return true;
      }
      return false;
    }

    /**
     * Dispatches {property}-changed events to indicate a property (or path)
     * changed.
     *
     * @param {!PropertyEffectsType} inst The element from which to fire the event
     * @param {string} eventName The name of the event to send ('{property}-changed')
     * @param {*} value The value of the changed property
     * @param {string | null | undefined} path If a sub-path of this property changed, the path
     *   that changed (optional).
     * @return {void}
     * @private
     * @suppress {invalidCasts}
     */
    function dispatchNotifyEvent(inst, eventName, value, path) {
      let detail = {
        value: value,
        queueProperty: true
      };
      if (path) {
        detail.path = path;
      }
      /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));
    }

    /**
     * Implements the "notify" effect.
     *
     * Dispatches a non-bubbling event named `info.eventName` on the instance
     * with a detail object containing the new `value`.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */
    function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {
      let rootProperty = hasPaths ? root(property) : property;
      let path = rootProperty != property ? property : null;
      let value = path ? get(inst, path) : inst.__data[property];
      if (path && value === undefined) {
        value = props[property];  // specifically for .splices
      }
      dispatchNotifyEvent(inst, info.eventName, value, path);
    }

    /**
     * Handler function for 2-way notification events. Receives context
     * information captured in the `addNotifyListener` closure from the
     * `__notifyListeners` metadata.
     *
     * Sets the value of the notified property to the host property or path.  If
     * the event contained path information, translate that path to the host
     * scope's name for that path first.
     *
     * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
     * @param {!PropertyEffectsType} inst Host element instance handling the notification event
     * @param {string} fromProp Child element property that was bound
     * @param {string} toPath Host property/path that was bound
     * @param {boolean} negate Whether the binding was negated
     * @return {void}
     * @private
     */
    function handleNotification(event, inst, fromProp, toPath, negate) {
      let value;
      let detail = /** @type {Object} */(event.detail);
      let fromPath = detail && detail.path;
      if (fromPath) {
        toPath = translate(fromProp, toPath, fromPath);
        value = detail && detail.value;
      } else {
        value = event.currentTarget[fromProp];
      }
      value = negate ? !value : value;
      if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {
        if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))
          && (!detail || !detail.queueProperty)) {
          inst._invalidateProperties();
        }
      }
    }

    /**
     * Implements the "reflect" effect.
     *
     * Sets the attribute named `info.attrName` to the given property value.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {void}
     * @private
     */
    function runReflectEffect(inst, property, props, oldProps, info) {
      let value = inst.__data[property];
      if (sanitizeDOMValue) {
        value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));
      }
      inst._propertyToAttribute(property, info.attrName, value);
    }

    /**
     * Runs "computed" effects for a set of changed properties.
     *
     * This method differs from the generic `runEffects` method in that it
     * continues to run computed effects based on the output of each pass until
     * there are no more newly computed properties.  This ensures that all
     * properties that will be computed by the initial set of changes are
     * computed before other effects (binding propagation, observers, and notify)
     * run.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {!Object} changedProps Bag of changed properties
     * @param {!Object} oldProps Bag of previous values for changed properties
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @return {void}
     * @private
     */
    function runComputedEffects(inst, changedProps, oldProps, hasPaths) {
      let computeEffects = inst[TYPES.COMPUTE];
      if (computeEffects) {
        let inputProps = changedProps;
        while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {
          Object.assign(oldProps, inst.__dataOld);
          Object.assign(changedProps, inst.__dataPending);
          inputProps = inst.__dataPending;
          inst.__dataPending = null;
        }
      }
    }

    /**
     * Implements the "computed property" effect by running the method with the
     * values of the arguments specified in the `info` object and setting the
     * return value to the computed property specified.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {void}
     * @private
     */
    function runComputedEffect(inst, property, props, oldProps, info) {
      let result = runMethodEffect(inst, property, props, oldProps, info);
      let computedProp = info.methodInfo;
      if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {
        inst._setPendingProperty(computedProp, result, true);
      } else {
        inst[computedProp] = result;
      }
    }

    /**
     * Computes path changes based on path links set up using the `linkPaths`
     * API.
     *
     * @param {!PropertyEffectsType} inst The instance whose props are changing
     * @param {string | !Array<(string|number)>} path Path that has changed
     * @param {*} value Value of changed path
     * @return {void}
     * @private
     */
    function computeLinkedPaths(inst, path, value) {
      let links = inst.__dataLinkedPaths;
      if (links) {
        let link;
        for (let a in links) {
          let b = links[a];
          if (isDescendant(a, path)) {
            link = translate(a, b, path);
            inst._setPendingPropertyOrPath(link, value, true, true);
          } else if (isDescendant(b, path)) {
            link = translate(b, a, path);
            inst._setPendingPropertyOrPath(link, value, true, true);
          }
        }
      }
    }

    // -- bindings ----------------------------------------------

    /**
     * Adds binding metadata to the current `nodeInfo`, and binding effects
     * for all part dependencies to `templateInfo`.
     *
     * @param {Function} constructor Class that `_parseTemplate` is currently
     *   running on
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {NodeInfo} nodeInfo Node metadata for current template node
     * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
     * @param {string} target Target property name
     * @param {!Array<!BindingPart>} parts Array of binding part metadata
     * @param {string=} literal Literal text surrounding binding parts (specified
     *   only for 'property' bindings, since these must be initialized as part
     *   of boot-up)
     * @return {void}
     * @private
     */
    function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {
      // Create binding metadata and add to nodeInfo
      nodeInfo.bindings = nodeInfo.bindings || [];
      let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };
      nodeInfo.bindings.push(binding);
      // Add listener info to binding metadata
      if (shouldAddListener(binding)) {
        let {event, negate} = binding.parts[0];
        binding.listenerEvent = event || (camelToDashCase(target) + '-changed');
        binding.listenerNegate = negate;
      }
      // Add "propagate" property effects to templateInfo
      let index = templateInfo.nodeInfoList.length;
      for (let i=0; i<binding.parts.length; i++) {
        let part = binding.parts[i];
        part.compoundIndex = i;
        addEffectForBindingPart(constructor, templateInfo, binding, part, index);
      }
    }

    /**
     * Adds property effects to the given `templateInfo` for the given binding
     * part.
     *
     * @param {Function} constructor Class that `_parseTemplate` is currently
     *   running on
     * @param {TemplateInfo} templateInfo Template metadata for current template
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @param {number} index Index into `nodeInfoList` for this node
     * @return {void}
     */
    function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {
      if (!part.literal) {
        if (binding.kind === 'attribute' && binding.target[0] === '-') {
          console.warn('Cannot set attribute ' + binding.target +
            ' because "-" is not a valid attribute starting character');
        } else {
          let dependencies = part.dependencies;
          let info = { index, binding, part, evaluator: constructor };
          for (let j=0; j<dependencies.length; j++) {
            let trigger = dependencies[j];
            if (typeof trigger == 'string') {
              trigger = parseArg(trigger);
              trigger.wildcard = true;
            }
            constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {
              fn: runBindingEffect,
              info, trigger
            });
          }
        }
      }
    }

    /**
     * Implements the "binding" (property/path binding) effect.
     *
     * Note that binding syntax is overridable via `_parseBindings` and
     * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
     * non-literal parts returned from `_parseBindings`.  However,
     * there is no support for _path_ bindings via custom binding parts,
     * as this is specific to Polymer's path binding syntax.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} path Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @param {boolean} hasPaths True with `props` contains one or more paths
     * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
     *   metadata
     * @return {void}
     * @private
     */
    function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {
      let node = nodeList[info.index];
      let binding = info.binding;
      let part = info.part;
      // Subpath notification: transform path and set to client
      // e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
      if (hasPaths && part.source && (path.length > part.source.length) &&
          (binding.kind == 'property') && !binding.isCompound &&
          node.__isPropertyEffectsClient &&
          node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {
        let value = props[path];
        path = translate(part.source, binding.target, path);
        if (node._setPendingPropertyOrPath(path, value, false, true)) {
          inst._enqueueClient(node);
        }
      } else {
        let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);
        // Propagate value to child
        applyBindingValue(inst, node, binding, part, value);
      }
    }

    /**
     * Sets the value for an "binding" (binding) effect to a node,
     * either as a property or attribute.
     *
     * @param {!PropertyEffectsType} inst The instance owning the binding effect
     * @param {Node} node Target node for binding
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @param {*} value Value to set
     * @return {void}
     * @private
     */
    function applyBindingValue(inst, node, binding, part, value) {
      value = computeBindingValue(node, value, binding, part);
      if (sanitizeDOMValue) {
        value = sanitizeDOMValue(value, binding.target, binding.kind, node);
      }
      if (binding.kind == 'attribute') {
        // Attribute binding
        inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);
      } else {
        // Property binding
        let prop = binding.target;
        if (node.__isPropertyEffectsClient &&
            node.__dataHasAccessor && node.__dataHasAccessor[prop]) {
          if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {
            if (node._setPendingProperty(prop, value)) {
              inst._enqueueClient(node);
            }
          }
        } else  {
          inst._setUnmanagedPropertyToNode(node, prop, value);
        }
      }
    }

    /**
     * Transforms an "binding" effect value based on compound & negation
     * effect metadata, as well as handling for special-case properties
     *
     * @param {Node} node Node the value will be set to
     * @param {*} value Value to set
     * @param {!Binding} binding Binding metadata
     * @param {!BindingPart} part Binding part metadata
     * @return {*} Transformed value to set
     * @private
     */
    function computeBindingValue(node, value, binding, part) {
      if (binding.isCompound) {
        let storage = node.__dataCompoundStorage[binding.target];
        storage[part.compoundIndex] = value;
        value = storage.join('');
      }
      if (binding.kind !== 'attribute') {
        // Some browsers serialize `undefined` to `"undefined"`
        if (binding.target === 'textContent' ||
            (binding.target === 'value' &&
              (node.localName === 'input' || node.localName === 'textarea'))) {
          value = value == undefined ? '' : value;
        }
      }
      return value;
    }

    /**
     * Returns true if a binding's metadata meets all the requirements to allow
     * 2-way binding, and therefore a `<property>-changed` event listener should be
     * added:
     * - used curly braces
     * - is a property (not attribute) binding
     * - is not a textContent binding
     * - is not compound
     *
     * @param {!Binding} binding Binding metadata
     * @return {boolean} True if 2-way listener should be added
     * @private
     */
    function shouldAddListener(binding) {
      return Boolean(binding.target) &&
             binding.kind != 'attribute' &&
             binding.kind != 'text' &&
             !binding.isCompound &&
             binding.parts[0].mode === '{';
    }

    /**
     * Setup compound binding storage structures, notify listeners, and dataHost
     * references onto the bound nodeList.
     *
     * @param {!PropertyEffectsType} inst Instance that bas been previously bound
     * @param {TemplateInfo} templateInfo Template metadata
     * @return {void}
     * @private
     */
    function setupBindings(inst, templateInfo) {
      // Setup compound storage, dataHost, and notify listeners
      let {nodeList, nodeInfoList} = templateInfo;
      if (nodeInfoList.length) {
        for (let i=0; i < nodeInfoList.length; i++) {
          let info = nodeInfoList[i];
          let node = nodeList[i];
          let bindings = info.bindings;
          if (bindings) {
            for (let i=0; i<bindings.length; i++) {
              let binding = bindings[i];
              setupCompoundStorage(node, binding);
              addNotifyListener(node, inst, binding);
            }
          }
          node.__dataHost = inst;
        }
      }
    }

    /**
     * Initializes `__dataCompoundStorage` local storage on a bound node with
     * initial literal data for compound bindings, and sets the joined
     * literal parts to the bound property.
     *
     * When changes to compound parts occur, they are first set into the compound
     * storage array for that property, and then the array is joined to result in
     * the final value set to the property/attribute.
     *
     * @param {Node} node Bound node to initialize
     * @param {Binding} binding Binding metadata
     * @return {void}
     * @private
     */
    function setupCompoundStorage(node, binding) {
      if (binding.isCompound) {
        // Create compound storage map
        let storage = node.__dataCompoundStorage ||
          (node.__dataCompoundStorage = {});
        let parts = binding.parts;
        // Copy literals from parts into storage for this binding
        let literals = new Array(parts.length);
        for (let j=0; j<parts.length; j++) {
          literals[j] = parts[j].literal;
        }
        let target = binding.target;
        storage[target] = literals;
        // Configure properties with their literal parts
        if (binding.literal && binding.kind == 'property') {
          node[target] = binding.literal;
        }
      }
    }

    /**
     * Adds a 2-way binding notification event listener to the node specified
     *
     * @param {Object} node Child element to add listener to
     * @param {!PropertyEffectsType} inst Host element instance to handle notification event
     * @param {Binding} binding Binding metadata
     * @return {void}
     * @private
     */
    function addNotifyListener(node, inst, binding) {
      if (binding.listenerEvent) {
        let part = binding.parts[0];
        node.addEventListener(binding.listenerEvent, function(e) {
          handleNotification(e, inst, binding.target, part.source, part.negate);
        });
      }
    }

    // -- for method-based effects (complexObserver & computed) --------------

    /**
     * Adds property effects for each argument in the method signature (and
     * optionally, for the method name if `dynamic` is true) that calls the
     * provided effect function.
     *
     * @param {Element | Object} model Prototype or instance
     * @param {!MethodSignature} sig Method signature metadata
     * @param {string} type Type of property effect to add
     * @param {Function} effectFn Function to run when arguments change
     * @param {*=} methodInfo Effect-specific information to be included in
     *   method effect metadata
     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
     *   method names should be included as a dependency to the effect. Note,
     *   defaults to true if the signature is static (sig.static is true).
     * @return {void}
     * @private
     */
    function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {
      dynamicFn = sig.static || (dynamicFn &&
        (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));
      let info = {
        methodName: sig.methodName,
        args: sig.args,
        methodInfo,
        dynamicFn
      };
      for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {
        if (!arg.literal) {
          model._addPropertyEffect(arg.rootProperty, type, {
            fn: effectFn, info: info, trigger: arg
          });
        }
      }
      if (dynamicFn) {
        model._addPropertyEffect(sig.methodName, type, {
          fn: effectFn, info: info
        });
      }
    }

    /**
     * Calls a method with arguments marshaled from properties on the instance
     * based on the method signature contained in the effect metadata.
     *
     * Multi-property observers, computed properties, and inline computing
     * functions call this function to invoke the method, then use the return
     * value accordingly.
     *
     * @param {!PropertyEffectsType} inst The instance the effect will be run on
     * @param {string} property Name of property
     * @param {Object} props Bag of current property changes
     * @param {Object} oldProps Bag of previous values for changed properties
     * @param {?} info Effect metadata
     * @return {*} Returns the return value from the method invocation
     * @private
     */
    function runMethodEffect(inst, property, props, oldProps, info) {
      // Instances can optionally have a _methodHost which allows redirecting where
      // to find methods. Currently used by `templatize`.
      let context = inst._methodHost || inst;
      let fn = context[info.methodName];
      if (fn) {
        let args = inst._marshalArgs(info.args, property, props);
        return fn.apply(context, args);
      } else if (!info.dynamicFn) {
        console.warn('method `' + info.methodName + '` not defined');
      }
    }

    const emptyArray = [];

    // Regular expressions used for binding
    const IDENT  = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')';
    const NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';
    const SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')';
    const DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')';
    const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';
    const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\s*' + ')';
    const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\s*' + ARGUMENT + ')*' + ')';
    const ARGUMENT_LIST = '(?:' + '\\(\\s*' +
                                  '(?:' + ARGUMENTS + '?' + ')' +
                                '\\)\\s*' + ')';
    const BINDING = '(' + IDENT + '\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3
    const OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*';
    const CLOSE_BRACKET = '(?:]]|}})';
    const NEGATE = '(?:(!)\\s*)?'; // Group 2
    const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;
    const bindingRegex = new RegExp(EXPRESSION, "g");

    /**
     * Create a string from binding parts of all the literal parts
     *
     * @param {!Array<BindingPart>} parts All parts to stringify
     * @return {string} String made from the literal parts
     */
    function literalFromParts(parts) {
      let s = '';
      for (let i=0; i<parts.length; i++) {
        let literal = parts[i].literal;
        s += literal || '';
      }
      return s;
    }

    /**
     * Parses an expression string for a method signature, and returns a metadata
     * describing the method in terms of `methodName`, `static` (whether all the
     * arguments are literals), and an array of `args`
     *
     * @param {string} expression The expression to parse
     * @return {?MethodSignature} The method metadata object if a method expression was
     *   found, otherwise `undefined`
     * @private
     */
    function parseMethod(expression) {
      // tries to match valid javascript property names
      let m = expression.match(/([^\s]+?)\(([\s\S]*)\)/);
      if (m) {
        let methodName = m[1];
        let sig = { methodName, static: true, args: emptyArray };
        if (m[2].trim()) {
          // replace escaped commas with comma entity, split on un-escaped commas
          let args = m[2].replace(/\\,/g, '&comma;').split(',');
          return parseArgs(args, sig);
        } else {
          return sig;
        }
      }
      return null;
    }

    /**
     * Parses an array of arguments and sets the `args` property of the supplied
     * signature metadata object. Sets the `static` property to false if any
     * argument is a non-literal.
     *
     * @param {!Array<string>} argList Array of argument names
     * @param {!MethodSignature} sig Method signature metadata object
     * @return {!MethodSignature} The updated signature metadata object
     * @private
     */
    function parseArgs(argList, sig) {
      sig.args = argList.map(function(rawArg) {
        let arg = parseArg(rawArg);
        if (!arg.literal) {
          sig.static = false;
        }
        return arg;
      }, this);
      return sig;
    }

    /**
     * Parses an individual argument, and returns an argument metadata object
     * with the following fields:
     *
     *   {
     *     value: 'prop',        // property/path or literal value
     *     literal: false,       // whether argument is a literal
     *     structured: false,    // whether the property is a path
     *     rootProperty: 'prop', // the root property of the path
     *     wildcard: false       // whether the argument was a wildcard '.*' path
     *   }
     *
     * @param {string} rawArg The string value of the argument
     * @return {!MethodArg} Argument metadata object
     * @private
     */
    function parseArg(rawArg) {
      // clean up whitespace
      let arg = rawArg.trim()
        // replace comma entity with comma
        .replace(/&comma;/g, ',')
        // repair extra escape sequences; note only commas strictly need
        // escaping, but we allow any other char to be escaped since its
        // likely users will do this
        .replace(/\\(.)/g, '\$1')
        ;
      // basic argument descriptor
      let a = {
        name: arg,
        value: '',
        literal: false
      };
      // detect literal value (must be String or Number)
      let fc = arg[0];
      if (fc === '-') {
        fc = arg[1];
      }
      if (fc >= '0' && fc <= '9') {
        fc = '#';
      }
      switch(fc) {
        case "'":
        case '"':
          a.value = arg.slice(1, -1);
          a.literal = true;
          break;
        case '#':
          a.value = Number(arg);
          a.literal = true;
          break;
      }
      // if not literal, look for structured path
      if (!a.literal) {
        a.rootProperty = root(arg);
        // detect structured path (has dots)
        a.structured = isPath(arg);
        if (a.structured) {
          a.wildcard = (arg.slice(-2) == '.*');
          if (a.wildcard) {
            a.name = arg.slice(0, -2);
          }
        }
      }
      return a;
    }

    // data api

    /**
     * Sends array splice notifications (`.splices` and `.length`)
     *
     * Note: this implementation only accepts normalized paths
     *
     * @param {!PropertyEffectsType} inst Instance to send notifications to
     * @param {Array} array The array the mutations occurred on
     * @param {string} path The path to the array that was mutated
     * @param {Array} splices Array of splice records
     * @return {void}
     * @private
     */
    function notifySplices(inst, array, path, splices) {
      let splicesPath = path + '.splices';
      inst.notifyPath(splicesPath, { indexSplices: splices });
      inst.notifyPath(path + '.length', array.length);
      // Null here to allow potentially large splice records to be GC'ed.
      inst.__data[splicesPath] = {indexSplices: null};
    }

    /**
     * Creates a splice record and sends an array splice notification for
     * the described mutation
     *
     * Note: this implementation only accepts normalized paths
     *
     * @param {!PropertyEffectsType} inst Instance to send notifications to
     * @param {Array} array The array the mutations occurred on
     * @param {string} path The path to the array that was mutated
     * @param {number} index Index at which the array mutation occurred
     * @param {number} addedCount Number of added items
     * @param {Array} removed Array of removed items
     * @return {void}
     * @private
     */
    function notifySplice(inst, array, path, index, addedCount, removed) {
      notifySplices(inst, array, path, [{
        index: index,
        addedCount: addedCount,
        removed: removed,
        object: array,
        type: 'splice'
      }]);
    }

    /**
     * Returns an upper-cased version of the string.
     *
     * @param {string} name String to uppercase
     * @return {string} Uppercased string
     * @private
     */
    function upper(name) {
      return name[0].toUpperCase() + name.substring(1);
    }

    /**
     * Element class mixin that provides meta-programming for Polymer's template
     * binding and data observation (collectively, "property effects") system.
     *
     * This mixin uses provides the following key static methods for adding
     * property effects to an element class:
     * - `addPropertyEffect`
     * - `createPropertyObserver`
     * - `createMethodObserver`
     * - `createNotifyingProperty`
     * - `createReadOnlyProperty`
     * - `createReflectedProperty`
     * - `createComputedProperty`
     * - `bindTemplate`
     *
     * Each method creates one or more property accessors, along with metadata
     * used by this mixin's implementation of `_propertiesChanged` to perform
     * the property effects.
     *
     * Underscored versions of the above methods also exist on the element
     * prototype for adding property effects on instances at runtime.
     *
     * Note that this mixin overrides several `PropertyAccessors` methods, in
     * many cases to maintain guarantees provided by the Polymer 1.x features;
     * notably it changes property accessors to be synchronous by default
     * whereas the default when using `PropertyAccessors` standalone is to be
     * async by default.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin TemplateStamp
     * @appliesMixin PropertyAccessors
     * @summary Element class mixin that provides meta-programming for Polymer's
     * template binding and data observation system.
     */
    const PropertyEffects = dedupingMixin(superClass => {

      /**
       * @constructor
       * @extends {superClass}
       * @implements {Polymer_PropertyAccessors}
       * @implements {Polymer_TemplateStamp}
       * @unrestricted
       * @private
       */
      const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_PropertyEffects}
       * @extends {propertyEffectsBase}
       * @unrestricted
       */
      class PropertyEffects extends propertyEffectsBase {

        constructor() {
          super();
          /** @type {boolean} */
          // Used to identify users of this mixin, ala instanceof
          this.__isPropertyEffectsClient = true;
          /** @type {number} */
          // NOTE: used to track re-entrant calls to `_flushProperties`
          // path changes dirty check against `__dataTemp` only during one "turn"
          // and are cleared when `__dataCounter` returns to 0.
          this.__dataCounter = 0;
          /** @type {boolean} */
          this.__dataClientsReady;
          /** @type {Array} */
          this.__dataPendingClients;
          /** @type {Object} */
          this.__dataToNotify;
          /** @type {Object} */
          this.__dataLinkedPaths;
          /** @type {boolean} */
          this.__dataHasPaths;
          /** @type {Object} */
          this.__dataCompoundStorage;
          /** @type {Polymer_PropertyEffects} */
          this.__dataHost;
          /** @type {!Object} */
          this.__dataTemp;
          /** @type {boolean} */
          this.__dataClientsInitialized;
          /** @type {!Object} */
          this.__data;
          /** @type {!Object} */
          this.__dataPending;
          /** @type {!Object} */
          this.__dataOld;
          /** @type {Object} */
          this.__computeEffects;
          /** @type {Object} */
          this.__reflectEffects;
          /** @type {Object} */
          this.__notifyEffects;
          /** @type {Object} */
          this.__propagateEffects;
          /** @type {Object} */
          this.__observeEffects;
          /** @type {Object} */
          this.__readOnly;
          /** @type {!TemplateInfo} */
          this.__templateInfo;
        }

        get PROPERTY_EFFECT_TYPES() {
          return TYPES;
        }

        /**
         * @return {void}
         */
        _initializeProperties() {
          super._initializeProperties();
          hostStack.registerHost(this);
          this.__dataClientsReady = false;
          this.__dataPendingClients = null;
          this.__dataToNotify = null;
          this.__dataLinkedPaths = null;
          this.__dataHasPaths = false;
          // May be set on instance prior to upgrade
          this.__dataCompoundStorage = this.__dataCompoundStorage || null;
          this.__dataHost = this.__dataHost || null;
          this.__dataTemp = {};
          this.__dataClientsInitialized = false;
        }

        /**
         * Overrides `PropertyAccessors` implementation to provide a
         * more efficient implementation of initializing properties from
         * the prototype on the instance.
         *
         * @override
         * @param {Object} props Properties to initialize on the prototype
         * @return {void}
         */
        _initializeProtoProperties(props) {
          this.__data = Object.create(props);
          this.__dataPending = Object.create(props);
          this.__dataOld = {};
        }

        /**
         * Overrides `PropertyAccessors` implementation to avoid setting
         * `_setProperty`'s `shouldNotify: true`.
         *
         * @override
         * @param {Object} props Properties to initialize on the instance
         * @return {void}
         */
        _initializeInstanceProperties(props) {
          let readOnly = this[TYPES.READ_ONLY];
          for (let prop in props) {
            if (!readOnly || !readOnly[prop]) {
              this.__dataPending = this.__dataPending || {};
              this.__dataOld = this.__dataOld || {};
              this.__data[prop] = this.__dataPending[prop] = props[prop];
            }
          }
        }

        // Prototype setup ----------------------------------------

        /**
         * Equivalent to static `addPropertyEffect` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Property that should trigger the effect
         * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @param {Object=} effect Effect metadata object
         * @return {void}
         * @protected
         */
        _addPropertyEffect(property, type, effect) {
          this._createPropertyAccessor(property, type == TYPES.READ_ONLY);
          // effects are accumulated into arrays per property based on type
          let effects = ensureOwnEffectMap(this, type)[property];
          if (!effects) {
            effects = this[type][property] = [];
          }
          effects.push(effect);
        }

        /**
         * Removes the given property effect.
         *
         * @param {string} property Property the effect was associated with
         * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @param {Object=} effect Effect metadata object to remove
         * @return {void}
         */
        _removePropertyEffect(property, type, effect) {
          let effects = ensureOwnEffectMap(this, type)[property];
          let idx = effects.indexOf(effect);
          if (idx >= 0) {
            effects.splice(idx, 1);
          }
        }

        /**
         * Returns whether the current prototype/instance has a property effect
         * of a certain type.
         *
         * @param {string} property Property name
         * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @return {boolean} True if the prototype/instance has an effect of this type
         * @protected
         */
        _hasPropertyEffect(property, type) {
          let effects = this[type];
          return Boolean(effects && effects[property]);
        }

        /**
         * Returns whether the current prototype/instance has a "read only"
         * accessor for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this type
         * @protected
         */
        _hasReadOnlyEffect(property) {
          return this._hasPropertyEffect(property, TYPES.READ_ONLY);
        }

        /**
         * Returns whether the current prototype/instance has a "notify"
         * property effect for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this type
         * @protected
         */
        _hasNotifyEffect(property) {
          return this._hasPropertyEffect(property, TYPES.NOTIFY);
        }

        /**
         * Returns whether the current prototype/instance has a "reflect to attribute"
         * property effect for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this type
         * @protected
         */
        _hasReflectEffect(property) {
          return this._hasPropertyEffect(property, TYPES.REFLECT);
        }

        /**
         * Returns whether the current prototype/instance has a "computed"
         * property effect for the given property.
         *
         * @param {string} property Property name
         * @return {boolean} True if the prototype/instance has an effect of this type
         * @protected
         */
        _hasComputedEffect(property) {
          return this._hasPropertyEffect(property, TYPES.COMPUTE);
        }

        // Runtime ----------------------------------------

        /**
         * Sets a pending property or path.  If the root property of the path in
         * question had no accessor, the path is set, otherwise it is enqueued
         * via `_setPendingProperty`.
         *
         * This function isolates relatively expensive functionality necessary
         * for the public API (`set`, `setProperties`, `notifyPath`, and property
         * change listeners via {{...}} bindings), such that it is only done
         * when paths enter the system, and not at every propagation step.  It
         * also sets a `__dataHasPaths` flag on the instance which is used to
         * fast-path slower path-matching code in the property effects host paths.
         *
         * `path` can be a path string or array of path parts as accepted by the
         * public API.
         *
         * @param {string | !Array<number|string>} path Path to set
         * @param {*} value Value to set
         * @param {boolean=} shouldNotify Set to true if this change should
         *  cause a property notification event dispatch
         * @param {boolean=} isPathNotification If the path being set is a path
         *   notification of an already changed value, as opposed to a request
         *   to set and notify the change.  In the latter `false` case, a dirty
         *   check is performed and then the value is set to the path before
         *   enqueuing the pending property change.
         * @return {boolean} Returns true if the property/path was enqueued in
         *   the pending changes bag.
         * @protected
         */
        _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {
          if (isPathNotification ||
              root(Array.isArray(path) ? path[0] : path) !== path) {
            // Dirty check changes being set to a path against the actual object,
            // since this is the entry point for paths into the system; from here
            // the only dirty checks are against the `__dataTemp` cache to prevent
            // duplicate work in the same turn only. Note, if this was a notification
            // of a change already set to a path (isPathNotification: true),
            // we always let the change through and skip the `set` since it was
            // already dirty checked at the point of entry and the underlying
            // object has already been updated
            if (!isPathNotification) {
              let old = get(this, path);
              path = /** @type {string} */ (set$1(this, path, value));
              // Use property-accessor's simpler dirty check
              if (!path || !super._shouldPropertyChange(path, value, old)) {
                return false;
              }
            }
            this.__dataHasPaths = true;
            if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {
              computeLinkedPaths(this, path, value);
              return true;
            }
          } else {
            if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {
              return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);
            } else {
              this[path] = value;
            }
          }
          return false;
        }

        /**
         * Applies a value to a non-Polymer element/node's property.
         *
         * The implementation makes a best-effort at binding interop:
         * Some native element properties have side-effects when
         * re-setting the same value (e.g. setting `<input>.value` resets the
         * cursor position), so we do a dirty-check before setting the value.
         * However, for better interop with non-Polymer custom elements that
         * accept objects, we explicitly re-set object changes coming from the
         * Polymer world (which may include deep object changes without the
         * top reference changing), erring on the side of providing more
         * information.
         *
         * Users may override this method to provide alternate approaches.
         *
         * @param {!Node} node The node to set a property on
         * @param {string} prop The property to set
         * @param {*} value The value to set
         * @return {void}
         * @protected
         */
        _setUnmanagedPropertyToNode(node, prop, value) {
          // It is a judgment call that resetting primitives is
          // "bad" and resettings objects is also "good"; alternatively we could
          // implement a whitelist of tag & property values that should never
          // be reset (e.g. <input>.value && <select>.value)
          if (value !== node[prop] || typeof value == 'object') {
            node[prop] = value;
          }
        }

        /**
         * Overrides the `PropertiesChanged` implementation to introduce special
         * dirty check logic depending on the property & value being set:
         *
         * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
         *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
         * 2. Object set to simple property (e.g. 'prop': {...})
         *    Stored in `__dataTemp` and `__data`, dirty checked against
         *    `__dataTemp` by default implementation of `_shouldPropertyChange`
         * 3. Primitive value set to simple property (e.g. 'prop': 42)
         *    Stored in `__data`, dirty checked against `__data`
         *
         * The dirty-check is important to prevent cycles due to two-way
         * notification, but paths and objects are only dirty checked against any
         * previous value set during this turn via a "temporary cache" that is
         * cleared when the last `_propertiesChanged` exits. This is so:
         * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
         *    due to array mutations like shift/unshift/splice; this is fine
         *    since path changes are dirty-checked at user entry points like `set`
         * b. dirty-checking for objects only lasts one turn to allow the user
         *    to mutate the object in-place and re-set it with the same identity
         *    and have all sub-properties re-propagated in a subsequent turn.
         *
         * The temp cache is not necessarily sufficient to prevent invalid array
         * paths, since a splice can happen during the same turn (with pathological
         * user code); we could introduce a "fixup" for temporarily cached array
         * paths if needed: https://github.com/Polymer/polymer/issues/4227
         *
         * @override
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @param {boolean=} shouldNotify True if property should fire notification
         *   event (applies only for `notify: true` properties)
         * @return {boolean} Returns true if the property changed
         */
        _setPendingProperty(property, value, shouldNotify) {
          let propIsPath = this.__dataHasPaths && isPath(property);
          let prevProps = propIsPath ? this.__dataTemp : this.__data;
          if (this._shouldPropertyChange(property, value, prevProps[property])) {
            if (!this.__dataPending) {
              this.__dataPending = {};
              this.__dataOld = {};
            }
            // Ensure old is captured from the last turn
            if (!(property in this.__dataOld)) {
              this.__dataOld[property] = this.__data[property];
            }
            // Paths are stored in temporary cache (cleared at end of turn),
            // which is used for dirty-checking, all others stored in __data
            if (propIsPath) {
              this.__dataTemp[property] = value;
            } else {
              this.__data[property] = value;
            }
            // All changes go into pending property bag, passed to _propertiesChanged
            this.__dataPending[property] = value;
            // Track properties that should notify separately
            if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {
              this.__dataToNotify = this.__dataToNotify || {};
              this.__dataToNotify[property] = shouldNotify;
            }
            return true;
          }
          return false;
        }

        /**
         * Overrides base implementation to ensure all accessors set `shouldNotify`
         * to true, for per-property notification tracking.
         *
         * @override
         * @param {string} property Name of the property
         * @param {*} value Value to set
         * @return {void}
         */
        _setProperty(property, value) {
          if (this._setPendingProperty(property, value, true)) {
            this._invalidateProperties();
          }
        }

        /**
         * Overrides `PropertyAccessor`'s default async queuing of
         * `_propertiesChanged`: if `__dataReady` is false (has not yet been
         * manually flushed), the function no-ops; otherwise flushes
         * `_propertiesChanged` synchronously.
         *
         * @override
         * @return {void}
         */
        _invalidateProperties() {
          if (this.__dataReady) {
            this._flushProperties();
          }
        }

        /**
         * Enqueues the given client on a list of pending clients, whose
         * pending property changes can later be flushed via a call to
         * `_flushClients`.
         *
         * @param {Object} client PropertyEffects client to enqueue
         * @return {void}
         * @protected
         */
        _enqueueClient(client) {
          this.__dataPendingClients = this.__dataPendingClients || [];
          if (client !== this) {
            this.__dataPendingClients.push(client);
          }
        }

        /**
         * Overrides superclass implementation.
         *
         * @return {void}
         * @protected
         */
        _flushProperties() {
          this.__dataCounter++;
          super._flushProperties();
          this.__dataCounter--;
        }

        /**
         * Flushes any clients previously enqueued via `_enqueueClient`, causing
         * their `_flushProperties` method to run.
         *
         * @return {void}
         * @protected
         */
        _flushClients() {
          if (!this.__dataClientsReady) {
            this.__dataClientsReady = true;
            this._readyClients();
            // Override point where accessors are turned on; importantly,
            // this is after clients have fully readied, providing a guarantee
            // that any property effects occur only after all clients are ready.
            this.__dataReady = true;
          } else {
            this.__enableOrFlushClients();
          }
        }

        // NOTE: We ensure clients either enable or flush as appropriate. This
        // handles two corner cases:
        // (1) clients flush properly when connected/enabled before the host
        // enables; e.g.
        //   (a) Templatize stamps with no properties and does not flush and
        //   (b) the instance is inserted into dom and
        //   (c) then the instance flushes.
        // (2) clients enable properly when not connected/enabled when the host
        // flushes; e.g.
        //   (a) a template is runtime stamped and not yet connected/enabled
        //   (b) a host sets a property, causing stamped dom to flush
        //   (c) the stamped dom enables.
        __enableOrFlushClients() {
          let clients = this.__dataPendingClients;
          if (clients) {
            this.__dataPendingClients = null;
            for (let i=0; i < clients.length; i++) {
              let client = clients[i];
              if (!client.__dataEnabled) {
                client._enableProperties();
              } else if (client.__dataPending) {
                client._flushProperties();
              }
            }
          }
        }

        /**
         * Perform any initial setup on client dom. Called before the first
         * `_flushProperties` call on client dom and before any element
         * observers are called.
         *
         * @return {void}
         * @protected
         */
        _readyClients() {
          this.__enableOrFlushClients();
        }

        /**
         * Sets a bag of property changes to this instance, and
         * synchronously processes all effects of the properties as a batch.
         *
         * Property names must be simple properties, not paths.  Batched
         * path propagation is not supported.
         *
         * @param {Object} props Bag of one or more key-value pairs whose key is
         *   a property and value is the new value to set for that property.
         * @param {boolean=} setReadOnly When true, any private values set in
         *   `props` will be set. By default, `setProperties` will not set
         *   `readOnly: true` root properties.
         * @return {void}
         * @public
         */
        setProperties(props, setReadOnly) {
          for (let path in props) {
            if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {
              //TODO(kschaaf): explicitly disallow paths in setProperty?
              // wildcard observers currently only pass the first changed path
              // in the `info` object, and you could do some odd things batching
              // paths, e.g. {'foo.bar': {...}, 'foo': null}
              this._setPendingPropertyOrPath(path, props[path], true);
            }
          }
          this._invalidateProperties();
        }

        /**
         * Overrides `PropertyAccessors` so that property accessor
         * side effects are not enabled until after client dom is fully ready.
         * Also calls `_flushClients` callback to ensure client dom is enabled
         * that was not enabled as a result of flushing properties.
         *
         * @override
         * @return {void}
         */
        ready() {
          // It is important that `super.ready()` is not called here as it
          // immediately turns on accessors. Instead, we wait until `readyClients`
          // to enable accessors to provide a guarantee that clients are ready
          // before processing any accessors side effects.
          this._flushProperties();
          // If no data was pending, `_flushProperties` will not `flushClients`
          // so ensure this is done.
          if (!this.__dataClientsReady) {
            this._flushClients();
          }
          // Before ready, client notifications do not trigger _flushProperties.
          // Therefore a flush is necessary here if data has been set.
          if (this.__dataPending) {
            this._flushProperties();
          }
        }

        /**
         * Implements `PropertyAccessors`'s properties changed callback.
         *
         * Runs each class of effects for the batch of changed properties in
         * a specific order (compute, propagate, reflect, observe, notify).
         *
         * @param {!Object} currentProps Bag of all current accessor values
         * @param {?Object} changedProps Bag of properties changed since the last
         *   call to `_propertiesChanged`
         * @param {?Object} oldProps Bag of previous values for each property
         *   in `changedProps`
         * @return {void}
         */
        _propertiesChanged(currentProps, changedProps, oldProps) {
          // ----------------------------
          // let c = Object.getOwnPropertyNames(changedProps || {});
          // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
          // if (window.debug) { debugger; }
          // ----------------------------
          let hasPaths = this.__dataHasPaths;
          this.__dataHasPaths = false;
          // Compute properties
          runComputedEffects(this, changedProps, oldProps, hasPaths);
          // Clear notify properties prior to possible reentry (propagate, observe),
          // but after computing effects have a chance to add to them
          let notifyProps = this.__dataToNotify;
          this.__dataToNotify = null;
          // Propagate properties to clients
          this._propagatePropertyChanges(changedProps, oldProps, hasPaths);
          // Flush clients
          this._flushClients();
          // Reflect properties
          runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);
          // Observe properties
          runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);
          // Notify properties to host
          if (notifyProps) {
            runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);
          }
          // Clear temporary cache at end of turn
          if (this.__dataCounter == 1) {
            this.__dataTemp = {};
          }
          // ----------------------------
          // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
          // ----------------------------
        }

        /**
         * Called to propagate any property changes to stamped template nodes
         * managed by this element.
         *
         * @param {Object} changedProps Bag of changed properties
         * @param {Object} oldProps Bag of previous values for changed properties
         * @param {boolean} hasPaths True with `props` contains one or more paths
         * @return {void}
         * @protected
         */
        _propagatePropertyChanges(changedProps, oldProps, hasPaths) {
          if (this[TYPES.PROPAGATE]) {
            runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);
          }
          let templateInfo = this.__templateInfo;
          while (templateInfo) {
            runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,
              hasPaths, templateInfo.nodeList);
            templateInfo = templateInfo.nextTemplateInfo;
          }
        }

        /**
         * Aliases one data path as another, such that path notifications from one
         * are routed to the other.
         *
         * @param {string | !Array<string|number>} to Target path to link.
         * @param {string | !Array<string|number>} from Source path to link.
         * @return {void}
         * @public
         */
        linkPaths(to, from) {
          to = normalize(to);
          from = normalize(from);
          this.__dataLinkedPaths = this.__dataLinkedPaths || {};
          this.__dataLinkedPaths[to] = from;
        }

        /**
         * Removes a data path alias previously established with `_linkPaths`.
         *
         * Note, the path to unlink should be the target (`to`) used when
         * linking the paths.
         *
         * @param {string | !Array<string|number>} path Target path to unlink.
         * @return {void}
         * @public
         */
        unlinkPaths(path) {
          path = normalize(path);
          if (this.__dataLinkedPaths) {
            delete this.__dataLinkedPaths[path];
          }
        }

        /**
         * Notify that an array has changed.
         *
         * Example:
         *
         *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
         *     ...
         *     this.items.splice(1, 1, {name: 'Sam'});
         *     this.items.push({name: 'Bob'});
         *     this.notifySplices('items', [
         *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },
         *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}
         *     ]);
         *
         * @param {string} path Path that should be notified.
         * @param {Array} splices Array of splice records indicating ordered
         *   changes that occurred to the array. Each record should have the
         *   following fields:
         *    * index: index at which the change occurred
         *    * removed: array of items that were removed from this index
         *    * addedCount: number of new items added at this index
         *    * object: a reference to the array in question
         *    * type: the string literal 'splice'
         *
         *   Note that splice records _must_ be normalized such that they are
         *   reported in index order (raw results from `Object.observe` are not
         *   ordered and must be normalized/merged before notifying).
         * @return {void}
         * @public
        */
        notifySplices(path, splices) {
          let info = {path: ''};
          let array = /** @type {Array} */(get(this, path, info));
          notifySplices(this, array, info.path, splices);
        }

        /**
         * Convenience method for reading a value from a path.
         *
         * Note, if any part in the path is undefined, this method returns
         * `undefined` (this method does not throw when dereferencing undefined
         * paths).
         *
         * @param {(string|!Array<(string|number)>)} path Path to the value
         *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
         *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
         *   bracketed expressions are not supported; string-based path parts
         *   *must* be separated by dots.  Note that when dereferencing array
         *   indices, the index may be used as a dotted part directly
         *   (e.g. `users.12.name` or `['users', 12, 'name']`).
         * @param {Object=} root Root object from which the path is evaluated.
         * @return {*} Value at the path, or `undefined` if any part of the path
         *   is undefined.
         * @public
         */
        get(path, root$$1) {
          return get(root$$1 || this, path);
        }

        /**
         * Convenience method for setting a value to a path and notifying any
         * elements bound to the same path.
         *
         * Note, if any part in the path except for the last is undefined,
         * this method does nothing (this method does not throw when
         * dereferencing undefined paths).
         *
         * @param {(string|!Array<(string|number)>)} path Path to the value
         *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
         *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
         *   bracketed expressions are not supported; string-based path parts
         *   *must* be separated by dots.  Note that when dereferencing array
         *   indices, the index may be used as a dotted part directly
         *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
         * @param {*} value Value to set at the specified path.
         * @param {Object=} root Root object from which the path is evaluated.
         *   When specified, no notification will occur.
         * @return {void}
         * @public
        */
        set(path, value, root$$1) {
          if (root$$1) {
            set$1(root$$1, path, value);
          } else {
            if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {
              if (this._setPendingPropertyOrPath(path, value, true)) {
                this._invalidateProperties();
              }
            }
          }
        }

        /**
         * Adds items onto the end of the array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.push`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @param {string | !Array<string|number>} path Path to array.
         * @param {...*} items Items to push onto array
         * @return {number} New length of the array.
         * @public
         */
        push(path, ...items) {
          let info = {path: ''};
          let array = /** @type {Array}*/(get(this, path, info));
          let len = array.length;
          let ret = array.push(...items);
          if (items.length) {
            notifySplice(this, array, info.path, len, items.length, []);
          }
          return ret;
        }

        /**
         * Removes an item from the end of array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.pop`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @param {string | !Array<string|number>} path Path to array.
         * @return {*} Item that was removed.
         * @public
         */
        pop(path) {
          let info = {path: ''};
          let array = /** @type {Array} */(get(this, path, info));
          let hadLength = Boolean(array.length);
          let ret = array.pop();
          if (hadLength) {
            notifySplice(this, array, info.path, array.length, 0, [ret]);
          }
          return ret;
        }

        /**
         * Starting from the start index specified, removes 0 or more items
         * from the array and inserts 0 or more new items in their place.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.splice`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @param {string | !Array<string|number>} path Path to array.
         * @param {number} start Index from which to start removing/inserting.
         * @param {number=} deleteCount Number of items to remove.
         * @param {...*} items Items to insert into array.
         * @return {Array} Array of removed items.
         * @public
         */
        splice(path, start, deleteCount, ...items) {
          let info = {path : ''};
          let array = /** @type {Array} */(get(this, path, info));
          // Normalize fancy native splice handling of crazy start values
          if (start < 0) {
            start = array.length - Math.floor(-start);
          } else if (start) {
            start = Math.floor(start);
          }
          // array.splice does different things based on the number of arguments
          // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
          // do different things. In the former, the whole array is cleared. In the
          // latter, no items are removed.
          // This means that we need to detect whether 1. one of the arguments
          // is actually passed in and then 2. determine how many arguments
          // we should pass on to the native array.splice
          //
          let ret;
          // Omit any additional arguments if they were not passed in
          if (arguments.length === 2) {
            ret = array.splice(start);
          // Either start was undefined and the others were defined, but in this
          // case we can safely pass on all arguments
          //
          // Note: this includes the case where none of the arguments were passed in,
          // e.g. this.splice('array'). However, if both start and deleteCount
          // are undefined, array.splice will not modify the array (as expected)
          } else {
            ret = array.splice(start, deleteCount, ...items);
          }
          // At the end, check whether any items were passed in (e.g. insertions)
          // or if the return array contains items (e.g. deletions).
          // Only notify if items were added or deleted.
          if (items.length || ret.length) {
            notifySplice(this, array, info.path, start, items.length, ret);
          }
          return ret;
        }

        /**
         * Removes an item from the beginning of array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.pop`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @param {string | !Array<string|number>} path Path to array.
         * @return {*} Item that was removed.
         * @public
         */
        shift(path) {
          let info = {path: ''};
          let array = /** @type {Array} */(get(this, path, info));
          let hadLength = Boolean(array.length);
          let ret = array.shift();
          if (hadLength) {
            notifySplice(this, array, info.path, 0, 0, [ret]);
          }
          return ret;
        }

        /**
         * Adds items onto the beginning of the array at the path specified.
         *
         * The arguments after `path` and return value match that of
         * `Array.prototype.push`.
         *
         * This method notifies other paths to the same array that a
         * splice occurred to the array.
         *
         * @param {string | !Array<string|number>} path Path to array.
         * @param {...*} items Items to insert info array
         * @return {number} New length of the array.
         * @public
         */
        unshift(path, ...items) {
          let info = {path: ''};
          let array = /** @type {Array} */(get(this, path, info));
          let ret = array.unshift(...items);
          if (items.length) {
            notifySplice(this, array, info.path, 0, items.length, []);
          }
          return ret;
        }

        /**
         * Notify that a path has changed.
         *
         * Example:
         *
         *     this.item.user.name = 'Bob';
         *     this.notifyPath('item.user.name');
         *
         * @param {string} path Path that should be notified.
         * @param {*=} value Value at the path (optional).
         * @return {void}
         * @public
        */
        notifyPath(path, value) {
          /** @type {string} */
          let propPath;
          if (arguments.length == 1) {
            // Get value if not supplied
            let info = {path: ''};
            value = get(this, path, info);
            propPath = info.path;
          } else if (Array.isArray(path)) {
            // Normalize path if needed
            propPath = normalize(path);
          } else {
            propPath = /** @type{string} */(path);
          }
          if (this._setPendingPropertyOrPath(propPath, value, true, true)) {
            this._invalidateProperties();
          }
        }

        /**
         * Equivalent to static `createReadOnlyProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Property name
         * @param {boolean=} protectedSetter Creates a custom protected setter
         *   when `true`.
         * @return {void}
         * @protected
         */
        _createReadOnlyProperty(property, protectedSetter) {
          this._addPropertyEffect(property, TYPES.READ_ONLY);
          if (protectedSetter) {
            this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {
              this._setProperty(property, value);
            };
          }
        }

        /**
         * Equivalent to static `createPropertyObserver` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Property name
         * @param {string|function(*,*)} method Function or name of observer method to call
         * @param {boolean=} dynamicFn Whether the method name should be included as
         *   a dependency to the effect.
         * @return {void}
         * @protected
         */
        _createPropertyObserver(property, method, dynamicFn) {
          let info = { property, method, dynamicFn: Boolean(dynamicFn) };
          this._addPropertyEffect(property, TYPES.OBSERVE, {
            fn: runObserverEffect, info, trigger: {name: property}
          });
          if (dynamicFn) {
            this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {
              fn: runObserverEffect, info, trigger: {name: method}
            });
          }
        }

        /**
         * Equivalent to static `createMethodObserver` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         *   whether method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         */
        _createMethodObserver(expression, dynamicFn) {
          let sig = parseMethod(expression);
          if (!sig) {
            throw new Error("Malformed observer expression '" + expression + "'");
          }
          createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);
        }

        /**
         * Equivalent to static `createNotifyingProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         */
        _createNotifyingProperty(property) {
          this._addPropertyEffect(property, TYPES.NOTIFY, {
            fn: runNotifyEffect,
            info: {
              eventName: camelToDashCase(property) + '-changed',
              property: property
            }
          });
        }

        /**
         * Equivalent to static `createReflectedProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         */
        _createReflectedProperty(property) {
          let attr = this.constructor.attributeNameForProperty(property);
          if (attr[0] === '-') {
            console.warn('Property ' + property + ' cannot be reflected to attribute ' +
              attr + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');
          } else {
            this._addPropertyEffect(property, TYPES.REFLECT, {
              fn: runReflectEffect,
              info: {
                attrName: attr
              }
            });
          }
        }

        /**
         * Equivalent to static `createComputedProperty` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * @param {string} property Name of computed property to set
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         *   whether method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         */
        _createComputedProperty(property, expression, dynamicFn) {
          let sig = parseMethod(expression);
          if (!sig) {
            throw new Error("Malformed computed expression '" + expression + "'");
          }
          createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);
        }

        /**
         * Gather the argument values for a method specified in the provided array
         * of argument metadata.
         *
         * The `path` and `value` arguments are used to fill in wildcard descriptor
         * when the method is being called as a result of a path notification.
         *
         * @param {!Array<!MethodArg>} args Array of argument metadata
         * @param {string} path Property/path name that triggered the method effect
         * @param {Object} props Bag of current property changes
         * @return {Array<*>} Array of argument values
         * @private
         */
        _marshalArgs(args, path, props) {
          const data = this.__data;
          let values = [];
          for (let i=0, l=args.length; i<l; i++) {
            let arg = args[i];
            let name = arg.name;
            let v;
            if (arg.literal) {
              v = arg.value;
            } else {
              if (arg.structured) {
                v = get(data, name);
                // when data is not stored e.g. `splices`
                if (v === undefined) {
                  v = props[name];
                }
              } else {
                v = data[name];
              }
            }
            if (arg.wildcard) {
              // Only send the actual path changed info if the change that
              // caused the observer to run matched the wildcard
              let baseChanged = (name.indexOf(path + '.') === 0);
              let matches$$1 = (path.indexOf(name) === 0 && !baseChanged);
              values[i] = {
                path: matches$$1 ? path : name,
                value: matches$$1 ? props[path] : v,
                base: v
              };
            } else {
              values[i] = v;
            }
          }
          return values;
        }

        // -- static class methods ------------

        /**
         * Ensures an accessor exists for the specified property, and adds
         * to a list of "property effects" that will run when the accessor for
         * the specified property is set.  Effects are grouped by "type", which
         * roughly corresponds to a phase in effect processing.  The effect
         * metadata should be in the following form:
         *
         *     {
         *       fn: effectFunction, // Reference to function to call to perform effect
         *       info: { ... }       // Effect metadata passed to function
         *       trigger: {          // Optional triggering metadata; if not provided
         *         name: string      // the property is treated as a wildcard
         *         structured: boolean
         *         wildcard: boolean
         *       }
         *     }
         *
         * Effects are called from `_propertiesChanged` in the following order by
         * type:
         *
         * 1. COMPUTE
         * 2. PROPAGATE
         * 3. REFLECT
         * 4. OBSERVE
         * 5. NOTIFY
         *
         * Effect functions are called with the following signature:
         *
         *     effectFunction(inst, path, props, oldProps, info, hasPaths)
         *
         * @param {string} property Property that should trigger the effect
         * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
         * @param {Object=} effect Effect metadata object
         * @return {void}
         * @protected
         */
        static addPropertyEffect(property, type, effect) {
          this.prototype._addPropertyEffect(property, type, effect);
        }

        /**
         * Creates a single-property observer for the given property.
         *
         * @param {string} property Property name
         * @param {string|function(*,*)} method Function or name of observer method to call
         * @param {boolean=} dynamicFn Whether the method name should be included as
         *   a dependency to the effect.
         * @return {void}
         * @protected
         */
        static createPropertyObserver(property, method, dynamicFn) {
          this.prototype._createPropertyObserver(property, method, dynamicFn);
        }

        /**
         * Creates a multi-property "method observer" based on the provided
         * expression, which should be a string in the form of a normal JavaScript
         * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
         * should correspond to a property or path in the context of this
         * prototype (or instance), or may be a literal string or number.
         *
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating
         * @return {void}
         *   whether method names should be included as a dependency to the effect.
         * @protected
         */
        static createMethodObserver(expression, dynamicFn) {
          this.prototype._createMethodObserver(expression, dynamicFn);
        }

        /**
         * Causes the setter for the given property to dispatch `<property>-changed`
         * events to notify of changes to the property.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         */
        static createNotifyingProperty(property) {
          this.prototype._createNotifyingProperty(property);
        }

        /**
         * Creates a read-only accessor for the given property.
         *
         * To set the property, use the protected `_setProperty` API.
         * To create a custom protected setter (e.g. `_setMyProp()` for
         * property `myProp`), pass `true` for `protectedSetter`.
         *
         * Note, if the property will have other property effects, this method
         * should be called first, before adding other effects.
         *
         * @param {string} property Property name
         * @param {boolean=} protectedSetter Creates a custom protected setter
         *   when `true`.
         * @return {void}
         * @protected
         */
        static createReadOnlyProperty(property, protectedSetter) {
          this.prototype._createReadOnlyProperty(property, protectedSetter);
        }

        /**
         * Causes the setter for the given property to reflect the property value
         * to a (dash-cased) attribute of the same name.
         *
         * @param {string} property Property name
         * @return {void}
         * @protected
         */
        static createReflectedProperty(property) {
          this.prototype._createReflectedProperty(property);
        }

        /**
         * Creates a computed property whose value is set to the result of the
         * method described by the given `expression` each time one or more
         * arguments to the method changes.  The expression should be a string
         * in the form of a normal JavaScript function signature:
         * `'methodName(arg1, [..., argn])'`
         *
         * @param {string} property Name of computed property to set
         * @param {string} expression Method expression
         * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
         *   method names should be included as a dependency to the effect.
         * @return {void}
         * @protected
         */
        static createComputedProperty(property, expression, dynamicFn) {
          this.prototype._createComputedProperty(property, expression, dynamicFn);
        }

        /**
         * Parses the provided template to ensure binding effects are created
         * for them, and then ensures property accessors are created for any
         * dependent properties in the template.  Binding effects for bound
         * templates are stored in a linked list on the instance so that
         * templates can be efficiently stamped and unstamped.
         *
         * @param {!HTMLTemplateElement} template Template containing binding
         *   bindings
         * @return {!TemplateInfo} Template metadata object
         * @protected
         */
        static bindTemplate(template) {
          return this.prototype._bindTemplate(template);
        }

        // -- binding ----------------------------------------------

        /**
         * Equivalent to static `bindTemplate` API but can be called on
         * an instance to add effects at runtime.  See that method for
         * full API docs.
         *
         * This method may be called on the prototype (for prototypical template
         * binding, to avoid creating accessors every instance) once per prototype,
         * and will be called with `runtimeBinding: true` by `_stampTemplate` to
         * create and link an instance of the template metadata associated with a
         * particular stamping.
         *
         * @param {!HTMLTemplateElement} template Template containing binding
         *   bindings
         * @param {boolean=} instanceBinding When false (default), performs
         *   "prototypical" binding of the template and overwrites any previously
         *   bound template for the class. When true (as passed from
         *   `_stampTemplate`), the template info is instanced and linked into
         *   the list of bound templates.
         * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
         *   this is an instance of the prototypical template info
         * @protected
         */
        _bindTemplate(template, instanceBinding) {
          let templateInfo = this.constructor._parseTemplate(template);
          let wasPreBound = this.__templateInfo == templateInfo;
          // Optimization: since this is called twice for proto-bound templates,
          // don't attempt to recreate accessors if this template was pre-bound
          if (!wasPreBound) {
            for (let prop in templateInfo.propertyEffects) {
              this._createPropertyAccessor(prop);
            }
          }
          if (instanceBinding) {
            // For instance-time binding, create instance of template metadata
            // and link into list of templates if necessary
            templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));
            templateInfo.wasPreBound = wasPreBound;
            if (!wasPreBound && this.__templateInfo) {
              let last = this.__templateInfoLast || this.__templateInfo;
              this.__templateInfoLast = last.nextTemplateInfo = templateInfo;
              templateInfo.previousTemplateInfo = last;
              return templateInfo;
            }
          }
          return this.__templateInfo = templateInfo;
        }

        /**
         * Adds a property effect to the given template metadata, which is run
         * at the "propagate" stage of `_propertiesChanged` when the template
         * has been bound to the element via `_bindTemplate`.
         *
         * The `effect` object should match the format in `_addPropertyEffect`.
         *
         * @param {Object} templateInfo Template metadata to add effect to
         * @param {string} prop Property that should trigger the effect
         * @param {Object=} effect Effect metadata object
         * @return {void}
         * @protected
         */
        static _addTemplatePropertyEffect(templateInfo, prop, effect) {
          let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};
          hostProps[prop] = true;
          let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};
          let propEffects = effects[prop] = effects[prop] || [];
          propEffects.push(effect);
        }

        /**
         * Stamps the provided template and performs instance-time setup for
         * Polymer template features, including data bindings, declarative event
         * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
         * is returned containing the stamped DOM, ready for insertion into the
         * DOM.
         *
         * This method may be called more than once; however note that due to
         * `shadycss` polyfill limitations, only styles from templates prepared
         * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
         * to the shadow root and support CSS custom properties), and note that
         * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
         * any styles required by in runtime-stamped templates must be included
         * in the main element template.
         *
         * @param {!HTMLTemplateElement} template Template to stamp
         * @return {!StampedTemplate} Cloned template content
         * @override
         * @protected
         */
        _stampTemplate(template) {
          // Ensures that created dom is `_enqueueClient`'d to this element so
          // that it can be flushed on next call to `_flushProperties`
          hostStack.beginHosting(this);
          let dom = super._stampTemplate(template);
          hostStack.endHosting(this);
          let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));
          // Add template-instance-specific data to instanced templateInfo
          templateInfo.nodeList = dom.nodeList;
          // Capture child nodes to allow unstamping of non-prototypical templates
          if (!templateInfo.wasPreBound) {
            let nodes = templateInfo.childNodes = [];
            for (let n=dom.firstChild; n; n=n.nextSibling) {
              nodes.push(n);
            }
          }
          dom.templateInfo = templateInfo;
          // Setup compound storage, 2-way listeners, and dataHost for bindings
          setupBindings(this, templateInfo);
          // Flush properties into template nodes if already booted
          if (this.__dataReady) {
            runEffects(this, templateInfo.propertyEffects, this.__data, null,
              false, templateInfo.nodeList);
          }
          return dom;
        }

        /**
         * Removes and unbinds the nodes previously contained in the provided
         * DocumentFragment returned from `_stampTemplate`.
         *
         * @param {!StampedTemplate} dom DocumentFragment previously returned
         *   from `_stampTemplate` associated with the nodes to be removed
         * @return {void}
         * @protected
         */
        _removeBoundDom(dom) {
          // Unlink template info
          let templateInfo = dom.templateInfo;
          if (templateInfo.previousTemplateInfo) {
            templateInfo.previousTemplateInfo.nextTemplateInfo =
              templateInfo.nextTemplateInfo;
          }
          if (templateInfo.nextTemplateInfo) {
            templateInfo.nextTemplateInfo.previousTemplateInfo =
              templateInfo.previousTemplateInfo;
          }
          if (this.__templateInfoLast == templateInfo) {
            this.__templateInfoLast = templateInfo.previousTemplateInfo;
          }
          templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;
          // Remove stamped nodes
          let nodes = templateInfo.childNodes;
          for (let i=0; i<nodes.length; i++) {
            let node = nodes[i];
            node.parentNode.removeChild(node);
          }
        }

        /**
         * Overrides default `TemplateStamp` implementation to add support for
         * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
         * array is added to `nodeInfo` and populated with binding metadata
         * with information capturing the binding target, and a `parts` array
         * with one or more metadata objects capturing the source(s) of the
         * binding.
         *
         * @override
         * @param {Node} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
        static _parseTemplateNode(node, templateInfo, nodeInfo) {
          let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);
          if (node.nodeType === Node.TEXT_NODE) {
            let parts = this._parseBindings(node.textContent, templateInfo);
            if (parts) {
              // Initialize the textContent with any literal parts
              // NOTE: default to a space here so the textNode remains; some browsers
              // (IE) omit an empty textNode following cloneNode/importNode.
              node.textContent = literalFromParts(parts) || ' ';
              addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);
              noted = true;
            }
          }
          return noted;
        }

        /**
         * Overrides default `TemplateStamp` implementation to add support for
         * parsing bindings from attributes.  A `bindings`
         * array is added to `nodeInfo` and populated with binding metadata
         * with information capturing the binding target, and a `parts` array
         * with one or more metadata objects capturing the source(s) of the
         * binding.
         *
         * @override
         * @param {Element} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @param {string} name Attribute name
         * @param {string} value Attribute value
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
        static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
          let parts = this._parseBindings(value, templateInfo);
          if (parts) {
            // Attribute or property
            let origName = name;
            let kind = 'property';
            // The only way we see a capital letter here is if the attr has
            // a capital letter in it per spec. In this case, to make sure
            // this binding works, we go ahead and make the binding to the attribute.
            if (capitalAttributeRegex.test(name)) {
              kind = 'attribute';
            } else if (name[name.length-1] == '$') {
              name = name.slice(0, -1);
              kind = 'attribute';
            }
            // Initialize attribute bindings with any literal parts
            let literal = literalFromParts(parts);
            if (literal && kind == 'attribute') {
              node.setAttribute(name, literal);
            }
            // Clear attribute before removing, since IE won't allow removing
            // `value` attribute if it previously had a value (can't
            // unconditionally set '' before removing since attributes with `$`
            // can't be set using setAttribute)
            if (node.localName === 'input' && origName === 'value') {
              node.setAttribute(origName, '');
            }
            // Remove annotation
            node.removeAttribute(origName);
            // Case hackery: attributes are lower-case, but bind targets
            // (properties) are case sensitive. Gambit is to map dash-case to
            // camel-case: `foo-bar` becomes `fooBar`.
            // Attribute bindings are excepted.
            if (kind === 'property') {
              name = dashToCamelCase(name);
            }
            addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);
            return true;
          } else {
            return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);
          }
        }

        /**
         * Overrides default `TemplateStamp` implementation to add support for
         * binding the properties that a nested template depends on to the template
         * as `_host_<property>`.
         *
         * @override
         * @param {Node} node Node to parse
         * @param {TemplateInfo} templateInfo Template metadata for current template
         * @param {NodeInfo} nodeInfo Node metadata for current template node
         * @return {boolean} `true` if the visited node added node-specific
         *   metadata to `nodeInfo`
         * @protected
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
        static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {
          let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);
          // Merge host props into outer template and add bindings
          let hostProps = nodeInfo.templateInfo.hostProps;
          let mode = '{';
          for (let source in hostProps) {
            let parts = [{ mode, source, dependencies: [source] }];
            addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);
          }
          return noted;
        }

        /**
         * Called to parse text in a template (either attribute values or
         * textContent) into binding metadata.
         *
         * Any overrides of this method should return an array of binding part
         * metadata  representing one or more bindings found in the provided text
         * and any "literal" text in between.  Any non-literal parts will be passed
         * to `_evaluateBinding` when any dependencies change.  The only required
         * fields of each "part" in the returned array are as follows:
         *
         * - `dependencies` - Array containing trigger metadata for each property
         *   that should trigger the binding to update
         * - `literal` - String containing text if the part represents a literal;
         *   in this case no `dependencies` are needed
         *
         * Additional metadata for use by `_evaluateBinding` may be provided in
         * each part object as needed.
         *
         * The default implementation handles the following types of bindings
         * (one or more may be intermixed with literal strings):
         * - Property binding: `[[prop]]`
         * - Path binding: `[[object.prop]]`
         * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
         * - Two-way property or path bindings (supports negation):
         *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
         * - Inline computed method (supports negation):
         *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
         *
         * The default implementation uses a regular expression for best
         * performance. However, the regular expression uses a white-list of
         * allowed characters in a data-binding, which causes problems for
         * data-bindings that do use characters not in this white-list.
         *
         * Instead of updating the white-list with all allowed characters,
         * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
         * that uses a state machine instead. This state machine is able to handle
         * all characters. However, it is slightly less performant, therefore we
         * extracted it into a separate optional mixin.
         *
         * @param {string} text Text to parse from attribute or textContent
         * @param {Object} templateInfo Current template metadata
         * @return {Array<!BindingPart>} Array of binding part metadata
         * @protected
         */
        static _parseBindings(text, templateInfo) {
          let parts = [];
          let lastIndex = 0;
          let m;
          // Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
          // Regex matches:
          //        Iteration 1:  Iteration 2:
          // m[1]: '{{'          '[['
          // m[2]: ''            '!'
          // m[3]: 'prop'        'compute(foo,bar)'
          while ((m = bindingRegex.exec(text)) !== null) {
            // Add literal part
            if (m.index > lastIndex) {
              parts.push({literal: text.slice(lastIndex, m.index)});
            }
            // Add binding part
            let mode = m[1][0];
            let negate = Boolean(m[2]);
            let source = m[3].trim();
            let customEvent = false, notifyEvent = '', colon = -1;
            if (mode == '{' && (colon = source.indexOf('::')) > 0) {
              notifyEvent = source.substring(colon + 2);
              source = source.substring(0, colon);
              customEvent = true;
            }
            let signature = parseMethod(source);
            let dependencies = [];
            if (signature) {
              // Inline computed function
              let {args, methodName} = signature;
              for (let i=0; i<args.length; i++) {
                let arg = args[i];
                if (!arg.literal) {
                  dependencies.push(arg);
                }
              }
              let dynamicFns = templateInfo.dynamicFns;
              if (dynamicFns && dynamicFns[methodName] || signature.static) {
                dependencies.push(methodName);
                signature.dynamicFn = true;
              }
            } else {
              // Property or path
              dependencies.push(source);
            }
            parts.push({
              source, mode, negate, customEvent, signature, dependencies,
              event: notifyEvent
            });
            lastIndex = bindingRegex.lastIndex;
          }
          // Add a final literal part
          if (lastIndex && lastIndex < text.length) {
            let literal = text.substring(lastIndex);
            if (literal) {
              parts.push({
                literal: literal
              });
            }
          }
          if (parts.length) {
            return parts;
          } else {
            return null;
          }
        }

        /**
         * Called to evaluate a previously parsed binding part based on a set of
         * one or more changed dependencies.
         *
         * @param {this} inst Element that should be used as scope for
         *   binding dependencies
         * @param {BindingPart} part Binding part metadata
         * @param {string} path Property/path that triggered this effect
         * @param {Object} props Bag of current property changes
         * @param {Object} oldProps Bag of previous values for changed properties
         * @param {boolean} hasPaths True with `props` contains one or more paths
         * @return {*} Value the binding part evaluated to
         * @protected
         */
        static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {
          let value;
          if (part.signature) {
            value = runMethodEffect(inst, path, props, oldProps, part.signature);
          } else if (path != part.source) {
            value = get(inst, part.source);
          } else {
            if (hasPaths && isPath(path)) {
              value = get(inst, path);
            } else {
              value = inst.__data[path];
            }
          }
          if (part.negate) {
            value = !value;
          }
          return value;
        }

      }

      return PropertyEffects;
    });

    /**
     * Helper api for enqueuing client dom created by a host element.
     *
     * By default elements are flushed via `_flushProperties` when
     * `connectedCallback` is called. Elements attach their client dom to
     * themselves at `ready` time which results from this first flush.
     * This provides an ordering guarantee that the client dom an element
     * creates is flushed before the element itself (i.e. client `ready`
     * fires before host `ready`).
     *
     * However, if `_flushProperties` is called *before* an element is connected,
     * as for example `Templatize` does, this ordering guarantee cannot be
     * satisfied because no elements are connected. (Note: Bound elements that
     * receive data do become enqueued clients and are properly ordered but
     * unbound elements are not.)
     *
     * To maintain the desired "client before host" ordering guarantee for this
     * case we rely on the "host stack. Client nodes registers themselves with
     * the creating host element when created. This ensures that all client dom
     * is readied in the proper order, maintaining the desired guarantee.
     *
     * @private
     */
    class HostStack {
      constructor() {
        this.stack = [];
      }

      /**
       * @param {*} inst Instance to add to hostStack
       * @return {void}
       */
      registerHost(inst) {
        if (this.stack.length) {
          let host = this.stack[this.stack.length-1];
          host._enqueueClient(inst);
        }
      }

      /**
       * @param {*} inst Instance to begin hosting
       * @return {void}
       */
      beginHosting(inst) {
        this.stack.push(inst);
      }

      /**
       * @param {*} inst Instance to end hosting
       * @return {void}
       */
      endHosting(inst) {
        let stackLen = this.stack.length;
        if (stackLen && this.stack[stackLen-1] == inst) {
          this.stack.pop();
        }
      }
    }
    const hostStack = new HostStack();

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Creates a copy of `props` with each property normalized such that
     * upgraded it is an object with at least a type property { type: Type}.
     *
     * @param {Object} props Properties to normalize
     * @return {Object} Copy of input `props` with normalized properties that
     * are in the form {type: Type}
     * @private
     */
    function normalizeProperties(props) {
      const output = {};
      for (let p in props) {
        const o = props[p];
        output[p] = (typeof o === 'function') ? {type: o} : o;
      }
      return output;
    }

    /**
     * Mixin that provides a minimal starting point to using the PropertiesChanged
     * mixin by providing a mechanism to declare properties in a static
     * getter (e.g. static get properties() { return { foo: String } }). Changes
     * are reported via the `_propertiesChanged` method.
     *
     * This mixin provides no specific support for rendering. Users are expected
     * to create a ShadowRoot and put content into it and update it in whatever
     * way makes sense. This can be done in reaction to properties changing by
     * implementing `_propertiesChanged`.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertiesChanged
     * @summary Mixin that provides a minimal starting point for using
     * the PropertiesChanged mixin by providing a declarative `properties` object.
     */
    const PropertiesMixin = dedupingMixin(superClass => {

     /**
      * @constructor
      * @implements {Polymer_PropertiesChanged}
      * @private
      */
     const base = PropertiesChanged(superClass);

     /**
      * Returns the super class constructor for the given class, if it is an
      * instance of the PropertiesMixin.
      *
      * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
      * @return {?PropertiesMixinConstructor} Super class constructor
      */
     function superPropertiesClass(constructor) {
       const superCtor = Object.getPrototypeOf(constructor);

       // Note, the `PropertiesMixin` class below only refers to the class
       // generated by this call to the mixin; the instanceof test only works
       // because the mixin is deduped and guaranteed only to apply once, hence
       // all constructors in a proto chain will see the same `PropertiesMixin`
       return (superCtor.prototype instanceof PropertiesMixin) ?
         /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;
     }

     /**
      * Returns a memoized version of the `properties` object for the
      * given class. Properties not in object format are converted to at
      * least {type}.
      *
      * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
      * @return {Object} Memoized properties object
      */
     function ownProperties(constructor) {
       if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {
         let props = null;

         if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {
           const properties = constructor.properties;

           if (properties) {
            props = normalizeProperties(properties);
           }
         }

         constructor.__ownProperties = props;
       }
       return constructor.__ownProperties;
     }

     /**
      * @polymer
      * @mixinClass
      * @extends {base}
      * @implements {Polymer_PropertiesMixin}
      * @unrestricted
      */
     class PropertiesMixin extends base {

       /**
        * Implements standard custom elements getter to observes the attributes
        * listed in `properties`.
        * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
        */
       static get observedAttributes() {
         const props = this._properties;
         return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];
       }

       /**
        * Finalizes an element definition, including ensuring any super classes
        * are also finalized. This includes ensuring property
        * accessors exist on the element prototype. This method calls
        * `_finalizeClass` to finalize each constructor in the prototype chain.
        * @return {void}
        */
       static finalize() {
         if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {
           const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
           if (superCtor) {
             superCtor.finalize();
           }
           this.__finalized = true;
           this._finalizeClass();
         }
       }

       /**
        * Finalize an element class. This includes ensuring property
        * accessors exist on the element prototype. This method is called by
        * `finalize` and finalizes the class constructor.
        *
        * @protected
        */
       static _finalizeClass() {
         const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));
         if (props) {
           this.createProperties(props);
         }
       }

       /**
        * Returns a memoized version of all properties, including those inherited
        * from super classes. Properties not in object format are converted to
        * at least {type}.
        *
        * @return {Object} Object containing properties for this class
        * @protected
        */
       static get _properties() {
         if (!this.hasOwnProperty(
           JSCompiler_renameProperty('__properties', this))) {
           const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
           this.__properties = Object.assign({},
             superCtor && superCtor._properties,
             ownProperties(/** @type {PropertiesMixinConstructor} */(this)));
         }
         return this.__properties;
       }

       /**
        * Overrides `PropertiesChanged` method to return type specified in the
        * static `properties` object for the given property.
        * @param {string} name Name of property
        * @return {*} Type to which to deserialize attribute
        *
        * @protected
        */
       static typeForProperty(name) {
         const info = this._properties[name];
         return info && info.type;
       }

       /**
        * Overrides `PropertiesChanged` method and adds a call to
        * `finalize` which lazily configures the element's property accessors.
        * @override
        * @return {void}
        */
       _initializeProperties() {
         this.constructor.finalize();
         super._initializeProperties();
       }

       /**
        * Called when the element is added to a document.
        * Calls `_enableProperties` to turn on property system from
        * `PropertiesChanged`.
        * @suppress {missingProperties} Super may or may not implement the callback
        * @return {void}
        * @override
        */
       connectedCallback() {
         if (super.connectedCallback) {
           super.connectedCallback();
         }
         this._enableProperties();
       }

       /**
        * Called when the element is removed from a document
        * @suppress {missingProperties} Super may or may not implement the callback
        * @return {void}
        * @override
        */
       disconnectedCallback() {
         if (super.disconnectedCallback) {
           super.disconnectedCallback();
         }
       }

     }

     return PropertiesMixin;

    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Current Polymer version in Semver notation.
     * @type {string} Semver notation of the current version of Polymer.
     */
    const version = '3.0.5';

    /**
     * Element class mixin that provides the core API for Polymer's meta-programming
     * features including template stamping, data-binding, attribute deserialization,
     * and property change observation.
     *
     * Subclassers may provide the following static getters to return metadata
     * used to configure Polymer's features for the class:
     *
     * - `static get is()`: When the template is provided via a `dom-module`,
     *   users should return the `dom-module` id from a static `is` getter.  If
     *   no template is needed or the template is provided directly via the
     *   `template` getter, there is no need to define `is` for the element.
     *
     * - `static get template()`: Users may provide the template directly (as
     *   opposed to via `dom-module`) by implementing a static `template` getter.
     *   The getter must return an `HTMLTemplateElement`.
     *
     * - `static get properties()`: Should return an object describing
     *   property-related metadata used by Polymer features (key: property name
     *   value: object containing property metadata). Valid keys in per-property
     *   metadata include:
     *   - `type` (String|Number|Object|Array|...): Used by
     *     `attributeChangedCallback` to determine how string-based attributes
     *     are deserialized to JavaScript property values.
     *   - `notify` (boolean): Causes a change in the property to fire a
     *     non-bubbling event called `<property>-changed`. Elements that have
     *     enabled two-way binding to the property use this event to observe changes.
     *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
     *     To set a read-only property, use the private setter method
     *     `_setProperty(property, value)`.
     *   - `observer` (string): Observer method name that will be called when
     *     the property changes. The arguments of the method are
     *     `(value, previousValue)`.
     *   - `computed` (string): String describing method and dependent properties
     *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
     *     Computed properties are read-only by default and can only be changed
     *     via the return value of the computing method.
     *
     * - `static get observers()`: Array of strings describing multi-property
     *   observer methods and their dependent properties (e.g.
     *   `'observeABC(a, b, c)'`).
     *
     * The base class provides default implementations for the following standard
     * custom element lifecycle callbacks; users may override these, but should
     * call the super method to ensure
     * - `constructor`: Run when the element is created or upgraded
     * - `connectedCallback`: Run each time the element is connected to the
     *   document
     * - `disconnectedCallback`: Run each time the element is disconnected from
     *   the document
     * - `attributeChangedCallback`: Run each time an attribute in
     *   `observedAttributes` is set or removed (note: this element's default
     *   `observedAttributes` implementation will automatically return an array
     *   of dash-cased attributes based on `properties`)
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertyEffects
     * @appliesMixin PropertiesMixin
     * @property rootPath {string} Set to the value of `rootPath`,
     *   which defaults to the main document path
     * @property importPath {string} Set to the value of the class's static
     *   `importPath` property, which defaults to the path of this element's
     *   `dom-module` (when `is` is used), but can be overridden for other
     *   import strategies.
     * @summary Element class mixin that provides the core API for Polymer's
     * meta-programming features.
     */
    const ElementMixin = dedupingMixin(base => {

      /**
       * @constructor
       * @extends {base}
       * @implements {Polymer_PropertyEffects}
       * @implements {Polymer_PropertiesMixin}
       * @private
       */
      const polymerElementBase = PropertiesMixin(PropertyEffects(base));

      /**
       * Returns a list of properties with default values.
       * This list is created as an optimization since it is a subset of
       * the list returned from `_properties`.
       * This list is used in `_initializeProperties` to set property defaults.
       *
       * @param {PolymerElementConstructor} constructor Element class
       * @return {PolymerElementProperties} Flattened properties for this class
       *   that have default values
       * @private
       */
      function propertyDefaults(constructor) {
        if (!constructor.hasOwnProperty(
          JSCompiler_renameProperty('__propertyDefaults', constructor))) {
          constructor.__propertyDefaults = null;
          let props = constructor._properties;
          for (let p in props) {
            let info = props[p];
            if ('value' in info) {
              constructor.__propertyDefaults = constructor.__propertyDefaults || {};
              constructor.__propertyDefaults[p] = info;
            }
          }
        }
        return constructor.__propertyDefaults;
      }

      /**
       * Returns a memoized version of the `observers` array.
       * @param {PolymerElementConstructor} constructor Element class
       * @return {Array} Array containing own observers for the given class
       * @protected
       */
      function ownObservers(constructor) {
        if (!constructor.hasOwnProperty(
          JSCompiler_renameProperty('__ownObservers', constructor))) {
            constructor.__ownObservers =
            constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?
            /** @type {PolymerElementConstructor} */ (constructor).observers : null;
        }
        return constructor.__ownObservers;
      }

      /**
       * Creates effects for a property.
       *
       * Note, once a property has been set to
       * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
       * these values may not be changed. For example, a subclass cannot
       * alter these settings. However, additional `observers` may be added
       * by subclasses.
       *
       * The info object should contain property metadata as follows:
       *
       * * `type`: {function} type to which an attribute matching the property
       * is deserialized. Note the property is camel-cased from a dash-cased
       * attribute. For example, 'foo-bar' attribute is deserialized to a
       * property named 'fooBar'.
       *
       * * `readOnly`: {boolean} creates a readOnly property and
       * makes a private setter for the private of the form '_setFoo' for a
       * property 'foo',
       *
       * * `computed`: {string} creates a computed property. A computed property
       * is also automatically set to `readOnly: true`. The value is calculated
       * by running a method and arguments parsed from the given string. For
       * example 'compute(foo)' will compute a given property when the
       * 'foo' property changes by executing the 'compute' method. This method
       * must return the computed value.
       *
       * * `reflectToAttribute`: {boolean} If true, the property value is reflected
       * to an attribute of the same name. Note, the attribute is dash-cased
       * so a property named 'fooBar' is reflected as 'foo-bar'.
       *
       * * `notify`: {boolean} sends a non-bubbling notification event when
       * the property changes. For example, a property named 'foo' sends an
       * event named 'foo-changed' with `event.detail` set to the value of
       * the property.
       *
       * * observer: {string} name of a method that runs when the property
       * changes. The arguments of the method are (value, previousValue).
       *
       * Note: Users may want control over modifying property
       * effects via subclassing. For example, a user might want to make a
       * reflectToAttribute property not do so in a subclass. We've chosen to
       * disable this because it leads to additional complication.
       * For example, a readOnly effect generates a special setter. If a subclass
       * disables the effect, the setter would fail unexpectedly.
       * Based on feedback, we may want to try to make effects more malleable
       * and/or provide an advanced api for manipulating them.
       * Also consider adding warnings when an effect cannot be changed.
       *
       * @param {!PolymerElement} proto Element class prototype to add accessors
       *   and effects to
       * @param {string} name Name of the property.
       * @param {Object} info Info object from which to create property effects.
       * Supported keys:
       * @param {Object} allProps Flattened map of all properties defined in this
       *   element (including inherited properties)
       * @return {void}
       * @private
       */
      function createPropertyFromConfig(proto, name, info, allProps) {
        // computed forces readOnly...
        if (info.computed) {
          info.readOnly = true;
        }
        // Note, since all computed properties are readOnly, this prevents
        // adding additional computed property effects (which leads to a confusing
        // setup where multiple triggers for setting a property)
        // While we do have `hasComputedEffect` this is set on the property's
        // dependencies rather than itself.
        if (info.computed && !proto._hasReadOnlyEffect(name)) {
          proto._createComputedProperty(name, info.computed, allProps);
        }
        if (info.readOnly && !proto._hasReadOnlyEffect(name)) {
          proto._createReadOnlyProperty(name, !info.computed);
        }
        if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {
          proto._createReflectedProperty(name);
        }
        if (info.notify && !proto._hasNotifyEffect(name)) {
          proto._createNotifyingProperty(name);
        }
        // always add observer
        if (info.observer) {
          proto._createPropertyObserver(name, info.observer, allProps[info.observer]);
        }
        // always create the mapping from attribute back to property for deserialization.
        proto._addPropertyToAttributeMap(name);
      }

      /**
       * Process all style elements in the element template. Styles with the
       * `include` attribute are processed such that any styles in
       * the associated "style modules" are included in the element template.
       * @param {PolymerElementConstructor} klass Element class
       * @param {!HTMLTemplateElement} template Template to process
       * @param {string} is Name of element
       * @param {string} baseURI Base URI for element
       * @private
       */
      function processElementStyles(klass, template, is, baseURI) {
        const templateStyles = template.content.querySelectorAll('style');
        const stylesWithImports = stylesFromTemplate(template);
        // insert styles from <link rel="import" type="css"> at the top of the template
        const linkedStyles = stylesFromModuleImports(is);
        const firstTemplateChild = template.content.firstElementChild;
        for (let idx = 0; idx < linkedStyles.length; idx++) {
          let s = linkedStyles[idx];
          s.textContent = klass._processStyleText(s.textContent, baseURI);
          template.content.insertBefore(s, firstTemplateChild);
        }
        // keep track of the last "concrete" style in the template we have encountered
        let templateStyleIndex = 0;
        // ensure all gathered styles are actually in this template.
        for (let i = 0; i < stylesWithImports.length; i++) {
          let s = stylesWithImports[i];
          let templateStyle = templateStyles[templateStyleIndex];
          // if the style is not in this template, it's been "included" and
          // we put a clone of it in the template before the style that included it
          if (templateStyle !== s) {
            s = s.cloneNode(true);
            templateStyle.parentNode.insertBefore(s, templateStyle);
          } else {
            templateStyleIndex++;
          }
          s.textContent = klass._processStyleText(s.textContent, baseURI);
        }
        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(template, is);
        }
      }

      /**
       * Look up template from dom-module for element
       *
       * @param {!string} is Element name to look up
       * @return {!HTMLTemplateElement} Template found in dom module, or
       *   undefined if not found
       * @protected
       */
      function getTemplateFromDomModule(is) {
        let template = null;
        // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed
        // when opted-in via allowTemplateFromDomModule
        if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {
          template = DomModule.import(is, 'template');
          // Under strictTemplatePolicy, require any element with an `is`
          // specified to have a dom-module
          if (strictTemplatePolicy && !template) {
            throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);
          }
        }
        return template;
      }

      /**
       * @polymer
       * @mixinClass
       * @unrestricted
       * @implements {Polymer_ElementMixin}
       */
      class PolymerElement extends polymerElementBase {

        /**
         * Current Polymer version in Semver notation.
         * @type {string} Semver notation of the current version of Polymer.
         */
        static get polymerElementVersion() {
          return version;
        }

        /**
         * Override of PropertiesMixin _finalizeClass to create observers and
         * find the template.
         * @return {void}
         * @protected
         * @override
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
       static _finalizeClass() {
          super._finalizeClass();
          if (this.hasOwnProperty(
            JSCompiler_renameProperty('is', this)) &&  this.is) {
            register(this.prototype);
          }
          const observers = ownObservers(this);
          if (observers) {
            this.createObservers(observers, this._properties);
          }
          // note: create "working" template that is finalized at instance time
          let template = /** @type {PolymerElementConstructor} */ (this).template;
          if (template) {
            if (typeof template === 'string') {
              console.error('template getter must return HTMLTemplateElement');
              template = null;
            } else {
              template = template.cloneNode(true);
            }
          }

          this.prototype._template = template;
        }

        /**
         * Override of PropertiesChanged createProperties to create accessors
         * and property effects for all of the properties.
         * @return {void}
         * @protected
         * @override
         */
         static createProperties(props) {
          for (let p in props) {
            createPropertyFromConfig(this.prototype, p, props[p], props);
          }
        }

        /**
         * Creates observers for the given `observers` array.
         * Leverages `PropertyEffects` to create observers.
         * @param {Object} observers Array of observer descriptors for
         *   this class
         * @param {Object} dynamicFns Object containing keys for any properties
         *   that are functions and should trigger the effect when the function
         *   reference is changed
         * @return {void}
         * @protected
         */
        static createObservers(observers, dynamicFns) {
          const proto = this.prototype;
          for (let i=0; i < observers.length; i++) {
            proto._createMethodObserver(observers[i], dynamicFns);
          }
        }

        /**
         * Returns the template that will be stamped into this element's shadow root.
         *
         * If a `static get is()` getter is defined, the default implementation
         * will return the first `<template>` in a `dom-module` whose `id`
         * matches this element's `is`.
         *
         * Users may override this getter to return an arbitrary template
         * (in which case the `is` getter is unnecessary). The template returned
         * must be an `HTMLTemplateElement`.
         *
         * Note that when subclassing, if the super class overrode the default
         * implementation and the subclass would like to provide an alternate
         * template via a `dom-module`, it should override this getter and
         * return `DomModule.import(this.is, 'template')`.
         *
         * If a subclass would like to modify the super class template, it should
         * clone it rather than modify it in place.  If the getter does expensive
         * work such as cloning/modifying a template, it should memoize the
         * template for maximum performance:
         *
         *   let memoizedTemplate;
         *   class MySubClass extends MySuperClass {
         *     static get template() {
         *       if (!memoizedTemplate) {
         *         memoizedTemplate = super.template.cloneNode(true);
         *         let subContent = document.createElement('div');
         *         subContent.textContent = 'This came from MySubClass';
         *         memoizedTemplate.content.appendChild(subContent);
         *       }
         *       return memoizedTemplate;
         *     }
         *   }
         *
         * @return {!HTMLTemplateElement|string} Template to be stamped
         */
        static get template() {
          // Explanation of template-related properties:
          // - constructor.template (this getter): the template for the class.
          //     This can come from the prototype (for legacy elements), from a
          //     dom-module, or from the super class's template (or can be overridden
          //     altogether by the user)
          // - constructor._template: memoized version of constructor.template
          // - prototype._template: working template for the element, which will be
          //     parsed and modified in place. It is a cloned version of
          //     constructor.template, saved in _finalizeClass(). Note that before
          //     this getter is called, for legacy elements this could be from a
          //     _template field on the info object passed to Polymer(), a behavior,
          //     or set in registered(); once the static getter runs, a clone of it
          //     will overwrite it on the prototype as the working template.
          if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {
            this._template =
              // If user has put template on prototype (e.g. in legacy via registered
              // callback or info object), prefer that first
              this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ?
              this.prototype._template :
              // Look in dom-module associated with this element's is
              (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is) ||
              // Next look for superclass template (call the super impl this
              // way so that `this` points to the superclass)
              Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);
          }
          return this._template;
        }

        /**
         * Set the template.
         *
         * @param {!HTMLTemplateElement|string} value Template to set.
         */
        static set template(value) {
          this._template = value;
        }

        /**
         * Path matching the url from which the element was imported.
         *
         * This path is used to resolve url's in template style cssText.
         * The `importPath` property is also set on element instances and can be
         * used to create bindings relative to the import path.
         *
         * For elements defined in ES modules, users should implement
         * `static get importMeta() { return import.meta; }`, and the default
         * implementation of `importPath` will  return `import.meta.url`'s path.
         * For elements defined in HTML imports, this getter will return the path
         * to the document containing a `dom-module` element matching this
         * element's static `is` property.
         *
         * Note, this path should contain a trailing `/`.
         *
         * @return {string} The import path for this element class
         * @suppress {missingProperties}
         */
        static get importPath() {
          if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {
            const meta = this.importMeta;
            if (meta) {
              this._importPath = pathFromUrl(meta.url);
            } else {
              const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);
              this._importPath = (module && module.assetpath) ||
                Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;
            }
          }
          return this._importPath;
        }

        constructor() {
          super();
          /** @type {HTMLTemplateElement} */
          this._template;
          /** @type {string} */
          this._importPath;
          /** @type {string} */
          this.rootPath;
          /** @type {string} */
          this.importPath;
          /** @type {StampedTemplate | HTMLElement | ShadowRoot} */
          this.root;
          /** @type {!Object<string, !Element>} */
          this.$;
        }

        /**
         * Overrides the default `PropertyAccessors` to ensure class
         * metaprogramming related to property accessors and effects has
         * completed (calls `finalize`).
         *
         * It also initializes any property defaults provided via `value` in
         * `properties` metadata.
         *
         * @return {void}
         * @override
         * @suppress {invalidCasts}
         */
        _initializeProperties() {
          this.constructor.finalize();
          // note: finalize template when we have access to `localName` to
          // avoid dependence on `is` for polyfilling styling.
          this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);
          super._initializeProperties();
          // set path defaults
          this.rootPath = rootPath;
          this.importPath = this.constructor.importPath;
          // apply property defaults...
          let p$ = propertyDefaults(this.constructor);
          if (!p$) {
            return;
          }
          for (let p in p$) {
            let info = p$[p];
            // Don't set default value if there is already an own property, which
            // happens when a `properties` property with default but no effects had
            // a property set (e.g. bound) by its host before upgrade
            if (!this.hasOwnProperty(p)) {
              let value = typeof info.value == 'function' ?
                info.value.call(this) :
                info.value;
              // Set via `_setProperty` if there is an accessor, to enable
              // initializing readOnly property defaults
              if (this._hasAccessor(p)) {
                this._setPendingProperty(p, value, true);
              } else {
                this[p] = value;
              }
            }
          }
        }

        /**
         * Gather style text for a style element in the template.
         *
         * @param {string} cssText Text containing styling to process
         * @param {string} baseURI Base URI to rebase CSS paths against
         * @return {string} The processed CSS text
         * @protected
         */
        static _processStyleText(cssText, baseURI) {
          return resolveCss(cssText, baseURI);
        }

        /**
        * Configures an element `proto` to function with a given `template`.
        * The element name `is` and extends `ext` must be specified for ShadyCSS
        * style scoping.
        *
        * @param {string} is Tag name (or type extension name) for this element
        * @return {void}
        * @protected
        */
        static _finalizeTemplate(is) {
          /** @const {HTMLTemplateElement} */
          const template = this.prototype._template;
          if (template && !template.__polymerFinalized) {
            template.__polymerFinalized = true;
            const importPath = this.importPath;
            const baseURI = importPath ? resolveUrl(importPath) : '';
            // e.g. support `include="module-name"`, and ShadyCSS
            processElementStyles(this, template, is, baseURI);
            this.prototype._bindTemplate(template);
          }
        }

        /**
         * Provides a default implementation of the standard Custom Elements
         * `connectedCallback`.
         *
         * The default implementation enables the property effects system and
         * flushes any pending properties, and updates shimmed CSS properties
         * when using the ShadyCSS scoping/custom properties polyfill.
         *
         * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback
         * @return {void}
         */
        connectedCallback() {
          if (window.ShadyCSS && this._template) {
            window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));
          }
          super.connectedCallback();
        }

        /**
         * Stamps the element template.
         *
         * @return {void}
         * @override
         */
        ready() {
          if (this._template) {
            this.root = this._stampTemplate(this._template);
            this.$ = this.root.$;
          }
          super.ready();
        }

        /**
         * Implements `PropertyEffects`'s `_readyClients` call. Attaches
         * element dom by calling `_attachDom` with the dom stamped from the
         * element's template via `_stampTemplate`. Note that this allows
         * client dom to be attached to the element prior to any observers
         * running.
         *
         * @return {void}
         * @override
         */
        _readyClients() {
          if (this._template) {
            this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));
          }
          // The super._readyClients here sets the clients initialized flag.
          // We must wait to do this until after client dom is created/attached
          // so that this flag can be checked to prevent notifications fired
          // during this process from being handled before clients are ready.
          super._readyClients();
        }


        /**
         * Attaches an element's stamped dom to itself. By default,
         * this method creates a `shadowRoot` and adds the dom to it.
         * However, this method may be overridden to allow an element
         * to put its dom in another location.
         *
         * @throws {Error}
         * @suppress {missingReturn}
         * @param {StampedTemplate} dom to attach to the element.
         * @return {ShadowRoot} node to which the dom has been attached.
         */
        _attachDom(dom) {
          if (this.attachShadow) {
            if (dom) {
              if (!this.shadowRoot) {
                this.attachShadow({mode: 'open'});
              }
              this.shadowRoot.appendChild(dom);
              return this.shadowRoot;
            }
            return null;
          } else {
            throw new Error('ShadowDOM not available. ' +
              // TODO(sorvell): move to compile-time conditional when supported
            'PolymerElement can create dom as children instead of in ' +
            'ShadowDOM by setting `this.root = this;\` before \`ready\`.');
          }
        }

        /**
         * When using the ShadyCSS scoping and custom property shim, causes all
         * shimmed styles in this element (and its subtree) to be updated
         * based on current custom property values.
         *
         * The optional parameter overrides inline custom property styles with an
         * object of properties where the keys are CSS properties, and the values
         * are strings.
         *
         * Example: `this.updateStyles({'--color': 'blue'})`
         *
         * These properties are retained unless a value of `null` is set.
         *
         * Note: This function does not support updating CSS mixins.
         * You can not dynamically change the value of an `@apply`.
         *
         * @param {Object=} properties Bag of custom property key/values to
         *   apply to this element.
         * @return {void}
         * @suppress {invalidCasts}
         */
        updateStyles(properties) {
          if (window.ShadyCSS) {
            window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);
          }
        }

        /**
         * Rewrites a given URL relative to a base URL. The base URL defaults to
         * the original location of the document containing the `dom-module` for
         * this element. This method will return the same URL before and after
         * bundling.
         *
         * Note that this function performs no resolution for URLs that start
         * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
         * URL resolution, use `window.URL`.
         *
         * @param {string} url URL to resolve.
         * @param {string=} base Optional base URL to resolve against, defaults
         * to the element's `importPath`
         * @return {string} Rewritten URL relative to base
         */
        resolveUrl(url, base) {
          if (!base && this.importPath) {
            base = resolveUrl(this.importPath);
          }
          return resolveUrl(url, base);
        }

        /**
         * Overrides `PropertyAccessors` to add map of dynamic functions on
         * template info, for consumption by `PropertyEffects` template binding
         * code. This map determines which method templates should have accessors
         * created for them.
         *
         * @override
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
        static _parseTemplateContent(template, templateInfo, nodeInfo) {
          templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;
          return super._parseTemplateContent(template, templateInfo, nodeInfo);
        }

      }

      return PolymerElement;
    });

    /**
     * Registers a class prototype for telemetry purposes.
     * @param {HTMLElement} prototype Element prototype to register
     * @this {this}
     * @protected
     */
    function register(prototype) {
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Base class that provides the core API for Polymer's meta-programming
     * features including template stamping, data-binding, attribute deserialization,
     * and property change observation.
     *
     * @customElement
     * @polymer
     * @constructor
     * @implements {Polymer_ElementMixin}
     * @extends HTMLElement
     * @appliesMixin ElementMixin
     * @summary Custom element base class that provides the core API for Polymer's
     *   key meta-programming features including template stamping, data-binding,
     *   attribute deserialization, and property change observation
     */
    const PolymerElement = ElementMixin(HTMLElement);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @summary Collapse multiple callbacks into one invocation after a timer.
     */
    class Debouncer {
      constructor() {
        this._asyncModule = null;
        this._callback = null;
        this._timer = null;
      }
      /**
       * Sets the scheduler; that is, a module with the Async interface,
       * a callback and optional arguments to be passed to the run function
       * from the async module.
       *
       * @param {!AsyncInterface} asyncModule Object with Async interface.
       * @param {function()} callback Callback to run.
       * @return {void}
       */
      setConfig(asyncModule, callback) {
        this._asyncModule = asyncModule;
        this._callback = callback;
        this._timer = this._asyncModule.run(() => {
          this._timer = null;
          this._callback();
        });
      }
      /**
       * Cancels an active debouncer and returns a reference to itself.
       *
       * @return {void}
       */
      cancel() {
        if (this.isActive()) {
          this._asyncModule.cancel(/** @type {number} */(this._timer));
          this._timer = null;
        }
      }
      /**
       * Flushes an active debouncer and returns a reference to itself.
       *
       * @return {void}
       */
      flush() {
        if (this.isActive()) {
          this.cancel();
          this._callback();
        }
      }
      /**
       * Returns true if the debouncer is active.
       *
       * @return {boolean} True if active.
       */
      isActive() {
        return this._timer != null;
      }
      /**
       * Creates a debouncer if no debouncer is passed as a parameter
       * or it cancels an active debouncer otherwise. The following
       * example shows how a debouncer can be called multiple times within a
       * microtask and "debounced" such that the provided callback function is
       * called once. Add this method to a custom element:
       *
       * ```js
       * import {microTask} from '@polymer/polymer/lib/utils/async.js';
       * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
       * // ...
       *
       * _debounceWork() {
       *   this._debounceJob = Debouncer.debounce(this._debounceJob,
       *       microTask, () => this._doWork());
       * }
       * ```
       *
       * If the `_debounceWork` method is called multiple times within the same
       * microtask, the `_doWork` function will be called only once at the next
       * microtask checkpoint.
       *
       * Note: In testing it is often convenient to avoid asynchrony. To accomplish
       * this with a debouncer, you can use `enqueueDebouncer` and
       * `flush`. For example, extend the above example by adding
       * `enqueueDebouncer(this._debounceJob)` at the end of the
       * `_debounceWork` method. Then in a test, call `flush` to ensure
       * the debouncer has completed.
       *
       * @param {Debouncer?} debouncer Debouncer object.
       * @param {!AsyncInterface} asyncModule Object with Async interface
       * @param {function()} callback Callback to run.
       * @return {!Debouncer} Returns a debouncer object.
       */
      static debounce(debouncer, asyncModule, callback) {
        if (debouncer instanceof Debouncer) {
          debouncer.cancel();
        } else {
          debouncer = new Debouncer();
        }
        debouncer.setConfig(asyncModule, callback);
        return debouncer;
      }
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // detect native touch action support
    let HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';
    let GESTURE_KEY = '__polymerGestures';
    let HANDLED_OBJ = '__polymerGesturesHandled';
    let TOUCH_ACTION = '__polymerGesturesTouchAction';
    // radius for tap and track
    let TAP_DISTANCE = 25;
    let TRACK_DISTANCE = 5;
    // number of last N track positions to keep
    let TRACK_LENGTH = 2;

    // Disabling "mouse" handlers for 2500ms is enough
    let MOUSE_TIMEOUT = 2500;
    let MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];
    // an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons
    let MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];
    let MOUSE_HAS_BUTTONS = (function() {
      try {
        return new MouseEvent('test', {buttons: 1}).buttons === 1;
      } catch (e) {
        return false;
      }
    })();

    /**
     * @param {string} name Possible mouse event name
     * @return {boolean} true if mouse event, false if not
     */
    function isMouseEvent(name) {
      return MOUSE_EVENTS.indexOf(name) > -1;
    }

    /* eslint no-empty: ["error", { "allowEmptyCatch": true }] */
    // check for passive event listeners
    let SUPPORTS_PASSIVE = false;
    (function() {
      try {
        let opts = Object.defineProperty({}, 'passive', {get() {SUPPORTS_PASSIVE = true;}});
        window.addEventListener('test', null, opts);
        window.removeEventListener('test', null, opts);
      } catch(e) {}
    })();

    /**
     * Generate settings for event listeners, dependant on `passiveTouchGestures`
     *
     * @param {string} eventName Event name to determine if `{passive}` option is
     *   needed
     * @return {{passive: boolean} | undefined} Options to use for addEventListener
     *   and removeEventListener
     */
    function PASSIVE_TOUCH(eventName) {
      if (isMouseEvent(eventName) || eventName === 'touchend') {
        return;
      }
      if (HAS_NATIVE_TA && SUPPORTS_PASSIVE && passiveTouchGestures) {
        return {passive: true};
      } else {
        return;
      }
    }

    // Check for touch-only devices
    let IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);

    // keep track of any labels hit by the mouseCanceller
    /** @type {!Array<!HTMLLabelElement>} */
    const clickedLabels = [];

    /** @type {!Object<boolean>} */
    const labellable = {
      'button': true,
      'input': true,
      'keygen': true,
      'meter': true,
      'output': true,
      'textarea': true,
      'progress': true,
      'select': true
    };

    // Defined at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute
    /** @type {!Object<boolean>} */
    const canBeDisabled = {
      'button': true,
      'command': true,
      'fieldset': true,
      'input': true,
      'keygen': true,
      'optgroup': true,
      'option': true,
      'select': true,
      'textarea': true
    };

    /**
     * @param {HTMLElement} el Element to check labelling status
     * @return {boolean} element can have labels
     */
    function canBeLabelled(el) {
      return labellable[el.localName] || false;
    }

    /**
     * @param {HTMLElement} el Element that may be labelled.
     * @return {!Array<!HTMLLabelElement>} Relevant label for `el`
     */
    function matchingLabels(el) {
      let labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */(el).labels || []);
      // IE doesn't have `labels` and Safari doesn't populate `labels`
      // if element is in a shadowroot.
      // In this instance, finding the non-ancestor labels is enough,
      // as the mouseCancellor code will handle ancstor labels
      if (!labels.length) {
        labels = [];
        let root = el.getRootNode();
        // if there is an id on `el`, check for all labels with a matching `for` attribute
        if (el.id) {
          let matching = root.querySelectorAll(`label[for = ${el.id}]`);
          for (let i = 0; i < matching.length; i++) {
            labels.push(/** @type {!HTMLLabelElement} */(matching[i]));
          }
        }
      }
      return labels;
    }

    // touch will make synthetic mouse events
    // `preventDefault` on touchend will cancel them,
    // but this breaks `<input>` focus and link clicks
    // disable mouse handlers for MOUSE_TIMEOUT ms after
    // a touchend to ignore synthetic mouse events
    let mouseCanceller = function(mouseEvent) {
      // Check for sourceCapabilities, used to distinguish synthetic events
      // if mouseEvent did not come from a device that fires touch events,
      // it was made by a real mouse and should be counted
      // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents
      let sc = mouseEvent.sourceCapabilities;
      if (sc && !sc.firesTouchEvents) {
        return;
      }
      // skip synthetic mouse events
      mouseEvent[HANDLED_OBJ] = {skip: true};
      // disable "ghost clicks"
      if (mouseEvent.type === 'click') {
        let clickFromLabel = false;
        let path = mouseEvent.composedPath && mouseEvent.composedPath();
        if (path) {
          for (let i = 0; i < path.length; i++) {
            if (path[i].nodeType === Node.ELEMENT_NODE) {
              if (path[i].localName === 'label') {
                clickedLabels.push(path[i]);
              } else if (canBeLabelled(path[i])) {
                let ownerLabels = matchingLabels(path[i]);
                // check if one of the clicked labels is labelling this element
                for (let j = 0; j < ownerLabels.length; j++) {
                  clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1;
                }
              }
            }
            if (path[i] === POINTERSTATE.mouse.target) {
              return;
            }
          }
        }
        // if one of the clicked labels was labelling the target element,
        // this is not a ghost click
        if (clickFromLabel) {
          return;
        }
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
      }
    };

    /**
     * @param {boolean=} setup True to add, false to remove.
     * @return {void}
     */
    function setupTeardownMouseCanceller(setup) {
      let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;
      for (let i = 0, en; i < events.length; i++) {
        en = events[i];
        if (setup) {
          // reset clickLabels array
          clickedLabels.length = 0;
          document.addEventListener(en, mouseCanceller, true);
        } else {
          document.removeEventListener(en, mouseCanceller, true);
        }
      }
    }

    function ignoreMouse(e) {
      if (!POINTERSTATE.mouse.mouseIgnoreJob) {
        setupTeardownMouseCanceller(true);
      }
      let unset = function() {
        setupTeardownMouseCanceller();
        POINTERSTATE.mouse.target = null;
        POINTERSTATE.mouse.mouseIgnoreJob = null;
      };
      POINTERSTATE.mouse.target = e.composedPath()[0];
      POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(
            POINTERSTATE.mouse.mouseIgnoreJob
          , timeOut.after(MOUSE_TIMEOUT)
          , unset);
    }

    /**
     * @param {MouseEvent} ev event to test for left mouse button down
     * @return {boolean} has left mouse button down
     */
    function hasLeftMouseButton(ev) {
      let type = ev.type;
      // exit early if the event is not a mouse event
      if (!isMouseEvent(type)) {
        return false;
      }
      // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)
      // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)
      if (type === 'mousemove') {
        // allow undefined for testing events
        let buttons = ev.buttons === undefined ? 1 : ev.buttons;
        if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {
          buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;
        }
        // buttons is a bitmask, check that the left button bit is set (1)
        return Boolean(buttons & 1);
      } else {
        // allow undefined for testing events
        let button = ev.button === undefined ? 0 : ev.button;
        // ev.button is 0 in mousedown/mouseup/click for left button activation
        return button === 0;
      }
    }

    function isSyntheticClick(ev) {
      if (ev.type === 'click') {
        // ev.detail is 0 for HTMLElement.click in most browsers
        if (ev.detail === 0) {
          return true;
        }
        // in the worst case, check that the x/y position of the click is within
        // the bounding box of the target of the event
        // Thanks IE 10 >:(
        let t = _findOriginalTarget(ev);
        // make sure the target of the event is an element so we can use getBoundingClientRect,
        // if not, just assume it is a synthetic click
        if (!t.nodeType || /** @type {Element} */(t).nodeType !== Node.ELEMENT_NODE) {
          return true;
        }
        let bcr = /** @type {Element} */(t).getBoundingClientRect();
        // use page x/y to account for scrolling
        let x = ev.pageX, y = ev.pageY;
        // ev is a synthetic click if the position is outside the bounding box of the target
        return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));
      }
      return false;
    }

    let POINTERSTATE = {
      mouse: {
        target: null,
        mouseIgnoreJob: null
      },
      touch: {
        x: 0,
        y: 0,
        id: -1,
        scrollDecided: false
      }
    };

    function firstTouchAction(ev) {
      let ta = 'auto';
      let path = ev.composedPath && ev.composedPath();
      if (path) {
        for (let i = 0, n; i < path.length; i++) {
          n = path[i];
          if (n[TOUCH_ACTION]) {
            ta = n[TOUCH_ACTION];
            break;
          }
        }
      }
      return ta;
    }

    function trackDocument(stateObj, movefn, upfn) {
      stateObj.movefn = movefn;
      stateObj.upfn = upfn;
      document.addEventListener('mousemove', movefn);
      document.addEventListener('mouseup', upfn);
    }

    function untrackDocument(stateObj) {
      document.removeEventListener('mousemove', stateObj.movefn);
      document.removeEventListener('mouseup', stateObj.upfn);
      stateObj.movefn = null;
      stateObj.upfn = null;
    }

    // use a document-wide touchend listener to start the ghost-click prevention mechanism
    // Use passive event listeners, if supported, to not affect scrolling performance
    document.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? {passive: true} : false);

    /** @type {!Object<string, !GestureRecognizer>} */
    const gestures = {};

    /** @type {!Array<!GestureRecognizer>} */
    const recognizers = [];

    /**
     * Finds the element rendered on the screen at the provided coordinates.
     *
     * Similar to `document.elementFromPoint`, but pierces through
     * shadow roots.
     *
     * @param {number} x Horizontal pixel coordinate
     * @param {number} y Vertical pixel coordinate
     * @return {Element} Returns the deepest shadowRoot inclusive element
     * found at the screen position given.
     */
    function deepTargetFind(x, y) {
      let node = document.elementFromPoint(x, y);
      let next = node;
      // this code path is only taken when native ShadowDOM is used
      // if there is a shadowroot, it may have a node at x/y
      // if there is not a shadowroot, exit the loop
      while (next && next.shadowRoot && !window.ShadyDOM) {
        // if there is a node at x/y in the shadowroot, look deeper
        let oldNext = next;
        next = next.shadowRoot.elementFromPoint(x, y);
        // on Safari, elementFromPoint may return the shadowRoot host
        if (oldNext === next) {
          break;
        }
        if (next) {
          node = next;
        }
      }
      return node;
    }

    /**
     * a cheaper check than ev.composedPath()[0];
     *
     * @private
     * @param {Event|Touch} ev Event.
     * @return {EventTarget} Returns the event target.
     */
    function _findOriginalTarget(ev) {
      // shadowdom
      if (ev.composedPath) {
        const targets = /** @type {!Array<!EventTarget>} */(ev.composedPath());
        // It shouldn't be, but sometimes targets is empty (window on Safari).
        return targets.length > 0 ? targets[0] : ev.target;
      }
      // shadydom
      return ev.target;
    }

    /**
     * @private
     * @param {Event} ev Event.
     * @return {void}
     */
    function _handleNative(ev) {
      let handled;
      let type = ev.type;
      let node = ev.currentTarget;
      let gobj = node[GESTURE_KEY];
      if (!gobj) {
        return;
      }
      let gs = gobj[type];
      if (!gs) {
        return;
      }
      if (!ev[HANDLED_OBJ]) {
        ev[HANDLED_OBJ] = {};
        if (type.slice(0, 5) === 'touch') {
          ev = /** @type {TouchEvent} */(ev); // eslint-disable-line no-self-assign
          let t = ev.changedTouches[0];
          if (type === 'touchstart') {
            // only handle the first finger
            if (ev.touches.length === 1) {
              POINTERSTATE.touch.id = t.identifier;
            }
          }
          if (POINTERSTATE.touch.id !== t.identifier) {
            return;
          }
          if (!HAS_NATIVE_TA) {
            if (type === 'touchstart' || type === 'touchmove') {
              _handleTouchAction(ev);
            }
          }
        }
      }
      handled = ev[HANDLED_OBJ];
      // used to ignore synthetic mouse events
      if (handled.skip) {
        return;
      }
      // reset recognizer state
      for (let i = 0, r; i < recognizers.length; i++) {
        r = recognizers[i];
        if (gs[r.name] && !handled[r.name]) {
          if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {
            r.reset();
          }
        }
      }
      // enforce gesture recognizer order
      for (let i = 0, r; i < recognizers.length; i++) {
        r = recognizers[i];
        if (gs[r.name] && !handled[r.name]) {
          handled[r.name] = true;
          r[type](ev);
        }
      }
    }

    /**
     * @private
     * @param {TouchEvent} ev Event.
     * @return {void}
     */
    function _handleTouchAction(ev) {
      let t = ev.changedTouches[0];
      let type = ev.type;
      if (type === 'touchstart') {
        POINTERSTATE.touch.x = t.clientX;
        POINTERSTATE.touch.y = t.clientY;
        POINTERSTATE.touch.scrollDecided = false;
      } else if (type === 'touchmove') {
        if (POINTERSTATE.touch.scrollDecided) {
          return;
        }
        POINTERSTATE.touch.scrollDecided = true;
        let ta = firstTouchAction(ev);
        let shouldPrevent = false;
        let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);
        let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);
        if (!ev.cancelable) ; else if (ta === 'none') {
          shouldPrevent = true;
        } else if (ta === 'pan-x') {
          shouldPrevent = dy > dx;
        } else if (ta === 'pan-y') {
          shouldPrevent = dx > dy;
        }
        if (shouldPrevent) {
          ev.preventDefault();
        } else {
          prevent('track');
        }
      }
    }

    /**
     * Adds an event listener to a node for the given gesture type.
     *
     * @param {!EventTarget} node Node to add listener on
     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
     * @param {!function(!Event):void} handler Event listener function to call
     * @return {boolean} Returns true if a gesture event listener was added.
     */
    function addListener(node, evType, handler) {
      if (gestures[evType]) {
        _add(node, evType, handler);
        return true;
      }
      return false;
    }

    /**
     * Removes an event listener from a node for the given gesture type.
     *
     * @param {!EventTarget} node Node to remove listener from
     * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
     * @param {!function(!Event):void} handler Event listener function previously passed to
     *  `addListener`.
     * @return {boolean} Returns true if a gesture event listener was removed.
     */
    function removeListener(node, evType, handler) {
      if (gestures[evType]) {
        _remove(node, evType, handler);
        return true;
      }
      return false;
    }

    /**
     * automate the event listeners for the native events
     *
     * @private
     * @param {!EventTarget} node Node on which to add the event.
     * @param {string} evType Event type to add.
     * @param {function(!Event)} handler Event handler function.
     * @return {void}
     */
    function _add(node, evType, handler) {
      let recognizer = gestures[evType];
      let deps = recognizer.deps;
      let name = recognizer.name;
      let gobj = node[GESTURE_KEY];
      if (!gobj) {
        node[GESTURE_KEY] = gobj = {};
      }
      for (let i = 0, dep, gd; i < deps.length; i++) {
        dep = deps[i];
        // don't add mouse handlers on iOS because they cause gray selection overlays
        if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {
          continue;
        }
        gd = gobj[dep];
        if (!gd) {
          gobj[dep] = gd = {_count: 0};
        }
        if (gd._count === 0) {
          node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));
        }
        gd[name] = (gd[name] || 0) + 1;
        gd._count = (gd._count || 0) + 1;
      }
      node.addEventListener(evType, handler);
      if (recognizer.touchAction) {
        setTouchAction(node, recognizer.touchAction);
      }
    }

    /**
     * automate event listener removal for native events
     *
     * @private
     * @param {!EventTarget} node Node on which to remove the event.
     * @param {string} evType Event type to remove.
     * @param {function(!Event): void} handler Event handler function.
     * @return {void}
     */
    function _remove(node, evType, handler) {
      let recognizer = gestures[evType];
      let deps = recognizer.deps;
      let name = recognizer.name;
      let gobj = node[GESTURE_KEY];
      if (gobj) {
        for (let i = 0, dep, gd; i < deps.length; i++) {
          dep = deps[i];
          gd = gobj[dep];
          if (gd && gd[name]) {
            gd[name] = (gd[name] || 1) - 1;
            gd._count = (gd._count || 1) - 1;
            if (gd._count === 0) {
              node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));
            }
          }
        }
      }
      node.removeEventListener(evType, handler);
    }

    /**
     * Registers a new gesture event recognizer for adding new custom
     * gesture event types.
     *
     * @param {!GestureRecognizer} recog Gesture recognizer descriptor
     * @return {void}
     */
    function register$1(recog) {
      recognizers.push(recog);
      for (let i = 0; i < recog.emits.length; i++) {
        gestures[recog.emits[i]] = recog;
      }
    }

    /**
     * @private
     * @param {string} evName Event name.
     * @return {Object} Returns the gesture for the given event name.
     */
    function _findRecognizerByEvent(evName) {
      for (let i = 0, r; i < recognizers.length; i++) {
        r = recognizers[i];
        for (let j = 0, n; j < r.emits.length; j++) {
          n = r.emits[j];
          if (n === evName) {
            return r;
          }
        }
      }
      return null;
    }

    /**
     * Sets scrolling direction on node.
     *
     * This value is checked on first move, thus it should be called prior to
     * adding event listeners.
     *
     * @param {!EventTarget} node Node to set touch action setting on
     * @param {string} value Touch action value
     * @return {void}
     */
    function setTouchAction(node, value) {
      if (HAS_NATIVE_TA && node instanceof HTMLElement) {
        // NOTE: add touchAction async so that events can be added in
        // custom element constructors. Otherwise we run afoul of custom
        // elements restriction against settings attributes (style) in the
        // constructor.
        microTask.run(() => {
          node.style.touchAction = value;
        });
      }
      node[TOUCH_ACTION] = value;
    }

    /**
     * Dispatches an event on the `target` element of `type` with the given
     * `detail`.
     * @private
     * @param {!EventTarget} target The element on which to fire an event.
     * @param {string} type The type of event to fire.
     * @param {!Object=} detail The detail object to populate on the event.
     * @return {void}
     */
    function _fire(target, type, detail) {
      let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });
      ev.detail = detail;
      target.dispatchEvent(ev);
      // forward `preventDefault` in a clean way
      if (ev.defaultPrevented) {
        let preventer = detail.preventer || detail.sourceEvent;
        if (preventer && preventer.preventDefault) {
          preventer.preventDefault();
        }
      }
    }

    /**
     * Prevents the dispatch and default action of the given event name.
     *
     * @param {string} evName Event name.
     * @return {void}
     */
    function prevent(evName) {
      let recognizer = _findRecognizerByEvent(evName);
      if (recognizer.info) {
        recognizer.info.prevent = true;
      }
    }

    /* eslint-disable valid-jsdoc */

    register$1({
      name: 'downup',
      deps: ['mousedown', 'touchstart', 'touchend'],
      flow: {
        start: ['mousedown', 'touchstart'],
        end: ['mouseup', 'touchend']
      },
      emits: ['down', 'up'],

      info: {
        movefn: null,
        upfn: null
      },

      /**
       * @this {GestureRecognizer}
       * @return {void}
       */
      reset: function() {
        untrackDocument(this.info);
      },

      /**
       * @this {GestureRecognizer}
       * @param {MouseEvent} e
       * @return {void}
       */
      mousedown: function(e) {
        if (!hasLeftMouseButton(e)) {
          return;
        }
        let t = _findOriginalTarget(e);
        let self = this;
        let movefn = function movefn(e) {
          if (!hasLeftMouseButton(e)) {
            downupFire('up', t, e);
            untrackDocument(self.info);
          }
        };
        let upfn = function upfn(e) {
          if (hasLeftMouseButton(e)) {
            downupFire('up', t, e);
          }
          untrackDocument(self.info);
        };
        trackDocument(this.info, movefn, upfn);
        downupFire('down', t, e);
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchstart: function(e) {
        downupFire('down', _findOriginalTarget(e), e.changedTouches[0], e);
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchend: function(e) {
        downupFire('up', _findOriginalTarget(e), e.changedTouches[0], e);
      }
    });

    /**
     * @param {string} type
     * @param {EventTarget} target
     * @param {Event|Touch} event
     * @param {Event=} preventer
     * @return {void}
     */
    function downupFire(type, target, event, preventer) {
      if (!target) {
        return;
      }
      _fire(target, type, {
        x: event.clientX,
        y: event.clientY,
        sourceEvent: event,
        preventer: preventer,
        prevent: function(e) {
          return prevent(e);
        }
      });
    }

    register$1({
      name: 'track',
      touchAction: 'none',
      deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],
      flow: {
        start: ['mousedown', 'touchstart'],
        end: ['mouseup', 'touchend']
      },
      emits: ['track'],

      info: {
        x: 0,
        y: 0,
        state: 'start',
        started: false,
        moves: [],
        /** @this {GestureInfo} */
        addMove: function(move) {
          if (this.moves.length > TRACK_LENGTH) {
            this.moves.shift();
          }
          this.moves.push(move);
        },
        movefn: null,
        upfn: null,
        prevent: false
      },

      /**
       * @this {GestureRecognizer}
       * @return {void}
       */
      reset: function() {
        this.info.state = 'start';
        this.info.started = false;
        this.info.moves = [];
        this.info.x = 0;
        this.info.y = 0;
        this.info.prevent = false;
        untrackDocument(this.info);
      },

      /**
       * @this {GestureRecognizer}
       * @param {MouseEvent} e
       * @return {void}
       */
      mousedown: function(e) {
        if (!hasLeftMouseButton(e)) {
          return;
        }
        let t = _findOriginalTarget(e);
        let self = this;
        let movefn = function movefn(e) {
          let x = e.clientX, y = e.clientY;
          if (trackHasMovedEnough(self.info, x, y)) {
            // first move is 'start', subsequent moves are 'move', mouseup is 'end'
            self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';
            if (self.info.state === 'start') {
              // if and only if tracking, always prevent tap
              prevent('tap');
            }
            self.info.addMove({x: x, y: y});
            if (!hasLeftMouseButton(e)) {
              // always fire "end"
              self.info.state = 'end';
              untrackDocument(self.info);
            }
            if (t) {
              trackFire(self.info, t, e);
            }
            self.info.started = true;
          }
        };
        let upfn = function upfn(e) {
          if (self.info.started) {
            movefn(e);
          }

          // remove the temporary listeners
          untrackDocument(self.info);
        };
        // add temporary document listeners as mouse retargets
        trackDocument(this.info, movefn, upfn);
        this.info.x = e.clientX;
        this.info.y = e.clientY;
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchstart: function(e) {
        let ct = e.changedTouches[0];
        this.info.x = ct.clientX;
        this.info.y = ct.clientY;
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchmove: function(e) {
        let t = _findOriginalTarget(e);
        let ct = e.changedTouches[0];
        let x = ct.clientX, y = ct.clientY;
        if (trackHasMovedEnough(this.info, x, y)) {
          if (this.info.state === 'start') {
            // if and only if tracking, always prevent tap
            prevent('tap');
          }
          this.info.addMove({x: x, y: y});
          trackFire(this.info, t, ct);
          this.info.state = 'track';
          this.info.started = true;
        }
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchend: function(e) {
        let t = _findOriginalTarget(e);
        let ct = e.changedTouches[0];
        // only trackend if track was started and not aborted
        if (this.info.started) {
          // reset started state on up
          this.info.state = 'end';
          this.info.addMove({x: ct.clientX, y: ct.clientY});
          trackFire(this.info, t, ct);
        }
      }
    });

    /**
     * @param {!GestureInfo} info
     * @param {number} x
     * @param {number} y
     * @return {boolean}
     */
    function trackHasMovedEnough(info, x, y) {
      if (info.prevent) {
        return false;
      }
      if (info.started) {
        return true;
      }
      let dx = Math.abs(info.x - x);
      let dy = Math.abs(info.y - y);
      return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);
    }

    /**
     * @param {!GestureInfo} info
     * @param {?EventTarget} target
     * @param {Touch} touch
     * @return {void}
     */
    function trackFire(info, target, touch) {
      if (!target) {
        return;
      }
      let secondlast = info.moves[info.moves.length - 2];
      let lastmove = info.moves[info.moves.length - 1];
      let dx = lastmove.x - info.x;
      let dy = lastmove.y - info.y;
      let ddx, ddy = 0;
      if (secondlast) {
        ddx = lastmove.x - secondlast.x;
        ddy = lastmove.y - secondlast.y;
      }
      _fire(target, 'track', {
        state: info.state,
        x: touch.clientX,
        y: touch.clientY,
        dx: dx,
        dy: dy,
        ddx: ddx,
        ddy: ddy,
        sourceEvent: touch,
        hover: function() {
          return deepTargetFind(touch.clientX, touch.clientY);
        }
      });
    }

    register$1({
      name: 'tap',
      deps: ['mousedown', 'click', 'touchstart', 'touchend'],
      flow: {
        start: ['mousedown', 'touchstart'],
        end: ['click', 'touchend']
      },
      emits: ['tap'],
      info: {
        x: NaN,
        y: NaN,
        prevent: false
      },
      /**
       * @this {GestureRecognizer}
       * @return {void}
       */
      reset: function() {
        this.info.x = NaN;
        this.info.y = NaN;
        this.info.prevent = false;
      },
      /**
       * @this {GestureRecognizer}
       * @param {MouseEvent} e
       * @return {void}
       */
      mousedown: function(e) {
        if (hasLeftMouseButton(e)) {
          this.info.x = e.clientX;
          this.info.y = e.clientY;
        }
      },
      /**
       * @this {GestureRecognizer}
       * @param {MouseEvent} e
       * @return {void}
       */
      click: function(e) {
        if (hasLeftMouseButton(e)) {
          trackForward(this.info, e);
        }
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchstart: function(e) {
        const touch = e.changedTouches[0];
        this.info.x = touch.clientX;
        this.info.y = touch.clientY;
      },
      /**
       * @this {GestureRecognizer}
       * @param {TouchEvent} e
       * @return {void}
       */
      touchend: function(e) {
        trackForward(this.info, e.changedTouches[0], e);
      }
    });

    /**
     * @param {!GestureInfo} info
     * @param {Event | Touch} e
     * @param {Event=} preventer
     * @return {void}
     */
    function trackForward(info, e, preventer) {
      let dx = Math.abs(e.clientX - info.x);
      let dy = Math.abs(e.clientY - info.y);
      // find original target from `preventer` for TouchEvents, or `e` for MouseEvents
      let t = _findOriginalTarget((preventer || e));
      if (!t || (canBeDisabled[/** @type {!HTMLElement} */(t).localName] && t.hasAttribute('disabled'))) {
        return;
      }
      // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`
      if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {
        // prevent taps from being generated if an event has canceled them
        if (!info.prevent) {
          _fire(t, 'tap', {
            x: e.clientX,
            y: e.clientY,
            sourceEvent: e,
            preventer: preventer
          });
        }
      }
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Element class mixin that provides API for adding Polymer's cross-platform
     * gesture events to nodes.
     *
     * The API is designed to be compatible with override points implemented
     * in `TemplateStamp` such that declarative event listeners in
     * templates will support gesture events when this mixin is applied along with
     * `TemplateStamp`.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin that provides API for adding Polymer's
     *   cross-platform
     * gesture events to nodes
     */
    const GestureEventListeners = dedupingMixin(
        /**
         * @template T
         * @param {function(new:T)} superClass Class to apply mixin to.
         * @return {function(new:T)} superClass with mixin applied.
         */
        (superClass) => {
          /**
           * @polymer
           * @mixinClass
           * @implements {Polymer_GestureEventListeners}
           */
          class GestureEventListeners extends superClass {
            /**
             * Add the event listener to the node if it is a gestures event.
             *
             * @param {!EventTarget} node Node to add event listener to
             * @param {string} eventName Name of event
             * @param {function(!Event):void} handler Listener function to add
             * @return {void}
             * @override
             */
            _addEventListenerToNode(node, eventName, handler) {
              if (!addListener(node, eventName, handler)) {
                super._addEventListenerToNode(node, eventName, handler);
              }
            }

            /**
             * Remove the event listener to the node if it is a gestures event.
             *
             * @param {!EventTarget} node Node to remove event listener from
             * @param {string} eventName Name of event
             * @param {function(!Event):void} handler Listener function to remove
             * @return {void}
             * @override
             */
            _removeEventListenerFromNode(node, eventName, handler) {
              if (!removeListener(node, eventName, handler)) {
                super._removeEventListenerFromNode(node, eventName, handler);
              }
            }
          }

          return GestureEventListeners;
        });

    /**
     * @polymerMixin
     */
    const ThemePropertyMixin = superClass => class VaadinThemePropertyMixin extends superClass {
      static get properties() {
        return {
          /**
           * Helper property with theme attribute value facilitating propagation
           * in shadow DOM. Allows using `theme$="[[theme]]"` in the template.
           *
           * @protected
           */
          theme: {
            type: String,
            readOnly: true
          }
        };
      }

      /** @protected */
      attributeChangedCallback(name, oldValue, newValue) {
        super.attributeChangedCallback(name, oldValue, newValue);

        if (name === 'theme') {
          this._setTheme(newValue);
        }
      }
    };

    /**
     * @polymerMixin
     */
    const ThemableMixin = superClass => class VaadinThemableMixin extends ThemePropertyMixin(superClass) {

      /** @protected */
      static finalize() {
        super.finalize();

        const template = this.prototype._template;

        const hasOwnTemplate = this.template && this.template.parentElement && this.template.parentElement.id === this.is;
        const inheritedTemplate = Object.getPrototypeOf(this.prototype)._template;
        if (inheritedTemplate && !hasOwnTemplate) {
          // The element doesn't define its own template -> include the theme modules from the inherited template
          Array.from(inheritedTemplate.content.querySelectorAll('style[include]')).forEach(s => {
            this._includeStyle(s.getAttribute('include'), template);
          });
        }

        this._includeMatchingThemes(template);
      }

      /** @protected */
      static _includeMatchingThemes(template) {
        const domModule = DomModule;
        const modules = domModule.prototype.modules;

        let hasThemes = false;
        const defaultModuleName = this.is + '-default-theme';

        Object.keys(modules).forEach(moduleName => {
          if (moduleName !== defaultModuleName) {
            const themeFor = modules[moduleName].getAttribute('theme-for');
            if (themeFor) {
              themeFor.split(' ').forEach(themeForToken => {
                if (new RegExp('^' + themeForToken.split('*').join('.*') + '$').test(this.is)) {
                  hasThemes = true;
                  this._includeStyle(moduleName, template);
                }
              });
            }
          }
        });

        if (!hasThemes && modules[defaultModuleName]) {
          // No theme modules found, include the default module if it exists
          this._includeStyle(defaultModuleName, template);
        }
      }

      /** @private */
      static _includeStyle(moduleName, template) {
        if (template && !template.content.querySelector(`style[include=${moduleName}]`)) {
          const styleEl = document.createElement('style');
          styleEl.setAttribute('include', moduleName);
          template.content.appendChild(styleEl);
        }
      }

    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * A private mixin to avoid problems with dynamic properties and Polymer Analyzer.
     * No need to expose these properties in the API docs.
     * @polymerMixin
     */
    const TabIndexMixin = superClass => class VaadinTabIndexMixin extends superClass {
      static get properties() {
        var properties = {
          /**
           * Internal property needed to listen to `tabindex` attribute changes.
           *
           * For changing the tabindex of this component use the native `tabIndex` property.
           * @private
           */
          tabindex: {
            type: Number,
            value: 0,
            reflectToAttribute: true,
            observer: '_tabindexChanged'
          }
        };

        if (window.ShadyDOM) {
          // ShadyDOM browsers need the `tabIndex` in order to notify when the user changes it programmatically.
          properties['tabIndex'] = properties.tabindex;
        }

        return properties;
      }
    };

    /**
     * Polymer.IronControlState is not a proper 2.0 class, also, its tabindex
     * implementation fails in the shadow dom, so we have this for vaadin elements.
     * @polymerMixin
     */
    const ControlStateMixin = superClass => class VaadinControlStateMixin extends TabIndexMixin(superClass) {
      static get properties() {
        return {
          /**
           * Specify that this control should have input focus when the page loads.
           */
          autofocus: {
            type: Boolean
          },

          /**
           * Stores the previous value of tabindex attribute of the disabled element
           */
          _previousTabIndex: {
            type: Number
          },

          /**
           * If true, the user cannot interact with this element.
           */
          disabled: {
            type: Boolean,
            observer: '_disabledChanged',
            reflectToAttribute: true
          },

          _isShiftTabbing: {
            type: Boolean
          }
        };
      }

      ready() {
        this.addEventListener('focusin', e => {
          if (e.composedPath()[0] === this) {
            this._focus(e);
          } else if (e.composedPath().indexOf(this.focusElement) !== -1 && !this.disabled) {
            this._setFocused(true);
          }
        });
        this.addEventListener('focusout', e => this._setFocused(false));

        // In super.ready() other 'focusin' and 'focusout' listeners might be
        // added, so we call it after our own ones to ensure they execute first.
        // Issue to watch out: when incorrect, <vaadin-combo-box> refocuses the
        // input field on iOS after “Done” is pressed.
        super.ready();

        // This fixes the bug in Firefox 61 (https://bugzilla.mozilla.org/show_bug.cgi?id=1472887)
        // where focusout event does not go out of shady DOM because composed property in the event is not true
        const ensureEventComposed = e => {
          if (!e.composed) {
            e.target.dispatchEvent(new CustomEvent(e.type, {
              bubbles: true,
              composed: true,
              cancelable: false
            }));
          }
        };
        this.shadowRoot.addEventListener('focusin', ensureEventComposed);
        this.shadowRoot.addEventListener('focusout', ensureEventComposed);

        this.addEventListener('keydown', e => {
          if (!e.defaultPrevented && e.shiftKey && e.keyCode === 9) {
            // Flag is checked in _focus event handler.
            this._isShiftTabbing = true;
            HTMLElement.prototype.focus.apply(this);
            this._setFocused(false);
            // Event handling in IE is asynchronous and the flag is removed asynchronously as well
            setTimeout(() => this._isShiftTabbing = false, 0);
          }
        });

        if (this.autofocus && !this.focused && !this.disabled) {
          window.requestAnimationFrame(() => {
            this._focus();
            this._setFocused(true);
            this.setAttribute('focus-ring', '');
          });
        }

        this._boundKeydownListener = this._bodyKeydownListener.bind(this);
        this._boundKeyupListener = this._bodyKeyupListener.bind(this);
      }

      /**
       * @protected
       */
      connectedCallback() {
        super.connectedCallback();

        document.body.addEventListener('keydown', this._boundKeydownListener, true);
        document.body.addEventListener('keyup', this._boundKeyupListener, true);
      }

      /**
       * @protected
       */
      disconnectedCallback() {
        super.disconnectedCallback();

        document.body.removeEventListener('keydown', this._boundKeydownListener, true);
        document.body.removeEventListener('keyup', this._boundKeyupListener, true);

        // in non-Chrome browsers, blur does not fire on the element when it is disconnected.
        // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.
        if (this.hasAttribute('focused')) {
          this._setFocused(false);
        }
      }

      _setFocused(focused) {
        if (focused) {
          this.setAttribute('focused', '');
        } else {
          this.removeAttribute('focused');
        }

        // focus-ring is true when the element was focused from the keyboard.
        // Focus Ring [A11ycasts]: https://youtu.be/ilj2P5-5CjI
        if (focused && this._tabPressed) {
          this.setAttribute('focus-ring', '');
        } else {
          this.removeAttribute('focus-ring');
        }
      }

      _bodyKeydownListener(e) {
        this._tabPressed = e.keyCode === 9;
      }

      _bodyKeyupListener() {
        this._tabPressed = false;
      }

      /**
       * Any element extending this mixin is required to implement this getter.
       * It returns the actual focusable element in the component.
       */
      get focusElement() {
        window.console.warn(`Please implement the 'focusElement' property in <${this.localName}>`);
        return this;
      }

      _focus(e) {
        if (this._isShiftTabbing) {
          return;
        }

        this.focusElement.focus();
        this._setFocused(true);
      }

      /**
       * Moving the focus from the host element causes firing of the blur event what leads to problems in IE.
       * @private
       */
      focus() {
        if (!this.focusElement || this.disabled) {
          return;
        }

        this.focusElement.focus();
        this._setFocused(true);
      }

      /**
       * Native bluring in the host element does nothing because it does not have the focus.
       * In chrome it works, but not in FF.
       * @private
       */
      blur() {
        this.focusElement.blur();
        this._setFocused(false);
      }

      _disabledChanged(disabled) {
        this.focusElement.disabled = disabled;
        if (disabled) {
          this.blur();
          this._previousTabIndex = this.tabindex;
          this.tabindex = -1;
          this.setAttribute('aria-disabled', 'true');
        } else {
          if (typeof this._previousTabIndex !== 'undefined') {
            this.tabindex = this._previousTabIndex;
          }
          this.removeAttribute('aria-disabled');
        }
      }

      _tabindexChanged(tabindex) {
        if (tabindex !== undefined) {
          this.focusElement.tabIndex = tabindex;
        }

        if (this.disabled && this.tabindex) {
          // If tabindex attribute was changed while checkbox was disabled
          if (this.tabindex !== -1) {
            this._previousTabIndex = this.tabindex;
          }
          this.tabindex = tabindex = undefined;
        }

        if (window.ShadyDOM) {
          this.setProperties({tabIndex: tabindex, tabindex: tabindex});
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
    /* eslint-enable no-unused-vars */

    let debouncerQueue = [];

    /**
     * Adds a `Debouncer` to a list of globally flushable tasks.
     *
     * @param {!Debouncer} debouncer Debouncer to enqueue
     * @return {void}
     */
    const enqueueDebouncer = function(debouncer) {
      debouncerQueue.push(debouncer);
    };

    function flushDebouncers() {
      const didFlush = Boolean(debouncerQueue.length);
      while (debouncerQueue.length) {
        try {
          debouncerQueue.shift().flush();
        } catch(e) {
          setTimeout(() => {
            throw e;
          });
        }
      }
      return didFlush;
    }

    /**
     * Forces several classes of asynchronously queued tasks to flush:
     * - Debouncers added via `enqueueDebouncer`
     * - ShadyDOM distribution
     *
     * @return {void}
     */
    const flush = function() {
      let shadyDOM, debouncers;
      do {
        shadyDOM = window.ShadyDOM && ShadyDOM.flush();
        if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {
          window.ShadyCSS.ScopingShim.flush();
        }
        debouncers = flushDebouncers();
      } while (shadyDOM || debouncers);
    };

    const DEV_MODE_CODE_REGEXP =
      /\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i;

    function isMinified() {
      function test() {
        /** vaadin-dev-mode:start
        return false;
        vaadin-dev-mode:end **/
        return true;
      }
      return uncommentAndRun(test);
    }

    function isDevelopmentMode() {
      try {
        return isForcedDevelopmentMode() || (isLocalhost() && !isMinified() && !isFlowProductionMode());
      } catch (e) {
        // Some error in this code, assume production so no further actions will be taken
        return false;
      }
    }

    function isForcedDevelopmentMode() {
      return localStorage.getItem("vaadin.developmentmode.force");
    }

    function isLocalhost() {
      return (["localhost","127.0.0.1"].indexOf(window.location.hostname) >= 0);
    }

    function isFlowProductionMode() {
      if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
        const productionModeApps = Object.keys(window.Vaadin.Flow.clients)
        .map(key => window.Vaadin.Flow.clients[key])
        .filter(client => client.productionMode);
        if (productionModeApps.length > 0) {
          return true;
        }
      }
      return false;
    }

    function uncommentAndRun(callback, args) {
      if (typeof callback !== 'function') {
        return;
      }

      const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());
      if (match) {
        try {
          // requires CSP: script-src 'unsafe-eval'
          callback = new Function(match[1]);
        } catch (e) {
          // eat the exception
          console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);
        }
      }

      return callback(args);
    }

    // A guard against polymer-modulizer removing the window.Vaadin
    // initialization above.
    window['Vaadin'] = window['Vaadin'] || {};

    /**
     * Inspects the source code of the given `callback` function for
     * specially-marked _commented_ code. If such commented code is found in the
     * callback source, uncomments and runs that code instead of the callback
     * itself. Otherwise runs the callback as is.
     *
     * The optional arguments are passed into the callback / uncommented code,
     * the result is returned.
     *
     * See the `isMinified()` function source code in this file for an example.
     *
     */
    const runIfDevelopmentMode = function(callback, args) {
      if (window.Vaadin.developmentMode) {
        return uncommentAndRun(callback, args);
      }
    };

    if (window.Vaadin.developmentMode === undefined) {
      window.Vaadin.developmentMode = isDevelopmentMode();
    }

    /* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */

    function maybeGatherAndSendStats() {
      /** vaadin-dev-mode:start
      (function () {
    'use strict';

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var getPolymerVersion = function getPolymerVersion() {
      return window.Polymer && window.Polymer.version;
    };

    var StatisticsGatherer = function () {
      function StatisticsGatherer(logger) {
        classCallCheck(this, StatisticsGatherer);

        this.now = new Date().getTime();
        this.logger = logger;
      }

      createClass(StatisticsGatherer, [{
        key: 'frameworkVersionDetectors',
        value: function frameworkVersionDetectors() {
          return {
            'Flow': function Flow() {
              if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
                var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {
                  return window.Vaadin.Flow.clients[key];
                }).filter(function (client) {
                  return client.getVersionInfo;
                }).map(function (client) {
                  return client.getVersionInfo().flow;
                });
                if (flowVersions.length > 0) {
                  return flowVersions[0];
                }
              }
            },
            'Vaadin Framework': function VaadinFramework() {
              if (window.vaadin && window.vaadin.clients) {
                var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {
                  return client.getVersionInfo;
                }).map(function (client) {
                  return client.getVersionInfo().vaadinVersion;
                });
                if (frameworkVersions.length > 0) {
                  return frameworkVersions[0];
                }
              }
            },
            'AngularJs': function AngularJs() {
              if (window.angular && window.angular.version && window.angular.version) {
                return window.angular.version.full;
              }
            },
            'Angular': function Angular() {
              if (window.ng) {
                var tags = document.querySelectorAll("[ng-version]");
                if (tags.length > 0) {
                  return tags[0].getAttribute("ng-version");
                }
                return "Unknown";
              }
            },
            'Backbone.js': function BackboneJs() {
              if (window.Backbone) {
                return window.Backbone.VERSION;
              }
            },
            'React': function React() {
              var reactSelector = '[data-reactroot], [data-reactid]';
              if (!!document.querySelector(reactSelector)) {
                // React does not publish the version by default
                return "unknown";
              }
            },
            'Ember': function Ember() {
              if (window.Em && window.Em.VERSION) {
                return window.Em.VERSION;
              } else if (window.Ember && window.Ember.VERSION) {
                return window.Ember.VERSION;
              }
            },
            'jQuery': function (_jQuery) {
              function jQuery() {
                return _jQuery.apply(this, arguments);
              }

              jQuery.toString = function () {
                return _jQuery.toString();
              };

              return jQuery;
            }(function () {
              if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {
                return jQuery.prototype.jquery;
              }
            }),
            'Polymer': function Polymer() {
              var version = getPolymerVersion();
              if (version) {
                return version;
              }
            },
            'Vue.js': function VueJs() {
              if (window.Vue) {
                return window.Vue.version;
              }
            }
          };
        }
      }, {
        key: 'getUsedVaadinElements',
        value: function getUsedVaadinElements(elements) {
          var version = getPolymerVersion();
          var elementClasses = void 0;
          if (version && version.indexOf('2') === 0) {
            // Polymer 2: components classes are stored in window.Vaadin
            elementClasses = Object.keys(window.Vaadin).map(function (c) {
              return window.Vaadin[c];
            }).filter(function (c) {
              return c.is;
            });
          } else {
            // Polymer 3: components classes are stored in window.Vaadin.registrations
            elementClasses = window.Vaadin.registrations || [];
          }
          elementClasses.forEach(function (klass) {
            var version = klass.version ? klass.version : "0.0.0";
            elements[klass.is] = { version: version };
          });
        }
      }, {
        key: 'getUsedVaadinThemes',
        value: function getUsedVaadinThemes(themes) {
          ['Lumo', 'Material'].forEach(function (themeName) {
            var theme;
            var version = getPolymerVersion();
            if (version && version.indexOf('2') === 0) {
              // Polymer 2: themes are stored in window.Vaadin
              theme = window.Vaadin[themeName];
            } else {
              // Polymer 3: themes are stored in custom element registry
              theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');
            }
            if (theme && theme.version) {
              themes[themeName] = { version: theme.version };
            }
          });
        }
      }, {
        key: 'getFrameworks',
        value: function getFrameworks(frameworks) {
          var detectors = this.frameworkVersionDetectors();
          Object.keys(detectors).forEach(function (framework) {
            var detector = detectors[framework];
            try {
              var version = detector();
              if (version) {
                frameworks[framework] = { "version": version };
              }
            } catch (e) {}
          });
        }
      }, {
        key: 'gather',
        value: function gather(storage) {
          var storedStats = storage.read();
          var gatheredStats = {};
          var types = ["elements", "frameworks", "themes"];

          types.forEach(function (type) {
            gatheredStats[type] = {};
            if (!storedStats[type]) {
              storedStats[type] = {};
            }
          });

          var previousStats = JSON.stringify(storedStats);

          this.getUsedVaadinElements(gatheredStats.elements);
          this.getFrameworks(gatheredStats.frameworks);
          this.getUsedVaadinThemes(gatheredStats.themes);

          var now = this.now;
          types.forEach(function (type) {
            var keys = Object.keys(gatheredStats[type]);
            keys.forEach(function (key) {
              if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {
                storedStats[type][key] = { "firstUsed": now };
              }
              // Discards any previously logged version numebr
              storedStats[type][key].version = gatheredStats[type][key].version;
              storedStats[type][key].lastUsed = now;
            });
          });

          var newStats = JSON.stringify(storedStats);
          storage.write(newStats);
          if (newStats != previousStats && Object.keys(storedStats).length > 0) {
            this.logger.debug("New stats: " + newStats);
          }
        }
      }]);
      return StatisticsGatherer;
    }();

    var StatisticsStorage = function () {
      function StatisticsStorage(key) {
        classCallCheck(this, StatisticsStorage);

        this.key = key;
      }

      createClass(StatisticsStorage, [{
        key: 'read',
        value: function read() {
          var localStorageStatsString = localStorage.getItem(this.key);
          try {
            return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');
          } catch (e) {
            return {};
          }
        }
      }, {
        key: 'write',
        value: function write(data) {
          localStorage.setItem(this.key, data);
        }
      }, {
        key: 'clear',
        value: function clear() {
          localStorage.removeItem(this.key);
        }
      }, {
        key: 'isEmpty',
        value: function isEmpty() {
          var storedStats = this.read();
          var empty = true;
          Object.keys(storedStats).forEach(function (key) {
            if (Object.keys(storedStats[key]).length > 0) {
              empty = false;
            }
          });

          return empty;
        }
      }]);
      return StatisticsStorage;
    }();

    var StatisticsSender = function () {
      function StatisticsSender(url, logger) {
        classCallCheck(this, StatisticsSender);

        this.url = url;
        this.logger = logger;
      }

      createClass(StatisticsSender, [{
        key: 'send',
        value: function send(data, errorHandler) {
          var logger = this.logger;

          if (navigator.onLine === false) {
            logger.debug("Offline, can't send");
            errorHandler();
            return;
          }
          logger.debug("Sending data to " + this.url);

          var req = new XMLHttpRequest();
          req.withCredentials = true;
          req.addEventListener("load", function () {
            // Stats sent, nothing more to do
            logger.debug("Response: " + req.responseText);
          });
          req.addEventListener("error", function () {
            logger.debug("Send failed");
            errorHandler();
          });
          req.addEventListener("abort", function () {
            logger.debug("Send aborted");
            errorHandler();
          });
          req.open("POST", this.url);
          req.setRequestHeader("Content-Type", "application/json");
          req.send(data);
        }
      }]);
      return StatisticsSender;
    }();

    var StatisticsLogger = function () {
      function StatisticsLogger(id) {
        classCallCheck(this, StatisticsLogger);

        this.id = id;
      }

      createClass(StatisticsLogger, [{
        key: '_isDebug',
        value: function _isDebug() {
          return localStorage.getItem("vaadin." + this.id + ".debug");
        }
      }, {
        key: 'debug',
        value: function debug(msg) {
          if (this._isDebug()) {
            console.info(this.id + ": " + msg);
          }
        }
      }]);
      return StatisticsLogger;
    }();

    var UsageStatistics = function () {
      function UsageStatistics() {
        classCallCheck(this, UsageStatistics);

        this.now = new Date();
        this.timeNow = this.now.getTime();
        this.gatherDelay = 10; // Delay between loading this file and gathering stats
        this.initialDelay = 24 * 60 * 60;

        this.logger = new StatisticsLogger("statistics");
        this.storage = new StatisticsStorage("vaadin.statistics.basket");
        this.gatherer = new StatisticsGatherer(this.logger);
        this.sender = new StatisticsSender("https://tools.vaadin.com/usage-stats/submit", this.logger);
      }

      createClass(UsageStatistics, [{
        key: 'maybeGatherAndSend',
        value: function maybeGatherAndSend() {
          var _this = this;

          if (localStorage.getItem(UsageStatistics.optOutKey)) {
            return;
          }
          this.gatherer.gather(this.storage);
          setTimeout(function () {
            _this.maybeSend();
          }, this.gatherDelay * 1000);
        }
      }, {
        key: 'lottery',
        value: function lottery() {
          return Math.random() <= 0.05;
        }
      }, {
        key: 'currentMonth',
        value: function currentMonth() {
          return this.now.getYear() * 12 + this.now.getMonth();
        }
      }, {
        key: 'maybeSend',
        value: function maybeSend() {
          var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));
          var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));

          if (!firstUse) {
            // Use a grace period to avoid interfering with tests, incognito mode etc
            firstUse = this.timeNow;
            localStorage.setItem(UsageStatistics.firstUseKey, firstUse);
          }

          if (this.timeNow < firstUse + this.initialDelay * 1000) {
            this.logger.debug("No statistics will be sent until the initial delay of " + this.initialDelay + "s has passed");
            return;
          }
          if (this.currentMonth() <= monthProcessed) {
            this.logger.debug("This month has already been processed");
            return;
          }
          localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());
          // Use random sampling
          if (this.lottery()) {
            this.logger.debug("Congratulations, we have a winner!");
          } else {
            this.logger.debug("Sorry, no stats from you this time");
            return;
          }

          this.send();
        }
      }, {
        key: 'send',
        value: function send() {
          // Ensure we have the latest data
          this.gatherer.gather(this.storage);

          // Read, send and clean up
          var data = this.storage.read();
          data["firstUse"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));
          data["usageStatisticsVersion"] = UsageStatistics.version;
          var info = 'This request contains usage statistics gathered from the application running in development mode. \n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n\n\n';
          var self = this;
          this.sender.send(info + JSON.stringify(data), function () {
            // Revert the 'month processed' flag
            localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);
          });
        }
      }], [{
        key: 'version',
        get: function get$1() {
          return '2.0.1';
        }
      }, {
        key: 'firstUseKey',
        get: function get$1() {
          return 'vaadin.statistics.firstuse';
        }
      }, {
        key: 'monthProcessedKey',
        get: function get$1() {
          return 'vaadin.statistics.monthProcessed';
        }
      }, {
        key: 'optOutKey',
        get: function get$1() {
          return 'vaadin.statistics.optout';
        }
      }]);
      return UsageStatistics;
    }();

    try {
      window.Vaadin = window.Vaadin || {};
      window.Vaadin.usageStatistics = window.Vaadin.usageStatistics || new UsageStatistics();
      window.Vaadin.usageStatistics.maybeGatherAndSend();
    } catch (e) {
      // Intentionally ignored as this is not a problem in the app being developed
    }

    }());

      vaadin-dev-mode:end **/
    }

    const usageStatistics = function() {
      if (typeof runIfDevelopmentMode === 'function') {
        return runIfDevelopmentMode(maybeGatherAndSendStats);
      }
    };

    if (!window.Vaadin) {
      window['Vaadin'] = {};
    }

    /**
     * Array of Vaadin custom element classes that have been finalized.
     */
    window['Vaadin'].registrations = window.Vaadin.registrations || [];

    // Use the hack to prevent polymer-modulizer from converting to exports
    window['Vaadin'].developmentModeCallback = window.Vaadin.developmentModeCallback || {};
    window['Vaadin'].developmentModeCallback['vaadin-usage-statistics'] = function() {
      if (usageStatistics) {
        usageStatistics();
      }
    };

    let statsJob;

    /**
     * @polymerMixin
     */
    const ElementMixin$1 = superClass => class VaadinElementMixin extends superClass {
      /** @protected */
      static _finalizeClass() {
        super._finalizeClass();

        // Registers a class prototype for telemetry purposes.
        if (this.is) {
          window.Vaadin.registrations.push(this);

          if (window.Vaadin.developmentModeCallback) {
            statsJob = Debouncer.debounce(statsJob,
              idlePeriod, () => {
                window.Vaadin.developmentModeCallback['vaadin-usage-statistics']();
              }
            );
            enqueueDebouncer(statsJob);
          }
        }
      }
      ready() {
        super.ready();
        if (document.doctype === null) {
          console.warn(
            'Vaadin components require the "standards mode" declaration. Please add <!DOCTYPE html> to the HTML document.'
          );
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-checkbox>` is a Web Component for customized checkboxes.
     *
     * ```html
     * <vaadin-checkbox>
     *   Make my profile visible
     * </vaadin-checkbox>
     * ```
     *
     * ### Styling
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name         | Description
     * ------------------|----------------
     * `checkbox`        | The checkbox element
     * `label`           | The label content element
     *
     * The following state attributes are available for styling:
     *
     * Attribute    | Description | Part name
     * -------------|-------------|--------------
     * `active`     | Set when the checkbox is pressed down, either with mouse, touch or the keyboard. | `:host`
     * `disabled`   | Set when the checkbox is disabled. | `:host`
     * `focus-ring` | Set when the checkbox is focused using the keyboard. | `:host`
     * `focused`    | Set when the checkbox is focused. | `:host`
     * `indeterminate` | Set when the checkbox is in indeterminate mode. | `:host`
     * `checked` | Set when the checkbox is checked. | `:host`
     * `empty` | Set when there is no label provided. | `label`
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.ElementMixin
     * @mixes Vaadin.ControlStateMixin
     * @mixes Vaadin.ThemableMixin
     * @mixes Polymer.GestureEventListeners
     * @demo demo/index.html
     */
    class CheckboxElement extends
      ElementMixin$1(
        ControlStateMixin(
          ThemableMixin(
            GestureEventListeners(PolymerElement)))) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }

      label {
        display: inline-flex;
        align-items: baseline;
        outline: none;
      }

      [part="checkbox"] {
        position: relative;
        display: inline-block;
        flex: none;
      }

      input[type="checkbox"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: inherit;
        margin: 0;
      }

      :host([disabled]) {
        -webkit-tap-highlight-color: transparent;
      }
    </style>

    <label>
      <span part="checkbox">
        <input type="checkbox" checked="{{checked::change}}" disabled\$="[[disabled]]" indeterminate="{{indeterminate::change}}" role="presentation" tabindex="-1">
      </span>

      <span part="label">
        <slot></slot>
      </span>
    </label>
`;
      }

      static get is() {
        return 'vaadin-checkbox';
      }

      static get version() {
        return '2.2.6';
      }

      static get properties() {
        return {
          /**
           * True if the checkbox is checked.
           */
          checked: {
            type: Boolean,
            value: false,
            notify: true,
            observer: '_checkedChanged',
            reflectToAttribute: true
          },

          /**
           * Indeterminate state of the checkbox when it's neither checked nor unchecked, but undetermined.
           * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes
           */
          indeterminate: {
            type: Boolean,
            notify: true,
            observer: '_indeterminateChanged',
            reflectToAttribute: true,
            value: false
          },

          /**
           * The value given to the data submitted with the checkbox's name to the server when the control is inside a form.
           */
          value: {
            type: String,
            value: 'on'
          },

          _nativeCheckbox: {
            type: Object
          }
        };
      }

      constructor() {
        super();
        /**
         * @type {string}
         * Name of the element.
         */
        this.name;
      }

      get name() {
        return this.checked ? this._storedName : '';
      }

      set name(name) {
        this._storedName = name;
      }

      ready() {
        super.ready();

        this.setAttribute('role', 'checkbox');

        this._nativeCheckbox = this.shadowRoot.querySelector('input[type="checkbox"]');

        this.addEventListener('click', this._handleClick.bind(this));

        this._addActiveListeners();

        const attrName = this.getAttribute('name');
        if (attrName) {
          this.name = attrName;
        }

        this.shadowRoot.querySelector('[part~="label"]').querySelector('slot')
          .addEventListener('slotchange', this._updateLabelAttribute.bind(this));

        this._updateLabelAttribute();
      }

      _updateLabelAttribute() {
        const label = this.shadowRoot.querySelector('[part~="label"]');
        const assignedNodes = label.firstElementChild.assignedNodes();
        if (this._isAssignedNodesEmpty(assignedNodes)) {
          label.setAttribute('empty', '');
        } else {
          label.removeAttribute('empty');
        }
      }

      _isAssignedNodesEmpty(nodes) {
        // The assigned nodes considered to be empty if there is no slotted content or only one empty text node
        return nodes.length === 0 ||
              (nodes.length == 1
              && nodes[0].nodeType == Node.TEXT_NODE
              && nodes[0].textContent.trim() === '');
      }

      _checkedChanged(checked) {
        if (this.indeterminate) {
          this.setAttribute('aria-checked', 'mixed');
        } else {
          this.setAttribute('aria-checked', checked);
        }
      }

      _indeterminateChanged(indeterminate) {
        if (indeterminate) {
          this.setAttribute('aria-checked', 'mixed');
        } else {
          this.setAttribute('aria-checked', this.checked);
        }
      }

      _addActiveListeners() {
        // DOWN
        this._addEventListenerToNode(this, 'down', (e) => {
          if (this.__interactionsAllowed(e)) {
            this.setAttribute('active', '');
          }
        });

        // UP
        this._addEventListenerToNode(this, 'up', () => this.removeAttribute('active'));

        // KEYDOWN
        this.addEventListener('keydown', e => {
          if (this.__interactionsAllowed(e) && e.keyCode === 32) {
            e.preventDefault();
            this.setAttribute('active', '');
          }
        });

        // KEYUP
        this.addEventListener('keyup', e => {
          if (this.__interactionsAllowed(e) && e.keyCode === 32) {
            e.preventDefault();
            this._toggleChecked();
            this.removeAttribute('active');

            if (this.indeterminate) {
              this.indeterminate = false;
            }
          }
        });
      }

      /** @protected */
      get focusElement() {
        return this.shadowRoot.querySelector('input');
      }

      /**
       * True if users' interactions (mouse or keyboard)
       * should toggle the checkbox
       */
      __interactionsAllowed(e) {
        if (this.disabled) {
          return false;
        }

        // https://github.com/vaadin/vaadin-checkbox/issues/63
        if (e.target.localName === 'a') {
          return false;
        }

        return true;
      }

      _handleClick(e) {
        if (this.__interactionsAllowed(e)) {
          if (!this.indeterminate) {
            if (e.composedPath()[0] !== this._nativeCheckbox) {
              e.preventDefault();
              this._toggleChecked();
            }
          } else {
            /*
             * Required for IE 11 and Edge.
             * See issue here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7344418/
             */
            this.indeterminate = false;
            e.preventDefault();
            this._toggleChecked();
          }
        }
      }

      _toggleChecked() {
        this.checked = !this.checked;
        this.dispatchEvent(new CustomEvent('change', {composed: true, bubbles: true}));
      }

      /**
       * Fired when the user commits a value change.
       *
       * @event change
       */
    }

    customElements.define(CheckboxElement.is, CheckboxElement);

    const $_documentContainer$7 = html$1`<dom-module id="lumo-grid" theme-for="vaadin-grid">
  <template>
    <style>
      :host {
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        line-height: var(--lumo-line-height-s);
        color: var(--lumo-body-text-color);
        background-color: var(--lumo-base-color);
        box-sizing: border-box;
        -webkit-text-size-adjust: 100%;
        -webkit-tap-highlight-color: transparent;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;

        /* For internal use only */
        --_lumo-grid-border-color: var(--lumo-contrast-20pct);
        --_lumo-grid-secondary-border-color: var(--lumo-contrast-10pct);
        --_lumo-grid-border-width: 1px;
        --_lumo-grid-selected-row-color: var(--lumo-primary-color-10pct);
      }

      /* No (outer) border */

      :host(:not([theme~="no-border"])) {
        border: var(--_lumo-grid-border-width) solid var(--_lumo-grid-border-color);
      }

      /* Cell styles */

      [part~="cell"] {
        min-height: var(--lumo-size-m);
        background-color: var(--lumo-base-color);
      }

      [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        cursor: default;
        padding: var(--lumo-space-xs) var(--lumo-space-m);
      }

      /* Apply row borders by default and introduce the "no-row-borders" variant */
      :host(:not([theme~="no-row-borders"])) [part~="cell"]:not([part~="details-cell"]) {
        border-top: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Hide first body row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        border-top: 0;
        min-height: calc(var(--lumo-size-m) - var(--_lumo-grid-border-width));
      }

      /* Focus-ring */

      [part~="cell"]:focus {
        outline: none;
      }

      :host([navigating]) [part~="cell"]:focus::before {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        pointer-events: none;
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      /* Headers and footers */

      [part~="header-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content),
      [part~="reorder-ghost"] {
        font-size: var(--lumo-font-size-s);
        font-weight: 500;
      }

      [part~="footer-cell"] ::slotted(vaadin-grid-cell-content) {
        font-weight: 400;
      }

      [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-xl);
      }

      /* Header borders */

      /* Hide first header row top border */
      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="header-cell"] {
        border-top: 0;
      }

      [part="row"]:last-child [part~="header-cell"] {
        border-bottom: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="top"]) [part="row"]:last-child [part~="header-cell"] {
        border-bottom-color: var(--_lumo-grid-border-color);
      }

      /* Footer borders */

      [part="row"]:first-child [part~="footer-cell"] {
        border-top: var(--_lumo-grid-border-width) solid transparent;
      }

      :host(:not([theme~="no-row-borders"])) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-secondary-border-color);
      }

      /* Overflow uses a stronger border color */
      :host([overflow~="bottom"]) [part="row"]:first-child [part~="footer-cell"] {
        border-top-color: var(--_lumo-grid-border-color);
      }

      /* Column reordering */

      :host([reordering]) [part~="cell"] {
        background: linear-gradient(var(--lumo-shade-20pct), var(--lumo-shade-20pct)) var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="allowed"] {
        background: var(--lumo-base-color);
      }

      :host([reordering]) [part~="cell"][reorder-status="dragging"] {
        background: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct)) var(--lumo-base-color);
      }

      [part~="reorder-ghost"] {
        opacity: 0.85;
        box-shadow: var(--lumo-box-shadow-s);
        /* TODO Use the same styles as for the cell element (reorder-ghost copies styles from the cell element) */
        padding: var(--lumo-space-s) var(--lumo-space-m) !important;
      }

      /* Column resizing */

      [part="resize-handle"] {
        width: 3px;
        background-color: var(--lumo-primary-color-50pct);
        opacity: 0;
        transition: opacity 0.2s;
      }

      :host(:not([reordering])) *:not([column-resizing]) [part~="cell"]:hover [part="resize-handle"],
      [part="resize-handle"]:active {
        opacity: 1;
        transition-delay: 0.15s;
      }

      /* Column borders */

      :host([theme~="column-borders"]) [part~="cell"]:not([last-column]):not([part~="details-cell"]) {
        border-right: var(--_lumo-grid-border-width) solid var(--_lumo-grid-secondary-border-color);
      }

      /* Frozen columns */

      [last-frozen] {
        border-right: var(--_lumo-grid-border-width) solid transparent;
        overflow: hidden;
      }

      :host([overflow~="left"]) [part~="cell"][last-frozen]:not([part~="details-cell"]) {
        border-right-color: var(--_lumo-grid-border-color);
      }

      /* Row stripes */

      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="body-cell"],
      :host([theme~="row-stripes"]) [part~="row"]:not([odd]) [part~="details-cell"] {
        background-image: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct));
        background-repeat: repeat-x;
      }

      /* Selected row */

      /* Raise the selected rows above unselected rows (so that box-shadow can cover unselected rows) */
      :host(:not([reordering])) [part~="row"][selected] {
        z-index: 1;
      }

      :host(:not([reordering])) [part~="row"][selected] [part~="body-cell"]:not([part~="details-cell"]) {
        background-image: linear-gradient(var(--_lumo-grid-selected-row-color), var(--_lumo-grid-selected-row-color));
        background-repeat: repeat;
      }

      /* Cover the border of an unselected row */
      :host(:not([theme~="no-row-borders"])) [part~="row"][selected] [part~="cell"]:not([part~="details-cell"]) {
        box-shadow: 0 var(--_lumo-grid-border-width) 0 0 var(--_lumo-grid-selected-row-color);
      }

      /* Compact */

      :host([theme~="compact"]) [part="row"]:only-child [part~="header-cell"] {
        min-height: var(--lumo-size-m);
      }

      :host([theme~="compact"]) [part~="cell"] {
        min-height: var(--lumo-size-s);
      }

      :host([theme~="compact"]) [part="row"][first] [part~="cell"]:not([part~="details-cell"]) {
        min-height: calc(var(--lumo-size-s) - var(--_lumo-grid-border-width));
      }

      :host([theme~="compact"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        padding: var(--lumo-space-xs) var(--lumo-space-s);
      }

      /* Wrap cell contents */

      :host([theme~="wrap-cell-content"]) [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        white-space: normal;
      }
    </style>
  </template>
</dom-module><dom-module theme-for="vaadin-checkbox" id="vaadin-grid-select-all-checkbox-lumo">
  <template>
    <style>
      :host(.vaadin-grid-select-all-checkbox) {
        font-size: var(--lumo-font-size-m);
      }
   </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$7.content);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /** @unrestricted */
    class StyleNode {
      constructor() {
        /** @type {number} */
        this['start'] = 0;
        /** @type {number} */
        this['end'] = 0;
        /** @type {StyleNode} */
        this['previous'] = null;
        /** @type {StyleNode} */
        this['parent'] = null;
        /** @type {Array<StyleNode>} */
        this['rules'] = null;
        /** @type {string} */
        this['parsedCssText'] = '';
        /** @type {string} */
        this['cssText'] = '';
        /** @type {boolean} */
        this['atRule'] = false;
        /** @type {number} */
        this['type'] = 0;
        /** @type {string} */
        this['keyframesName'] = '';
        /** @type {string} */
        this['selector'] = '';
        /** @type {string} */
        this['parsedSelector'] = '';
      }
    }

    // given a string of css, return a simple rule tree
    /**
     * @param {string} text
     * @return {StyleNode}
     */
    function parse(text) {
      text = clean(text);
      return parseCss(lex(text), text);
    }

    // remove stuff we don't care about that may hinder parsing
    /**
     * @param {string} cssText
     * @return {string}
     */
    function clean(cssText) {
      return cssText.replace(RX.comments, '').replace(RX.port, '');
    }

    // super simple {...} lexer that returns a node tree
    /**
     * @param {string} text
     * @return {StyleNode}
     */
    function lex(text) {
      let root = new StyleNode();
      root['start'] = 0;
      root['end'] = text.length;
      let n = root;
      for (let i = 0, l = text.length; i < l; i++) {
        if (text[i] === OPEN_BRACE) {
          if (!n['rules']) {
            n['rules'] = [];
          }
          let p = n;
          let previous = p['rules'][p['rules'].length - 1] || null;
          n = new StyleNode();
          n['start'] = i + 1;
          n['parent'] = p;
          n['previous'] = previous;
          p['rules'].push(n);
        } else if (text[i] === CLOSE_BRACE) {
          n['end'] = i + 1;
          n = n['parent'] || root;
        }
      }
      return root;
    }

    // add selectors/cssText to node tree
    /**
     * @param {StyleNode} node
     * @param {string} text
     * @return {StyleNode}
     */
    function parseCss(node, text) {
      let t = text.substring(node['start'], node['end'] - 1);
      node['parsedCssText'] = node['cssText'] = t.trim();
      if (node['parent']) {
        let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];
        t = text.substring(ss, node['start'] - 1);
        t = _expandUnicodeEscapes(t);
        t = t.replace(RX.multipleSpaces, ' ');
        // TODO(sorvell): ad hoc; make selector include only after last ;
        // helps with mixin syntax
        t = t.substring(t.lastIndexOf(';') + 1);
        let s = node['parsedSelector'] = node['selector'] = t.trim();
        node['atRule'] = (s.indexOf(AT_START) === 0);
        // note, support a subset of rule types...
        if (node['atRule']) {
          if (s.indexOf(MEDIA_START) === 0) {
            node['type'] = types.MEDIA_RULE;
          } else if (s.match(RX.keyframesRule)) {
            node['type'] = types.KEYFRAMES_RULE;
            node['keyframesName'] =
              node['selector'].split(RX.multipleSpaces).pop();
          }
        } else {
          if (s.indexOf(VAR_START) === 0) {
            node['type'] = types.MIXIN_RULE;
          } else {
            node['type'] = types.STYLE_RULE;
          }
        }
      }
      let r$ = node['rules'];
      if (r$) {
        for (let i = 0, l = r$.length, r;
          (i < l) && (r = r$[i]); i++) {
          parseCss(r, text);
        }
      }
      return node;
    }

    /**
     * conversion of sort unicode escapes with spaces like `\33 ` (and longer) into
     * expanded form that doesn't require trailing space `\000033`
     * @param {string} s
     * @return {string}
     */
    function _expandUnicodeEscapes(s) {
      return s.replace(/\\([0-9a-f]{1,6})\s/gi, function() {
        let code = arguments[1],
          repeat = 6 - code.length;
        while (repeat--) {
          code = '0' + code;
        }
        return '\\' + code;
      });
    }

    /**
     * stringify parsed css.
     * @param {StyleNode} node
     * @param {boolean=} preserveProperties
     * @param {string=} text
     * @return {string}
     */
    function stringify(node, preserveProperties, text = '') {
      // calc rule cssText
      let cssText = '';
      if (node['cssText'] || node['rules']) {
        let r$ = node['rules'];
        if (r$ && !_hasMixinRules(r$)) {
          for (let i = 0, l = r$.length, r;
            (i < l) && (r = r$[i]); i++) {
            cssText = stringify(r, preserveProperties, cssText);
          }
        } else {
          cssText = preserveProperties ? node['cssText'] :
            removeCustomProps(node['cssText']);
          cssText = cssText.trim();
          if (cssText) {
            cssText = '  ' + cssText + '\n';
          }
        }
      }
      // emit rule if there is cssText
      if (cssText) {
        if (node['selector']) {
          text += node['selector'] + ' ' + OPEN_BRACE + '\n';
        }
        text += cssText;
        if (node['selector']) {
          text += CLOSE_BRACE + '\n\n';
        }
      }
      return text;
    }

    /**
     * @param {Array<StyleNode>} rules
     * @return {boolean}
     */
    function _hasMixinRules(rules) {
      let r = rules[0];
      return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;
    }

    /**
     * @param {string} cssText
     * @return {string}
     */
    function removeCustomProps(cssText) {
      cssText = removeCustomPropAssignment(cssText);
      return removeCustomPropApply(cssText);
    }

    /**
     * @param {string} cssText
     * @return {string}
     */
    function removeCustomPropAssignment(cssText) {
      return cssText
        .replace(RX.customProp, '')
        .replace(RX.mixinProp, '');
    }

    /**
     * @param {string} cssText
     * @return {string}
     */
    function removeCustomPropApply(cssText) {
      return cssText
        .replace(RX.mixinApply, '')
        .replace(RX.varApply, '');
    }

    /** @enum {number} */
    const types = {
      STYLE_RULE: 1,
      KEYFRAMES_RULE: 7,
      MEDIA_RULE: 4,
      MIXIN_RULE: 1000
    };

    const OPEN_BRACE = '{';
    const CLOSE_BRACE = '}';

    // helper regexp's
    const RX = {
      comments: /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,
      port: /@import[^;]*;/gim,
      customProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,
      mixinProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,
      mixinApply: /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,
      varApply: /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,
      keyframesRule: /^@[^\s]*keyframes/,
      multipleSpaces: /\s+/g
    };

    const VAR_START = '--';
    const MEDIA_START = '@media';
    const AT_START = '@';

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /** @type {!Set<string>} */
    const styleTextSet = new Set();

    const scopingAttribute = 'shady-unscoped';

    /**
     * Add a specifically-marked style to the document directly, and only one copy of that style.
     *
     * @param {!HTMLStyleElement} style
     * @return {undefined}
     */
    function processUnscopedStyle(style) {
      const text = style.textContent;
      if (!styleTextSet.has(text)) {
        styleTextSet.add(text);
        const newStyle = style.cloneNode(true);
        document.head.appendChild(newStyle);
      }
    }

    /**
     * Check if a style is supposed to be unscoped
     * @param {!HTMLStyleElement} style
     * @return {boolean} true if the style has the unscoping attribute
     */
    function isUnscopedStyle(style) {
      return style.hasAttribute(scopingAttribute);
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @param {string|StyleNode} rules
     * @param {function(StyleNode)=} callback
     * @return {string}
     */
    function toCssText (rules, callback) {
      if (!rules) {
        return '';
      }
      if (typeof rules === 'string') {
        rules = parse(rules);
      }
      if (callback) {
        forEachRule(rules, callback);
      }
      return stringify(rules, nativeCssVariables);
    }

    /**
     * @param {HTMLStyleElement} style
     * @return {StyleNode}
     */
    function rulesForStyle(style) {
      if (!style['__cssRules'] && style.textContent) {
        style['__cssRules'] = parse(style.textContent);
      }
      return style['__cssRules'] || null;
    }

    /**
     * @param {StyleNode} node
     * @param {Function=} styleRuleCallback
     * @param {Function=} keyframesRuleCallback
     * @param {boolean=} onlyActiveRules
     */
    function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {
      if (!node) {
        return;
      }
      let skipRules = false;
      let type = node['type'];
      if (onlyActiveRules) {
        if (type === types.MEDIA_RULE) {
          let matchMedia = node['selector'].match(MEDIA_MATCH);
          if (matchMedia) {
            // if rule is a non matching @media rule, skip subrules
            if (!window.matchMedia(matchMedia[1]).matches) {
              skipRules = true;
            }
          }
        }
      }
      if (type === types.STYLE_RULE) {
        styleRuleCallback(node);
      } else if (keyframesRuleCallback &&
        type === types.KEYFRAMES_RULE) {
        keyframesRuleCallback(node);
      } else if (type === types.MIXIN_RULE) {
        skipRules = true;
      }
      let r$ = node['rules'];
      if (r$ && !skipRules) {
        for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {
          forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);
        }
      }
    }

    /**
     * Walk from text[start] matching parens and
     * returns position of the outer end paren
     * @param {string} text
     * @param {number} start
     * @return {number}
     */
    function findMatchingParen(text, start) {
      let level = 0;
      for (let i=start, l=text.length; i < l; i++) {
        if (text[i] === '(') {
          level++;
        } else if (text[i] === ')') {
          if (--level === 0) {
            return i;
          }
        }
      }
      return -1;
    }

    /**
     * @param {string} str
     * @param {function(string, string, string, string)} callback
     */
    function processVariableAndFallback(str, callback) {
      // find 'var('
      let start = str.indexOf('var(');
      if (start === -1) {
        // no var?, everything is prefix
        return callback(str, '', '', '');
      }
      //${prefix}var(${inner})${suffix}
      let end = findMatchingParen(str, start + 3);
      let inner = str.substring(start + 4, end);
      let prefix = str.substring(0, start);
      // suffix may have other variables
      let suffix = processVariableAndFallback(str.substring(end + 1), callback);
      let comma = inner.indexOf(',');
      // value and fallback args should be trimmed to match in property lookup
      if (comma === -1) {
        // variable, no fallback
        return callback(prefix, inner.trim(), '', suffix);
      }
      // var(${value},${fallback})
      let value = inner.substring(0, comma).trim();
      let fallback = inner.substring(comma + 1).trim();
      return callback(prefix, value, fallback, suffix);
    }

    /**
     * @type {function(*):*}
     */
    const wrap = window['ShadyDOM'] && window['ShadyDOM']['wrap'] || ((node) => node);

    /**
     * @param {Element | {is: string, extends: string}} element
     * @return {{is: string, typeExtension: string}}
     */
    function getIsExtends(element) {
      let localName = element['localName'];
      let is = '', typeExtension = '';
      /*
      NOTE: technically, this can be wrong for certain svg elements
      with `-` in the name like `<font-face>`
      */
      if (localName) {
        if (localName.indexOf('-') > -1) {
          is = localName;
        } else {
          typeExtension = localName;
          is = (element.getAttribute && element.getAttribute('is')) || '';
        }
      } else {
        is = /** @type {?} */(element).is;
        typeExtension = /** @type {?} */(element).extends;
      }
      return {is, typeExtension};
    }

    /**
     * @param {Element|DocumentFragment} element
     * @return {string}
     */
    function gatherStyleText(element) {
      /** @type {!Array<string>} */
      const styleTextParts = [];
      const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));
      for (let i = 0; i < styles.length; i++) {
        const style = styles[i];
        if (isUnscopedStyle(style)) {
          if (!nativeShadow) {
            processUnscopedStyle(style);
            style.parentNode.removeChild(style);
          }
        } else {
          styleTextParts.push(style.textContent);
          style.parentNode.removeChild(style);
        }
      }
      return styleTextParts.join('').trim();
    }

    const CSS_BUILD_ATTR = 'css-build';

    /**
     * Return the polymer-css-build "build type" applied to this element
     *
     * @param {!HTMLElement} element
     * @return {string} Can be "", "shady", or "shadow"
     */
    function getCssBuild(element) {
      if (cssBuild !== undefined) {
        return /** @type {string} */(cssBuild);
      }
      if (element.__cssBuild === undefined) {
        // try attribute first, as it is the common case
        const attrValue = element.getAttribute(CSS_BUILD_ATTR);
        if (attrValue) {
          element.__cssBuild = attrValue;
        } else {
          const buildComment = getBuildComment(element);
          if (buildComment !== '') {
            // remove build comment so it is not needlessly copied into every element instance
            removeBuildComment(element);
          }
          element.__cssBuild = buildComment;
        }
      }
      return element.__cssBuild || '';
    }

    /**
     * Check if the given element, either a <template> or <style>, has been processed
     * by polymer-css-build.
     *
     * If so, then we can make a number of optimizations:
     * - polymer-css-build will decompose mixins into individual CSS Custom Properties,
     * so the ApplyShim can be skipped entirely.
     * - Under native ShadowDOM, the style text can just be copied into each instance
     * without modification
     * - If the build is "shady" and ShadyDOM is in use, the styling does not need
     * scoping beyond the shimming of CSS Custom Properties
     *
     * @param {!HTMLElement} element
     * @return {boolean}
     */
    function elementHasBuiltCss(element) {
      return getCssBuild(element) !== '';
    }

    /**
     * For templates made with tagged template literals, polymer-css-build will
     * insert a comment of the form `<!--css-build:shadow-->`
     *
     * @param {!HTMLElement} element
     * @return {string}
     */
    function getBuildComment(element) {
      const buildComment = element.localName === 'template' ?
          /** @type {!HTMLTemplateElement} */ (element).content.firstChild :
          element.firstChild;
      if (buildComment instanceof Comment) {
        const commentParts = buildComment.textContent.trim().split(':');
        if (commentParts[0] === CSS_BUILD_ATTR) {
          return commentParts[1];
        }
      }
      return '';
    }

    /**
     * @param {!HTMLElement} element
     */
    function removeBuildComment(element) {
      const buildComment = element.localName === 'template' ?
          /** @type {!HTMLTemplateElement} */ (element).content.firstChild :
          element.firstChild;
      buildComment.parentNode.removeChild(buildComment);
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const APPLY_NAME_CLEAN = /;\s*/m;
    const INITIAL_INHERIT = /^\s*(initial)|(inherit)\s*$/;
    const IMPORTANT = /\s*!important/;

    // separator used between mixin-name and mixin-property-name when producing properties
    // NOTE: plain '-' may cause collisions in user styles
    const MIXIN_VAR_SEP = '_-_';

    // map of mixin to property names
    // --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}
    class MixinMap {
      constructor() {
        /** @type {!Object<string, !MixinMapEntry>} */
        this._map = {};
      }
      /**
       * @param {string} name
       * @param {!PropertyEntry} props
       */
      set(name, props) {
        name = name.trim();
        this._map[name] = {
          properties: props,
          dependants: {}
        };
      }
      /**
       * @param {string} name
       * @return {MixinMapEntry}
       */
      get(name) {
        name = name.trim();
        return this._map[name] || null;
      }
    }

    /**
     * Callback for when an element is marked invalid
     * @type {?function(string)}
     */
    let invalidCallback = null;

    /** @unrestricted */
    class ApplyShim {
      constructor() {
        /** @type {?string} */
        this._currentElement = null;
        /** @type {HTMLMetaElement} */
        this._measureElement = null;
        this._map = new MixinMap();
      }
      /**
       * return true if `cssText` contains a mixin definition or consumption
       * @param {string} cssText
       * @return {boolean}
       */
      detectMixin(cssText) {
        return detectMixin(cssText);
      }

      /**
       * Gather styles into one style for easier processing
       * @param {!HTMLTemplateElement} template
       * @return {HTMLStyleElement}
       */
      gatherStyles(template) {
        const styleText = gatherStyleText(template.content);
        if (styleText) {
          const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));
          style.textContent = styleText;
          template.content.insertBefore(style, template.content.firstChild);
          return style;
        }
        return null;
      }
      /**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       * @return {StyleNode}
       */
      transformTemplate(template, elementName) {
        if (template._gatheredStyle === undefined) {
          template._gatheredStyle = this.gatherStyles(template);
        }
        /** @type {HTMLStyleElement} */
        const style = template._gatheredStyle;
        return style ? this.transformStyle(style, elementName) : null;
      }
      /**
       * @param {!HTMLStyleElement} style
       * @param {string} elementName
       * @return {StyleNode}
       */
      transformStyle(style, elementName = '') {
        let ast = rulesForStyle(style);
        this.transformRules(ast, elementName);
        style.textContent = toCssText(ast);
        return ast;
      }
      /**
       * @param {!HTMLStyleElement} style
       * @return {StyleNode}
       */
      transformCustomStyle(style) {
        let ast = rulesForStyle(style);
        forEachRule(ast, (rule) => {
          if (rule['selector'] === ':root') {
            rule['selector'] = 'html';
          }
          this.transformRule(rule);
        });
        style.textContent = toCssText(ast);
        return ast;
      }
      /**
       * @param {StyleNode} rules
       * @param {string} elementName
       */
      transformRules(rules, elementName) {
        this._currentElement = elementName;
        forEachRule(rules, (r) => {
          this.transformRule(r);
        });
        this._currentElement = null;
      }
      /**
       * @param {!StyleNode} rule
       */
      transformRule(rule) {
        rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);
        // :root was only used for variable assignment in property shim,
        // but generates invalid selectors with real properties.
        // replace with `:host > *`, which serves the same effect
        if (rule['selector'] === ':root') {
          rule['selector'] = ':host > *';
        }
      }
      /**
       * @param {string} cssText
       * @param {!StyleNode} rule
       * @return {string}
       */
      transformCssText(cssText, rule) {
        // produce variables
        cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>
          this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));
        // consume mixins
        return this._consumeCssProperties(cssText, rule);
      }
      /**
       * @param {string} property
       * @return {string}
       */
      _getInitialValueForProperty(property) {
        if (!this._measureElement) {
          this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));
          this._measureElement.setAttribute('apply-shim-measure', '');
          this._measureElement.style.all = 'initial';
          document.head.appendChild(this._measureElement);
        }
        return window.getComputedStyle(this._measureElement).getPropertyValue(property);
      }
      /**
       * Walk over all rules before this rule to find fallbacks for mixins
       *
       * @param {!StyleNode} startRule
       * @return {!Object}
       */
      _fallbacksFromPreviousRules(startRule) {
        // find the "top" rule
        let topRule = startRule;
        while (topRule['parent']) {
          topRule = topRule['parent'];
        }
        const fallbacks = {};
        let seenStartRule = false;
        forEachRule(topRule, (r) => {
          // stop when we hit the input rule
          seenStartRule = seenStartRule || r === startRule;
          if (seenStartRule) {
            return;
          }
          // NOTE: Only matching selectors are "safe" for this fallback processing
          // It would be prohibitive to run `matchesSelector()` on each selector,
          // so we cheat and only check if the same selector string is used, which
          // guarantees things like specificity matching
          if (r['selector'] === startRule['selector']) {
            Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));
          }
        });
        return fallbacks;
      }
      /**
       * replace mixin consumption with variable consumption
       * @param {string} text
       * @param {!StyleNode=} rule
       * @return {string}
       */
      _consumeCssProperties(text, rule) {
        /** @type {Array} */
        let m = null;
        // loop over text until all mixins with defintions have been applied
        while((m = MIXIN_MATCH.exec(text))) {
          let matchText = m[0];
          let mixinName = m[1];
          let idx = m.index;
          // collect properties before apply to be "defaults" if mixin might override them
          // match includes a "prefix", so find the start and end positions of @apply
          let applyPos = idx + matchText.indexOf('@apply');
          let afterApplyPos = idx + matchText.length;
          // find props defined before this @apply
          let textBeforeApply = text.slice(0, applyPos);
          let textAfterApply = text.slice(afterApplyPos);
          let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};
          Object.assign(defaults, this._cssTextToMap(textBeforeApply));
          let replacement = this._atApplyToCssProperties(mixinName, defaults);
          // use regex match position to replace mixin, keep linear processing time
          text = `${textBeforeApply}${replacement}${textAfterApply}`;
          // move regex search to _after_ replacement
          MIXIN_MATCH.lastIndex = idx + replacement.length;
        }
        return text;
      }
      /**
       * produce variable consumption at the site of mixin consumption
       * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))
       * Example:
       *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)
       *
       * @param {string} mixinName
       * @param {Object} fallbacks
       * @return {string}
       */
      _atApplyToCssProperties(mixinName, fallbacks) {
        mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');
        let vars = [];
        let mixinEntry = this._map.get(mixinName);
        // if we depend on a mixin before it is created
        // make a sentinel entry in the map to add this element as a dependency for when it is defined.
        if (!mixinEntry) {
          this._map.set(mixinName, {});
          mixinEntry = this._map.get(mixinName);
        }
        if (mixinEntry) {
          if (this._currentElement) {
            mixinEntry.dependants[this._currentElement] = true;
          }
          let p, parts, f;
          const properties = mixinEntry.properties;
          for (p in properties) {
            f = fallbacks && fallbacks[p];
            parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];
            if (f) {
              parts.push(',', f.replace(IMPORTANT, ''));
            }
            parts.push(')');
            if (IMPORTANT.test(properties[p])) {
              parts.push(' !important');
            }
            vars.push(parts.join(''));
          }
        }
        return vars.join('; ');
      }

      /**
       * @param {string} property
       * @param {string} value
       * @return {string}
       */
      _replaceInitialOrInherit(property, value) {
        let match = INITIAL_INHERIT.exec(value);
        if (match) {
          if (match[1]) {
            // initial
            // replace `initial` with the concrete initial value for this property
            value = this._getInitialValueForProperty(property);
          } else {
            // inherit
            // with this purposfully illegal value, the variable will be invalid at
            // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)
            // and for inheriting values, will behave similarly
            // we cannot support the same behavior for non inheriting values like 'border'
            value = 'apply-shim-inherit';
          }
        }
        return value;
      }

      /**
       * "parse" a mixin definition into a map of properties and values
       * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')
       * @param {string} text
       * @param {boolean=} replaceInitialOrInherit
       * @return {!Object<string, string>}
       */
      _cssTextToMap(text, replaceInitialOrInherit = false) {
        let props = text.split(';');
        let property, value;
        let out = {};
        for (let i = 0, p, sp; i < props.length; i++) {
          p = props[i];
          if (p) {
            sp = p.split(':');
            // ignore lines that aren't definitions like @media
            if (sp.length > 1) {
              property = sp[0].trim();
              // some properties may have ':' in the value, like data urls
              value = sp.slice(1).join(':');
              if (replaceInitialOrInherit) {
                value = this._replaceInitialOrInherit(property, value);
              }
              out[property] = value;
            }
          }
        }
        return out;
      }

      /**
       * @param {MixinMapEntry} mixinEntry
       */
      _invalidateMixinEntry(mixinEntry) {
        if (!invalidCallback) {
          return;
        }
        for (let elementName in mixinEntry.dependants) {
          if (elementName !== this._currentElement) {
            invalidCallback(elementName);
          }
        }
      }

      /**
       * @param {string} matchText
       * @param {string} propertyName
       * @param {?string} valueProperty
       * @param {?string} valueMixin
       * @param {!StyleNode} rule
       * @return {string}
       */
      _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {
        // handle case where property value is a mixin
        if (valueProperty) {
          // form: --mixin2: var(--mixin1), where --mixin1 is in the map
          processVariableAndFallback(valueProperty, (prefix, value) => {
            if (value && this._map.get(value)) {
              valueMixin = `@apply ${value};`;
            }
          });
        }
        if (!valueMixin) {
          return matchText;
        }
        let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);
        let prefix = matchText.slice(0, matchText.indexOf('--'));
        // `initial` and `inherit` as properties in a map should be replaced because
        // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,
        // and would set the variable value, rather than carry the keyword to the `var()` usage.
        let mixinValues = this._cssTextToMap(mixinAsProperties, true);
        let combinedProps = mixinValues;
        let mixinEntry = this._map.get(propertyName);
        let oldProps = mixinEntry && mixinEntry.properties;
        if (oldProps) {
          // NOTE: since we use mixin, the map of properties is updated here
          // and this is what we want.
          combinedProps = Object.assign(Object.create(oldProps), mixinValues);
        } else {
          this._map.set(propertyName, combinedProps);
        }
        let out = [];
        let p, v;
        // set variables defined by current mixin
        let needToInvalidate = false;
        for (p in combinedProps) {
          v = mixinValues[p];
          // if property not defined by current mixin, set initial
          if (v === undefined) {
            v = 'initial';
          }
          if (oldProps && !(p in oldProps)) {
            needToInvalidate = true;
          }
          out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);
        }
        if (needToInvalidate) {
          this._invalidateMixinEntry(mixinEntry);
        }
        if (mixinEntry) {
          mixinEntry.properties = combinedProps;
        }
        // because the mixinMap is global, the mixin might conflict with
        // a different scope's simple variable definition:
        // Example:
        // some style somewhere:
        // --mixin1:{ ... }
        // --mixin2: var(--mixin1);
        // some other element:
        // --mixin1: 10px solid red;
        // --foo: var(--mixin1);
        // In this case, we leave the original variable definition in place.
        if (valueProperty) {
          prefix = `${matchText};${prefix}`;
        }
        return `${prefix}${out.join('; ')};`;
      }
    }

    /* exports */
    /* eslint-disable no-self-assign */
    ApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;
    ApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;
    ApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;
    ApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;
    ApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;
    ApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;
    ApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;
    /* eslint-enable no-self-assign */
    Object.defineProperty(ApplyShim.prototype, 'invalidCallback', {
      /** @return {?function(string)} */
      get() {
        return invalidCallback;
      },
      /** @param {?function(string)} cb */
      set(cb) {
        invalidCallback = cb;
      }
    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @const {!Object<string, !HTMLTemplateElement>}
     */
    const templateMap = {};

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /*
     * Utilities for handling invalidating apply-shim mixins for a given template.
     *
     * The invalidation strategy involves keeping track of the "current" version of a template's mixins, and updating that count when a mixin is invalidated.
     * The template
     */

    /** @const {string} */
    const CURRENT_VERSION = '_applyShimCurrentVersion';

    /** @const {string} */
    const NEXT_VERSION = '_applyShimNextVersion';

    /** @const {string} */
    const VALIDATING_VERSION = '_applyShimValidatingVersion';

    /**
     * @const {Promise<void>}
     */
    const promise = Promise.resolve();

    /**
     * @param {string} elementName
     */
    function invalidate(elementName){
      let template = templateMap[elementName];
      if (template) {
        invalidateTemplate(template);
      }
    }

    /**
     * This function can be called multiple times to mark a template invalid
     * and signal that the style inside must be regenerated.
     *
     * Use `startValidatingTemplate` to begin an asynchronous validation cycle.
     * During that cycle, call `templateIsValidating` to see if the template must
     * be revalidated
     * @param {HTMLTemplateElement} template
     */
    function invalidateTemplate(template) {
      // default the current version to 0
      template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;
      // ensure the "validating for" flag exists
      template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;
      // increment the next version
      template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;
    }

    /**
     * @param {HTMLTemplateElement} template
     * @return {boolean}
     */
    function templateIsValid(template) {
      return template[CURRENT_VERSION] === template[NEXT_VERSION];
    }

    /**
     * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.
     * If false, the template must be validated.
     * @param {HTMLTemplateElement} template
     * @return {boolean}
     */
    function templateIsValidating(template) {
      return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];
    }

    /**
     * Begin an asynchronous invalidation cycle.
     * This should be called after every validation of a template
     *
     * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`
     * @param {HTMLTemplateElement} template
     */
    function startValidatingTemplate(template) {
      // remember that the current "next version" is the reason for this validation cycle
      template[VALIDATING_VERSION] = template[NEXT_VERSION];
      // however, there only needs to be one async task to clear the counters
      if (!template._validating) {
        template._validating = true;
        promise.then(function() {
          // sync the current version to let future invalidations cause a refresh cycle
          template[CURRENT_VERSION] = template[NEXT_VERSION];
          template._validating = false;
        });
      }
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /** @const {ApplyShim} */
    const applyShim = new ApplyShim();

    class ApplyShimInterface {
      constructor() {
        /** @type {?CustomStyleInterfaceInterface} */
        this.customStyleInterface = null;
        applyShim['invalidCallback'] = invalidate;
      }
      ensure() {
        if (this.customStyleInterface) {
          return;
        }
        if (window.ShadyCSS.CustomStyleInterface) {
          this.customStyleInterface =
              /** @type {!CustomStyleInterfaceInterface} */ (
                  window.ShadyCSS.CustomStyleInterface);
          this.customStyleInterface['transformCallback'] = (style) => {
            applyShim.transformCustomStyle(style);
          };
          this.customStyleInterface['validateCallback'] = () => {
            requestAnimationFrame(() => {
              if (this.customStyleInterface['enqueued']) {
                this.flushCustomStyles();
              }
            });
          };
        }
      }
      /**
       * @param {!HTMLTemplateElement} template
       * @param {string} elementName
       */
      prepareTemplate(template, elementName) {
        this.ensure();
        if (elementHasBuiltCss(template)) {
          return;
        }
        templateMap[elementName] = template;
        let ast = applyShim.transformTemplate(template, elementName);
        // save original style ast to use for revalidating instances
        template['_styleAst'] = ast;
      }
      flushCustomStyles() {
        this.ensure();
        if (!this.customStyleInterface) {
          return;
        }
        let styles = this.customStyleInterface['processStyles']();
        if (!this.customStyleInterface['enqueued']) {
          return;
        }
        for (let i = 0; i < styles.length; i++ ) {
          let cs = styles[i];
          let style = this.customStyleInterface['getStyleForCustomStyle'](cs);
          if (style) {
            applyShim.transformCustomStyle(style);
          }
        }
        this.customStyleInterface['enqueued'] = false;
      }
      /**
       * @param {HTMLElement} element
       * @param {Object=} properties
       */
      styleSubtree(element, properties) {
        this.ensure();
        if (properties) {
          updateNativeProperties(element, properties);
        }
        if (element.shadowRoot) {
          this.styleElement(element);
          let shadowChildren =
              /** @type {!ParentNode} */ (element.shadowRoot).children ||
              element.shadowRoot.childNodes;
          for (let i = 0; i < shadowChildren.length; i++) {
            this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));
          }
        } else {
          let children = element.children || element.childNodes;
          for (let i = 0; i < children.length; i++) {
            this.styleSubtree(/** @type {HTMLElement} */(children[i]));
          }
        }
      }
      /**
       * @param {HTMLElement} element
       */
      styleElement(element) {
        this.ensure();
        let {is} = getIsExtends(element);
        let template = templateMap[is];
        if (template && elementHasBuiltCss(template)) {
          return;
        }
        if (template && !templateIsValid(template)) {
          // only revalidate template once
          if (!templateIsValidating(template)) {
            this.prepareTemplate(template, is);
            startValidatingTemplate(template);
          }
          // update this element instance
          let root = element.shadowRoot;
          if (root) {
            let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));
            if (style) {
              // reuse the template's style ast, it has all the original css text
              style['__cssRules'] = template['_styleAst'];
              style.textContent = toCssText(template['_styleAst']);
            }
          }
        }
      }
      /**
       * @param {Object=} properties
       */
      styleDocument(properties) {
        this.ensure();
        this.styleSubtree(document.body, properties);
      }
    }

    if (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {
      const applyShimInterface = new ApplyShimInterface();
      let CustomStyleInterface$$1 = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;

      /** @suppress {duplicate} */
      window.ShadyCSS = {
        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         * @param {string=} elementExtends
         */
        prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars
          applyShimInterface.flushCustomStyles();
          applyShimInterface.prepareTemplate(template, elementName);
        },

        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         * @param {string=} elementExtends
         */
        prepareTemplateStyles(template, elementName, elementExtends) {
          window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);
        },

        /**
         * @param {!HTMLTemplateElement} template
         * @param {string} elementName
         */
        prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars

        /**
         * @param {!HTMLElement} element
         * @param {Object=} properties
         */
        styleSubtree(element, properties) {
          applyShimInterface.flushCustomStyles();
          applyShimInterface.styleSubtree(element, properties);
        },

        /**
         * @param {!HTMLElement} element
         */
        styleElement(element) {
          applyShimInterface.flushCustomStyles();
          applyShimInterface.styleElement(element);
        },

        /**
         * @param {Object=} properties
         */
        styleDocument(properties) {
          applyShimInterface.flushCustomStyles();
          applyShimInterface.styleDocument(properties);
        },

        /**
         * @param {Element} element
         * @param {string} property
         * @return {string}
         */
        getComputedStyleValue(element, property) {
          return getComputedStyleValue(element, property);
        },

        flushCustomStyles() {
          applyShimInterface.flushCustomStyles();
        },

        nativeCss: nativeCssVariables,
        nativeShadow: nativeShadow,
        cssBuild: cssBuild
      };

      if (CustomStyleInterface$$1) {
        window.ShadyCSS.CustomStyleInterface = CustomStyleInterface$$1;
      }
    }

    window.ShadyCSS.ApplyShim = applyShim;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    const HOST_DIR = /:host\(:dir\((ltr|rtl)\)\)/g;
    const HOST_DIR_REPLACMENT = ':host([dir="$1"])';

    const EL_DIR = /([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g;
    const EL_DIR_REPLACMENT = ':host([dir="$2"]) $1';

    /**
     * @type {!Array<!Polymer_DirMixin>}
     */
    const DIR_INSTANCES = [];

    /** @type {MutationObserver} */
    let observer = null;

    let DOCUMENT_DIR = '';

    function getRTL() {
      DOCUMENT_DIR = document.documentElement.getAttribute('dir');
    }

    /**
     * @param {!Polymer_DirMixin} instance Instance to set RTL status on
     */
    function setRTL(instance) {
      if (!instance.__autoDirOptOut) {
        const el = /** @type {!HTMLElement} */(instance);
        el.setAttribute('dir', DOCUMENT_DIR);
      }
    }

    function updateDirection() {
      getRTL();
      DOCUMENT_DIR = document.documentElement.getAttribute('dir');
      for (let i = 0; i < DIR_INSTANCES.length; i++) {
        setRTL(DIR_INSTANCES[i]);
      }
    }

    function takeRecords() {
      if (observer && observer.takeRecords().length) {
        updateDirection();
      }
    }

    /**
     * Element class mixin that allows elements to use the `:dir` CSS Selector to
     * have text direction specific styling.
     *
     * With this mixin, any stylesheet provided in the template will transform
     * `:dir` into `:host([dir])` and sync direction with the page via the
     * element's `dir` attribute.
     *
     * Elements can opt out of the global page text direction by setting the `dir`
     * attribute directly in `ready()` or in HTML.
     *
     * Caveats:
     * - Applications must set `<html dir="ltr">` or `<html dir="rtl">` to sync
     *   direction
     * - Automatic left-to-right or right-to-left styling is sync'd with the
     *   `<html>` element only.
     * - Changing `dir` at runtime is supported.
     * - Opting out of the global direction styling is permanent
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin PropertyAccessors
     */
    const DirMixin = dedupingMixin((base) => {

      if (!observer) {
        getRTL();
        observer = new MutationObserver(updateDirection);
        observer.observe(document.documentElement, {attributes: true, attributeFilter: ['dir']});
      }

      /**
       * @constructor
       * @extends {base}
       * @implements {Polymer_PropertyAccessors}
       * @private
       */
      const elementBase = PropertyAccessors(base);

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_DirMixin}
       */
      class Dir extends elementBase {

        /**
         * @override
         * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
         */
        static _processStyleText(cssText, baseURI) {
          cssText = super._processStyleText(cssText, baseURI);
          cssText = this._replaceDirInCssText(cssText);
          return cssText;
        }

        /**
         * Replace `:dir` in the given CSS text
         *
         * @param {string} text CSS text to replace DIR
         * @return {string} Modified CSS
         */
        static _replaceDirInCssText(text) {
          let replacedText = text;
          replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);
          replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);
          if (text !== replacedText) {
            this.__activateDir = true;
          }
          return replacedText;
        }

        constructor() {
          super();
          /** @type {boolean} */
          this.__autoDirOptOut = false;
        }

        /**
         * @suppress {invalidCasts} Closure doesn't understand that `this` is an HTMLElement
         * @return {void}
         */
        ready() {
          super.ready();
          this.__autoDirOptOut = /** @type {!HTMLElement} */(this).hasAttribute('dir');
        }

        /**
         * @suppress {missingProperties} If it exists on elementBase, it can be super'd
         * @return {void}
         */
        connectedCallback() {
          if (elementBase.prototype.connectedCallback) {
            super.connectedCallback();
          }
          if (this.constructor.__activateDir) {
            takeRecords();
            DIR_INSTANCES.push(this);
            setRTL(this);
          }
        }

        /**
         * @suppress {missingProperties} If it exists on elementBase, it can be super'd
         * @return {void}
         */
        disconnectedCallback() {
          if (elementBase.prototype.disconnectedCallback) {
            super.disconnectedCallback();
          }
          if (this.constructor.__activateDir) {
            const idx = DIR_INSTANCES.indexOf(this);
            if (idx > -1) {
              DIR_INSTANCES.splice(idx, 1);
            }
          }
        }
      }

      Dir.__activateDir = false;

      return Dir;
    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let scheduled = false;
    let beforeRenderQueue = [];
    let afterRenderQueue = [];

    function schedule() {
      scheduled = true;
      // before next render
      requestAnimationFrame(function() {
        scheduled = false;
        flushQueue(beforeRenderQueue);
        // after the render
        setTimeout(function() {
          runQueue(afterRenderQueue);
        });
      });
    }

    function flushQueue(queue) {
      while (queue.length) {
        callMethod(queue.shift());
      }
    }

    function runQueue(queue) {
      for (let i=0, l=queue.length; i < l; i++) {
        callMethod(queue.shift());
      }
    }

    function callMethod(info) {
      const context = info[0];
      const callback = info[1];
      const args = info[2];
      try {
        callback.apply(context, args);
      } catch(e) {
        setTimeout(() => {
          throw e;
        });
      }
    }


    /**
     * Enqueues a callback which will be run before the next render, at
     * `requestAnimationFrame` timing.
     *
     * This method is useful for enqueuing work that requires DOM measurement,
     * since measurement may not be reliable in custom element callbacks before
     * the first render, as well as for batching measurement tasks in general.
     *
     * Tasks in this queue may be flushed by calling `flush()`.
     *
     * @param {*} context Context object the callback function will be bound to
     * @param {function(...*):void} callback Callback function
     * @param {!Array=} args An array of arguments to call the callback function with
     * @return {void}
     */
    function beforeNextRender(context, callback, args) {
      if (!scheduled) {
        schedule();
      }
      beforeRenderQueue.push([context, callback, args]);
    }

    /**
     * Enqueues a callback which will be run after the next render, equivalent
     * to one task (`setTimeout`) after the next `requestAnimationFrame`.
     *
     * This method is useful for tuning the first-render performance of an
     * element or application by deferring non-critical work until after the
     * first paint.  Typical non-render-critical work may include adding UI
     * event listeners and aria attributes.
     *
     * @param {*} context Context object the callback function will be bound to
     * @param {function(...*):void} callback Callback function
     * @param {!Array=} args An array of arguments to call the callback function with
     * @return {void}
     */
    function afterNextRender(context, callback, args) {
      if (!scheduled) {
        schedule();
      }
      afterRenderQueue.push([context, callback, args]);
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    function resolve() {
      document.body.removeAttribute('unresolved');
    }

    if (document.readyState === 'interactive' || document.readyState === 'complete') {
      resolve();
    } else {
      window.addEventListener('DOMContentLoaded', resolve);
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    function newSplice(index, removed, addedCount) {
      return {
        index: index,
        removed: removed,
        addedCount: addedCount
      };
    }

    const EDIT_LEAVE = 0;
    const EDIT_UPDATE = 1;
    const EDIT_ADD = 2;
    const EDIT_DELETE = 3;

    // Note: This function is *based* on the computation of the Levenshtein
    // "edit" distance. The one change is that "updates" are treated as two
    // edits - not one. With Array splices, an update is really a delete
    // followed by an add. By retaining this, we optimize for "keeping" the
    // maximum array items in the original array. For example:
    //
    //   'xxxx123' -> '123yyyy'
    //
    // With 1-edit updates, the shortest path would be just to update all seven
    // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
    // leaves the substring '123' intact.
    function calcEditDistances(current, currentStart, currentEnd,
                                old, oldStart, oldEnd) {
      // "Deletion" columns
      let rowCount = oldEnd - oldStart + 1;
      let columnCount = currentEnd - currentStart + 1;
      let distances = new Array(rowCount);

      // "Addition" rows. Initialize null column.
      for (let i = 0; i < rowCount; i++) {
        distances[i] = new Array(columnCount);
        distances[i][0] = i;
      }

      // Initialize null row
      for (let j = 0; j < columnCount; j++)
        distances[0][j] = j;

      for (let i = 1; i < rowCount; i++) {
        for (let j = 1; j < columnCount; j++) {
          if (equals$1(current[currentStart + j - 1], old[oldStart + i - 1]))
            distances[i][j] = distances[i - 1][j - 1];
          else {
            let north = distances[i - 1][j] + 1;
            let west = distances[i][j - 1] + 1;
            distances[i][j] = north < west ? north : west;
          }
        }
      }

      return distances;
    }

    // This starts at the final weight, and walks "backward" by finding
    // the minimum previous weight recursively until the origin of the weight
    // matrix.
    function spliceOperationsFromEditDistances(distances) {
      let i = distances.length - 1;
      let j = distances[0].length - 1;
      let current = distances[i][j];
      let edits = [];
      while (i > 0 || j > 0) {
        if (i == 0) {
          edits.push(EDIT_ADD);
          j--;
          continue;
        }
        if (j == 0) {
          edits.push(EDIT_DELETE);
          i--;
          continue;
        }
        let northWest = distances[i - 1][j - 1];
        let west = distances[i - 1][j];
        let north = distances[i][j - 1];

        let min;
        if (west < north)
          min = west < northWest ? west : northWest;
        else
          min = north < northWest ? north : northWest;

        if (min == northWest) {
          if (northWest == current) {
            edits.push(EDIT_LEAVE);
          } else {
            edits.push(EDIT_UPDATE);
            current = northWest;
          }
          i--;
          j--;
        } else if (min == west) {
          edits.push(EDIT_DELETE);
          i--;
          current = west;
        } else {
          edits.push(EDIT_ADD);
          j--;
          current = north;
        }
      }

      edits.reverse();
      return edits;
    }

    /**
     * Splice Projection functions:
     *
     * A splice map is a representation of how a previous array of items
     * was transformed into a new array of items. Conceptually it is a list of
     * tuples of
     *
     *   <index, removed, addedCount>
     *
     * which are kept in ascending index order of. The tuple represents that at
     * the |index|, |removed| sequence of items were removed, and counting forward
     * from |index|, |addedCount| items were added.
     */

    /**
     * Lacking individual splice mutation information, the minimal set of
     * splices can be synthesized given the previous state and final state of an
     * array. The basic approach is to calculate the edit distance matrix and
     * choose the shortest path through it.
     *
     * Complexity: O(l * p)
     *   l: The length of the current array
     *   p: The length of the old array
     *
     * @param {!Array} current The current "changed" array for which to
     * calculate splices.
     * @param {number} currentStart Starting index in the `current` array for
     * which splices are calculated.
     * @param {number} currentEnd Ending index in the `current` array for
     * which splices are calculated.
     * @param {!Array} old The original "unchanged" array to compare `current`
     * against to determine splices.
     * @param {number} oldStart Starting index in the `old` array for
     * which splices are calculated.
     * @param {number} oldEnd Ending index in the `old` array for
     * which splices are calculated.
     * @return {!Array} Returns an array of splice record objects. Each of these
     * contains: `index` the location where the splice occurred; `removed`
     * the array of removed items from this location; `addedCount` the number
     * of items added at this location.
     */
    function calcSplices(current, currentStart, currentEnd,
                          old, oldStart, oldEnd) {
      let prefixCount = 0;
      let suffixCount = 0;
      let splice;

      let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
      if (currentStart == 0 && oldStart == 0)
        prefixCount = sharedPrefix(current, old, minLength);

      if (currentEnd == current.length && oldEnd == old.length)
        suffixCount = sharedSuffix(current, old, minLength - prefixCount);

      currentStart += prefixCount;
      oldStart += prefixCount;
      currentEnd -= suffixCount;
      oldEnd -= suffixCount;

      if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)
        return [];

      if (currentStart == currentEnd) {
        splice = newSplice(currentStart, [], 0);
        while (oldStart < oldEnd)
          splice.removed.push(old[oldStart++]);

        return [ splice ];
      } else if (oldStart == oldEnd)
        return [ newSplice(currentStart, [], currentEnd - currentStart) ];

      let ops = spliceOperationsFromEditDistances(
          calcEditDistances(current, currentStart, currentEnd,
                                 old, oldStart, oldEnd));

      splice = undefined;
      let splices = [];
      let index = currentStart;
      let oldIndex = oldStart;
      for (let i = 0; i < ops.length; i++) {
        switch(ops[i]) {
          case EDIT_LEAVE:
            if (splice) {
              splices.push(splice);
              splice = undefined;
            }

            index++;
            oldIndex++;
            break;
          case EDIT_UPDATE:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.addedCount++;
            index++;

            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
          case EDIT_ADD:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.addedCount++;
            index++;
            break;
          case EDIT_DELETE:
            if (!splice)
              splice = newSplice(index, [], 0);

            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
        }
      }

      if (splice) {
        splices.push(splice);
      }
      return splices;
    }

    function sharedPrefix(current, old, searchLength) {
      for (let i = 0; i < searchLength; i++)
        if (!equals$1(current[i], old[i]))
          return i;
      return searchLength;
    }

    function sharedSuffix(current, old, searchLength) {
      let index1 = current.length;
      let index2 = old.length;
      let count = 0;
      while (count < searchLength && equals$1(current[--index1], old[--index2]))
        count++;

      return count;
    }

    /**
     * Returns an array of splice records indicating the minimum edits required
     * to transform the `previous` array into the `current` array.
     *
     * Splice records are ordered by index and contain the following fields:
     * - `index`: index where edit started
     * - `removed`: array of removed items from this index
     * - `addedCount`: number of items added at this index
     *
     * This function is based on the Levenshtein "minimum edit distance"
     * algorithm. Note that updates are treated as removal followed by addition.
     *
     * The worst-case time complexity of this algorithm is `O(l * p)`
     *   l: The length of the current array
     *   p: The length of the previous array
     *
     * However, the worst-case complexity is reduced by an `O(n)` optimization
     * to detect any shared prefix & suffix between the two arrays and only
     * perform the more expensive minimum edit distance calculation over the
     * non-shared portions of the arrays.
     *
     * @function
     * @param {!Array} current The "changed" array for which splices will be
     * calculated.
     * @param {!Array} previous The "unchanged" original array to compare
     * `current` against to determine the splices.
     * @return {!Array} Returns an array of splice record objects. Each of these
     * contains: `index` the location where the splice occurred; `removed`
     * the array of removed items from this location; `addedCount` the number
     * of items added at this location.
     */
    function calculateSplices(current, previous) {
      return calcSplices(current, 0, current.length, previous, 0,
                              previous.length);
    }

    function equals$1(currentValue, previousValue) {
      return currentValue === previousValue;
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Returns true if `node` is a slot element
     * @param {!Node} node Node to test.
     * @return {boolean} Returns true if the given `node` is a slot
     * @private
     */
    function isSlot(node) {
      return (node.localName === 'slot');
    }

    /**
     * Class that listens for changes (additions or removals) to
     * "flattened nodes" on a given `node`. The list of flattened nodes consists
     * of a node's children and, for any children that are `<slot>` elements,
     * the expanded flattened list of `assignedNodes`.
     * For example, if the observed node has children `<a></a><slot></slot><b></b>`
     * and the `<slot>` has one `<div>` assigned to it, then the flattened
     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
     * `<slot>` elements assigned to it, these are flattened as well.
     *
     * The provided `callback` is called whenever any change to this list
     * of flattened nodes occurs, where an addition or removal of a node is
     * considered a change. The `callback` is called with one argument, an object
     * containing an array of any `addedNodes` and `removedNodes`.
     *
     * Note: the callback is called asynchronous to any changes
     * at a microtask checkpoint. This is because observation is performed using
     * `MutationObserver` and the `<slot>` element's `slotchange` event which
     * are asynchronous.
     *
     * An example:
     * ```js
     * class TestSelfObserve extends PolymerElement {
     *   static get is() { return 'test-self-observe';}
     *   connectedCallback() {
     *     super.connectedCallback();
     *     this._observer = new FlattenedNodesObserver(this, (info) => {
     *       this.info = info;
     *     });
     *   }
     *   disconnectedCallback() {
     *     super.disconnectedCallback();
     *     this._observer.disconnect();
     *   }
     * }
     * customElements.define(TestSelfObserve.is, TestSelfObserve);
     * ```
     *
     * @summary Class that listens for changes (additions or removals) to
     * "flattened nodes" on a given `node`.
     */
    class FlattenedNodesObserver {

      /**
       * Returns the list of flattened nodes for the given `node`.
       * This list consists of a node's children and, for any children
       * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.
       * For example, if the observed node has children `<a></a><slot></slot><b></b>`
       * and the `<slot>` has one `<div>` assigned to it, then the flattened
       * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
       * `<slot>` elements assigned to it, these are flattened as well.
       *
       * @param {!HTMLElement|!HTMLSlotElement} node The node for which to
       *      return the list of flattened nodes.
       * @return {!Array<!Node>} The list of flattened nodes for the given `node`.
       * @nocollapse See https://github.com/google/closure-compiler/issues/2763
       */
      static getFlattenedNodes(node) {
        if (isSlot(node)) {
          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign
          return node.assignedNodes({flatten: true});
        } else {
          return Array.from(node.childNodes).map((node) => {
            if (isSlot(node)) {
              node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign
              return node.assignedNodes({flatten: true});
            } else {
              return [node];
            }
          }).reduce((a, b) => a.concat(b), []);
        }
      }

      /**
       * @param {!HTMLElement} target Node on which to listen for changes.
       * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions
       * or removals from the target's list of flattened nodes.
       */
      constructor(target, callback) {
        /**
         * @type {MutationObserver}
         * @private
         */
        this._shadyChildrenObserver = null;
        /**
         * @type {MutationObserver}
         * @private
         */
        this._nativeChildrenObserver = null;
        this._connected = false;
        /**
         * @type {!HTMLElement}
         * @private
         */
        this._target = target;
        this.callback = callback;
        this._effectiveNodes = [];
        this._observer = null;
        this._scheduled = false;
        /**
         * @type {function()}
         * @private
         */
        this._boundSchedule = () => {
          this._schedule();
        };
        this.connect();
        this._schedule();
      }

      /**
       * Activates an observer. This method is automatically called when
       * a `FlattenedNodesObserver` is created. It should only be called to
       * re-activate an observer that has been deactivated via the `disconnect` method.
       *
       * @return {void}
       */
      connect() {
        if (isSlot(this._target)) {
          this._listenSlots([this._target]);
        } else if (this._target.children) {
          this._listenSlots(
              /** @type {!NodeList<!Node>} */ (this._target.children));
          if (window.ShadyDOM) {
            this._shadyChildrenObserver =
              ShadyDOM.observeChildren(this._target, (mutations) => {
                this._processMutations(mutations);
              });
          } else {
            this._nativeChildrenObserver =
              new MutationObserver((mutations) => {
                this._processMutations(mutations);
              });
            this._nativeChildrenObserver.observe(this._target, {childList: true});
          }
        }
        this._connected = true;
      }

      /**
       * Deactivates the flattened nodes observer. After calling this method
       * the observer callback will not be called when changes to flattened nodes
       * occur. The `connect` method may be subsequently called to reactivate
       * the observer.
       *
       * @return {void}
       */
      disconnect() {
        if (isSlot(this._target)) {
          this._unlistenSlots([this._target]);
        } else if (this._target.children) {
          this._unlistenSlots(
              /** @type {!NodeList<!Node>} */ (this._target.children));
          if (window.ShadyDOM && this._shadyChildrenObserver) {
            ShadyDOM.unobserveChildren(this._shadyChildrenObserver);
            this._shadyChildrenObserver = null;
          } else if (this._nativeChildrenObserver) {
            this._nativeChildrenObserver.disconnect();
            this._nativeChildrenObserver = null;
          }
        }
        this._connected = false;
      }

      /**
       * @return {void}
       * @private
       */
      _schedule() {
        if (!this._scheduled) {
          this._scheduled = true;
          microTask.run(() => this.flush());
        }
      }

      /**
       * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
       * @return {void}
       * @private
       */
      _processMutations(mutations) {
        this._processSlotMutations(mutations);
        this.flush();
      }

      /**
       * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
       * @return {void}
       * @private
       */
      _processSlotMutations(mutations) {
        if (mutations) {
          for (let i=0; i < mutations.length; i++) {
            let mutation = mutations[i];
            if (mutation.addedNodes) {
              this._listenSlots(mutation.addedNodes);
            }
            if (mutation.removedNodes) {
              this._unlistenSlots(mutation.removedNodes);
            }
          }
        }
      }

      /**
       * Flushes the observer causing any pending changes to be immediately
       * delivered the observer callback. By default these changes are delivered
       * asynchronously at the next microtask checkpoint.
       *
       * @return {boolean} Returns true if any pending changes caused the observer
       * callback to run.
       */
      flush() {
        if (!this._connected) {
          return false;
        }
        if (window.ShadyDOM) {
          ShadyDOM.flush();
        }
        if (this._nativeChildrenObserver) {
          this._processSlotMutations(this._nativeChildrenObserver.takeRecords());
        } else if (this._shadyChildrenObserver) {
          this._processSlotMutations(this._shadyChildrenObserver.takeRecords());
        }
        this._scheduled = false;
        let info = {
          target: this._target,
          addedNodes: [],
          removedNodes: []
        };
        let newNodes = this.constructor.getFlattenedNodes(this._target);
        let splices = calculateSplices(newNodes,
          this._effectiveNodes);
        // process removals
        for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {
          for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {
            info.removedNodes.push(n);
          }
        }
        // process adds
        for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {
          for (let j=s.index; j < s.index + s.addedCount; j++) {
            info.addedNodes.push(newNodes[j]);
          }
        }
        // update cache
        this._effectiveNodes = newNodes;
        let didFlush = false;
        if (info.addedNodes.length || info.removedNodes.length) {
          didFlush = true;
          this.callback.call(this._target, info);
        }
        return didFlush;
      }

      /**
       * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
       * @return {void}
       * @private
       */
      _listenSlots(nodeList) {
        for (let i=0; i < nodeList.length; i++) {
          let n = nodeList[i];
          if (isSlot(n)) {
            n.addEventListener('slotchange', this._boundSchedule);
          }
        }
      }

      /**
       * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
       * @return {void}
       * @private
       */
      _unlistenSlots(nodeList) {
        for (let i=0; i < nodeList.length; i++) {
          let n = nodeList[i];
          if (isSlot(n)) {
            n.removeEventListener('slotchange', this._boundSchedule);
          }
        }
      }

    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
    /* eslint-enable no-unused-vars */

    const p = Element.prototype;
    /**
     * @const {function(this:Node, string): boolean}
     */
    const normalizedMatchesSelector = p.matches || p.matchesSelector ||
      p.mozMatchesSelector || p.msMatchesSelector ||
      p.oMatchesSelector || p.webkitMatchesSelector;

    /**
     * Cross-platform `element.matches` shim.
     *
     * @function matchesSelector
     * @param {!Node} node Node to check selector against
     * @param {string} selector Selector to match
     * @return {boolean} True if node matched selector
     */
    const matchesSelector = function(node, selector) {
      return normalizedMatchesSelector.call(node, selector);
    };

    /**
     * Node API wrapper class returned from `Polymer.dom.(target)` when
     * `target` is a `Node`.
     *
     */
    class DomApi {

      /**
       * @param {Node} node Node for which to create a Polymer.dom helper object.
       */
      constructor(node) {
        this.node = node;
      }

      /**
       * Returns an instance of `FlattenedNodesObserver` that
       * listens for node changes on this element.
       *
       * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children
       *   of this element changes
       * @return {!FlattenedNodesObserver} Observer instance
       */
      observeNodes(callback) {
        return new FlattenedNodesObserver(
            /** @type {!HTMLElement} */(this.node), callback);
      }

      /**
       * Disconnects an observer previously created via `observeNodes`
       *
       * @param {!FlattenedNodesObserver} observerHandle Observer instance
       *   to disconnect.
       * @return {void}
       */
      unobserveNodes(observerHandle) {
        observerHandle.disconnect();
      }

      /**
       * Provided as a backwards-compatible API only.  This method does nothing.
       * @return {void}
       */
      notifyObserver() {}

      /**
       * Returns true if the provided node is contained with this element's
       * light-DOM children or shadow root, including any nested shadow roots
       * of children therein.
       *
       * @param {Node} node Node to test
       * @return {boolean} Returns true if the given `node` is contained within
       *   this element's light or shadow DOM.
       */
      deepContains(node) {
        if (this.node.contains(node)) {
          return true;
        }
        let n = node;
        let doc = node.ownerDocument;
        // walk from node to `this` or `document`
        while (n && n !== doc && n !== this.node) {
          // use logical parentnode, or native ShadowRoot host
          n = n.parentNode || n.host;
        }
        return n === this.node;
      }

      /**
       * Returns the root node of this node.  Equivalent to `getRootNode()`.
       *
       * @return {Node} Top most element in the dom tree in which the node
       * exists. If the node is connected to a document this is either a
       * shadowRoot or the document; otherwise, it may be the node
       * itself or a node or document fragment containing it.
       */
      getOwnerRoot() {
        return this.node.getRootNode();
      }

      /**
       * For slot elements, returns the nodes assigned to the slot; otherwise
       * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.
       *
       * @return {!Array<!Node>} Array of assigned nodes
       */
      getDistributedNodes() {
        return (this.node.localName === 'slot') ?
          this.node.assignedNodes({flatten: true}) :
          [];
      }

      /**
       * Returns an array of all slots this element was distributed to.
       *
       * @return {!Array<!HTMLSlotElement>} Description
       */
      getDestinationInsertionPoints() {
        let ip$ = [];
        let n = this.node.assignedSlot;
        while (n) {
          ip$.push(n);
          n = n.assignedSlot;
        }
        return ip$;
      }

      /**
       * Calls `importNode` on the `ownerDocument` for this node.
       *
       * @param {!Node} node Node to import
       * @param {boolean} deep True if the node should be cloned deeply during
       *   import
       * @return {Node} Clone of given node imported to this owner document
       */
      importNode(node, deep) {
        let doc = this.node instanceof Document ? this.node :
          this.node.ownerDocument;
        return doc.importNode(node, deep);
      }

      /**
       * @return {!Array<!Node>} Returns a flattened list of all child nodes and
       * nodes assigned to child slots.
       */
      getEffectiveChildNodes() {
        return FlattenedNodesObserver.getFlattenedNodes(
            /** @type {!HTMLElement} */ (this.node));
      }

      /**
       * Returns a filtered list of flattened child elements for this element based
       * on the given selector.
       *
       * @param {string} selector Selector to filter nodes against
       * @return {!Array<!HTMLElement>} List of flattened child elements
       */
      queryDistributedElements(selector) {
        let c$ = this.getEffectiveChildNodes();
        let list = [];
        for (let i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {
          if ((c.nodeType === Node.ELEMENT_NODE) &&
              matchesSelector(c, selector)) {
            list.push(c);
          }
        }
        return list;
      }

      /**
       * For shadow roots, returns the currently focused element within this
       * shadow root.
       *
       * @return {Node|undefined} Currently focused element
       */
      get activeElement() {
        let node = this.node;
        return node._activeElement !== undefined ? node._activeElement : node.activeElement;
      }
    }

    function forwardMethods(proto, methods) {
      for (let i=0; i < methods.length; i++) {
        let method = methods[i];
        /* eslint-disable valid-jsdoc */
        proto[method] = /** @this {DomApi} */ function() {
          return this.node[method].apply(this.node, arguments);
        };
        /* eslint-enable */
      }
    }

    function forwardReadOnlyProperties(proto, properties) {
      for (let i=0; i < properties.length; i++) {
        let name = properties[i];
        Object.defineProperty(proto, name, {
          get: function() {
            const domApi = /** @type {DomApi} */(this);
            return domApi.node[name];
          },
          configurable: true
        });
      }
    }

    function forwardProperties(proto, properties) {
      for (let i=0; i < properties.length; i++) {
        let name = properties[i];
        Object.defineProperty(proto, name, {
          /**
           * @this {DomApi}
           * @return {*} .
           */
          get: function() {
            return this.node[name];
          },
          /**
           * @this {DomApi}
           * @param {*} value .
           */
          set: function(value) {
            this.node[name] = value;
          },
          configurable: true
        });
      }
    }


    /**
     * Event API wrapper class returned from `dom.(target)` when
     * `target` is an `Event`.
     */
    class EventApi {
      constructor(event) {
        this.event = event;
      }

      /**
       * Returns the first node on the `composedPath` of this event.
       *
       * @return {!EventTarget} The node this event was dispatched to
       */
      get rootTarget() {
        return this.event.composedPath()[0];
      }

      /**
       * Returns the local (re-targeted) target for this event.
       *
       * @return {!EventTarget} The local (re-targeted) target for this event.
       */
      get localTarget() {
        return this.event.target;
      }

      /**
       * Returns the `composedPath` for this event.
       * @return {!Array<!EventTarget>} The nodes this event propagated through
       */
      get path() {
        return this.event.composedPath();
      }
    }

    /**
     * @function
     * @param {boolean=} deep
     * @return {!Node}
     */
    DomApi.prototype.cloneNode;
    /**
     * @function
     * @param {!Node} node
     * @return {!Node}
     */
    DomApi.prototype.appendChild;
    /**
     * @function
     * @param {!Node} newChild
     * @param {Node} refChild
     * @return {!Node}
     */
    DomApi.prototype.insertBefore;
    /**
     * @function
     * @param {!Node} node
     * @return {!Node}
     */
    DomApi.prototype.removeChild;
    /**
     * @function
     * @param {!Node} oldChild
     * @param {!Node} newChild
     * @return {!Node}
     */
    DomApi.prototype.replaceChild;
    /**
     * @function
     * @param {string} name
     * @param {string} value
     * @return {void}
     */
    DomApi.prototype.setAttribute;
    /**
     * @function
     * @param {string} name
     * @return {void}
     */
    DomApi.prototype.removeAttribute;
    /**
     * @function
     * @param {string} selector
     * @return {?Element}
     */
    DomApi.prototype.querySelector;
    /**
     * @function
     * @param {string} selector
     * @return {!NodeList<!Element>}
     */
    DomApi.prototype.querySelectorAll;

    /** @type {?Node} */
    DomApi.prototype.parentNode;
    /** @type {?Node} */
    DomApi.prototype.firstChild;
    /** @type {?Node} */
    DomApi.prototype.lastChild;
    /** @type {?Node} */
    DomApi.prototype.nextSibling;
    /** @type {?Node} */
    DomApi.prototype.previousSibling;
    /** @type {?HTMLElement} */
    DomApi.prototype.firstElementChild;
    /** @type {?HTMLElement} */
    DomApi.prototype.lastElementChild;
    /** @type {?HTMLElement} */
    DomApi.prototype.nextElementSibling;
    /** @type {?HTMLElement} */
    DomApi.prototype.previousElementSibling;
    /** @type {!Array<!Node>} */
    DomApi.prototype.childNodes;
    /** @type {!Array<!HTMLElement>} */
    DomApi.prototype.children;
    /** @type {?DOMTokenList} */
    DomApi.prototype.classList;

    /** @type {string} */
    DomApi.prototype.textContent;
    /** @type {string} */
    DomApi.prototype.innerHTML;

    forwardMethods(DomApi.prototype, [
      'cloneNode', 'appendChild', 'insertBefore', 'removeChild',
      'replaceChild', 'setAttribute', 'removeAttribute',
      'querySelector', 'querySelectorAll'
    ]);

    forwardReadOnlyProperties(DomApi.prototype, [
      'parentNode', 'firstChild', 'lastChild',
      'nextSibling', 'previousSibling', 'firstElementChild',
      'lastElementChild', 'nextElementSibling', 'previousElementSibling',
      'childNodes', 'children', 'classList'
    ]);

    forwardProperties(DomApi.prototype, [
      'textContent', 'innerHTML'
    ]);

    /**
     * Legacy DOM and Event manipulation API wrapper factory used to abstract
     * differences between native Shadow DOM and "Shady DOM" when polyfilling on
     * older browsers.
     *
     * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and
     * in the majority of cases simply facades directly to the standard native
     * API.
     *
     * @summary Legacy DOM and Event manipulation API wrapper factory used to
     * abstract differences between native Shadow DOM and "Shady DOM."
     * @param {(Node|Event)=} obj Node or event to operate on
     * @return {!DomApi|!EventApi} Wrapper providing either node API or event API
     */
    const dom = function(obj) {
      obj = obj || document;
      if (!obj.__domApi) {
        let helper;
        if (obj instanceof Event) {
          helper = new EventApi(obj);
        } else {
          helper = new DomApi(obj);
        }
        obj.__domApi = helper;
      }
      return obj.__domApi;
    };

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let styleInterface = window.ShadyCSS;

    /**
     * Element class mixin that provides Polymer's "legacy" API intended to be
     * backward-compatible to the greatest extent possible with the API
     * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements
     * defined using the `Polymer({...})` function.
     *
     * @mixinFunction
     * @polymer
     * @appliesMixin ElementMixin
     * @appliesMixin GestureEventListeners
     * @property isAttached {boolean} Set to `true` in this element's
     *   `connectedCallback` and `false` in `disconnectedCallback`
     * @summary Element class mixin that provides Polymer's "legacy" API
     */
    const LegacyElementMixin = dedupingMixin((base) => {

      /**
       * @constructor
       * @extends {base}
       * @implements {Polymer_ElementMixin}
       * @implements {Polymer_GestureEventListeners}
       * @implements {Polymer_DirMixin}
       * @private
       */
      const legacyElementBase = DirMixin(GestureEventListeners(ElementMixin(base)));

      /**
       * Map of simple names to touch action names
       * @dict
       */
      const DIRECTION_MAP = {
        'x': 'pan-x',
        'y': 'pan-y',
        'none': 'none',
        'all': 'auto'
      };

      /**
       * @polymer
       * @mixinClass
       * @extends {legacyElementBase}
       * @implements {Polymer_LegacyElementMixin}
       * @unrestricted
       */
      class LegacyElement extends legacyElementBase {

        constructor() {
          super();
          /** @type {boolean} */
          this.isAttached;
          /** @type {WeakMap<!Element, !Object<string, !Function>>} */
          this.__boundListeners;
          /** @type {Object<string, Function>} */
          this._debouncers;
          // Ensure listeners are applied immediately so that they are
          // added before declarative event listeners. This allows an element to
          // decorate itself via an event prior to any declarative listeners
          // seeing the event. Note, this ensures compatibility with 1.x ordering.
          this._applyListeners();
        }

        /**
         * Forwards `importMeta` from the prototype (i.e. from the info object
         * passed to `Polymer({...})`) to the static API.
         *
         * @return {!Object} The `import.meta` object set on the prototype
         * @suppress {missingProperties} `this` is always in the instance in
         *  closure for some reason even in a static method, rather than the class
         */
        static get importMeta() {
          return this.prototype.importMeta;
        }

        /**
         * Legacy callback called during the `constructor`, for overriding
         * by the user.
         * @return {void}
         */
        created() {}

        /**
         * Provides an implementation of `connectedCallback`
         * which adds Polymer legacy API's `attached` method.
         * @return {void}
         * @override
         */
        connectedCallback() {
          super.connectedCallback();
          this.isAttached = true;
          this.attached();
        }

        /**
         * Legacy callback called during `connectedCallback`, for overriding
         * by the user.
         * @return {void}
         */
        attached() {}

        /**
         * Provides an implementation of `disconnectedCallback`
         * which adds Polymer legacy API's `detached` method.
         * @return {void}
         * @override
         */
        disconnectedCallback() {
          super.disconnectedCallback();
          this.isAttached = false;
          this.detached();
        }

        /**
         * Legacy callback called during `disconnectedCallback`, for overriding
         * by the user.
         * @return {void}
         */
        detached() {}

        /**
         * Provides an override implementation of `attributeChangedCallback`
         * which adds the Polymer legacy API's `attributeChanged` method.
         * @param {string} name Name of attribute.
         * @param {?string} old Old value of attribute.
         * @param {?string} value Current value of attribute.
         * @param {?string} namespace Attribute namespace.
         * @return {void}
         * @override
         */
        attributeChangedCallback(name, old, value, namespace) {
          if (old !== value) {
            super.attributeChangedCallback(name, old, value, namespace);
            this.attributeChanged(name, old, value);
          }
        }

        /**
         * Legacy callback called during `attributeChangedChallback`, for overriding
         * by the user.
         * @param {string} name Name of attribute.
         * @param {?string} old Old value of attribute.
         * @param {?string} value Current value of attribute.
         * @return {void}
         */
        attributeChanged(name, old, value) {} // eslint-disable-line no-unused-vars

        /**
         * Overrides the default `Polymer.PropertyEffects` implementation to
         * add support for class initialization via the `_registered` callback.
         * This is called only when the first instance of the element is created.
         *
         * @return {void}
         * @override
         * @suppress {invalidCasts}
         */
        _initializeProperties() {
          let proto = Object.getPrototypeOf(this);
          if (!proto.hasOwnProperty('__hasRegisterFinished')) {
            proto.__hasRegisterFinished = true;
            this._registered();
          }
          super._initializeProperties();
          this.root = /** @type {HTMLElement} */(this);
          this.created();
        }

        /**
         * Called automatically when an element is initializing.
         * Users may override this method to perform class registration time
         * work. The implementation should ensure the work is performed
         * only once for the class.
         * @protected
         * @return {void}
         */
        _registered() {}

        /**
         * Overrides the default `Polymer.PropertyEffects` implementation to
         * add support for installing `hostAttributes` and `listeners`.
         *
         * @return {void}
         * @override
         */
        ready() {
          this._ensureAttributes();
          super.ready();
        }

        /**
         * Ensures an element has required attributes. Called when the element
         * is being readied via `ready`. Users should override to set the
         * element's required attributes. The implementation should be sure
         * to check and not override existing attributes added by
         * the user of the element. Typically, setting attributes should be left
         * to the element user and not done here; reasonable exceptions include
         * setting aria roles and focusability.
         * @protected
         * @return {void}
         */
        _ensureAttributes() {}

        /**
         * Adds element event listeners. Called when the element
         * is being readied via `ready`. Users should override to
         * add any required element event listeners.
         * In performance critical elements, the work done here should be kept
         * to a minimum since it is done before the element is rendered. In
         * these elements, consider adding listeners asynchronously so as not to
         * block render.
         * @protected
         * @return {void}
         */
        _applyListeners() {}

        /**
         * Converts a typed JavaScript value to a string.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features. To customize
         * how properties are serialized to attributes for attribute bindings and
         * `reflectToAttribute: true` properties as well as this method, override
         * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.
         *
         * @param {*} value Value to deserialize
         * @return {string | undefined} Serialized value
         */
        serialize(value) {
          return this._serializeValue(value);
        }

        /**
         * Converts a string to a typed JavaScript value.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.  To customize
         * how attributes are deserialized to properties for in
         * `attributeChangedCallback`, override `_deserializeValue` method
         * provided by `Polymer.PropertyAccessors`.
         *
         * @param {string} value String to deserialize
         * @param {*} type Type to deserialize the string to
         * @return {*} Returns the deserialized value in the `type` given.
         */
        deserialize(value, type) {
          return this._deserializeValue(value, type);
        }

        /**
         * Serializes a property to its associated attribute.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         *
         * @param {string} property Property name to reflect.
         * @param {string=} attribute Attribute name to reflect.
         * @param {*=} value Property value to reflect.
         * @return {void}
         */
        reflectPropertyToAttribute(property, attribute, value) {
          this._propertyToAttribute(property, attribute, value);
        }

        /**
         * Sets a typed value to an HTML attribute on a node.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         *
         * @param {*} value Value to serialize.
         * @param {string} attribute Attribute name to serialize to.
         * @param {Element} node Element to set attribute to.
         * @return {void}
         */
        serializeValueToAttribute(value, attribute, node) {
          this._valueToNodeAttribute(/** @type {Element} */ (node || this), value, attribute);
        }

        /**
         * Copies own properties (including accessor descriptors) from a source
         * object to a target object.
         *
         * @param {Object} prototype Target object to copy properties to.
         * @param {Object} api Source object to copy properties from.
         * @return {Object} prototype object that was passed as first argument.
         */
        extend(prototype, api) {
          if (!(prototype && api)) {
            return prototype || api;
          }
          let n$ = Object.getOwnPropertyNames(api);
          for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {
            let pd = Object.getOwnPropertyDescriptor(api, n);
            if (pd) {
              Object.defineProperty(prototype, n, pd);
            }
          }
          return prototype;
        }

        /**
         * Copies props from a source object to a target object.
         *
         * Note, this method uses a simple `for...in` strategy for enumerating
         * properties.  To ensure only `ownProperties` are copied from source
         * to target and that accessor implementations are copied, use `extend`.
         *
         * @param {!Object} target Target object to copy properties to.
         * @param {!Object} source Source object to copy properties from.
         * @return {!Object} Target object that was passed as first argument.
         */
        mixin(target, source) {
          for (let i in source) {
            target[i] = source[i];
          }
          return target;
        }

        /**
         * Sets the prototype of an object.
         *
         * Note this method is provided as backward-compatible legacy API
         * only.  It is not directly called by any Polymer features.
         * @param {Object} object The object on which to set the prototype.
         * @param {Object} prototype The prototype that will be set on the given
         * `object`.
         * @return {Object} Returns the given `object` with its prototype set
         * to the given `prototype` object.
         */
        chainObject(object, prototype) {
          if (object && prototype && object !== prototype) {
            object.__proto__ = prototype;
          }
          return object;
        }

        /* **** Begin Template **** */

        /**
         * Calls `importNode` on the `content` of the `template` specified and
         * returns a document fragment containing the imported content.
         *
         * @param {HTMLTemplateElement} template HTML template element to instance.
         * @return {!DocumentFragment} Document fragment containing the imported
         *   template content.
        */
        instanceTemplate(template) {
          let content = this.constructor._contentForTemplate(template);
          let dom$$1 = /** @type {!DocumentFragment} */
            (document.importNode(content, true));
          return dom$$1;
        }

        /* **** Begin Events **** */



        /**
         * Dispatches a custom event with an optional detail value.
         *
         * @param {string} type Name of event type.
         * @param {*=} detail Detail value containing event-specific
         *   payload.
         * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined), composed: (boolean|undefined) }=}
         *  options Object specifying options.  These may include:
         *  `bubbles` (boolean, defaults to `true`),
         *  `cancelable` (boolean, defaults to false), and
         *  `node` on which to fire the event (HTMLElement, defaults to `this`).
         * @return {!Event} The new event that was fired.
         */
        fire(type, detail, options) {
          options = options || {};
          detail = (detail === null || detail === undefined) ? {} : detail;
          let event = new Event(type, {
            bubbles: options.bubbles === undefined ? true : options.bubbles,
            cancelable: Boolean(options.cancelable),
            composed: options.composed === undefined ? true: options.composed
          });
          event.detail = detail;
          let node = options.node || this;
          node.dispatchEvent(event);
          return event;
        }

        /**
         * Convenience method to add an event listener on a given element,
         * late bound to a named method on this element.
         *
         * @param {?EventTarget} node Element to add event listener to.
         * @param {string} eventName Name of event to listen for.
         * @param {string} methodName Name of handler method on `this` to call.
         * @return {void}
         */
        listen(node, eventName, methodName) {
          node = /** @type {!EventTarget} */ (node || this);
          let hbl = this.__boundListeners ||
            (this.__boundListeners = new WeakMap());
          let bl = hbl.get(node);
          if (!bl) {
            bl = {};
            hbl.set(node, bl);
          }
          let key = eventName + methodName;
          if (!bl[key]) {
            bl[key] = this._addMethodEventListenerToNode(
              node, eventName, methodName, this);
          }
        }

        /**
         * Convenience method to remove an event listener from a given element,
         * late bound to a named method on this element.
         *
         * @param {?EventTarget} node Element to remove event listener from.
         * @param {string} eventName Name of event to stop listening to.
         * @param {string} methodName Name of handler method on `this` to not call
         anymore.
         * @return {void}
         */
        unlisten(node, eventName, methodName) {
          node = /** @type {!EventTarget} */ (node || this);
          let bl = this.__boundListeners && this.__boundListeners.get(node);
          let key = eventName + methodName;
          let handler = bl && bl[key];
          if (handler) {
            this._removeEventListenerFromNode(node, eventName, handler);
            bl[key] = null;
          }
        }

        /**
         * Override scrolling behavior to all direction, one direction, or none.
         *
         * Valid scroll directions:
         *   - 'all': scroll in any direction
         *   - 'x': scroll only in the 'x' direction
         *   - 'y': scroll only in the 'y' direction
         *   - 'none': disable scrolling for this node
         *
         * @param {string=} direction Direction to allow scrolling
         * Defaults to `all`.
         * @param {Element=} node Element to apply scroll direction setting.
         * Defaults to `this`.
         * @return {void}
         */
        setScrollDirection(direction, node) {
          setTouchAction(/** @type {Element} */ (node || this), DIRECTION_MAP[direction] || 'auto');
        }
        /* **** End Events **** */

        /**
         * Convenience method to run `querySelector` on this local DOM scope.
         *
         * This function calls `Polymer.dom(this.root).querySelector(slctr)`.
         *
         * @param {string} slctr Selector to run on this local DOM scope
         * @return {Element} Element found by the selector, or null if not found.
         */
        $$(slctr) {
          return this.root.querySelector(slctr);
        }

        /**
         * Return the element whose local dom within which this element
         * is contained. This is a shorthand for
         * `this.getRootNode().host`.
         * @this {Element}
         */
        get domHost() {
          let root$$1 = this.getRootNode();
          return (root$$1 instanceof DocumentFragment) ? /** @type {ShadowRoot} */ (root$$1).host : root$$1;
        }

        /**
         * Force this element to distribute its children to its local dom.
         * This should not be necessary as of Polymer 2.0.2 and is provided only
         * for backwards compatibility.
         * @return {void}
         */
        distributeContent() {
          if (window.ShadyDOM && this.shadowRoot) {
            ShadyDOM.flush();
          }
        }

        /**
         * Returns a list of nodes that are the effective childNodes. The effective
         * childNodes list is the same as the element's childNodes except that
         * any `<content>` elements are replaced with the list of nodes distributed
         * to the `<content>`, the result of its `getDistributedNodes` method.
         * @return {!Array<!Node>} List of effective child nodes.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
         */
        getEffectiveChildNodes() {
          const thisEl = /** @type {Element} */ (this);
          const domApi = /** @type {DomApi} */(dom(thisEl));
          return domApi.getEffectiveChildNodes();
        }

        /**
         * Returns a list of nodes distributed within this element that match
         * `selector`. These can be dom children or elements distributed to
         * children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {!Array<!Node>} List of distributed elements that match selector.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
         */
        queryDistributedElements(selector) {
          const thisEl = /** @type {Element} */ (this);
          const domApi = /** @type {DomApi} */(dom(thisEl));
          return domApi.queryDistributedElements(selector);
        }

        /**
         * Returns a list of elements that are the effective children. The effective
         * children list is the same as the element's children except that
         * any `<content>` elements are replaced with the list of elements
         * distributed to the `<content>`.
         *
         * @return {!Array<!Node>} List of effective children.
         */
        getEffectiveChildren() {
          let list = this.getEffectiveChildNodes();
          return list.filter(function(/** @type {!Node} */ n) {
            return (n.nodeType === Node.ELEMENT_NODE);
          });
        }

        /**
         * Returns a string of text content that is the concatenation of the
         * text content's of the element's effective childNodes (the elements
         * returned by <a href="#getEffectiveChildNodes>getEffectiveChildNodes</a>.
         *
         * @return {string} List of effective children.
         */
        getEffectiveTextContent() {
          let cn = this.getEffectiveChildNodes();
          let tc = [];
          for (let i=0, c; (c = cn[i]); i++) {
            if (c.nodeType !== Node.COMMENT_NODE) {
              tc.push(c.textContent);
            }
          }
          return tc.join('');
        }

        /**
         * Returns the first effective childNode within this element that
         * match `selector`. These can be dom child nodes or elements distributed
         * to children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {Node} First effective child node that matches selector.
         */
        queryEffectiveChildren(selector) {
          let e$ = this.queryDistributedElements(selector);
          return e$ && e$[0];
        }

        /**
         * Returns a list of effective childNodes within this element that
         * match `selector`. These can be dom child nodes or elements distributed
         * to children that are insertion points.
         * @param {string} selector Selector to run.
         * @return {!Array<!Node>} List of effective child nodes that match selector.
         */
        queryAllEffectiveChildren(selector) {
          return this.queryDistributedElements(selector);
        }

        /**
         * Returns a list of nodes distributed to this element's `<slot>`.
         *
         * If this element contains more than one `<slot>` in its local DOM,
         * an optional selector may be passed to choose the desired content.
         *
         * @param {string=} slctr CSS selector to choose the desired
         *   `<slot>`.  Defaults to `content`.
         * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.
         */
        getContentChildNodes(slctr) {
          let content = this.root.querySelector(slctr || 'slot');
          return content ? /** @type {DomApi} */(dom(content)).getDistributedNodes() : [];
        }

        /**
         * Returns a list of element children distributed to this element's
         * `<slot>`.
         *
         * If this element contains more than one `<slot>` in its
         * local DOM, an optional selector may be passed to choose the desired
         * content.  This method differs from `getContentChildNodes` in that only
         * elements are returned.
         *
         * @param {string=} slctr CSS selector to choose the desired
         *   `<content>`.  Defaults to `content`.
         * @return {!Array<!HTMLElement>} List of distributed nodes for the
         *   `<slot>`.
         * @suppress {invalidCasts}
         */
        getContentChildren(slctr) {
          let children = /** @type {!Array<!HTMLElement>} */(this.getContentChildNodes(slctr).filter(function(n) {
            return (n.nodeType === Node.ELEMENT_NODE);
          }));
          return children;
        }

        /**
         * Checks whether an element is in this element's light DOM tree.
         *
         * @param {?Node} node The element to be checked.
         * @return {boolean} true if node is in this element's light DOM tree.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
         */
        isLightDescendant(node) {
          const thisNode = /** @type {Node} */ (this);
          return thisNode !== node && thisNode.contains(node) &&
            thisNode.getRootNode() === node.getRootNode();
        }

        /**
         * Checks whether an element is in this element's local DOM tree.
         *
         * @param {!Element} node The element to be checked.
         * @return {boolean} true if node is in this element's local DOM tree.
         */
        isLocalDescendant(node) {
          return this.root === node.getRootNode();
        }

        /**
         * No-op for backwards compatibility. This should now be handled by
         * ShadyCss library.
         * @param  {*} container Unused
         * @param  {*} shouldObserve Unused
         * @return {void}
         */
        scopeSubtree(container, shouldObserve) { // eslint-disable-line no-unused-vars
        }

        /**
         * Returns the computed style value for the given property.
         * @param {string} property The css property name.
         * @return {string} Returns the computed css property value for the given
         * `property`.
         * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
         */
        getComputedStyleValue(property) {
          return styleInterface.getComputedStyleValue(/** @type {!Element} */(this), property);
        }

        // debounce

        /**
         * Call `debounce` to collapse multiple requests for a named task into
         * one invocation which is made after the wait time has elapsed with
         * no new request.  If no wait time is given, the callback will be called
         * at microtask timing (guaranteed before paint).
         *
         *     debouncedClickAction(e) {
         *       // will not call `processClick` more than once per 100ms
         *       this.debounce('click', function() {
         *        this.processClick();
         *       } 100);
         *     }
         *
         * @param {string} jobName String to identify the debounce job.
         * @param {function():void} callback Function that is called (with `this`
         *   context) when the wait time elapses.
         * @param {number} wait Optional wait time in milliseconds (ms) after the
         *   last signal that must elapse before invoking `callback`
         * @return {!Object} Returns a debouncer object on which exists the
         * following methods: `isActive()` returns true if the debouncer is
         * active; `cancel()` cancels the debouncer if it is active;
         * `flush()` immediately invokes the debounced callback if the debouncer
         * is active.
         */
        debounce(jobName, callback, wait) {
          this._debouncers = this._debouncers || {};
          return this._debouncers[jobName] = Debouncer.debounce(
                this._debouncers[jobName]
              , wait > 0 ? timeOut.after(wait) : microTask
              , callback.bind(this));
        }

        /**
         * Returns whether a named debouncer is active.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {boolean} Whether the debouncer is active (has not yet fired).
         */
        isDebouncerActive(jobName) {
          this._debouncers = this._debouncers || {};
          let debouncer = this._debouncers[jobName];
          return !!(debouncer && debouncer.isActive());
        }

        /**
         * Immediately calls the debouncer `callback` and inactivates it.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {void}
         */
        flushDebouncer(jobName) {
          this._debouncers = this._debouncers || {};
          let debouncer = this._debouncers[jobName];
          if (debouncer) {
            debouncer.flush();
          }
        }

        /**
         * Cancels an active debouncer.  The `callback` will not be called.
         *
         * @param {string} jobName The name of the debouncer started with `debounce`
         * @return {void}
         */
        cancelDebouncer(jobName) {
          this._debouncers = this._debouncers || {};
          let debouncer = this._debouncers[jobName];
          if (debouncer) {
            debouncer.cancel();
          }
        }

        /**
         * Runs a callback function asynchronously.
         *
         * By default (if no waitTime is specified), async callbacks are run at
         * microtask timing, which will occur before paint.
         *
         * @param {!Function} callback The callback function to run, bound to `this`.
         * @param {number=} waitTime Time to wait before calling the
         *   `callback`.  If unspecified or 0, the callback will be run at microtask
         *   timing (before paint).
         * @return {number} Handle that may be used to cancel the async job.
         */
        async(callback, waitTime) {
          return waitTime > 0 ? timeOut.run(callback.bind(this), waitTime) :
              ~microTask.run(callback.bind(this));
        }

        /**
         * Cancels an async operation started with `async`.
         *
         * @param {number} handle Handle returned from original `async` call to
         *   cancel.
         * @return {void}
         */
        cancelAsync(handle) {
          handle < 0 ? microTask.cancel(~handle) :
              timeOut.cancel(handle);
        }

        // other

        /**
         * Convenience method for creating an element and configuring it.
         *
         * @param {string} tag HTML element tag to create.
         * @param {Object=} props Object of properties to configure on the
         *    instance.
         * @return {!Element} Newly created and configured element.
         */
        create(tag, props) {
          let elt = document.createElement(tag);
          if (props) {
            if (elt.setProperties) {
              elt.setProperties(props);
            } else {
              for (let n in props) {
                elt[n] = props[n];
              }
            }
          }
          return elt;
        }

        /**
         * Polyfill for Element.prototype.matches, which is sometimes still
         * prefixed.
         *
         * @param {string} selector Selector to test.
         * @param {!Element=} node Element to test the selector against.
         * @return {boolean} Whether the element matches the selector.
         */
        elementMatches(selector, node) {
          return matchesSelector( (node || this), selector);
        }

        /**
         * Toggles an HTML attribute on or off.
         *
         * @param {string} name HTML attribute name
         * @param {boolean=} bool Boolean to force the attribute on or off.
         *    When unspecified, the state of the attribute will be reversed.
         * @return {boolean} true if the attribute now exists
         */
        toggleAttribute(name, bool) {
          let node = /** @type {Element} */ this;
          if (arguments.length === 3) {
            node = /** @type {Element} */ arguments[2];
          }
          if (arguments.length == 1) {
            bool = !node.hasAttribute(name);
          }
          if (bool) {
            node.setAttribute(name, '');
            return true;
          } else {
            node.removeAttribute(name);
            return false;
          }
        }


        /**
         * Toggles a CSS class on or off.
         *
         * @param {string} name CSS class name
         * @param {boolean=} bool Boolean to force the class on or off.
         *    When unspecified, the state of the class will be reversed.
         * @param {Element=} node Node to target.  Defaults to `this`.
         * @return {void}
         */
        toggleClass(name, bool, node) {
          node = /** @type {Element} */ (node || this);
          if (arguments.length == 1) {
            bool = !node.classList.contains(name);
          }
          if (bool) {
            node.classList.add(name);
          } else {
            node.classList.remove(name);
          }
        }

        /**
         * Cross-platform helper for setting an element's CSS `transform` property.
         *
         * @param {string} transformText Transform setting.
         * @param {Element=} node Element to apply the transform to.
         * Defaults to `this`
         * @return {void}
         */
        transform(transformText, node) {
          node = /** @type {Element} */ (node || this);
          node.style.webkitTransform = transformText;
          node.style.transform = transformText;
        }

        /**
         * Cross-platform helper for setting an element's CSS `translate3d`
         * property.
         *
         * @param {number} x X offset.
         * @param {number} y Y offset.
         * @param {number} z Z offset.
         * @param {Element=} node Element to apply the transform to.
         * Defaults to `this`.
         * @return {void}
         */
        translate3d(x, y, z, node) {
          node = /** @type {Element} */ (node || this);
          this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);
        }

        /**
         * Removes an item from an array, if it exists.
         *
         * If the array is specified by path, a change notification is
         * generated, so that observers, data bindings and computed
         * properties watching that path can update.
         *
         * If the array is passed directly, **no change
         * notification is generated**.
         *
         * @param {string | !Array<number|string>} arrayOrPath Path to array from which to remove the item
         *   (or the array itself).
         * @param {*} item Item to remove.
         * @return {Array} Array containing item removed.
         */
        arrayDelete(arrayOrPath, item) {
          let index;
          if (Array.isArray(arrayOrPath)) {
            index = arrayOrPath.indexOf(item);
            if (index >= 0) {
              return arrayOrPath.splice(index, 1);
            }
          } else {
            let arr = get(this, arrayOrPath);
            index = arr.indexOf(item);
            if (index >= 0) {
              return this.splice(arrayOrPath, index, 1);
            }
          }
          return null;
        }

        // logging

        /**
         * Facades `console.log`/`warn`/`error` as override point.
         *
         * @param {string} level One of 'log', 'warn', 'error'
         * @param {Array} args Array of strings or objects to log
         * @return {void}
         */
        _logger(level, args) {
          // accept ['foo', 'bar'] and [['foo', 'bar']]
          if (Array.isArray(args) && args.length === 1 && Array.isArray(args[0])) {
            args = args[0];
          }
          switch(level) {
            case 'log':
            case 'warn':
            case 'error':
              console[level](...args);
          }
        }

        /**
         * Facades `console.log` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         */
        _log(...args) {
          this._logger('log', args);
        }

        /**
         * Facades `console.warn` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         */
        _warn(...args) {
          this._logger('warn', args);
        }

        /**
         * Facades `console.error` as an override point.
         *
         * @param {...*} args Array of strings or objects to log
         * @return {void}
         */
        _error(...args) {
          this._logger('error', args);
        }

        /**
         * Formats a message using the element type an a method name.
         *
         * @param {string} methodName Method name to associate with message
         * @param {...*} args Array of strings or objects to log
         * @return {Array} Array with formatting information for `console`
         *   logging.
         */
        _logf(methodName, ...args) {
          return ['[%s::%s]', this.is, methodName, ...args];
        }

      }

      LegacyElement.prototype.is = '';

      return LegacyElement;

    });

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let metaProps = {
      attached: true,
      detached: true,
      ready: true,
      created: true,
      beforeRegister: true,
      registered: true,
      attributeChanged: true,
      // meta objects
      behaviors: true
    };

    /**
     * Applies a "legacy" behavior or array of behaviors to the provided class.
     *
     * Note: this method will automatically also apply the `LegacyElementMixin`
     * to ensure that any legacy behaviors can rely on legacy Polymer API on
     * the underlying element.
     *
     * @function
     * @template T
     * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.
     * @param {function(new:T)} klass Element class.
     * @return {?} Returns a new Element class extended by the
     * passed in `behaviors` and also by `LegacyElementMixin`.
     * @suppress {invalidCasts, checkTypes}
     */
    function mixinBehaviors(behaviors, klass) {
      if (!behaviors) {
        klass = /** @type {HTMLElement} */(klass); // eslint-disable-line no-self-assign
        return klass;
      }
      // NOTE: ensure the behavior is extending a class with
      // legacy element api. This is necessary since behaviors expect to be able
      // to access 1.x legacy api.
      klass = LegacyElementMixin(klass);
      if (!Array.isArray(behaviors)) {
        behaviors = [behaviors];
      }
      let superBehaviors = klass.prototype.behaviors;
      // get flattened, deduped list of behaviors *not* already on super class
      behaviors = flattenBehaviors(behaviors, null, superBehaviors);
      // mixin new behaviors
      klass = _mixinBehaviors(behaviors, klass);
      if (superBehaviors) {
        behaviors = superBehaviors.concat(behaviors);
      }
      // Set behaviors on prototype for BC...
      klass.prototype.behaviors = behaviors;
      return klass;
    }

    // NOTE:
    // 1.x
    // Behaviors were mixed in *in reverse order* and de-duped on the fly.
    // The rule was that behavior properties were copied onto the element
    // prototype if and only if the property did not already exist.
    // Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:
    // (1), B, (2), A, (3) C. This means prototype properties win over
    // B properties win over A win over C. This mirrors what would happen
    // with inheritance if element extended B extended A extended C.
    //
    // Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting
    // `behaviors` array was [C, A, B].
    // Behavior lifecycle methods were called in behavior array order
    // followed by the element, e.g. (1) C.created, (2) A.created,
    // (3) B.created, (4) element.created. There was no support for
    // super, and "super-behavior" methods were callable only by name).
    //
    // 2.x
    // Behaviors are made into proper mixins which live in the
    // element's prototype chain. Behaviors are placed in the element prototype
    // eldest to youngest and de-duped youngest to oldest:
    // So, first [A, B, C, A, B] becomes [C, A, B] then,
    // the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),
    // (3) class(A), (4) class(B), (5) class(Polymer({...})).
    // Result:
    // This means element properties win over B properties win over A win
    // over C. (same as 1.x)
    // If lifecycle is called (super then me), order is
    // (1) C.created, (2) A.created, (3) B.created, (4) element.created
    // (again same as 1.x)
    function _mixinBehaviors(behaviors, klass) {
      for (let i=0; i<behaviors.length; i++) {
        let b = behaviors[i];
        if (b) {
          klass = Array.isArray(b) ? _mixinBehaviors(b, klass) :
            GenerateClassFromInfo(b, klass);
        }
      }
      return klass;
    }

    /**
     * @param {Array} behaviors List of behaviors to flatten.
     * @param {Array=} list Target list to flatten behaviors into.
     * @param {Array=} exclude List of behaviors to exclude from the list.
     * @return {!Array} Returns the list of flattened behaviors.
     */
    function flattenBehaviors(behaviors, list, exclude) {
      list = list || [];
      for (let i=behaviors.length-1; i >= 0; i--) {
        let b = behaviors[i];
        if (b) {
          if (Array.isArray(b)) {
            flattenBehaviors(b, list);
          } else {
            // dedup
            if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {
              list.unshift(b);
            }
          }
        } else {
          console.warn('behavior is null, check for missing or 404 import');
        }
      }
      return list;
    }

    /**
     * @param {!PolymerInit} info Polymer info object
     * @param {function(new:HTMLElement)} Base base class to extend with info object
     * @return {function(new:HTMLElement)} Generated class
     * @suppress {checkTypes}
     * @private
     */
    function GenerateClassFromInfo(info, Base) {

      /** @private */
      class PolymerGenerated extends Base {

        static get properties() {
          return info.properties;
        }

        static get observers() {
          return info.observers;
        }

        /**
         * @return {void}
         */
        created() {
          super.created();
          if (info.created) {
            info.created.call(this);
          }
        }

        /**
         * @return {void}
         */
        _registered() {
          super._registered();
          /* NOTE: `beforeRegister` is called here for bc, but the behavior
           is different than in 1.x. In 1.0, the method was called *after*
           mixing prototypes together but *before* processing of meta-objects.
           However, dynamic effects can still be set here and can be done either
           in `beforeRegister` or `registered`. It is no longer possible to set
           `is` in `beforeRegister` as you could in 1.x.
          */
          if (info.beforeRegister) {
            info.beforeRegister.call(Object.getPrototypeOf(this));
          }
          if (info.registered) {
            info.registered.call(Object.getPrototypeOf(this));
          }
        }

        /**
         * @return {void}
         */
        _applyListeners() {
          super._applyListeners();
          if (info.listeners) {
            for (let l in info.listeners) {
              this._addMethodEventListenerToNode(this, l, info.listeners[l]);
            }
          }
        }

        // note: exception to "super then me" rule;
        // do work before calling super so that super attributes
        // only apply if not already set.
        /**
         * @return {void}
         */
        _ensureAttributes() {
          if (info.hostAttributes) {
            for (let a in info.hostAttributes) {
              this._ensureAttribute(a, info.hostAttributes[a]);
            }
          }
          super._ensureAttributes();
        }

        /**
         * @return {void}
         */
        ready() {
          super.ready();
          if (info.ready) {
            info.ready.call(this);
          }
        }

        /**
         * @return {void}
         */
        attached() {
          super.attached();
          if (info.attached) {
            info.attached.call(this);
          }
        }

        /**
         * @return {void}
         */
        detached() {
          super.detached();
          if (info.detached) {
            info.detached.call(this);
          }
        }

        /**
         * Implements native Custom Elements `attributeChangedCallback` to
         * set an attribute value to a property via `_attributeToProperty`.
         *
         * @param {string} name Name of attribute that changed
         * @param {?string} old Old attribute value
         * @param {?string} value New attribute value
         * @return {void}
         */
        attributeChanged(name, old, value) {
          super.attributeChanged(name, old, value);
          if (info.attributeChanged) {
            info.attributeChanged.call(this, name, old, value);
          }
       }
      }

      PolymerGenerated.generatedFrom = info;

      for (let p in info) {
        // NOTE: cannot copy `metaProps` methods onto prototype at least because
        // `super.ready` must be called and is not included in the user fn.
        if (!(p in metaProps)) {
          let pd = Object.getOwnPropertyDescriptor(info, p);
          if (pd) {
            Object.defineProperty(PolymerGenerated.prototype, p, pd);
          }
        }
      }

      return PolymerGenerated;
    }

    /**
     * Generates a class that extends `LegacyElement` based on the
     * provided info object.  Metadata objects on the `info` object
     * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used
     * for Polymer's meta-programming systems, and any functions are copied
     * to the generated class.
     *
     * Valid "metadata" values are as follows:
     *
     * `is`: String providing the tag name to register the element under. In
     * addition, if a `dom-module` with the same id exists, the first template
     * in that `dom-module` will be stamped into the shadow root of this element,
     * with support for declarative event listeners (`on-...`), Polymer data
     * bindings (`[[...]]` and `{{...}}`), and id-based node finding into
     * `this.$`.
     *
     * `properties`: Object describing property-related metadata used by Polymer
     * features (key: property names, value: object containing property metadata).
     * Valid keys in per-property metadata include:
     * - `type` (String|Number|Object|Array|...): Used by
     *   `attributeChangedCallback` to determine how string-based attributes
     *   are deserialized to JavaScript property values.
     * - `notify` (boolean): Causes a change in the property to fire a
     *   non-bubbling event called `<property>-changed`. Elements that have
     *   enabled two-way binding to the property use this event to observe changes.
     * - `readOnly` (boolean): Creates a getter for the property, but no setter.
     *   To set a read-only property, use the private setter method
     *   `_setProperty(property, value)`.
     * - `observer` (string): Observer method name that will be called when
     *   the property changes. The arguments of the method are
     *   `(value, previousValue)`.
     * - `computed` (string): String describing method and dependent properties
     *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
     *   Computed properties are read-only by default and can only be changed
     *   via the return value of the computing method.
     *
     * `observers`: Array of strings describing multi-property observer methods
     *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).
     *
     * `listeners`: Object describing event listeners to be added to each
     *  instance of this element (key: event name, value: method name).
     *
     * `behaviors`: Array of additional `info` objects containing metadata
     * and callbacks in the same format as the `info` object here which are
     * merged into this element.
     *
     * `hostAttributes`: Object listing attributes to be applied to the host
     *  once created (key: attribute name, value: attribute value).  Values
     *  are serialized based on the type of the value.  Host attributes should
     *  generally be limited to attributes such as `tabIndex` and `aria-...`.
     *  Attributes in `hostAttributes` are only applied if a user-supplied
     *  attribute is not already present (attributes in markup override
     *  `hostAttributes`).
     *
     * In addition, the following Polymer-specific callbacks may be provided:
     * - `registered`: called after first instance of this element,
     * - `created`: called during `constructor`
     * - `attached`: called during `connectedCallback`
     * - `detached`: called during `disconnectedCallback`
     * - `ready`: called before first `attached`, after all properties of
     *   this element have been propagated to its template and all observers
     *   have run
     *
     * @param {!PolymerInit} info Object containing Polymer metadata and functions
     *   to become class methods.
     * @template T
     * @param {function(T):T} mixin Optional mixin to apply to legacy base class
     *   before extending with Polymer metaprogramming.
     * @return {function(new:HTMLElement)} Generated class
     */
    const Class = function(info, mixin) {
      if (!info) {
        console.warn(`Polymer's Class function requires \`info\` argument`);
      }
      const baseWithBehaviors = info.behaviors ?
        // note: mixinBehaviors ensures `LegacyElementMixin`.
        mixinBehaviors(info.behaviors, HTMLElement) :
        LegacyElementMixin(HTMLElement);
      const baseWithMixin = mixin ? mixin(baseWithBehaviors) : baseWithBehaviors;
      const klass = GenerateClassFromInfo(info, baseWithMixin);
      // decorate klass with registration info
      klass.is = info.is;
      return klass;
    };

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Legacy class factory and registration helper for defining Polymer
     * elements.
     *
     * This method is equivalent to
     *
     *     import {Class} from '@polymer/polymer/lib/legacy/class.js';
     *     customElements.define(info.is, Class(info));
     *
     * See `Class` for details on valid legacy metadata format for `info`.
     *
     * @global
     * @override
     * @function
     * @param {!PolymerInit} info Object containing Polymer metadata and functions
     *   to become class methods.
     * @return {function(new: HTMLElement)} Generated class
     * @suppress {duplicate, invalidCasts, checkTypes}
     */
    const Polymer = function(info) {
      // if input is a `class` (aka a function with a prototype), use the prototype
      // remember that the `constructor` will never be called
      let klass;
      if (typeof info === 'function') {
        klass = info;
      } else {
        klass = Polymer.Class(info);
      }
      customElements.define(klass.is, /** @type {!HTMLElement} */(klass));
      return klass;
    };

    Polymer.Class = Class;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // Common implementation for mixin & behavior
    function mutablePropertyChange(inst, property, value, old, mutableData) {
      let isObject;
      if (mutableData) {
        isObject = (typeof value === 'object' && value !== null);
        // Pull `old` for Objects from temp cache, but treat `null` as a primitive
        if (isObject) {
          old = inst.__dataTemp[property];
        }
      }
      // Strict equality check, but return false for NaN===NaN
      let shouldChange = (old !== value && (old === old || value === value));
      // Objects are stored in temporary cache (cleared at end of
      // turn), which is used for dirty-checking
      if (isObject && shouldChange) {
        inst.__dataTemp[property] = value;
      }
      return shouldChange;
    }

    /**
     * Element class mixin to skip strict dirty-checking for objects and arrays
     * (always consider them to be "dirty"), for use on elements utilizing
     * `PropertyEffects`
     *
     * By default, `PropertyEffects` performs strict dirty checking on
     * objects, which means that any deep modifications to an object or array will
     * not be propagated unless "immutable" data patterns are used (i.e. all object
     * references from the root to the mutation were changed).
     *
     * Polymer also provides a proprietary data mutation and path notification API
     * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
     * mutation and notification of deep changes in an object graph to all elements
     * bound to the same object graph.
     *
     * In cases where neither immutable patterns nor the data mutation API can be
     * used, applying this mixin will cause Polymer to skip dirty checking for
     * objects and arrays (always consider them to be "dirty").  This allows a
     * user to make a deep modification to a bound object graph, and then either
     * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
     * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
     * elements that wish to be updated based on deep mutations must apply this
     * mixin or otherwise skip strict dirty checking for objects/arrays.
     * Specifically, any elements in the binding tree between the source of a
     * mutation and the consumption of it must apply this mixin or enable the
     * `OptionalMutableData` mixin.
     *
     * In order to make the dirty check strategy configurable, see
     * `OptionalMutableData`.
     *
     * Note, the performance characteristics of propagating large object graphs
     * will be worse as opposed to using strict dirty checking with immutable
     * patterns or Polymer's path notification API.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin to skip strict dirty-checking for objects
     *   and arrays
     */
    const MutableData = dedupingMixin(superClass => {

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_MutableData}
       */
      class MutableData extends superClass {
        /**
         * Overrides `PropertyEffects` to provide option for skipping
         * strict equality checking for Objects and Arrays.
         *
         * This method pulls the value to dirty check against from the `__dataTemp`
         * cache (rather than the normal `__data` cache) for Objects.  Since the temp
         * cache is cleared at the end of a turn, this implementation allows
         * side-effects of deep object changes to be processed by re-setting the
         * same object (using the temp cache as an in-turn backstop to prevent
         * cycles due to 2-way notification).
         *
         * @param {string} property Property name
         * @param {*} value New property value
         * @param {*} old Previous property value
         * @return {boolean} Whether the property should be considered a change
         * @protected
         */
        _shouldPropertyChange(property, value, old) {
          return mutablePropertyChange(this, property, value, old, true);
        }

      }

      return MutableData;

    });

    /**
     * Element class mixin to add the optional ability to skip strict
     * dirty-checking for objects and arrays (always consider them to be
     * "dirty") by setting a `mutable-data` attribute on an element instance.
     *
     * By default, `PropertyEffects` performs strict dirty checking on
     * objects, which means that any deep modifications to an object or array will
     * not be propagated unless "immutable" data patterns are used (i.e. all object
     * references from the root to the mutation were changed).
     *
     * Polymer also provides a proprietary data mutation and path notification API
     * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
     * mutation and notification of deep changes in an object graph to all elements
     * bound to the same object graph.
     *
     * In cases where neither immutable patterns nor the data mutation API can be
     * used, applying this mixin will allow Polymer to skip dirty checking for
     * objects and arrays (always consider them to be "dirty").  This allows a
     * user to make a deep modification to a bound object graph, and then either
     * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
     * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
     * elements that wish to be updated based on deep mutations must apply this
     * mixin or otherwise skip strict dirty checking for objects/arrays.
     * Specifically, any elements in the binding tree between the source of a
     * mutation and the consumption of it must enable this mixin or apply the
     * `MutableData` mixin.
     *
     * While this mixin adds the ability to forgo Object/Array dirty checking,
     * the `mutableData` flag defaults to false and must be set on the instance.
     *
     * Note, the performance characteristics of propagating large object graphs
     * will be worse by relying on `mutableData: true` as opposed to using
     * strict dirty checking with immutable patterns or Polymer's path notification
     * API.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin to optionally skip strict dirty-checking
     *   for objects and arrays
     */
    const OptionalMutableData = dedupingMixin(superClass => {

      /**
       * @mixinClass
       * @polymer
       * @implements {Polymer_OptionalMutableData}
       */
      class OptionalMutableData extends superClass {

        static get properties() {
          return {
            /**
             * Instance-level flag for configuring the dirty-checking strategy
             * for this element.  When true, Objects and Arrays will skip dirty
             * checking, otherwise strict equality checking will be used.
             */
            mutableData: Boolean
          };
        }

        /**
         * Overrides `PropertyEffects` to provide option for skipping
         * strict equality checking for Objects and Arrays.
         *
         * When `this.mutableData` is true on this instance, this method
         * pulls the value to dirty check against from the `__dataTemp` cache
         * (rather than the normal `__data` cache) for Objects.  Since the temp
         * cache is cleared at the end of a turn, this implementation allows
         * side-effects of deep object changes to be processed by re-setting the
         * same object (using the temp cache as an in-turn backstop to prevent
         * cycles due to 2-way notification).
         *
         * @param {string} property Property name
         * @param {*} value New property value
         * @param {*} old Previous property value
         * @return {boolean} Whether the property should be considered a change
         * @protected
         */
        _shouldPropertyChange(property, value, old) {
          return mutablePropertyChange(this, property, value, old, this.mutableData);
        }
      }

      return OptionalMutableData;

    });

    // Export for use by legacy behavior
    MutableData._mutablePropertyChange = mutablePropertyChange;

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // Base class for HTMLTemplateElement extension that has property effects
    // machinery for propagating host properties to children. This is an ES5
    // class only because Babel (incorrectly) requires super() in the class
    // constructor even though no `this` is used and it returns an instance.
    let newInstance = null;

    /**
     * @constructor
     * @extends {HTMLTemplateElement}
     * @private
     */
    function HTMLTemplateElementExtension() { return newInstance; }
    HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {
      constructor: {
        value: HTMLTemplateElementExtension,
        writable: true
      }
    });

    /**
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @extends {HTMLTemplateElementExtension}
     * @private
     */
    const DataTemplate = PropertyEffects(HTMLTemplateElementExtension);

    /**
     * @constructor
     * @implements {Polymer_MutableData}
     * @extends {DataTemplate}
     * @private
     */
    const MutableDataTemplate = MutableData(DataTemplate);

    // Applies a DataTemplate subclass to a <template> instance
    function upgradeTemplate(template, constructor) {
      newInstance = template;
      Object.setPrototypeOf(template, constructor.prototype);
      new constructor();
      newInstance = null;
    }

    /**
     * Base class for TemplateInstance.
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @private
     */
    const base = PropertyEffects(class {});

    /**
     * @polymer
     * @customElement
     * @appliesMixin PropertyEffects
     * @unrestricted
     */
    class TemplateInstanceBase extends base {
      constructor(props) {
        super();
        this._configureProperties(props);
        this.root = this._stampTemplate(this.__dataHost);
        // Save list of stamped children
        let children = this.children = [];
        for (let n = this.root.firstChild; n; n=n.nextSibling) {
          children.push(n);
          n.__templatizeInstance = this;
        }
        if (this.__templatizeOwner &&
          this.__templatizeOwner.__hideTemplateChildren__) {
          this._showHideChildren(true);
        }
        // Flush props only when props are passed if instance props exist
        // or when there isn't instance props.
        let options = this.__templatizeOptions;
        if ((props && options.instanceProps) || !options.instanceProps) {
          this._enableProperties();
        }
      }
      /**
       * Configure the given `props` by calling `_setPendingProperty`. Also
       * sets any properties stored in `__hostProps`.
       * @private
       * @param {Object} props Object of property name-value pairs to set.
       * @return {void}
       */
      _configureProperties(props) {
        let options = this.__templatizeOptions;
        if (options.forwardHostProp) {
          for (let hprop in this.__hostProps) {
            this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);
          }
        }
        // Any instance props passed in the constructor will overwrite host props;
        // normally this would be a user error but we don't specifically filter them
        for (let iprop in props) {
          this._setPendingProperty(iprop, props[iprop]);
        }
      }
      /**
       * Forwards a host property to this instance.  This method should be
       * called on instances from the `options.forwardHostProp` callback
       * to propagate changes of host properties to each instance.
       *
       * Note this method enqueues the change, which are flushed as a batch.
       *
       * @param {string} prop Property or path name
       * @param {*} value Value of the property to forward
       * @return {void}
       */
      forwardHostProp(prop, value) {
        if (this._setPendingPropertyOrPath(prop, value, false, true)) {
          this.__dataHost._enqueueClient(this);
        }
      }

      /**
       * Override point for adding custom or simulated event handling.
       *
       * @override
       * @param {!Node} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       */
      _addEventListenerToNode(node, eventName, handler) {
        if (this._methodHost && this.__templatizeOptions.parentModel) {
          // If this instance should be considered a parent model, decorate
          // events this template instance as `model`
          this._methodHost._addEventListenerToNode(node, eventName, (e) => {
            e.model = this;
            handler(e);
          });
        } else {
          // Otherwise delegate to the template's host (which could be)
          // another template instance
          let templateHost = this.__dataHost.__dataHost;
          if (templateHost) {
            templateHost._addEventListenerToNode(node, eventName, handler);
          }
        }
      }
      /**
       * Shows or hides the template instance top level child elements. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       * @param {boolean} hide Set to true to hide the children;
       * set to false to show them.
       * @return {void}
       * @protected
       */
      _showHideChildren(hide) {
        let c = this.children;
        for (let i=0; i<c.length; i++) {
          let n = c[i];
          // Ignore non-changes
          if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {
            if (n.nodeType === Node.TEXT_NODE) {
              if (hide) {
                n.__polymerTextContent__ = n.textContent;
                n.textContent = '';
              } else {
                n.textContent = n.__polymerTextContent__;
              }
            // remove and replace slot
            } else if (n.localName === 'slot') {
              if (hide) {
                n.__polymerReplaced__ = document.createComment('hidden-slot');
                n.parentNode.replaceChild(n.__polymerReplaced__, n);
              } else {
                const replace = n.__polymerReplaced__;
                if (replace) {
                  replace.parentNode.replaceChild(n, replace);
                }
              }
            }

            else if (n.style) {
              if (hide) {
                n.__polymerDisplay__ = n.style.display;
                n.style.display = 'none';
              } else {
                n.style.display = n.__polymerDisplay__;
              }
            }
          }
          n.__hideTemplateChildren__ = hide;
          if (n._showHideChildren) {
            n._showHideChildren(hide);
          }
        }
      }
      /**
       * Overrides default property-effects implementation to intercept
       * textContent bindings while children are "hidden" and cache in
       * private storage for later retrieval.
       *
       * @override
       * @param {!Node} node The node to set a property on
       * @param {string} prop The property to set
       * @param {*} value The value to set
       * @return {void}
       * @protected
       */
      _setUnmanagedPropertyToNode(node, prop, value) {
        if (node.__hideTemplateChildren__ &&
            node.nodeType == Node.TEXT_NODE && prop == 'textContent') {
          node.__polymerTextContent__ = value;
        } else {
          super._setUnmanagedPropertyToNode(node, prop, value);
        }
      }
      /**
       * Find the parent model of this template instance.  The parent model
       * is either another templatize instance that had option `parentModel: true`,
       * or else the host element.
       *
       * @return {!Polymer_PropertyEffects} The parent model of this instance
       */
      get parentModel() {
        let model = this.__parentModel;
        if (!model) {
          let options;
          model = this;
          do {
            // A template instance's `__dataHost` is a <template>
            // `model.__dataHost.__dataHost` is the template's host
            model = model.__dataHost.__dataHost;
          } while ((options = model.__templatizeOptions) && !options.parentModel);
          this.__parentModel = model;
        }
        return model;
      }

      /**
       * Stub of HTMLElement's `dispatchEvent`, so that effects that may
       * dispatch events safely no-op.
       *
       * @param {Event} event Event to dispatch
       * @return {boolean} Always true.
       */
       dispatchEvent(event) { // eslint-disable-line no-unused-vars
         return true;
      }
    }

    /** @type {!DataTemplate} */
    TemplateInstanceBase.prototype.__dataHost;
    /** @type {!TemplatizeOptions} */
    TemplateInstanceBase.prototype.__templatizeOptions;
    /** @type {!Polymer_PropertyEffects} */
    TemplateInstanceBase.prototype._methodHost;
    /** @type {!Object} */
    TemplateInstanceBase.prototype.__templatizeOwner;
    /** @type {!Object} */
    TemplateInstanceBase.prototype.__hostProps;

    /**
     * @constructor
     * @extends {TemplateInstanceBase}
     * @implements {Polymer_MutableData}
     * @private
     */
    const MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);

    function findMethodHost(template) {
      // Technically this should be the owner of the outermost template.
      // In shadow dom, this is always getRootNode().host, but we can
      // approximate this via cooperation with our dataHost always setting
      // `_methodHost` as long as there were bindings (or id's) on this
      // instance causing it to get a dataHost.
      let templateHost = template.__dataHost;
      return templateHost && templateHost._methodHost || templateHost;
    }

    /* eslint-disable valid-jsdoc */
    /**
     * @suppress {missingProperties} class.prototype is not defined for some reason
     */
    function createTemplatizerClass(template, templateInfo, options) {
      // Anonymous class created by the templatize
      let base = options.mutableData ?
        MutableTemplateInstanceBase : TemplateInstanceBase;
      /**
       * @constructor
       * @extends {base}
       * @private
       */
      let klass = class extends base { };
      klass.prototype.__templatizeOptions = options;
      klass.prototype._bindTemplate(template);
      addNotifyEffects(klass, template, templateInfo, options);
      return klass;
    }

    /**
     * @suppress {missingProperties} class.prototype is not defined for some reason
     */
    function addPropagateEffects(template, templateInfo, options) {
      let userForwardHostProp = options.forwardHostProp;
      if (userForwardHostProp) {
        // Provide data API and property effects on memoized template class
        let klass = templateInfo.templatizeTemplateClass;
        if (!klass) {
          let base = options.mutableData ? MutableDataTemplate : DataTemplate;
          /** @private */
          klass = templateInfo.templatizeTemplateClass =
            class TemplatizedTemplate extends base {};
          // Add template - >instances effects
          // and host <- template effects
          let hostProps = templateInfo.hostProps;
          for (let prop in hostProps) {
            klass.prototype._addPropertyEffect('_host_' + prop,
              klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,
              {fn: createForwardHostPropEffect(prop, userForwardHostProp)});
            klass.prototype._createNotifyingProperty('_host_' + prop);
          }
        }
        upgradeTemplate(template, klass);
        // Mix any pre-bound data into __data; no need to flush this to
        // instances since they pull from the template at instance-time
        if (template.__dataProto) {
          // Note, generally `__dataProto` could be chained, but it's guaranteed
          // to not be since this is a vanilla template we just added effects to
          Object.assign(template.__data, template.__dataProto);
        }
        // Clear any pending data for performance
        template.__dataTemp = {};
        template.__dataPending = null;
        template.__dataOld = null;
        template._enableProperties();
      }
    }
    /* eslint-enable valid-jsdoc */

    function createForwardHostPropEffect(hostProp, userForwardHostProp) {
      return function forwardHostProp(template, prop, props) {
        userForwardHostProp.call(template.__templatizeOwner,
          prop.substring('_host_'.length), props[prop]);
      };
    }

    function addNotifyEffects(klass, template, templateInfo, options) {
      let hostProps = templateInfo.hostProps || {};
      for (let iprop in options.instanceProps) {
        delete hostProps[iprop];
        let userNotifyInstanceProp = options.notifyInstanceProp;
        if (userNotifyInstanceProp) {
          klass.prototype._addPropertyEffect(iprop,
            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
            {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});
        }
      }
      if (options.forwardHostProp && template.__dataHost) {
        for (let hprop in hostProps) {
          klass.prototype._addPropertyEffect(hprop,
            klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
            {fn: createNotifyHostPropEffect()});
        }
      }
    }

    function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {
      return function notifyInstanceProp(inst, prop, props) {
        userNotifyInstanceProp.call(inst.__templatizeOwner,
          inst, prop, props[prop]);
      };
    }

    function createNotifyHostPropEffect() {
      return function notifyHostProp(inst, prop, props) {
        inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);
      };
    }


    /**
     * Returns an anonymous `PropertyEffects` class bound to the
     * `<template>` provided.  Instancing the class will result in the
     * template being stamped into a document fragment stored as the instance's
     * `root` property, after which it can be appended to the DOM.
     *
     * Templates may utilize all Polymer data-binding features as well as
     * declarative event listeners.  Event listeners and inline computing
     * functions in the template will be called on the host of the template.
     *
     * The constructor returned takes a single argument dictionary of initial
     * property values to propagate into template bindings.  Additionally
     * host properties can be forwarded in, and instance properties can be
     * notified out by providing optional callbacks in the `options` dictionary.
     *
     * Valid configuration in `options` are as follows:
     *
     * - `forwardHostProp(property, value)`: Called when a property referenced
     *   in the template changed on the template's host. As this library does
     *   not retain references to templates instanced by the user, it is the
     *   templatize owner's responsibility to forward host property changes into
     *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
     *    method on the generated class should be called to forward host
     *   properties into the template to prevent unnecessary property-changed
     *   notifications. Any properties referenced in the template that are not
     *   defined in `instanceProps` will be notified up to the template's host
     *   automatically.
     * - `instanceProps`: Dictionary of property names that will be added
     *   to the instance by the templatize owner.  These properties shadow any
     *   host properties, and changes within the template to these properties
     *   will result in `notifyInstanceProp` being called.
     * - `mutableData`: When `true`, the generated class will skip strict
     *   dirty-checking for objects and arrays (always consider them to be
     *   "dirty").
     * - `notifyInstanceProp(instance, property, value)`: Called when
     *   an instance property changes.  Users may choose to call `notifyPath`
     *   on e.g. the owner to notify the change.
     * - `parentModel`: When `true`, events handled by declarative event listeners
     *   (`on-event="handler"`) will be decorated with a `model` property pointing
     *   to the template instance that stamped it.  It will also be returned
     *   from `instance.parentModel` in cases where template instance nesting
     *   causes an inner model to shadow an outer model.
     *
     * All callbacks are called bound to the `owner`. Any context
     * needed for the callbacks (such as references to `instances` stamped)
     * should be stored on the `owner` such that they can be retrieved via
     * `this`.
     *
     * When `options.forwardHostProp` is declared as an option, any properties
     * referenced in the template will be automatically forwarded from the host of
     * the `<template>` to instances, with the exception of any properties listed in
     * the `options.instanceProps` object.  `instanceProps` are assumed to be
     * managed by the owner of the instances, either passed into the constructor
     * or set after the fact.  Note, any properties passed into the constructor will
     * always be set to the instance (regardless of whether they would normally
     * be forwarded from the host).
     *
     * Note that `templatize()` can be run only once for a given `<template>`.
     * Further calls will result in an error. Also, there is a special
     * behavior if the template was duplicated through a mechanism such as
     * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to
     * `templatize()` return the same class for all duplicates of a template.
     * The class returned from `templatize()` is generated only once using
     * the `options` from the first call. This means that any `options`
     * provided to subsequent calls will be ignored. Therefore, it is very
     * important not to close over any variables inside the callbacks. Also,
     * arrow functions must be avoided because they bind the outer `this`.
     * Inside the callbacks, any contextual information can be accessed
     * through `this`, which points to the `owner`.
     *
     * @param {!HTMLTemplateElement} template Template to templatize
     * @param {Polymer_PropertyEffects=} owner Owner of the template instances;
     *   any optional callbacks will be bound to this owner.
     * @param {Object=} options Options dictionary (see summary for details)
     * @return {function(new:TemplateInstanceBase)} Generated class bound to the template
     *   provided
     * @suppress {invalidCasts}
     */
    function templatize(template, owner, options) {
      // Under strictTemplatePolicy, the templatized element must be owned
      // by a (trusted) Polymer element, indicated by existence of _methodHost;
      // e.g. for dom-if & dom-repeat in main document, _methodHost is null
      if (strictTemplatePolicy && !findMethodHost(template)) {
        throw new Error('strictTemplatePolicy: template owner not trusted');
      }
      options = /** @type {!TemplatizeOptions} */(options || {});
      if (template.__templatizeOwner) {
        throw new Error('A <template> can only be templatized once');
      }
      template.__templatizeOwner = owner;
      const ctor = owner ? owner.constructor : TemplateInstanceBase;
      let templateInfo = ctor._parseTemplate(template);
      // Get memoized base class for the prototypical template, which
      // includes property effects for binding template & forwarding
      let baseClass = templateInfo.templatizeInstanceClass;
      if (!baseClass) {
        baseClass = createTemplatizerClass(template, templateInfo, options);
        templateInfo.templatizeInstanceClass = baseClass;
      }
      // Host property forwarding must be installed onto template instance
      addPropagateEffects(template, templateInfo, options);
      // Subclass base class and add reference for this specific template
      /** @private */
      let klass = class TemplateInstance extends baseClass {};
      klass.prototype._methodHost = findMethodHost(template);
      klass.prototype.__dataHost = template;
      klass.prototype.__templatizeOwner = owner;
      klass.prototype.__hostProps = templateInfo.hostProps;
      klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign
      return klass;
    }

    /**
     * Returns the template "model" associated with a given element, which
     * serves as the binding scope for the template instance the element is
     * contained in. A template model is an instance of
     * `TemplateInstanceBase`, and should be used to manipulate data
     * associated with this template instance.
     *
     * Example:
     *
     *   let model = modelForElement(el);
     *   if (model.index < 10) {
     *     model.set('item.checked', true);
     *   }
     *
     * @param {HTMLTemplateElement} template The model will be returned for
     *   elements stamped from this template
     * @param {Node=} node Node for which to return a template model.
     * @return {TemplateInstanceBase} Template instance representing the
     *   binding scope for the element
     */
    function modelForElement(template, node) {
      let model;
      while (node) {
        // An element with a __templatizeInstance marks the top boundary
        // of a scope; walk up until we find one, and then ensure that
        // its __dataHost matches `this`, meaning this dom-repeat stamped it
        if ((model = node.__templatizeInstance)) {
          // Found an element stamped by another template; keep walking up
          // from its __dataHost
          if (model.__dataHost != template) {
            node = model.__dataHost;
          } else {
            return model;
          }
        } else {
          // Still in a template scope, keep going up until
          // a __templatizeInstance is found
          node = node.parentNode;
        }
      }
      return null;
    }

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @constructor
     * @extends {HTMLElement}
     * @implements {Polymer_PropertyEffects}
     * @implements {Polymer_OptionalMutableData}
     * @implements {Polymer_GestureEventListeners}
     * @private
     */
    const domBindBase =
      GestureEventListeners(
        OptionalMutableData(
          PropertyEffects(HTMLElement)));

    /**
     * Custom element to allow using Polymer's template features (data binding,
     * declarative event listeners, etc.) in the main document without defining
     * a new custom element.
     *
     * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`
     * element, which will immediately stamp the wrapped template into the main
     * document and bind elements to the `dom-bind` element itself as the
     * binding scope.
     *
     * @polymer
     * @customElement
     * @appliesMixin PropertyEffects
     * @appliesMixin OptionalMutableData
     * @appliesMixin GestureEventListeners
     * @extends {domBindBase}
     * @summary Custom element to allow using Polymer's template features (data
     *   binding, declarative event listeners, etc.) in the main document.
     */
    class DomBind extends domBindBase {

      static get observedAttributes() { return ['mutable-data']; }

      constructor() {
        super();
        if (strictTemplatePolicy) {
          throw new Error(`strictTemplatePolicy: dom-bind not allowed`);
        }
        this.root = null;
        this.$ = null;
        this.__children = null;
      }

      /**
       * @override
       * @return {void}
       */
      attributeChangedCallback() {
        // assumes only one observed attribute
        this.mutableData = true;
      }

      /**
       * @override
       * @return {void}
       */
      connectedCallback() {
        this.style.display = 'none';
        this.render();
      }

      /**
       * @override
       * @return {void}
       */
      disconnectedCallback() {
        this.__removeChildren();
      }

      __insertChildren() {
        this.parentNode.insertBefore(this.root, this);
      }

      __removeChildren() {
        if (this.__children) {
          for (let i=0; i<this.__children.length; i++) {
            this.root.appendChild(this.__children[i]);
          }
        }
      }

      /**
       * Forces the element to render its content. This is typically only
       * necessary to call if HTMLImports with the async attribute are used.
       * @return {void}
       */
      render() {
        let template;
        if (!this.__children) {
          template = /** @type {HTMLTemplateElement} */(template || this.querySelector('template'));
          if (!template) {
            // Wait until childList changes and template should be there by then
            let observer = new MutationObserver(() => {
              template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
              if (template) {
                observer.disconnect();
                this.render();
              } else {
                throw new Error('dom-bind requires a <template> child');
              }
            });
            observer.observe(this, {childList: true});
            return;
          }
          this.root = this._stampTemplate(
            /** @type {!HTMLTemplateElement} */(template));
          this.$ = this.root.$;
          this.__children = [];
          for (let n=this.root.firstChild; n; n=n.nextSibling) {
            this.__children[this.__children.length] = n;
          }
          this._enableProperties();
        }
        this.__insertChildren();
        this.dispatchEvent(new CustomEvent('dom-change', {
          bubbles: true,
          composed: true
        }));
      }

    }

    customElements.define('dom-bind', DomBind);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * @constructor
     * @implements {Polymer_OptionalMutableData}
     * @extends {PolymerElement}
     * @private
     */
    const domRepeatBase = OptionalMutableData(PolymerElement);

    /**
     * The `<dom-repeat>` element will automatically stamp and binds one instance
     * of template content to each object in a user-provided array.
     * `dom-repeat` accepts an `items` property, and one instance of the template
     * is stamped for each item into the DOM at the location of the `dom-repeat`
     * element.  The `item` property will be set on each instance's binding
     * scope, thus templates should bind to sub-properties of `item`.
     *
     * Example:
     *
     * ```html
     * <dom-module id="employee-list">
     *
     *   <template>
     *
     *     <div> Employee list: </div>
     *     <dom-repeat items="{{employees}}">
     *       <template>
     *         <div>First name: <span>{{item.first}}</span></div>
     *         <div>Last name: <span>{{item.last}}</span></div>
     *       </template>
     *     </dom-repeat>
     *
     *   </template>
     *
     * </dom-module>
     * ```
     *
     * With the following custom element definition:
     *
     * ```js
     * class EmployeeList extends PolymerElement {
     *   static get is() { return 'employee-list'; }
     *   static get properties() {
     *     return {
     *       employees: {
     *         value() {
     *           return [
     *             {first: 'Bob', last: 'Smith'},
     *             {first: 'Sally', last: 'Johnson'},
     *             ...
     *           ];
     *         }
     *       }
     *     };
     *   }
     * }
     * ```
     *
     * Notifications for changes to items sub-properties will be forwarded to template
     * instances, which will update via the normal structured data notification system.
     *
     * Mutations to the `items` array itself should be made using the Array
     * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,
     * `shift`, `unshift`), and template instances will be kept in sync with the
     * data in the array.
     *
     * Events caught by event handlers within the `dom-repeat` template will be
     * decorated with a `model` property, which represents the binding scope for
     * each template instance.  The model should be used to manipulate data on the
     * instance, for example `event.model.set('item.checked', true);`.
     *
     * Alternatively, the model for a template instance for an element stamped by
     * a `dom-repeat` can be obtained using the `modelForElement` API on the
     * `dom-repeat` that stamped it, for example
     * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
     * This may be useful for manipulating instance data of event targets obtained
     * by event handlers on parents of the `dom-repeat` (event delegation).
     *
     * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
     * `filter` and/or `sort` property.  This may be a string that names a function on
     * the host, or a function may be assigned to the property directly.  The functions
     * should implemented following the standard `Array` filter/sort API.
     *
     * In order to re-run the filter or sort functions based on changes to sub-fields
     * of `items`, the `observe` property may be set as a space-separated list of
     * `item` sub-fields that should cause a re-filter/sort when modified.  If
     * the filter or sort function depends on properties not contained in `items`,
     * the user should observe changes to those properties and call `render` to update
     * the view based on the dependency change.
     *
     * For example, for an `dom-repeat` with a filter of the following:
     *
     * ```js
     * isEngineer(item) {
     *   return item.type == 'engineer' || item.manager.type == 'engineer';
     * }
     * ```
     *
     * Then the `observe` property should be configured as follows:
     *
     * ```html
     * <dom-repeat items="{{employees}}" filter="isEngineer" observe="type manager.type">
     * ```
     *
     * @customElement
     * @polymer
     * @extends {domRepeatBase}
     * @appliesMixin OptionalMutableData
     * @summary Custom element for stamping instance of a template bound to
     *   items in an array.
     */
    class DomRepeat extends domRepeatBase {

      // Not needed to find template; can be removed once the analyzer
      // can find the tag name from customElements.define call
      static get is() { return 'dom-repeat'; }

      static get template() { return null; }

      static get properties() {

        /**
         * Fired whenever DOM is added or removed by this template (by
         * default, rendering occurs lazily).  To force immediate rendering, call
         * `render`.
         *
         * @event dom-change
         */
        return {

          /**
           * An array containing items determining how many instances of the template
           * to stamp and that that each template instance should bind to.
           */
          items: {
            type: Array
          },

          /**
           * The name of the variable to add to the binding scope for the array
           * element associated with a given template instance.
           */
          as: {
            type: String,
            value: 'item'
          },

          /**
           * The name of the variable to add to the binding scope with the index
           * of the instance in the sorted and filtered list of rendered items.
           * Note, for the index in the `this.items` array, use the value of the
           * `itemsIndexAs` property.
           */
          indexAs: {
            type: String,
            value: 'index'
          },

          /**
           * The name of the variable to add to the binding scope with the index
           * of the instance in the `this.items` array. Note, for the index of
           * this instance in the sorted and filtered list of rendered items,
           * use the value of the `indexAs` property.
           */
          itemsIndexAs: {
            type: String,
            value: 'itemsIndex'
          },

          /**
           * A function that should determine the sort order of the items.  This
           * property should either be provided as a string, indicating a method
           * name on the element's host, or else be an actual function.  The
           * function should match the sort function passed to `Array.sort`.
           * Using a sort function has no effect on the underlying `items` array.
           */
          sort: {
            type: Function,
            observer: '__sortChanged'
          },

          /**
           * A function that can be used to filter items out of the view.  This
           * property should either be provided as a string, indicating a method
           * name on the element's host, or else be an actual function.  The
           * function should match the sort function passed to `Array.filter`.
           * Using a filter function has no effect on the underlying `items` array.
           */
          filter: {
            type: Function,
            observer: '__filterChanged'
          },

          /**
           * When using a `filter` or `sort` function, the `observe` property
           * should be set to a space-separated list of the names of item
           * sub-fields that should trigger a re-sort or re-filter when changed.
           * These should generally be fields of `item` that the sort or filter
           * function depends on.
           */
          observe: {
            type: String,
            observer: '__observeChanged'
          },

          /**
           * When using a `filter` or `sort` function, the `delay` property
           * determines a debounce time in ms after a change to observed item
           * properties that must pass before the filter or sort is re-run.
           * This is useful in rate-limiting shuffling of the view when
           * item changes may be frequent.
           */
          delay: Number,

          /**
           * Count of currently rendered items after `filter` (if any) has been applied.
           * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
           * set of template instances is rendered.
           *
           */
          renderedItemCount: {
            type: Number,
            notify: true,
            readOnly: true
          },

          /**
           * Defines an initial count of template instances to render after setting
           * the `items` array, before the next paint, and puts the `dom-repeat`
           * into "chunking mode".  The remaining items will be created and rendered
           * incrementally at each animation frame therof until all instances have
           * been rendered.
           */
          initialCount: {
            type: Number,
            observer: '__initializeChunking'
          },

          /**
           * When `initialCount` is used, this property defines a frame rate (in
           * fps) to target by throttling the number of instances rendered each
           * frame to not exceed the budget for the target frame rate.  The
           * framerate is effectively the number of `requestAnimationFrame`s that
           * it tries to allow to actually fire in a given second. It does this
           * by measuring the time between `rAF`s and continuously adjusting the
           * number of items created each `rAF` to maintain the target framerate.
           * Setting this to a higher number allows lower latency and higher
           * throughput for event handlers and other tasks, but results in a
           * longer time for the remaining items to complete rendering.
           */
          targetFramerate: {
            type: Number,
            value: 20
          },

          _targetFrameTime: {
            type: Number,
            computed: '__computeFrameTime(targetFramerate)'
          }

        };

      }

      static get observers() {
        return [ '__itemsChanged(items.*)' ];
      }

      constructor() {
        super();
        this.__instances = [];
        this.__limit = Infinity;
        this.__pool = [];
        this.__renderDebouncer = null;
        this.__itemsIdxToInstIdx = {};
        this.__chunkCount = null;
        this.__lastChunkTime = null;
        this.__sortFn = null;
        this.__filterFn = null;
        this.__observePaths = null;
        /** @type {?function(new:Polymer.TemplateInstanceBase, *)} */
        this.__ctor = null;
        this.__isDetached = true;
        this.template = null;
      }

      /**
       * @override
       * @return {void}
       */
      disconnectedCallback() {
        super.disconnectedCallback();
        this.__isDetached = true;
        for (let i=0; i<this.__instances.length; i++) {
          this.__detachInstance(i);
        }
      }

      /**
       * @override
       * @return {void}
       */
      connectedCallback() {
        super.connectedCallback();
        this.style.display = 'none';
        // only perform attachment if the element was previously detached.
        if (this.__isDetached) {
          this.__isDetached = false;
          let parent = this.parentNode;
          for (let i=0; i<this.__instances.length; i++) {
            this.__attachInstance(i, parent);
          }
        }
      }

      __ensureTemplatized() {
        // Templatizing (generating the instance constructor) needs to wait
        // until ready, since won't have its template content handed back to
        // it until then
        if (!this.__ctor) {
          let template = this.template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
          if (!template) {
            // // Wait until childList changes and template should be there by then
            let observer = new MutationObserver(() => {
              if (this.querySelector('template')) {
                observer.disconnect();
                this.__render();
              } else {
                throw new Error('dom-repeat requires a <template> child');
              }
            });
            observer.observe(this, {childList: true});
            return false;
          }
          // Template instance props that should be excluded from forwarding
          let instanceProps = {};
          instanceProps[this.as] = true;
          instanceProps[this.indexAs] = true;
          instanceProps[this.itemsIndexAs] = true;
          this.__ctor = templatize(template, this, {
            mutableData: this.mutableData,
            parentModel: true,
            instanceProps: instanceProps,
            /**
             * @this {DomRepeat}
             * @param {string} prop Property to set
             * @param {*} value Value to set property to
             */
            forwardHostProp: function(prop, value) {
              let i$ = this.__instances;
              for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {
                inst.forwardHostProp(prop, value);
              }
            },
            /**
             * @this {DomRepeat}
             * @param {Object} inst Instance to notify
             * @param {string} prop Property to notify
             * @param {*} value Value to notify
             */
            notifyInstanceProp: function(inst, prop, value) {
              if (matches(this.as, prop)) {
                let idx = inst[this.itemsIndexAs];
                if (prop == this.as) {
                  this.items[idx] = value;
                }
                let path = translate(this.as, 'items.' + idx, prop);
                this.notifyPath(path, value);
              }
            }
          });
        }
        return true;
      }

      __getMethodHost() {
        // Technically this should be the owner of the outermost template.
        // In shadow dom, this is always getRootNode().host, but we can
        // approximate this via cooperation with our dataHost always setting
        // `_methodHost` as long as there were bindings (or id's) on this
        // instance causing it to get a dataHost.
        return this.__dataHost._methodHost || this.__dataHost;
      }

      __functionFromPropertyValue(functionOrMethodName) {
        if (typeof functionOrMethodName === 'string') {
          let methodName = functionOrMethodName;
          let obj = this.__getMethodHost();
          return function() { return obj[methodName].apply(obj, arguments); };
        }

        return functionOrMethodName;
      }

      __sortChanged(sort) {
        this.__sortFn = this.__functionFromPropertyValue(sort);
        if (this.items) { this.__debounceRender(this.__render); }
      }

      __filterChanged(filter) {
        this.__filterFn = this.__functionFromPropertyValue(filter);
        if (this.items) { this.__debounceRender(this.__render); }
      }

      __computeFrameTime(rate) {
        return Math.ceil(1000/rate);
      }

      __initializeChunking() {
        if (this.initialCount) {
          this.__limit = this.initialCount;
          this.__chunkCount = this.initialCount;
          this.__lastChunkTime = performance.now();
        }
      }

      __tryRenderChunk() {
        // Debounced so that multiple calls through `_render` between animation
        // frames only queue one new rAF (e.g. array mutation & chunked render)
        if (this.items && this.__limit < this.items.length) {
          this.__debounceRender(this.__requestRenderChunk);
        }
      }

      __requestRenderChunk() {
        requestAnimationFrame(()=>this.__renderChunk());
      }

      __renderChunk() {
        // Simple auto chunkSize throttling algorithm based on feedback loop:
        // measure actual time between frames and scale chunk count by ratio
        // of target/actual frame time
        let currChunkTime = performance.now();
        let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);
        this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;
        this.__limit += this.__chunkCount;
        this.__lastChunkTime = currChunkTime;
        this.__debounceRender(this.__render);
      }

      __observeChanged() {
        this.__observePaths = this.observe &&
          this.observe.replace('.*', '.').split(' ');
      }

      __itemsChanged(change) {
        if (this.items && !Array.isArray(this.items)) {
          console.warn('dom-repeat expected array for `items`, found', this.items);
        }
        // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
        // path to that instance synchronously (returns false for non-item paths)
        if (!this.__handleItemPath(change.path, change.value)) {
          // Otherwise, the array was reset ('items') or spliced ('items.splices'),
          // so queue a full refresh
          this.__initializeChunking();
          this.__debounceRender(this.__render);
        }
      }

      __handleObservedPaths(path) {
        // Handle cases where path changes should cause a re-sort/filter
        if (this.__sortFn || this.__filterFn) {
          if (!path) {
            // Always re-render if the item itself changed
            this.__debounceRender(this.__render, this.delay);
          } else if (this.__observePaths) {
            // Otherwise, re-render if the path changed matches an observed path
            let paths = this.__observePaths;
            for (let i=0; i<paths.length; i++) {
              if (path.indexOf(paths[i]) === 0) {
                this.__debounceRender(this.__render, this.delay);
              }
            }
          }
        }
      }

      /**
       * @param {function(this:DomRepeat)} fn Function to debounce.
       * @param {number=} delay Delay in ms to debounce by.
       */
      __debounceRender(fn, delay = 0) {
        this.__renderDebouncer = Debouncer.debounce(
              this.__renderDebouncer
            , delay > 0 ? timeOut.after(delay) : microTask
            , fn.bind(this));
        enqueueDebouncer(this.__renderDebouncer);
      }

      /**
       * Forces the element to render its content. Normally rendering is
       * asynchronous to a provoking change. This is done for efficiency so
       * that multiple changes trigger only a single render. The render method
       * should be called if, for example, template rendering is required to
       * validate application state.
       * @return {void}
       */
      render() {
        // Queue this repeater, then flush all in order
        this.__debounceRender(this.__render);
        flush();
      }

      __render() {
        if (!this.__ensureTemplatized()) {
          // No template found yet
          return;
        }
        this.__applyFullRefresh();
        // Reset the pool
        // TODO(kschaaf): Reuse pool across turns and nested templates
        // Now that objects/arrays are re-evaluated when set, we can safely
        // reuse pooled instances across turns, however we still need to decide
        // semantics regarding how long to hold, how many to hold, etc.
        this.__pool.length = 0;
        // Set rendered item count
        this._setRenderedItemCount(this.__instances.length);
        // Notify users
        this.dispatchEvent(new CustomEvent('dom-change', {
          bubbles: true,
          composed: true
        }));
        // Check to see if we need to render more items
        this.__tryRenderChunk();
      }

      __applyFullRefresh() {
        let items = this.items || [];
        let isntIdxToItemsIdx = new Array(items.length);
        for (let i=0; i<items.length; i++) {
          isntIdxToItemsIdx[i] = i;
        }
        // Apply user filter
        if (this.__filterFn) {
          isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>
            this.__filterFn(items[i], idx, array));
        }
        // Apply user sort
        if (this.__sortFn) {
          isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));
        }
        // items->inst map kept for item path forwarding
        const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};
        let instIdx = 0;
        // Generate instances and assign items
        const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);
        for (; instIdx<limit; instIdx++) {
          let inst = this.__instances[instIdx];
          let itemIdx = isntIdxToItemsIdx[instIdx];
          let item = items[itemIdx];
          itemsIdxToInstIdx[itemIdx] = instIdx;
          if (inst) {
            inst._setPendingProperty(this.as, item);
            inst._setPendingProperty(this.indexAs, instIdx);
            inst._setPendingProperty(this.itemsIndexAs, itemIdx);
            inst._flushProperties();
          } else {
            this.__insertInstance(item, instIdx, itemIdx);
          }
        }
        // Remove any extra instances from previous state
        for (let i=this.__instances.length-1; i>=instIdx; i--) {
          this.__detachAndRemoveInstance(i);
        }
      }

      __detachInstance(idx) {
        let inst = this.__instances[idx];
        for (let i=0; i<inst.children.length; i++) {
          let el = inst.children[i];
          inst.root.appendChild(el);
        }
        return inst;
      }

      __attachInstance(idx, parent) {
        let inst = this.__instances[idx];
        parent.insertBefore(inst.root, this);
      }

      __detachAndRemoveInstance(idx) {
        let inst = this.__detachInstance(idx);
        if (inst) {
          this.__pool.push(inst);
        }
        this.__instances.splice(idx, 1);
      }

      __stampInstance(item, instIdx, itemIdx) {
        let model = {};
        model[this.as] = item;
        model[this.indexAs] = instIdx;
        model[this.itemsIndexAs] = itemIdx;
        return new this.__ctor(model);
      }

      __insertInstance(item, instIdx, itemIdx) {
        let inst = this.__pool.pop();
        if (inst) {
          // TODO(kschaaf): If the pool is shared across turns, hostProps
          // need to be re-set to reused instances in addition to item
          inst._setPendingProperty(this.as, item);
          inst._setPendingProperty(this.indexAs, instIdx);
          inst._setPendingProperty(this.itemsIndexAs, itemIdx);
          inst._flushProperties();
        } else {
          inst = this.__stampInstance(item, instIdx, itemIdx);
        }
        let beforeRow = this.__instances[instIdx + 1];
        let beforeNode = beforeRow ? beforeRow.children[0] : this;
        this.parentNode.insertBefore(inst.root, beforeNode);
        this.__instances[instIdx] = inst;
        return inst;
      }

      // Implements extension point from Templatize mixin
      /**
       * Shows or hides the template instance top level child elements. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       * @param {boolean} hidden Set to true to hide the children;
       * set to false to show them.
       * @return {void}
       * @protected
       */
      _showHideChildren(hidden) {
        for (let i=0; i<this.__instances.length; i++) {
          this.__instances[i]._showHideChildren(hidden);
        }
      }

      // Called as a side effect of a host items.<key>.<path> path change,
      // responsible for notifying item.<path> changes to inst for key
      __handleItemPath(path, value) {
        let itemsPath = path.slice(6); // 'items.'.length == 6
        let dot = itemsPath.indexOf('.');
        let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);
        // If path was index into array...
        if (itemsIdx == parseInt(itemsIdx, 10)) {
          let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);
          // If the path is observed, it will trigger a full refresh
          this.__handleObservedPaths(itemSubPath);
          // Note, even if a rull refresh is triggered, always do the path
          // notification because unless mutableData is used for dom-repeat
          // and all elements in the instance subtree, a full refresh may
          // not trigger the proper update.
          let instIdx = this.__itemsIdxToInstIdx[itemsIdx];
          let inst = this.__instances[instIdx];
          if (inst) {
            let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');
            // This is effectively `notifyPath`, but avoids some of the overhead
            // of the public API
            inst._setPendingPropertyOrPath(itemPath, value, false, true);
            inst._flushProperties();
          }
          return true;
        }
      }

      /**
       * Returns the item associated with a given element stamped by
       * this `dom-repeat`.
       *
       * Note, to modify sub-properties of the item,
       * `modelForElement(el).set('item.<sub-prop>', value)`
       * should be used.
       *
       * @param {!HTMLElement} el Element for which to return the item.
       * @return {*} Item associated with the element.
       */
      itemForElement(el) {
        let instance = this.modelForElement(el);
        return instance && instance[this.as];
      }

      /**
       * Returns the inst index for a given element stamped by this `dom-repeat`.
       * If `sort` is provided, the index will reflect the sorted order (rather
       * than the original array order).
       *
       * @param {!HTMLElement} el Element for which to return the index.
       * @return {?number} Row index associated with the element (note this may
       *   not correspond to the array index if a user `sort` is applied).
       */
      indexForElement(el) {
        let instance = this.modelForElement(el);
        return instance && instance[this.indexAs];
      }

      /**
       * Returns the template "model" associated with a given element, which
       * serves as the binding scope for the template instance the element is
       * contained in. A template model
       * should be used to manipulate data associated with this template instance.
       *
       * Example:
       *
       *   let model = modelForElement(el);
       *   if (model.index < 10) {
       *     model.set('item.checked', true);
       *   }
       *
       * @param {!HTMLElement} el Element for which to return a template model.
       * @return {TemplateInstanceBase} Model representing the binding scope for
       *   the element.
       */
      modelForElement(el) {
        return modelForElement(this.template, el);
      }

    }

    customElements.define(DomRepeat.is, DomRepeat);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * The `<dom-if>` element will stamp a light-dom `<template>` child when
     * the `if` property becomes truthy, and the template can use Polymer
     * data-binding and declarative event features when used in the context of
     * a Polymer element's template.
     *
     * When `if` becomes falsy, the stamped content is hidden but not
     * removed from dom. When `if` subsequently becomes truthy again, the content
     * is simply re-shown. This approach is used due to its favorable performance
     * characteristics: the expense of creating template content is paid only
     * once and lazily.
     *
     * Set the `restamp` property to true to force the stamped content to be
     * created / destroyed when the `if` condition changes.
     *
     * @customElement
     * @polymer
     * @extends PolymerElement
     * @summary Custom element that conditionally stamps and hides or removes
     *   template content based on a boolean flag.
     */
    class DomIf extends PolymerElement {

      // Not needed to find template; can be removed once the analyzer
      // can find the tag name from customElements.define call
      static get is() { return 'dom-if'; }

      static get template() { return null; }

      static get properties() {

        return {

          /**
           * Fired whenever DOM is added or removed/hidden by this template (by
           * default, rendering occurs lazily).  To force immediate rendering, call
           * `render`.
           *
           * @event dom-change
           */

          /**
           * A boolean indicating whether this template should stamp.
           */
          if: {
            type: Boolean,
            observer: '__debounceRender'
          },

          /**
           * When true, elements will be removed from DOM and discarded when `if`
           * becomes false and re-created and added back to the DOM when `if`
           * becomes true.  By default, stamped elements will be hidden but left
           * in the DOM when `if` becomes false, which is generally results
           * in better performance.
           */
          restamp: {
            type: Boolean,
            observer: '__debounceRender'
          }

        };

      }

      constructor() {
        super();
        this.__renderDebouncer = null;
        this.__invalidProps = null;
        this.__instance = null;
        this._lastIf = false;
        this.__ctor = null;
        this.__hideTemplateChildren__ = false;
      }

      __debounceRender() {
        // Render is async for 2 reasons:
        // 1. To eliminate dom creation trashing if user code thrashes `if` in the
        //    same turn. This was more common in 1.x where a compound computed
        //    property could result in the result changing multiple times, but is
        //    mitigated to a large extent by batched property processing in 2.x.
        // 2. To avoid double object propagation when a bag including values bound
        //    to the `if` property as well as one or more hostProps could enqueue
        //    the <dom-if> to flush before the <template>'s host property
        //    forwarding. In that scenario creating an instance would result in
        //    the host props being set once, and then the enqueued changes on the
        //    template would set properties a second time, potentially causing an
        //    object to be set to an instance more than once.  Creating the
        //    instance async from flushing data ensures this doesn't happen. If
        //    we wanted a sync option in the future, simply having <dom-if> flush
        //    (or clear) its template's pending host properties before creating
        //    the instance would also avoid the problem.
        this.__renderDebouncer = Debouncer.debounce(
              this.__renderDebouncer
            , microTask
            , () => this.__render());
        enqueueDebouncer(this.__renderDebouncer);
      }

      /**
       * @override
       * @return {void}
       */
      disconnectedCallback() {
        super.disconnectedCallback();
        if (!this.parentNode ||
            (this.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&
             !this.parentNode.host)) {
          this.__teardownInstance();
        }
      }

      /**
       * @override
       * @return {void}
       */
      connectedCallback() {
        super.connectedCallback();
        this.style.display = 'none';
        if (this.if) {
          this.__debounceRender();
        }
      }

      /**
       * Forces the element to render its content. Normally rendering is
       * asynchronous to a provoking change. This is done for efficiency so
       * that multiple changes trigger only a single render. The render method
       * should be called if, for example, template rendering is required to
       * validate application state.
       * @return {void}
       */
      render() {
        flush();
      }

      __render() {
        if (this.if) {
          if (!this.__ensureInstance()) {
            // No template found yet
            return;
          }
          this._showHideChildren();
        } else if (this.restamp) {
          this.__teardownInstance();
        }
        if (!this.restamp && this.__instance) {
          this._showHideChildren();
        }
        if (this.if != this._lastIf) {
          this.dispatchEvent(new CustomEvent('dom-change', {
            bubbles: true,
            composed: true
          }));
          this._lastIf = this.if;
        }
      }

      __ensureInstance() {
        let parentNode = this.parentNode;
        // Guard against element being detached while render was queued
        if (parentNode) {
          if (!this.__ctor) {
            let template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
            if (!template) {
              // Wait until childList changes and template should be there by then
              let observer = new MutationObserver(() => {
                if (this.querySelector('template')) {
                  observer.disconnect();
                  this.__render();
                } else {
                  throw new Error('dom-if requires a <template> child');
                }
              });
              observer.observe(this, {childList: true});
              return false;
            }
            this.__ctor = templatize(template, this, {
              // dom-if templatizer instances require `mutable: true`, as
              // `__syncHostProperties` relies on that behavior to sync objects
              mutableData: true,
              /**
               * @param {string} prop Property to forward
               * @param {*} value Value of property
               * @this {DomIf}
               */
              forwardHostProp: function(prop, value) {
                if (this.__instance) {
                  if (this.if) {
                    this.__instance.forwardHostProp(prop, value);
                  } else {
                    // If we have an instance but are squelching host property
                    // forwarding due to if being false, note the invalidated
                    // properties so `__syncHostProperties` can sync them the next
                    // time `if` becomes true
                    this.__invalidProps = this.__invalidProps || Object.create(null);
                    this.__invalidProps[root(prop)] = true;
                  }
                }
              }
            });
          }
          if (!this.__instance) {
            this.__instance = new this.__ctor();
            parentNode.insertBefore(this.__instance.root, this);
          } else {
            this.__syncHostProperties();
            let c$ = this.__instance.children;
            if (c$ && c$.length) {
              // Detect case where dom-if was re-attached in new position
              let lastChild = this.previousSibling;
              if (lastChild !== c$[c$.length-1]) {
                for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {
                  parentNode.insertBefore(n, this);
                }
              }
            }
          }
        }
        return true;
      }

      __syncHostProperties() {
        let props = this.__invalidProps;
        if (props) {
          for (let prop in props) {
            this.__instance._setPendingProperty(prop, this.__dataHost[prop]);
          }
          this.__invalidProps = null;
          this.__instance._flushProperties();
        }
      }

      __teardownInstance() {
        if (this.__instance) {
          let c$ = this.__instance.children;
          if (c$ && c$.length) {
            // use first child parent, for case when dom-if may have been detached
            let parent = c$[0].parentNode;
              // Instance children may be disconnected from parents when dom-if
              // detaches if a tree was innerHTML'ed
              if (parent) {
              for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {
                parent.removeChild(n);
              }
            }
          }
          this.__instance = null;
          this.__invalidProps = null;
        }
      }

      /**
       * Shows or hides the template instance top level child elements. For
       * text nodes, `textContent` is removed while "hidden" and replaced when
       * "shown."
       * @return {void}
       * @protected
       * @suppress {visibility}
       */
      _showHideChildren() {
        let hidden = this.__hideTemplateChildren__ || !this.if;
        if (this.__instance) {
          this.__instance._showHideChildren(hidden);
        }
      }

    }

    customElements.define(DomIf.is, DomIf);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * Element mixin for recording dynamic associations between item paths in a
     * master `items` array and a `selected` array such that path changes to the
     * master array (at the host) element or elsewhere via data-binding) are
     * correctly propagated to items in the selected array and vice-versa.
     *
     * The `items` property accepts an array of user data, and via the
     * `select(item)` and `deselect(item)` API, updates the `selected` property
     * which may be bound to other parts of the application, and any changes to
     * sub-fields of `selected` item(s) will be kept in sync with items in the
     * `items` array.  When `multi` is false, `selected` is a property
     * representing the last selected item.  When `multi` is true, `selected`
     * is an array of multiply selected items.
     *
     * @polymer
     * @mixinFunction
     * @appliesMixin ElementMixin
     * @summary Element mixin for recording dynamic associations between item paths in a
     * master `items` array and a `selected` array
     */
    let ArraySelectorMixin = dedupingMixin(superClass => {

      /**
       * @constructor
       * @extends {superClass}
       * @implements {Polymer_ElementMixin}
       * @private
       */
      let elementBase = ElementMixin(superClass);

      /**
       * @polymer
       * @mixinClass
       * @implements {Polymer_ArraySelectorMixin}
       * @unrestricted
       */
      class ArraySelectorMixin extends elementBase {

        static get properties() {

          return {

            /**
             * An array containing items from which selection will be made.
             */
            items: {
              type: Array,
            },

            /**
             * When `true`, multiple items may be selected at once (in this case,
             * `selected` is an array of currently selected items).  When `false`,
             * only one item may be selected at a time.
             */
            multi: {
              type: Boolean,
              value: false,
            },

            /**
             * When `multi` is true, this is an array that contains any selected.
             * When `multi` is false, this is the currently selected item, or `null`
             * if no item is selected.
             * @type {?(Object|Array<!Object>)}
             */
            selected: {
              type: Object,
              notify: true
            },

            /**
             * When `multi` is false, this is the currently selected item, or `null`
             * if no item is selected.
             * @type {?Object}
             */
            selectedItem: {
              type: Object,
              notify: true
            },

            /**
             * When `true`, calling `select` on an item that is already selected
             * will deselect the item.
             */
            toggle: {
              type: Boolean,
              value: false
            }

          };
        }

        static get observers() {
          return ['__updateSelection(multi, items.*)'];
        }

        constructor() {
          super();
          this.__lastItems = null;
          this.__lastMulti = null;
          this.__selectedMap = null;
        }

        __updateSelection(multi, itemsInfo) {
          let path = itemsInfo.path;
          if (path == 'items') {
            // Case 1 - items array changed, so diff against previous array and
            // deselect any removed items and adjust selected indices
            let newItems = itemsInfo.base || [];
            let lastItems = this.__lastItems;
            let lastMulti = this.__lastMulti;
            if (multi !== lastMulti) {
              this.clearSelection();
            }
            if (lastItems) {
              let splices = calculateSplices(newItems, lastItems);
              this.__applySplices(splices);
            }
            this.__lastItems = newItems;
            this.__lastMulti = multi;
          } else if (itemsInfo.path == 'items.splices') {
            // Case 2 - got specific splice information describing the array mutation:
            // deselect any removed items and adjust selected indices
            this.__applySplices(itemsInfo.value.indexSplices);
          } else {
            // Case 3 - an array element was changed, so deselect the previous
            // item for that index if it was previously selected
            let part = path.slice('items.'.length);
            let idx = parseInt(part, 10);
            if ((part.indexOf('.') < 0) && part == idx) {
              this.__deselectChangedIdx(idx);
            }
          }
        }

        __applySplices(splices) {
          let selected = this.__selectedMap;
          // Adjust selected indices and mark removals
          for (let i=0; i<splices.length; i++) {
            let s = splices[i];
            selected.forEach((idx, item) => {
              if (idx < s.index) ; else if (idx >= s.index + s.removed.length) {
                // adjust index
                selected.set(item, idx + s.addedCount - s.removed.length);
              } else {
                // remove index
                selected.set(item, -1);
              }
            });
            for (let j=0; j<s.addedCount; j++) {
              let idx = s.index + j;
              if (selected.has(this.items[idx])) {
                selected.set(this.items[idx], idx);
              }
            }
          }
          // Update linked paths
          this.__updateLinks();
          // Remove selected items that were removed from the items array
          let sidx = 0;
          selected.forEach((idx, item) => {
            if (idx < 0) {
              if (this.multi) {
                this.splice('selected', sidx, 1);
              } else {
                this.selected = this.selectedItem = null;
              }
              selected.delete(item);
            } else {
              sidx++;
            }
          });
        }

        __updateLinks() {
          this.__dataLinkedPaths = {};
          if (this.multi) {
            let sidx = 0;
            this.__selectedMap.forEach(idx => {
              if (idx >= 0) {
                this.linkPaths('items.' + idx, 'selected.' + sidx++);
              }
            });
          } else {
            this.__selectedMap.forEach(idx => {
              this.linkPaths('selected', 'items.' + idx);
              this.linkPaths('selectedItem', 'items.' + idx);
            });
          }
        }

        /**
         * Clears the selection state.
         * @return {void}
         */
        clearSelection() {
          // Unbind previous selection
          this.__dataLinkedPaths = {};
          // The selected map stores 3 pieces of information:
          // key: items array object
          // value: items array index
          // order: selected array index
          this.__selectedMap = new Map();
          // Initialize selection
          this.selected = this.multi ? [] : null;
          this.selectedItem = null;
        }

        /**
         * Returns whether the item is currently selected.
         *
         * @param {*} item Item from `items` array to test
         * @return {boolean} Whether the item is selected
         */
        isSelected(item) {
          return this.__selectedMap.has(item);
        }

        /**
         * Returns whether the item is currently selected.
         *
         * @param {number} idx Index from `items` array to test
         * @return {boolean} Whether the item is selected
         */
        isIndexSelected(idx) {
          return this.isSelected(this.items[idx]);
        }

        __deselectChangedIdx(idx) {
          let sidx = this.__selectedIndexForItemIndex(idx);
          if (sidx >= 0) {
            let i = 0;
            this.__selectedMap.forEach((idx, item) => {
              if (sidx == i++) {
                this.deselect(item);
              }
            });
          }
        }

        __selectedIndexForItemIndex(idx) {
          let selected = this.__dataLinkedPaths['items.' + idx];
          if (selected) {
            return parseInt(selected.slice('selected.'.length), 10);
          }
        }

        /**
         * Deselects the given item if it is already selected.
         *
         * @param {*} item Item from `items` array to deselect
         * @return {void}
         */
        deselect(item) {
          let idx = this.__selectedMap.get(item);
          if (idx >= 0) {
            this.__selectedMap.delete(item);
            let sidx;
            if (this.multi) {
              sidx = this.__selectedIndexForItemIndex(idx);
            }
            this.__updateLinks();
            if (this.multi) {
              this.splice('selected', sidx, 1);
            } else {
              this.selected = this.selectedItem = null;
            }
          }
        }

        /**
         * Deselects the given index if it is already selected.
         *
         * @param {number} idx Index from `items` array to deselect
         * @return {void}
         */
        deselectIndex(idx) {
          this.deselect(this.items[idx]);
        }

        /**
         * Selects the given item.  When `toggle` is true, this will automatically
         * deselect the item if already selected.
         *
         * @param {*} item Item from `items` array to select
         * @return {void}
         */
        select(item) {
          this.selectIndex(this.items.indexOf(item));
        }

        /**
         * Selects the given index.  When `toggle` is true, this will automatically
         * deselect the item if already selected.
         *
         * @param {number} idx Index from `items` array to select
         * @return {void}
         */
        selectIndex(idx) {
          let item = this.items[idx];
          if (!this.isSelected(item)) {
            if (!this.multi) {
              this.__selectedMap.clear();
            }
            this.__selectedMap.set(item, idx);
            this.__updateLinks();
            if (this.multi) {
              this.push('selected', item);
            } else {
              this.selected = this.selectedItem = item;
            }
          } else if (this.toggle) {
            this.deselectIndex(idx);
          }
        }

      }

      return ArraySelectorMixin;

    });

    /**
     * @constructor
     * @extends {PolymerElement}
     * @implements {Polymer_ArraySelectorMixin}
     * @private
     */
    let baseArraySelector = ArraySelectorMixin(PolymerElement);

    /**
     * Element implementing the `ArraySelector` mixin, which records
     * dynamic associations between item paths in a master `items` array and a
     * `selected` array such that path changes to the master array (at the host)
     * element or elsewhere via data-binding) are correctly propagated to items
     * in the selected array and vice-versa.
     *
     * The `items` property accepts an array of user data, and via the
     * `select(item)` and `deselect(item)` API, updates the `selected` property
     * which may be bound to other parts of the application, and any changes to
     * sub-fields of `selected` item(s) will be kept in sync with items in the
     * `items` array.  When `multi` is false, `selected` is a property
     * representing the last selected item.  When `multi` is true, `selected`
     * is an array of multiply selected items.
     *
     * Example:
     *
     * ```js
     * import {PolymerElement} from '@polymer/polymer';
     * import '@polymer/polymer/lib/elements/array-selector.js';
     *
     * class EmployeeList extends PolymerElement {
     *   static get _template() {
     *     return html`
     *         <div> Employee list: </div>
     *         <dom-repeat id="employeeList" items="{{employees}}">
     *           <template>
     *             <div>First name: <span>{{item.first}}</span></div>
     *               <div>Last name: <span>{{item.last}}</span></div>
     *               <button on-click="toggleSelection">Select</button>
     *           </template>
     *         </dom-repeat>
     *
     *         <array-selector id="selector"
     *                         items="{{employees}}"
     *                         selected="{{selected}}"
     *                         multi toggle></array-selector>
     *
     *         <div> Selected employees: </div>
     *         <dom-repeat items="{{selected}}">
     *           <template>
     *             <div>First name: <span>{{item.first}}</span></div>
     *             <div>Last name: <span>{{item.last}}</span></div>
     *           </template>
     *         </dom-repeat>`;
     *   }
     *   static get is() { return 'employee-list'; }
     *   static get properties() {
     *     return {
     *       employees: {
     *         value() {
     *           return [
     *             {first: 'Bob', last: 'Smith'},
     *             {first: 'Sally', last: 'Johnson'},
     *             ...
     *           ];
     *         }
     *       }
     *     };
     *   }
     *   toggleSelection(e) {
     *     const item = this.$.employeeList.itemForElement(e.target);
     *     this.$.selector.select(item);
     *   }
     * }
     * ```
     *
     * @polymer
     * @customElement
     * @extends {baseArraySelector}
     * @appliesMixin ArraySelectorMixin
     * @summary Custom element that links paths between an input `items` array and
     *   an output `selected` item or array based on calls to its selection API.
     */
    class ArraySelector extends baseArraySelector {
      // Not needed to find template; can be removed once the analyzer
      // can find the tag name from customElements.define call
      static get is() { return 'array-selector'; }
    }
    customElements.define(ArraySelector.is, ArraySelector);

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    let mutablePropertyChange$1;
    /** @suppress {missingProperties} */
    (() => {
      mutablePropertyChange$1 = MutableData._mutablePropertyChange;
    })();

    /**
    @license
    Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */

    // bc
    const Base = LegacyElementMixin(HTMLElement).prototype;

    /**
    @license
    Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */

    // Contains all connected resizables that do not have a parent.
    var ORPHANS = new Set();

    /**
     * `IronResizableBehavior` is a behavior that can be used in Polymer elements to
     * coordinate the flow of resize events between "resizers" (elements that
     *control the size or hidden state of their children) and "resizables" (elements
     *that need to be notified when they are resized or un-hidden by their parents
     *in order to take action on their new measurements).
     *
     * Elements that perform measurement should add the `IronResizableBehavior`
     *behavior to their element definition and listen for the `iron-resize` event on
     *themselves. This event will be fired when they become showing after having
     *been hidden, when they are resized explicitly by another resizable, or when
     *the window has been resized.
     *
     * Note, the `iron-resize` event is non-bubbling.
     *
     * @polymerBehavior
     * @demo demo/index.html
     **/
    const IronResizableBehavior = {
      properties: {
        /**
         * The closest ancestor element that implements `IronResizableBehavior`.
         */
        _parentResizable: {
          type: Object,
          observer: '_parentResizableChanged',
        },

        /**
         * True if this element is currently notifying its descendant elements of
         * resize.
         */
        _notifyingDescendant: {
          type: Boolean,
          value: false,
        }
      },

      listeners: {
        'iron-request-resize-notifications': '_onIronRequestResizeNotifications'
      },

      created: function() {
        // We don't really need property effects on these, and also we want them
        // to be created before the `_parentResizable` observer fires:
        this._interestedResizables = [];
        this._boundNotifyResize = this.notifyResize.bind(this);
        this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);
      },

      attached: function() {
        this._requestResizeNotifications();
      },

      detached: function() {
        if (this._parentResizable) {
          this._parentResizable.stopResizeNotificationsFor(this);
        } else {
          ORPHANS.delete(this);
          window.removeEventListener('resize', this._boundNotifyResize);
        }

        this._parentResizable = null;
      },

      /**
       * Can be called to manually notify a resizable and its descendant
       * resizables of a resize change.
       */
      notifyResize: function() {
        if (!this.isAttached) {
          return;
        }

        this._interestedResizables.forEach(function(resizable) {
          if (this.resizerShouldNotify(resizable)) {
            this._notifyDescendant(resizable);
          }
        }, this);

        this._fireResize();
      },

      /**
       * Used to assign the closest resizable ancestor to this resizable
       * if the ancestor detects a request for notifications.
       */
      assignParentResizable: function(parentResizable) {
        if (this._parentResizable) {
          this._parentResizable.stopResizeNotificationsFor(this);
        }

        this._parentResizable = parentResizable;

        if (parentResizable &&
            parentResizable._interestedResizables.indexOf(this) === -1) {
          parentResizable._interestedResizables.push(this);
          parentResizable._subscribeIronResize(this);
        }
      },

      /**
       * Used to remove a resizable descendant from the list of descendants
       * that should be notified of a resize change.
       */
      stopResizeNotificationsFor: function(target) {
        var index = this._interestedResizables.indexOf(target);

        if (index > -1) {
          this._interestedResizables.splice(index, 1);
          this._unsubscribeIronResize(target);
        }
      },

      /**
       * Subscribe this element to listen to iron-resize events on the given target.
       *
       * Preferred over target.listen because the property renamer does not
       * understand to rename when the target is not specifically "this"
       *
       * @param {!HTMLElement} target Element to listen to for iron-resize events.
       */
      _subscribeIronResize: function(target) {
        target.addEventListener('iron-resize', this._boundOnDescendantIronResize);
      },

      /**
       * Unsubscribe this element from listening to to iron-resize events on the
       * given target.
       *
       * Preferred over target.unlisten because the property renamer does not
       * understand to rename when the target is not specifically "this"
       *
       * @param {!HTMLElement} target Element to listen to for iron-resize events.
       */
      _unsubscribeIronResize: function(target) {
        target.removeEventListener(
            'iron-resize', this._boundOnDescendantIronResize);
      },

      /**
       * This method can be overridden to filter nested elements that should or
       * should not be notified by the current element. Return true if an element
       * should be notified, or false if it should not be notified.
       *
       * @param {HTMLElement} element A candidate descendant element that
       * implements `IronResizableBehavior`.
       * @return {boolean} True if the `element` should be notified of resize.
       */
      resizerShouldNotify: function(element) {
        return true;
      },

      _onDescendantIronResize: function(event) {
        if (this._notifyingDescendant) {
          event.stopPropagation();
          return;
        }

        // no need to use this during shadow dom because of event retargeting
        if (!useShadow) {
          this._fireResize();
        }
      },

      _fireResize: function() {
        this.fire('iron-resize', null, {node: this, bubbles: false});
      },

      _onIronRequestResizeNotifications: function(event) {
        var target = /** @type {!EventTarget} */ (dom(event).rootTarget);
        if (target === this) {
          return;
        }

        target.assignParentResizable(this);
        this._notifyDescendant(target);

        event.stopPropagation();
      },

      _parentResizableChanged: function(parentResizable) {
        if (parentResizable) {
          window.removeEventListener('resize', this._boundNotifyResize);
        }
      },

      _notifyDescendant: function(descendant) {
        // NOTE(cdata): In IE10, attached is fired on children first, so it's
        // important not to notify them if the parent is not attached yet (or
        // else they will get redundantly notified when the parent attaches).
        if (!this.isAttached) {
          return;
        }

        this._notifyingDescendant = true;
        descendant.notifyResize();
        this._notifyingDescendant = false;
      },

      _requestResizeNotifications: function() {
        if (!this.isAttached) {
          return;
        }

        if (document.readyState === 'loading') {
          var _requestResizeNotifications =
              this._requestResizeNotifications.bind(this);
          document.addEventListener(
              'readystatechange', function readystatechanged() {
                document.removeEventListener('readystatechange', readystatechanged);
                _requestResizeNotifications();
              });
        } else {
          this._findParent();

          if (!this._parentResizable) {
            // If this resizable is an orphan, tell other orphans to try to find
            // their parent again, in case it's this resizable.
            ORPHANS.forEach(function(orphan) {
              if (orphan !== this) {
                orphan._findParent();
              }
            }, this);

            window.addEventListener('resize', this._boundNotifyResize);
            this.notifyResize();
          } else {
            // If this resizable has a parent, tell other child resizables of
            // that parent to try finding their parent again, in case it's this
            // resizable.
            this._parentResizable._interestedResizables
                .forEach(function(resizable) {
                  if (resizable !== this) {
                    resizable._findParent();
                  }
                }, this);
          }
        }
      },

      _findParent: function() {
        this.assignParentResizable(null);
        this.fire(
            'iron-request-resize-notifications',
            null,
            {node: this, bubbles: true, cancelable: true});

        if (!this._parentResizable) {
          ORPHANS.add(this);
        } else {
          ORPHANS.delete(this);
        }
      }
    };

    /**
    @license
    Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */

    /**
     * `Polymer.IronScrollTargetBehavior` allows an element to respond to scroll
     * events from a designated scroll target.
     *
     * Elements that consume this behavior can override the `_scrollHandler`
     * method to add logic on the scroll event.
     *
     * @demo demo/scrolling-region.html Scrolling Region
     * @demo demo/document.html Document Element
     * @polymerBehavior
     */
    const IronScrollTargetBehavior = {

      properties: {

        /**
         * Specifies the element that will handle the scroll event
         * on the behalf of the current element. This is typically a reference to an
         *element, but there are a few more posibilities:
         *
         * ### Elements id
         *
         *```html
         * <div id="scrollable-element" style="overflow: auto;">
         *  <x-element scroll-target="scrollable-element">
         *    <!-- Content-->
         *  </x-element>
         * </div>
         *```
         * In this case, the `scrollTarget` will point to the outer div element.
         *
         * ### Document scrolling
         *
         * For document scrolling, you can use the reserved word `document`:
         *
         *```html
         * <x-element scroll-target="document">
         *   <!-- Content -->
         * </x-element>
         *```
         *
         * ### Elements reference
         *
         *```js
         * appHeader.scrollTarget = document.querySelector('#scrollable-element');
         *```
         *
         * @type {HTMLElement}
         * @default document
         */
        scrollTarget: {
          type: HTMLElement,
          value: function() {
            return this._defaultScrollTarget;
          }
        }
      },

      observers: ['_scrollTargetChanged(scrollTarget, isAttached)'],

      /**
       * True if the event listener should be installed.
       */
      _shouldHaveListener: true,

      _scrollTargetChanged: function(scrollTarget, isAttached) {

        if (this._oldScrollTarget) {
          this._toggleScrollListener(false, this._oldScrollTarget);
          this._oldScrollTarget = null;
        }
        if (!isAttached) {
          return;
        }
        // Support element id references
        if (scrollTarget === 'document') {
          this.scrollTarget = this._doc;

        } else if (typeof scrollTarget === 'string') {
          var domHost = this.domHost;

          this.scrollTarget = domHost && domHost.$ ?
              domHost.$[scrollTarget] :
              dom(this.ownerDocument).querySelector('#' + scrollTarget);

        } else if (this._isValidScrollTarget()) {
          this._oldScrollTarget = scrollTarget;
          this._toggleScrollListener(this._shouldHaveListener, scrollTarget);
        }
      },

      /**
       * Runs on every scroll event. Consumer of this behavior may override this
       * method.
       *
       * @protected
       */
      _scrollHandler: function scrollHandler() {},

      /**
       * The default scroll target. Consumers of this behavior may want to customize
       * the default scroll target.
       *
       * @type {Element}
       */
      get _defaultScrollTarget() {
        return this._doc;
      },

      /**
       * Shortcut for the document element
       *
       * @type {Element}
       */
      get _doc() {
        return this.ownerDocument.documentElement;
      },

      /**
       * Gets the number of pixels that the content of an element is scrolled
       * upward.
       *
       * @type {number}
       */
      get _scrollTop() {
        if (this._isValidScrollTarget()) {
          return this.scrollTarget === this._doc ? window.pageYOffset :
                                                   this.scrollTarget.scrollTop;
        }
        return 0;
      },

      /**
       * Gets the number of pixels that the content of an element is scrolled to the
       * left.
       *
       * @type {number}
       */
      get _scrollLeft() {
        if (this._isValidScrollTarget()) {
          return this.scrollTarget === this._doc ? window.pageXOffset :
                                                   this.scrollTarget.scrollLeft;
        }
        return 0;
      },

      /**
       * Sets the number of pixels that the content of an element is scrolled
       * upward.
       *
       * @type {number}
       */
      set _scrollTop(top) {
        if (this.scrollTarget === this._doc) {
          window.scrollTo(window.pageXOffset, top);
        } else if (this._isValidScrollTarget()) {
          this.scrollTarget.scrollTop = top;
        }
      },

      /**
       * Sets the number of pixels that the content of an element is scrolled to the
       * left.
       *
       * @type {number}
       */
      set _scrollLeft(left) {
        if (this.scrollTarget === this._doc) {
          window.scrollTo(left, window.pageYOffset);
        } else if (this._isValidScrollTarget()) {
          this.scrollTarget.scrollLeft = left;
        }
      },

      /**
       * Scrolls the content to a particular place.
       *
       * @method scroll
       * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options
       * @param {number=} top The top position
       * @return {void}
       */
      scroll: function(leftOrOptions, top) {
        var left;

        if (typeof leftOrOptions === 'object') {
          left = leftOrOptions.left;
          top = leftOrOptions.top;
        } else {
          left = leftOrOptions;
        }

        left = left || 0;
        top = top || 0;
        if (this.scrollTarget === this._doc) {
          window.scrollTo(left, top);
        } else if (this._isValidScrollTarget()) {
          this.scrollTarget.scrollLeft = left;
          this.scrollTarget.scrollTop = top;
        }
      },

      /**
       * Gets the width of the scroll target.
       *
       * @type {number}
       */
      get _scrollTargetWidth() {
        if (this._isValidScrollTarget()) {
          return this.scrollTarget === this._doc ? window.innerWidth :
                                                   this.scrollTarget.offsetWidth;
        }
        return 0;
      },

      /**
       * Gets the height of the scroll target.
       *
       * @type {number}
       */
      get _scrollTargetHeight() {
        if (this._isValidScrollTarget()) {
          return this.scrollTarget === this._doc ? window.innerHeight :
                                                   this.scrollTarget.offsetHeight;
        }
        return 0;
      },

      /**
       * Returns true if the scroll target is a valid HTMLElement.
       *
       * @return {boolean}
       */
      _isValidScrollTarget: function() {
        return this.scrollTarget instanceof HTMLElement;
      },

      _toggleScrollListener: function(yes, scrollTarget) {
        var eventTarget = scrollTarget === this._doc ? window : scrollTarget;
        if (yes) {
          if (!this._boundScrollHandler) {
            this._boundScrollHandler = this._scrollHandler.bind(this);
            eventTarget.addEventListener('scroll', this._boundScrollHandler);
          }
        } else {
          if (this._boundScrollHandler) {
            eventTarget.removeEventListener('scroll', this._boundScrollHandler);
            this._boundScrollHandler = null;
          }
        }
      },

      /**
       * Enables or disables the scroll event listener.
       *
       * @param {boolean} yes True to add the event, False to remove it.
       */
      toggleScrollListener: function(yes) {
        this._shouldHaveListener = yes;
        this._toggleScrollListener(yes, this.scrollTarget);
      }

    };

    /**
    @license
    Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
    The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
    The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
    Code distributed by Google as part of the polymer project is also
    subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
    */
    var IOS = navigator.userAgent.match(/iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/);
    var IOS_TOUCH_SCROLLING = IOS && IOS[1] >= 8;
    var DEFAULT_PHYSICAL_COUNT = 3;
    var ANIMATION_FRAME = animationFrame$1;
    var IDLE_TIME = idlePeriod;
    var MICRO_TASK = microTask;

    const PolymerIronList = Class({

      behaviors: [
        IronResizableBehavior,
        IronScrollTargetBehavior
      ],

      /**
       * The ratio of hidden tiles that should remain in the scroll direction.
       * Recommended value ~0.5, so it will distribute tiles evenly in both directions.
       */
      _ratio: 0.5,

      /**
       * The padding-top value for the list.
       */
      _scrollerPaddingTop: 0,

      /**
       * This value is the same as `scrollTop`.
       */
      _scrollPosition: 0,

      /**
       * The sum of the heights of all the tiles in the DOM.
       */
      _physicalSize: 0,

      /**
       * The average `offsetHeight` of the tiles observed till now.
       */
      _physicalAverage: 0,

      /**
       * The number of tiles which `offsetHeight` > 0 observed until now.
       */
      _physicalAverageCount: 0,

      /**
       * The Y position of the item rendered in the `_physicalStart`
       * tile relative to the scrolling list.
       */
      _physicalTop: 0,

      /**
       * The number of items in the list.
       */
      _virtualCount: 0,

      /**
       * The estimated scroll height based on `_physicalAverage`
       */
      _estScrollHeight: 0,

      /**
       * The scroll height of the dom node
       */
      _scrollHeight: 0,

      /**
       * The height of the list. This is referred as the viewport in the context of list.
       */
      _viewportHeight: 0,

      /**
       * The width of the list. This is referred as the viewport in the context of list.
       */
      _viewportWidth: 0,

      /**
       * An array of DOM nodes that are currently in the tree
       * @type {?Array<!TemplatizerNode>}
       */
      _physicalItems: null,

      /**
       * An array of heights for each item in `_physicalItems`
       * @type {?Array<number>}
       */
      _physicalSizes: null,

      /**
       * A cached value for the first visible index.
       * See `firstVisibleIndex`
       * @type {?number}
       */
      _firstVisibleIndexVal: null,

      /**
       * A Polymer collection for the items.
       * @type {?Polymer.Collection}
       */
      _collection: null,

      /**
       * A cached value for the last visible index.
       * See `lastVisibleIndex`
       * @type {?number}
       */
      _lastVisibleIndexVal: null,

      /**
       * The max number of pages to render. One page is equivalent to the height of the list.
       */
      _maxPages: 2,

      /**
       * The virtual index of the focused item.
       */
      _focusedVirtualIndex: -1,

      /**
       * The maximum items per row
       */
      _itemsPerRow: 1,

      /**
       * The height of the row in grid layout.
       */
      _rowHeight: 0,

      /**
       * The cost of stamping a template in ms.
       */
      _templateCost: 0,

      /**
       * The bottom of the physical content.
       */
      get _physicalBottom() {
        return this._physicalTop + this._physicalSize;
      },

      /**
       * The bottom of the scroll.
       */
      get _scrollBottom() {
        return this._scrollPosition + this._viewportHeight;
      },

      /**
       * The n-th item rendered in the last physical item.
       */
      get _virtualEnd() {
        return this._virtualStart + this._physicalCount - 1;
      },

      /**
       * The height of the physical content that isn't on the screen.
       */
      get _hiddenContentSize() {
        var size = this.grid ? this._physicalRows * this._rowHeight : this._physicalSize;
        return size - this._viewportHeight;
      },

      /**
       * The maximum scroll top value.
       */
      get _maxScrollTop() {
        return this._estScrollHeight - this._viewportHeight + this._scrollOffset;
      },

      /**
       * The largest n-th value for an item such that it can be rendered in `_physicalStart`.
       */
      get _maxVirtualStart() {
        var virtualCount = this._convertIndexToCompleteRow(this._virtualCount);
        return Math.max(0, virtualCount - this._physicalCount);
      },

      set _virtualStart(val) {
        val = this._clamp(val, 0, this._maxVirtualStart);
        if (this.grid) {
          val = val - (val % this._itemsPerRow);
        }
        this._virtualStartVal = val;
      },

      get _virtualStart() {
        return this._virtualStartVal || 0;
      },

      /**
       * The k-th tile that is at the top of the scrolling list.
       */
      set _physicalStart(val) {
        val = val % this._physicalCount;
        if (val < 0) {
          val = this._physicalCount + val;
        }
        if (this.grid) {
          val = val - (val % this._itemsPerRow);
        }
        this._physicalStartVal = val;
      },

      get _physicalStart() {
        return this._physicalStartVal || 0;
      },

      /**
       * The k-th tile that is at the bottom of the scrolling list.
       */
      get _physicalEnd() {
        return (this._physicalStart + this._physicalCount - 1) % this._physicalCount;
      },

      set _physicalCount(val) {
        this._physicalCountVal = val;
      },

      get _physicalCount() {
        return this._physicalCountVal || 0;
      },

      /**
       * An optimal physical size such that we will have enough physical items
       * to fill up the viewport and recycle when the user scrolls.
       *
       * This default value assumes that we will at least have the equivalent
       * to a viewport of physical items above and below the user's viewport.
       */
      get _optPhysicalSize() {
        return this._viewportHeight === 0 ? Infinity : this._viewportHeight * this._maxPages;
      },

     /**
      * True if the current list is visible.
      */
      get _isVisible() {
        return Boolean(this.offsetWidth || this.offsetHeight);
      },

      /**
       * Gets the index of the first visible item in the viewport.
       *
       * @type {number}
       */
      get firstVisibleIndex() {
        var idx = this._firstVisibleIndexVal;
        if (idx == null) {
          var physicalOffset = this._physicalTop + this._scrollOffset;

          idx = this._iterateItems(function(pidx, vidx) {
            physicalOffset += this._getPhysicalSizeIncrement(pidx);

            if (physicalOffset > this._scrollPosition) {
              return this.grid ? vidx - (vidx % this._itemsPerRow) : vidx;
            }
            // Handle a partially rendered final row in grid mode
            if (this.grid && this._virtualCount - 1 === vidx) {
              return vidx - (vidx % this._itemsPerRow);
            }
          }) || 0;
          this._firstVisibleIndexVal = idx;
        }
        return idx;
      },

      /**
       * Gets the index of the last visible item in the viewport.
       *
       * @type {number}
       */
      get lastVisibleIndex() {
        var idx = this._lastVisibleIndexVal;
        if (idx == null) {
          if (this.grid) {
            idx = Math.min(this._virtualCount,
                this.firstVisibleIndex + this._estRowsInView * this._itemsPerRow - 1);
          } else {
            var physicalOffset = this._physicalTop + this._scrollOffset;
            this._iterateItems(function(pidx, vidx) {
              if (physicalOffset < this._scrollBottom) {
                idx = vidx;
              }
              physicalOffset += this._getPhysicalSizeIncrement(pidx);
            });
          }
          this._lastVisibleIndexVal = idx;
        }
        return idx;
      },

      get _scrollOffset() {
        return this._scrollerPaddingTop;
      },

      attached: function() {
        this._debounce('_render', this._render, ANIMATION_FRAME);
        // `iron-resize` is fired when the list is attached if the event is added
        // before attached causing unnecessary work.
        this.listen(this, 'iron-resize', '_resizeHandler');
      },

      detached: function() {
        this.unlisten(this, 'iron-resize', '_resizeHandler');
      },

      /**
       * Invoke this method if you dynamically update the viewport's
       * size or CSS padding.
       *
       * @method updateViewportBoundaries
       */
      updateViewportBoundaries: function() {
        var styles = window.getComputedStyle(this);
        this._scrollerPaddingTop = this.scrollTarget === this ? 0 :
            parseInt(styles['padding-top'], 10);
        this._isRTL = Boolean(styles.direction === 'rtl');
        this._viewportWidth = this.$.items.offsetWidth;
        this._viewportHeight = this._scrollTargetHeight;
        this.grid && this._updateGridMetrics();
      },

      /**
       * Recycles the physical items when needed.
       */
      _scrollHandler: function() {
        var scrollTop = Math.max(0, Math.min(this._maxScrollTop, this._scrollTop));
        var delta = scrollTop - this._scrollPosition;
        var isScrollingDown = delta >= 0;
        // Track the current scroll position.
        this._scrollPosition = scrollTop;
        // Clear indexes for first and last visible indexes.
        this._firstVisibleIndexVal = null;
        this._lastVisibleIndexVal = null;
        // Random access.
        if (Math.abs(delta) > this._physicalSize && this._physicalSize > 0) {
          delta = delta - this._scrollOffset;
          var idxAdjustment = Math.round(delta / this._physicalAverage) * this._itemsPerRow;
          this._virtualStart = this._virtualStart + idxAdjustment;
          this._physicalStart = this._physicalStart + idxAdjustment;
          // Estimate new physical offset.
          this._physicalTop = Math.floor(this._virtualStart / this._itemsPerRow) * this._physicalAverage;
          this._update();
        } else if (this._physicalCount > 0) {
          var reusables = this._getReusables(isScrollingDown);
          if (isScrollingDown) {
            this._physicalTop = reusables.physicalTop;
            this._virtualStart = this._virtualStart + reusables.indexes.length;
            this._physicalStart = this._physicalStart + reusables.indexes.length;
          } else {
            this._virtualStart = this._virtualStart - reusables.indexes.length;
            this._physicalStart = this._physicalStart - reusables.indexes.length;
          }
          this._update(reusables.indexes, isScrollingDown ? null : reusables.indexes);
          this._debounce('_increasePoolIfNeeded', this._increasePoolIfNeeded.bind(this, 0), MICRO_TASK);
        }
      },

      /**
       * Returns an object that contains the indexes of the physical items
       * that might be reused and the physicalTop.
       *
       * @param {boolean} fromTop If the potential reusable items are above the scrolling region.
       */
      _getReusables: function(fromTop) {
        var ith, lastIth, offsetContent, physicalItemHeight;
        var idxs = [];
        var protectedOffsetContent = this._hiddenContentSize * this._ratio;
        var virtualStart = this._virtualStart;
        var virtualEnd = this._virtualEnd;
        var physicalCount = this._physicalCount;
        var top = this._physicalTop + this._scrollOffset;
        var bottom = this._physicalBottom + this._scrollOffset;
        var scrollTop = this._scrollTop;
        var scrollBottom = this._scrollBottom;

        if (fromTop) {
          ith = this._physicalStart;
          lastIth = this._physicalEnd;
          offsetContent = scrollTop - top;
        } else {
          ith = this._physicalEnd;
          lastIth = this._physicalStart;
          offsetContent = bottom - scrollBottom;
        }
        while (true) {
          physicalItemHeight = this._getPhysicalSizeIncrement(ith);
          offsetContent = offsetContent - physicalItemHeight;
          if (idxs.length >= physicalCount || offsetContent <= protectedOffsetContent) {
            break;
          }
          if (fromTop) {
            // Check that index is within the valid range.
            if (virtualEnd + idxs.length + 1 >= this._virtualCount) {
              break;
            }
            // Check that the index is not visible.
            if (top + physicalItemHeight >= scrollTop - this._scrollOffset) {
              break;
            }
            idxs.push(ith);
            top = top + physicalItemHeight;
            ith = (ith + 1) % physicalCount;
          } else {
            // Check that index is within the valid range.
            if (virtualStart - idxs.length <= 0) {
              break;
            }
            // Check that the index is not visible.
            if (top + this._physicalSize - physicalItemHeight <= scrollBottom) {
              break;
            }
            idxs.push(ith);
            top = top - physicalItemHeight;
            ith = (ith === 0) ? physicalCount - 1 : ith - 1;
          }
        }
        return { indexes: idxs, physicalTop: top - this._scrollOffset };
      },

      /**
       * Update the list of items, starting from the `_virtualStart` item.
       * @param {!Array<number>=} itemSet
       * @param {!Array<number>=} movingUp
       */
      _update: function(itemSet, movingUp) {
        if ((itemSet && itemSet.length === 0) || this._physicalCount === 0) {
          return;
        }
        this._manageFocus();
        this._assignModels(itemSet);
        this._updateMetrics(itemSet);
        // Adjust offset after measuring.
        if (movingUp) {
          while (movingUp.length) {
            var idx = movingUp.pop();
            this._physicalTop -= this._getPhysicalSizeIncrement(idx);
          }
        }
        this._positionItems();
        this._updateScrollerSize();
      },

      _isClientFull: function() {
        return this._scrollBottom != 0 && this._physicalBottom-1 >= this._scrollBottom &&
            this._physicalTop <= this._scrollPosition;
      },

      /**
       * Increases the pool size.
       */
      _increasePoolIfNeeded: function(count) {
        var nextPhysicalCount = this._clamp(this._physicalCount + count,
            DEFAULT_PHYSICAL_COUNT, this._virtualCount - this._virtualStart);
        nextPhysicalCount = this._convertIndexToCompleteRow(nextPhysicalCount);
        var delta = nextPhysicalCount - this._physicalCount;
        var nextIncrease = Math.round(this._physicalCount * 0.5);

        if (delta < 0) {
          return;
        }
        if (delta > 0) {
          var ts = window.performance.now();
          // Concat arrays in place.
          [].push.apply(this._physicalItems, this._createPool(delta));
          // Push 0s into physicalSizes. Can't use Array.fill because IE11 doesn't support it.
          for (var i = 0; i < delta; i++) {
            this._physicalSizes.push(0);
          }
          this._physicalCount = this._physicalCount + delta;
          // Update the physical start if it needs to preserve the model of the focused item.
          // In this situation, the focused item is currently rendered and its model would
          // have changed after increasing the pool if the physical start remained unchanged.
          if (this._physicalStart > this._physicalEnd &&
              this._isIndexRendered(this._focusedVirtualIndex) &&
              this._getPhysicalIndex(this._focusedVirtualIndex) < this._physicalEnd) {
            this._physicalStart = this._physicalStart + delta;
          }
          this._update();
          this._templateCost = (window.performance.now() - ts) / delta;
          nextIncrease = Math.round(this._physicalCount * 0.5);
        }
        // The upper bounds is not fixed when dealing with a grid that doesn't
        // fill it's last row with the exact number of items per row.
        if (this._virtualEnd >= this._virtualCount - 1 || nextIncrease === 0) ; else if (!this._isClientFull()) {
          this._debounce(
            '_increasePoolIfNeeded',
            this._increasePoolIfNeeded.bind(
              this,
              nextIncrease
            ), MICRO_TASK);
        } else if (this._physicalSize < this._optPhysicalSize) {
          // Yield and increase the pool during idle time until the physical size is optimal.
          this._debounce(
            '_increasePoolIfNeeded',
            this._increasePoolIfNeeded.bind(
              this,
              this._clamp(Math.round(50 / this._templateCost), 1, nextIncrease)
            ), IDLE_TIME);
        }
      },

      /**
       * Renders the a new list.
       */
      _render: function() {
        if (!this.isAttached || !this._isVisible) {
          return;
        }
        if (this._physicalCount !== 0) {
          var reusables = this._getReusables(true);
          this._physicalTop = reusables.physicalTop;
          this._virtualStart = this._virtualStart + reusables.indexes.length;
          this._physicalStart = this._physicalStart + reusables.indexes.length;
          this._update(reusables.indexes);
          this._update();
          this._increasePoolIfNeeded(0);
        } else if (this._virtualCount > 0) {
          // Initial render
          this.updateViewportBoundaries();
          this._increasePoolIfNeeded(DEFAULT_PHYSICAL_COUNT);
        }
      },

      /**
       * Called when the items have changed. That is, reassignments
       * to `items`, splices or updates to a single item.
       */
      _itemsChanged: function(change) {
        if (change.path === 'items') {
          this._virtualStart = 0;
          this._physicalTop = 0;
          this._virtualCount = this.items ? this.items.length : 0;
          this._collection = this.items && undefined ?
              undefined.get(this.items) : null;
          this._physicalIndexForKey = {};
          this._firstVisibleIndexVal = null;
          this._lastVisibleIndexVal = null;
          this._physicalCount = this._physicalCount || 0;
          this._physicalItems = this._physicalItems || [];
          this._physicalSizes = this._physicalSizes || [];
          this._physicalStart = 0;
          if (this._scrollTop > this._scrollOffset) {
            this._resetScrollPosition(0);
          }
          this._removeFocusedItem();
          this._debounce('_render', this._render, ANIMATION_FRAME);
        }
      },

      /**
       * Executes a provided function per every physical index in `itemSet`
       * `itemSet` default value is equivalent to the entire set of physical indexes.
       *
       * @param {!function(number, number)} fn
       * @param {!Array<number>=} itemSet
       */
      _iterateItems: function(fn, itemSet) {
        var pidx, vidx, rtn, i;

        if (arguments.length === 2 && itemSet) {
          for (i = 0; i < itemSet.length; i++) {
            pidx = itemSet[i];
            vidx = this._computeVidx(pidx);
            if ((rtn = fn.call(this, pidx, vidx)) != null) {
              return rtn;
            }
          }
        } else {
          pidx = this._physicalStart;
          vidx = this._virtualStart;
          for (; pidx < this._physicalCount; pidx++, vidx++) {
            if ((rtn = fn.call(this, pidx, vidx)) != null) {
              return rtn;
            }
          }
          for (pidx = 0; pidx < this._physicalStart; pidx++, vidx++) {
            if ((rtn = fn.call(this, pidx, vidx)) != null) {
              return rtn;
            }
          }
        }
      },

      /**
       * Returns the virtual index for a given physical index
       *
       * @param {number} pidx Physical index
       * @return {number}
       */
      _computeVidx: function(pidx) {
        if (pidx >= this._physicalStart) {
          return this._virtualStart + (pidx - this._physicalStart);
        }
        return this._virtualStart + (this._physicalCount - this._physicalStart) + pidx;
      },

      /**
       * Updates the height for a given set of items.
       *
       * @param {!Array<number>=} itemSet
       */
      _updateMetrics: function(itemSet) {
        // Make sure we distributed all the physical items
        // so we can measure them.
        flush ? flush() : flush();

        var newPhysicalSize = 0;
        var oldPhysicalSize = 0;
        var prevAvgCount = this._physicalAverageCount;
        var prevPhysicalAvg = this._physicalAverage;

        this._iterateItems(function(pidx, vidx) {
          oldPhysicalSize += this._physicalSizes[pidx];
          this._physicalSizes[pidx] = this._physicalItems[pidx].offsetHeight;
          newPhysicalSize += this._physicalSizes[pidx];
          this._physicalAverageCount += this._physicalSizes[pidx] ? 1 : 0;
        }, itemSet);

        if (this.grid) {
          this._updateGridMetrics();
          this._physicalSize = Math.ceil(this._physicalCount / this._itemsPerRow) * this._rowHeight;
        } else {
          oldPhysicalSize = (this._itemsPerRow === 1) ? oldPhysicalSize :  Math.ceil(this._physicalCount / this._itemsPerRow) * this._rowHeight;
          this._physicalSize = this._physicalSize + newPhysicalSize - oldPhysicalSize;
          this._itemsPerRow = 1;
        }
        // Update the average if it measured something.
        if (this._physicalAverageCount !== prevAvgCount) {
          this._physicalAverage = Math.round(
              ((prevPhysicalAvg * prevAvgCount) + newPhysicalSize) /
              this._physicalAverageCount);
        }
      },

      /**
       * Updates the position of the physical items.
       */
      _positionItems: function() {
        this._adjustScrollPosition();

        var y = this._physicalTop;

        this._iterateItems(function(pidx, vidx) {
          this.translate3d(0, y + 'px', 0, this._physicalItems[pidx]);
          y += this._physicalSizes[pidx];
        });
      },

      _getPhysicalSizeIncrement: function(pidx) {
        if (!this.grid) {
          return this._physicalSizes[pidx];
        }
        if (this._computeVidx(pidx) % this._itemsPerRow !== this._itemsPerRow - 1) {
          return 0;
        }
        return this._rowHeight;
      },

      /**
       * Adjusts the scroll position when it was overestimated.
       */
      _adjustScrollPosition: function() {
        var deltaHeight = this._virtualStart === 0 ? this._physicalTop :
            Math.min(this._scrollPosition + this._physicalTop, 0);
        // Note: the delta can be positive or negative.
        if (deltaHeight !== 0) {
          this._physicalTop = this._physicalTop - deltaHeight;
          var scrollTop = this._scrollTop;
          // juking scroll position during interial scrolling on iOS is no bueno
          if (!IOS_TOUCH_SCROLLING && scrollTop > 0) {
            this._resetScrollPosition(scrollTop - deltaHeight);
          }
        }
      },

      /**
       * Sets the position of the scroll.
       */
      _resetScrollPosition: function(pos) {
        if (this.scrollTarget && pos >= 0) {
          this._scrollTop = pos;
          this._scrollPosition = this._scrollTop;
        }
      },

      /**
       * Sets the scroll height, that's the height of the content,
       *
       * @param {boolean=} forceUpdate If true, updates the height no matter what.
       */
      _updateScrollerSize: function(forceUpdate) {
        if (this.grid) {
          this._estScrollHeight = this._virtualRowCount * this._rowHeight;
        } else {
          this._estScrollHeight = (this._physicalBottom +
              Math.max(this._virtualCount - this._physicalCount - this._virtualStart, 0) * this._physicalAverage);
        }
        forceUpdate = forceUpdate || this._scrollHeight === 0;
        forceUpdate = forceUpdate || this._scrollPosition >= this._estScrollHeight - this._physicalSize;
        forceUpdate = forceUpdate || this.grid && this.$.items.style.height < this._estScrollHeight;
        // Amortize height adjustment, so it won't trigger large repaints too often.
        if (forceUpdate || Math.abs(this._estScrollHeight - this._scrollHeight) >= this._viewportHeight) {
          this.$.items.style.height = this._estScrollHeight + 'px';
          this._scrollHeight = this._estScrollHeight;
        }
      },

      /**
       * Scroll to a specific index in the virtual list regardless
       * of the physical items in the DOM tree.
       *
       * @method scrollToIndex
       * @param {number} idx The index of the item
       */
      scrollToIndex: function(idx) {
        if (typeof idx !== 'number' || idx < 0 || idx > this.items.length - 1) {
          return;
        }
        flush ? flush() : flush();
        // Items should have been rendered prior scrolling to an index.
        if (this._physicalCount === 0) {
          return;
        }
        idx = this._clamp(idx, 0, this._virtualCount-1);
        // Update the virtual start only when needed.
        if (!this._isIndexRendered(idx) || idx >= this._maxVirtualStart) {
          this._virtualStart = this.grid ? (idx - this._itemsPerRow * 2) : (idx - 1);
        }
        this._manageFocus();
        this._assignModels();
        this._updateMetrics();
        // Estimate new physical offset.
        this._physicalTop = Math.floor(this._virtualStart / this._itemsPerRow)  * this._physicalAverage;

        var currentTopItem = this._physicalStart;
        var currentVirtualItem = this._virtualStart;
        var targetOffsetTop = 0;
        var hiddenContentSize = this._hiddenContentSize;
        // scroll to the item as much as we can.
        while (currentVirtualItem < idx && targetOffsetTop <= hiddenContentSize) {
          targetOffsetTop = targetOffsetTop + this._getPhysicalSizeIncrement(currentTopItem);
          currentTopItem = (currentTopItem + 1) % this._physicalCount;
          currentVirtualItem++;
        }
        this._updateScrollerSize(true);
        this._positionItems();
        this._resetScrollPosition(this._physicalTop + this._scrollOffset + targetOffsetTop);
        this._increasePoolIfNeeded(0);
        // clear cached visible index.
        this._firstVisibleIndexVal = null;
        this._lastVisibleIndexVal = null;
      },

      /**
       * Reset the physical average and the average count.
       */
      _resetAverage: function() {
        this._physicalAverage = 0;
        this._physicalAverageCount = 0;
      },

      /**
       * A handler for the `iron-resize` event triggered by `IronResizableBehavior`
       * when the element is resized.
       */
      _resizeHandler: function() {
        this._debounce('_render', function() {
          // clear cached visible index.
          this._firstVisibleIndexVal = null;
          this._lastVisibleIndexVal = null;
          // Skip the resize event on touch devices when the address bar slides up.
          var delta = Math.abs(this._viewportHeight - this._scrollTargetHeight);
          this.updateViewportBoundaries();
          if (this._isVisible) {
            // Reinstall the scroll event listener.
            this.toggleScrollListener(true);
            this._resetAverage();
            this._render();
          } else {
            // Uninstall the scroll event listener.
            this.toggleScrollListener(false);
          }
        }, ANIMATION_FRAME);
      },

      /**
       * Converts a random index to the index of the item that completes it's row.
       * Allows for better order and fill computation when grid == true.
       */
      _convertIndexToCompleteRow: function(idx) {
        // when grid == false _itemPerRow can be unset.
        this._itemsPerRow = this._itemsPerRow || 1;
        return this.grid ? Math.ceil(idx / this._itemsPerRow) * this._itemsPerRow : idx;
      },

      _isIndexRendered: function(idx) {
        return idx >= this._virtualStart && idx <= this._virtualEnd;
      },

      _getPhysicalIndex: function(vidx) {
        return (this._physicalStart + (vidx - this._virtualStart)) % this._physicalCount;
      },

      _clamp: function(v, min, max) {
        return Math.min(max, Math.max(min, v));
      },

      _debounce: function(name, cb, asyncModule) {
        this._debouncers = this._debouncers || {};
        this._debouncers[name] = Debouncer.debounce(
          this._debouncers[name],
          asyncModule,
          cb.bind(this));
        enqueueDebouncer(this._debouncers[name]);
      }

    });

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * This Element is used internally by vaadin-grid.
     *
     * @private
     */
    class GridScrollerElement extends PolymerIronList {

      static get is() {
        return 'vaadin-grid-scroller';
      }

      static get properties() {
        return {
          size: {
            type: Number,
            notify: true
          },
          _vidxOffset: {
            value: 0
          }
        };
      }

      static get observers() {
        return [
          '_effectiveSizeChanged(_effectiveSize)'
        ];
      }

      connectedCallback() {
        super.connectedCallback();
        this._scrollHandler();
      }

      /**
      * @protected
      */
      _updateScrollerItem(item, index) {}
      /**
      * @protected
      */
      _afterScroll() {}
      /**
      * @protected
      */
      _getRowTarget() {}
      /**
      * @protected
      */
      _createScrollerRows() {}
      /**
      * @protected
      */
      _canPopulate() {}

      /**
      * @private
      */
      scrollToIndex(index) {
        this._warnPrivateAPIAccess('scrollToIndex');

        if (index > 0) {
          this._pendingScrollToIndex = null;
        }
        if (!parseInt(this.$.items.style.borderTopWidth) && index > 0) {
          // Schedule another scroll to be invoked once init is complete
          this._pendingScrollToIndex = index;
        }

        this._scrollingToIndex = true;
        index = Math.min(Math.max(index, 0), this._effectiveSize - 1);
        this.$.table.scrollTop = index / this._effectiveSize * (this.$.table.scrollHeight - this.$.table.offsetHeight);
        this._scrollHandler();

        if (this._accessIronListAPI(() => this._maxScrollTop) && this._virtualCount < this._effectiveSize) {
          this._adjustVirtualIndexOffset(1000000);
        }

        this._accessIronListAPI(() => super.scrollToIndex(index - this._vidxOffset));
        this._scrollHandler();

        // Ensure scroll position
        const row = Array.from(this.$.items.children).filter(child => child.index === index)[0];
        if (row) {
          const headerOffset = row.getBoundingClientRect().top - this.$.header.getBoundingClientRect().bottom;
          if (Math.abs(headerOffset) > 1) {
            this.$.table.scrollTop += headerOffset;
            this._scrollHandler();
          }
        }

        this._scrollingToIndex = false;
      }

      _effectiveSizeChanged(size) {
        let fvi; // first visible (adjusted) index
        let fviOffset = 0;
        this._iterateItems((pidx, vidx) => {
          if (vidx === this._firstVisibleIndex) {
            const row = this._physicalItems[pidx];
            fvi = row.index;
            fviOffset = row.getBoundingClientRect().top;
          }
        });

        if (this.items && size < this.items.length) {
          // Size was reduced, scroll to 0 first
          this._scrollTop = 0;
        }
        if (!Array.isArray(this.items)) {
          // Edge/IE seems to have the lowest maximum
          const maxVirtualItems = this._edge || this._ie ? 30000 : 100000;
          this.items = {length: Math.min(size, maxVirtualItems)};
        }

        this._accessIronListAPI(() => super._itemsChanged({path: 'items'}));

        this._virtualCount = Math.min(this.items.length, size) || 0;

        if (this._scrollTop === 0) {
          this._accessIronListAPI(() => this._scrollToIndex(Math.min(size - 1, fvi)));
          this._iterateItems((pidx, vidx) => {
            const row = this._physicalItems[pidx];
            if (row.index === fvi) {
              this.$.table.scrollTop += Math.round(row.getBoundingClientRect().top - fviOffset);
            }
            // Restore keyboard focus to the right cell
            if (row.index === this._focusedItemIndex && this._itemsFocusable && this.$.items.contains(this.shadowRoot.activeElement)) {
              const cellIndex = Array.from(this._itemsFocusable.parentElement.children).indexOf(this._itemsFocusable);
              row.children[cellIndex].focus();
            }
          });
        }
        this._assignModels();
        requestAnimationFrame(() => this._update());
      }

      _positionItems() {
        this._adjustScrollPosition();

        let rePosition;
        if (isNaN(this._physicalTop)) {
          rePosition = true;
          this._physicalTop = 0;
        }

        let y = this._physicalTop;
        this._iterateItems((pidx, vidx) => {
          this._physicalItems[pidx].style.transform = `translateY(${y}px)`;
          y += this._physicalSizes[pidx];
        });

        if (rePosition) {
          this._scrollToIndex(0);
        }
      }

      _increasePoolIfNeeded(count) {
        if ((count === 0 && this._scrollingToIndex) || !this._canPopulate() || !this._effectiveSize) {
          return;
        }

        if (!this._initialPoolCreated) {
          this._initialPoolCreated = true;
          super._increasePoolIfNeeded(25);
        } else if (this._optPhysicalSize !== Infinity) {
          this._debounceIncreasePool = Debouncer.debounce(
            this._debounceIncreasePool,
            idlePeriod,
            () => {
              this._updateMetrics();
              const remainingPhysicalSize = this._optPhysicalSize - this._physicalSize;
              let estimatedMissingRowCount = Math.ceil(remainingPhysicalSize / this._physicalAverage);

              if (this._physicalCount + estimatedMissingRowCount > this._effectiveSize) {
                // Do not increase the physical item count above the this._effectiveSize
                estimatedMissingRowCount = Math.max(0, this._effectiveSize - this._physicalCount);
              }

              if (this._physicalSize && estimatedMissingRowCount > 0) {
                super._increasePoolIfNeeded(estimatedMissingRowCount);
                // Ensure the rows are in order after increasing pool
                this.__reorderChildNodes();
              }
            });
        }
      }

      __reorderChildNodes() {
        const childNodes = Array.from(this.$.items.childNodes);
        const rowsInOrder = !!childNodes.reduce((inOrder, current, currentIndex, array) => {
          if (currentIndex === 0 || array[currentIndex - 1].index === current.index - 1) {
            return inOrder;
          }
        }, true);

        if (!rowsInOrder) {
          childNodes.sort((row1, row2) => {
            return row1.index - row2.index;
          }).forEach(row => this.$.items.appendChild(row));
        }
      }

      _createPool(size) {
        const fragment = document.createDocumentFragment();
        const physicalItems = this._createScrollerRows(size);

        physicalItems.forEach(inst => fragment.appendChild(inst));
        this._getRowTarget().appendChild(fragment);

        // Weird hack needed to get Safari to actually distribute slots
        const content = this.querySelector('[slot]');
        if (content) {
          const slot = content.getAttribute('slot');
          content.setAttribute('slot', 'foo-bar');
          content.setAttribute('slot', slot);
        }

        this._updateHeaderFooterMetrics();

        afterNextRender(this, () => this.notifyResize());
        return physicalItems;
      }

      /**
       * Assigns the data models to a given set of items.
       * @param {!Array<number>=} itemSet
       */
      _assignModels(itemSet) {
        this._iterateItems((pidx, vidx) => {
          const el = this._physicalItems[pidx];
          this._toggleAttribute('hidden', vidx >= this._effectiveSize, el);
          this._updateScrollerItem(el, vidx + (this._vidxOffset || 0));
        }, itemSet);
      }

      _scrollHandler() {
        const delta = this.$.table.scrollTop - this._scrollPosition;
        this._accessIronListAPI(super._scrollHandler);
        const oldOffset = this._vidxOffset;
        if (this._accessIronListAPI(() => this._maxScrollTop) && this._virtualCount < this._effectiveSize) {
          this._adjustVirtualIndexOffset(delta);
        }
        if (this._vidxOffset !== oldOffset) {
          this._update();
        }
        this._afterScroll();
      }

      _adjustVirtualIndexOffset(delta) {
        if (Math.abs(delta) > 10000) {
          if (this._noScale) {
            this._noScale = false;
            return;
          }
          const scale = this.$.table.scrollTop / (this.$.table.scrollHeight - this.$.table.offsetHeight);
          const offset = scale * this._effectiveSize;
          this._vidxOffset = Math.round(offset - scale * this._virtualCount);
        } else {
          // Make sure user can always swipe/wheel scroll to the start and end
          const oldOffset = this._vidxOffset || 0;
          const threshold = 1000;
          const maxShift = 100;
          // At start
          if (this._scrollTop === 0) {
            this._vidxOffset = 0;
            if (oldOffset !== this._vidxOffset) {
              super.scrollToIndex(0);
            }
          } else if (this.firstVisibleIndex < threshold && this._vidxOffset > 0) {
            this._vidxOffset -= Math.min(this._vidxOffset, maxShift);
            if (oldOffset !== this._vidxOffset) {
              super.scrollToIndex(this.firstVisibleIndex + (oldOffset - this._vidxOffset));
            }
            this._noScale = true;
          }
          // At end
          const maxOffset = this._effectiveSize - this._virtualCount;
          if (this._scrollTop >= this._maxScrollTop && this._maxScrollTop > 0) {
            this._vidxOffset = maxOffset;
            if (oldOffset !== this._vidxOffset) {
              super.scrollToIndex(this._virtualCount);
            }
          } else if (this.firstVisibleIndex > this._virtualCount - threshold && this._vidxOffset < maxOffset) {
            this._vidxOffset += Math.min(maxOffset - this._vidxOffset, maxShift);
            if (oldOffset !== this._vidxOffset) {
              super.scrollToIndex(this.firstVisibleIndex - (this._vidxOffset - oldOffset));
            }
            this._noScale = true;
          }
        }
      }

      _accessIronListAPI(cb) {
        this._warnPrivateAPIAccessAsyncEnabled = false;
        const returnValue = cb.apply(this);
        this._debouncerWarnPrivateAPIAccess = Debouncer.debounce(
          this._debouncerWarnPrivateAPIAccess,
          animationFrame$1,
          () => this._warnPrivateAPIAccessAsyncEnabled = true
        );
        return returnValue;
      }

      /* Allow iron-list to access its APIs from debounced callbacks without warns */
      _debounceRender(cb, asyncModule) {
        super._debounceRender(() => this._accessIronListAPI(cb), asyncModule);
      }

      /* Warn when iron-list APIs are being accessed directly */
      _warnPrivateAPIAccess(apiName) {
        if (this._warnPrivateAPIAccessAsyncEnabled) {
          console.warn(`Accessing private API (${apiName})!`);
        }
      }

      _render() {
        this._accessIronListAPI(super._render);
      }

      _createFocusBackfillItem() { /* Ignore */ }
      _multiSelectionChanged() { /* Ignore */ }
      clearSelection() { /* Ignore */ }
      _itemsChanged() { /* Ignore */ }
      _manageFocus() { /* Ignore */ }
      _removeFocusedItem() { /* Ignore */ }

      get _firstVisibleIndex() {
        return this._accessIronListAPI(() => super.firstVisibleIndex);
      }
      get _lastVisibleIndex() {
        return this._accessIronListAPI(() => super.lastVisibleIndex);
      }
      _scrollToIndex(index) {
        this._accessIronListAPI(() => this.scrollToIndex(index));
      }
      get firstVisibleIndex() {
        this._warnPrivateAPIAccess('firstVisibleIndex'); return super.firstVisibleIndex;
      }
      set firstVisibleIndex(value) {
        this._warnPrivateAPIAccess('firstVisibleIndex'); super.firstVisibleIndex = value;
      }
      get lastVisibleIndex() {
        this._warnPrivateAPIAccess('lastVisibleIndex'); return super.lastVisibleIndex;
      }
      set lastVisibleIndex(value) {
        this._warnPrivateAPIAccess('lastVisibleIndex'); super.lastVisibleIndex = value;
      }
      updateViewportBoundaries() {
        this._warnPrivateAPIAccess('updateViewportBoundaries'); super.updateViewportBoundaries.apply(this, arguments);
      }
      _resizeHandler() {
        super._resizeHandler();
        flush();
      }
    }

    customElements.define(GridScrollerElement.is, GridScrollerElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * @polymerMixin
     */
    const A11yMixin = superClass => class A11yMixin extends superClass {
      static get observers() {
        return [
          '_a11yUpdateGridSize(size, _columnTree, _columnTree.*)'
        ];
      }

      _a11yGetHeaderRowCount(_columnTree) {
        return _columnTree.filter(level => level.some(col => col._headerTemplate || col.headerRenderer || col.path || col.header)).length;
      }

      _a11yGetFooterRowCount(_columnTree) {
        return _columnTree.filter(level => level.some(col => col._headerTemplate || col.headerRenderer)).length;
      }

      _a11yUpdateGridSize(size, _columnTree) {
        if (size === undefined || _columnTree === undefined) {
          return;
        }

        const bodyColumns = _columnTree[_columnTree.length - 1];
        this.$.table.setAttribute(
          'aria-rowcount',
          size + this._a11yGetHeaderRowCount(_columnTree) + this._a11yGetFooterRowCount(_columnTree)
        );
        this.$.table.setAttribute('aria-colcount', bodyColumns && bodyColumns.length || 0);

        this._a11yUpdateHeaderRows();
        this._a11yUpdateFooterRows();
      }

      _a11yUpdateHeaderRows() {
        Array.from(this.$.header.children).forEach((headerRow, index) =>
          headerRow.setAttribute('aria-rowindex', index + 1)
        );
      }

      _a11yUpdateFooterRows() {
        Array.from(this.$.footer.children).forEach((footerRow, index) =>
          footerRow.setAttribute(
            'aria-rowindex',
            this._a11yGetHeaderRowCount(this._columnTree) + this.size + index + 1
          )
        );
      }

      _a11yUpdateRowRowindex(row, index) {
        row.setAttribute('aria-rowindex', index + this._a11yGetHeaderRowCount(this._columnTree) + 1);
      }

      _a11yUpdateRowSelected(row, selected) {
        // Jaws reads selection only for rows, NVDA only for cells
        row.setAttribute('aria-selected', Boolean(selected));
        Array.from(row.children).forEach(cell =>
          cell.setAttribute('aria-selected', Boolean(selected))
        );
      }

      _a11yUpdateRowLevel(row, level) {
        Array.from(row.children).forEach(cell =>
          // aria-level indexing starts from 1
          cell.setAttribute('aria-level', level + 1)
        );
        row.setAttribute('aria-level', level + 1);
      }

      _a11yUpdateRowDetailsOpened(row, detailsOpened) {
        Array.from(row.children).forEach(cell => {
          if (typeof detailsOpened === 'boolean') {
            cell.setAttribute('aria-expanded', detailsOpened);
          } else {
            if (cell.hasAttribute('aria-expanded')) {
              cell.removeAttribute('aria-expanded');
            }
          }
        });
      }

      _a11ySetRowDetailsCell(row, detailsCell) {
        Array.from(row.children).forEach(cell => {
          if (cell !== detailsCell) {
            cell.setAttribute('aria-controls', detailsCell.id);
          }
        });
      }

      _a11yUpdateCellColspan(cell, colspan) {
        cell.setAttribute('aria-colspan', Number(colspan));
      }

      _a11yUpdateSorters() {
        Array.from(this.querySelectorAll('vaadin-grid-sorter')).forEach(sorter => {
          let cellContent = sorter.parentNode;
          while (cellContent && cellContent.localName !== 'vaadin-grid-cell-content') {
            cellContent = cellContent.parentNode;
          }
          if (cellContent && cellContent.assignedSlot) {
            const cell = cellContent.assignedSlot.parentNode;
            cell.setAttribute('aria-sort', {
              'asc': 'ascending',
              'desc': 'descending'
            }[String(sorter.direction)] || 'none');
          }
        });
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * @polymerMixin
     */
    const ActiveItemMixin = superClass => class ActiveItemMixin extends superClass {

      static get properties() {
        return {
          /**
           * The item user has last interacted with. Turns to `null` after user deactivates
           * the item by re-interacting with the currently active item.
           */
          activeItem: {
            type: Object,
            notify: true,
            value: null
          }
        };
      }

      ready() {
        super.ready();

        this.$.scroller.addEventListener('click', this._onClick.bind(this));
        this.addEventListener('cell-activate', this._activateItem.bind(this));
      }

      _activateItem(e) {
        const model = e.detail.model;
        const clickedItem = model ? model.item : null;

        if (clickedItem) {
          this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;
        }
      }

      // we need to listen to click instead of tap because on mobile safari, the
      // document.activeElement has not been updated (focus has not been shifted)
      // yet at the point when tap event is being executed.
      _onClick(e) {
        if (e.defaultPrevented) {
          // Something has handled this click already, e. g., <vaadin-grid-sorter>
          return;
        }

        const path = e.composedPath();
        const cell = path[path.indexOf(this.$.table) - 3];
        if (!cell || cell.getAttribute('part').indexOf('details-cell') > -1) {
          return;
        }
        const cellContent = cell._content;

        const activeElement = this.getRootNode().activeElement;
        const cellContentHasFocus = cellContent.contains(activeElement) &&
          // MSIE bug: flex children receive focus. Make type & attributes check.
          (!this._ie || this._isFocusable(activeElement));
        if (!cellContentHasFocus && !this._isFocusable(e.target)) {
          this.dispatchEvent(new CustomEvent('cell-activate', {detail: {
            model: this.__getRowModel(cell.parentElement)
          }}));
        }
      }

      _isFocusable(target) {
        if (!target.parentNode) {
          return false;
        }
        const focusables = Array.from(target.parentNode
          .querySelectorAll('[tabindex], button, input, select, textarea, object, iframe, label, a[href], area[href]'))
          .filter(element => element.getAttribute('part') !== 'cell body-cell');

        const isFocusableElement = focusables.indexOf(target) !== -1;
        return !target.disabled && isFocusableElement;
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const ArrayDataProviderMixin = superClass => class ArrayDataProviderMixin extends superClass {

      static get properties() {

        return {
          /**
           * An array containing the items which will be stamped to the column template
           * instances.
           */
          items: Array

        };
      }

      static get observers() {
        return [
          '_itemsChanged(items, items.*, isAttached)'
        ];
      }

      _itemsChanged(items, splices, isAttached) {
        if (!isAttached) {
          return;
        }
        if (!Array.isArray(items)) {
          if (items === undefined || items === null) {
            this.size = 0;
          }
          if (this.dataProvider === this._arrayDataProvider) {
            this.dataProvider = undefined;
          }
          return;
        }

        this.size = items.length;
        this.dataProvider = this.dataProvider || this._arrayDataProvider;
        this.clearCache();
        this._ensureFirstPageLoaded();
      }

      _arrayDataProvider(opts, cb) {
        let items = (Array.isArray(this.items) ? this.items : []).slice(0);

        if (this._filters && this._checkPaths(this._filters, 'filtering', items)) {
          items = this._filter(items);
        }

        this.size = items.length;

        if (opts.sortOrders.length && this._checkPaths(this._sorters, 'sorting', items)) {
          items = items.sort(this._multiSort.bind(this));
        }

        const start = opts.page * opts.pageSize;
        const end = start + opts.pageSize;
        const slice = items.slice(start, end);
        cb(slice, items.length);
      }

      /**
       * Check array of filters/sorters for paths validity, console.warn invalid items
       * @param {Array}  arrayToCheck The array of filters/sorters to check
       * @param {string} action       The name of action to include in warning (filtering, sorting)
       * @param {Array}  items
       */
      _checkPaths(arrayToCheck, action, items) {
        if (!items.length) {
          return false;
        }

        let result = true;

        for (var i in arrayToCheck) {
          const path = arrayToCheck[i].path;

          // skip simple paths
          if (!path || path.indexOf('.') === -1) {
            continue;
          }

          const parentProperty = path.replace(/\.[^\.]*$/, ''); // a.b.c -> a.b
          if (Base.get(parentProperty, items[0]) === undefined) {
            console.warn(`Path "${path}" used for ${action} does not exist in all of the items, ${action} is disabled.`);
            result = false;
          }
        }

        return result;
      }

      _multiSort(a, b) {
        return this._sorters.map(sort => {
          if (sort.direction === 'asc') {
            return this._compare(Base.get(sort.path, a), Base.get(sort.path, b));
          } else if (sort.direction === 'desc') {
            return this._compare(Base.get(sort.path, b), Base.get(sort.path, a));
          }
          return 0;
        }).reduce((p, n) => {
          return p ? p : n;
        }, 0);
      }

      _normalizeEmptyValue(value) {
        if ([undefined, null].indexOf(value) >= 0) {
          return '';
        } else if (isNaN(value)) {
          return value.toString();
        } else {
          return value;
        }
      }

      _compare(a, b) {
        a = this._normalizeEmptyValue(a);
        b = this._normalizeEmptyValue(b);

        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }

      _filter(items) {
        return items.filter((item, index) => {
          return this._filters.filter(filter => {
            const value = this._normalizeEmptyValue(Base.get(filter.path, item));
            const filterValueLowercase = this._normalizeEmptyValue(filter.value).toString().toLowerCase();
            return value.toString().toLowerCase().indexOf(filterValueLowercase) === -1;
          }).length === 0;
        });
      }

    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const ColumnResizingMixin = superClass => class ColumnResizingMixin extends GestureEventListeners(superClass) {

      ready() {
        super.ready();
        const scroller = this.$.scroller;
        addListener(scroller, 'track', this._onHeaderTrack.bind(this));

        // Disallow scrolling while resizing
        scroller.addEventListener('touchmove', e => scroller.hasAttribute('column-resizing') && e.preventDefault());

        // Disable contextmenu on any resize separator.
        scroller.addEventListener('contextmenu', e => e.target.getAttribute('part') == 'resize-handle' && e.preventDefault());

        // Disable native cell focus when resizing
        scroller.addEventListener('mousedown', e => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault());
      }

      _onHeaderTrack(e) {
        const handle = e.target;
        if (handle.getAttribute('part') === 'resize-handle') {
          const cell = handle.parentElement;
          let column = cell._column;

          this._toggleAttribute('column-resizing', true, this.$.scroller);

          // Get the target column to resize
          while (column.localName === 'vaadin-grid-column-group') {
            column = Array.prototype.slice.call(column._childColumns, 0)
              .sort(function(a, b) {
                return a._order - b._order;
              })
              .filter(function(column) {
                return !column.hidden;
              }).pop();
          }

          const columnRowCells = Array.from(this.$.header.querySelectorAll('[part~="row"]:last-child [part~="cell"]'));
          var targetCell = columnRowCells.filter(cell => cell._column === column)[0];
          // Resize the target column
          if (targetCell.offsetWidth) {
            var style = window.getComputedStyle(targetCell);
            var minWidth = 10 + parseInt(style.paddingLeft) + parseInt(style.paddingRight) + parseInt(style.borderLeftWidth)
              + parseInt(style.borderRightWidth) + parseInt(style.marginLeft) + parseInt(style.marginRight);
            column.width = Math.max(minWidth, targetCell.offsetWidth + e.detail.x - targetCell.getBoundingClientRect().right) + 'px';
            column.flexGrow = 0;
          }
          // Fix width and flex-grow for all preceding columns
          columnRowCells
            .sort(
              function(a, b) {
                return a._column._order - b._column._order;
              })
            .forEach(function(cell, index, array) {
              if (index < array.indexOf(targetCell)) {
                cell._column.width = cell.offsetWidth + 'px';
                cell._column.flexGrow = 0;
              }
            });

          if (e.detail.state === 'end') {
            this._toggleAttribute('column-resizing', false, this.$.scroller);
          }

          // Notify resize
          this._resizeHandler();
        }
      }

    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    const ItemCache = class ItemCache {

      constructor(grid, parentCache, parentItem) {
        this.grid = grid;
        this.parentCache = parentCache;
        this.parentItem = parentItem;
        this.itemCaches = {};
        this.items = {};
        this.effectiveSize = 0;
        this.size = 0;
        this.pendingRequests = {};
      }

      isLoading() {
        return Object.keys(this.pendingRequests).length || Object.keys(this.itemCaches).filter(index => {
          return this.itemCaches[index].isLoading();
        })[0];
      }

      getItemForIndex(index) {
        const {cache, scaledIndex} = this.getCacheAndIndex(index);
        return cache.items[scaledIndex];
      }

      updateSize() {
        this.effectiveSize = (!this.parentItem || this.grid._isExpanded(this.parentItem)) ?
          this.size + Object.keys(this.itemCaches).reduce((prev, curr) => {
            const subCache = this.itemCaches[curr];
            subCache.updateSize();
            return prev + subCache.effectiveSize;
          }, 0) :
          0;
      }

      ensureSubCacheForScaledIndex(scaledIndex) {
        if (!this.itemCaches[scaledIndex]) {
          const subCache = new ItemCache(this.grid, this, this.items[scaledIndex]);
          this.itemCaches[scaledIndex] = subCache;
          this.grid._loadPage(0, subCache);
        }
      }

      getCacheAndIndex(index) {
        let thisLevelIndex = index;
        const keys = Object.keys(this.itemCaches);
        for (var i = 0; i < keys.length; i++) {
          const expandedIndex = Number(keys[i]);
          const subCache = this.itemCaches[expandedIndex];
          if (thisLevelIndex <= expandedIndex) {
            return {cache: this, scaledIndex: thisLevelIndex};
          } else if (thisLevelIndex <= expandedIndex + subCache.effectiveSize) {
            return subCache.getCacheAndIndex(thisLevelIndex - expandedIndex - 1);
          }
          thisLevelIndex -= subCache.effectiveSize;
        }
        return {cache: this, scaledIndex: thisLevelIndex};
      }

    };

    /**
     * @polymerMixin
     */
    const DataProviderMixin = superClass => class DataProviderMixin extends superClass {

      static get properties() {
        return {

          /**
           * Number of items fetched at a time from the dataprovider.
           */
          pageSize: {
            type: Number,
            value: 50,
            observer: '_pageSizeChanged'
          },

          /**
           * Function that provides items lazily. Receives arguments `params`, `callback`
           *
           * `params.page` Requested page index
           *
           * `params.pageSize` Current page size
           *
           * `params.filters` Currently applied filters
           *
           * `params.sortOrders` Currently applied sorting orders
           *
           * `params.parentItem` When tree is used, and sublevel items
           * are requested, reference to parent item of the requested sublevel.
           * Otherwise `undefined`.
           *
           * `callback(items, size)` Callback function with arguments:
           *   - `items` Current page of items
           *   - `size` Total number of items. When tree sublevel items
           *     are requested, total number of items in the requested sublevel.
           *     Optional when tree is not used, required for tree.
           */
          dataProvider: {
            type: Object,
            notify: true,
            observer: '_dataProviderChanged'
          },

          /**
           * `true` while data is being requested from the data provider.
           */
          loading: {
            type: Boolean,
            notify: true,
            readOnly: true,
            reflectToAttribute: true
          },

          _cache: {
            type: Object,
            value: function() {
              const cache = new ItemCache(this);
              return cache;
            }
          },

          /**
           * Path to an item sub-property that identifies the item.
           */
          itemIdPath: {
            type: String,
            value: null
          },

          /**
           * An array that contains the expanded items.
           */
          expandedItems: {
            type: Object,
            notify: true,
            value: () => []
          }

        };
      }

      static get observers() {
        return [
          '_sizeChanged(size)',
          '_expandedItemsChanged(expandedItems.*)'
        ];
      }

      _sizeChanged(size) {
        const delta = size - this._cache.size;
        this._cache.size += delta;
        this._cache.effectiveSize += delta;
        this._effectiveSize = this._cache.effectiveSize;
      }

      _updateRowItem(item, el) {
        el.children.forEach(cell => {
          cell._instance && (cell._instance.item = item);
        });
      }

      _getItem(index, el) {
        if (index >= this._effectiveSize) {
          return;
        }

        el.index = index;
        const {cache, scaledIndex} = this._cache.getCacheAndIndex(index);
        const item = cache.items[scaledIndex];
        if (item) {
          this._toggleAttribute('loading', false, el);
          this._updateItem(el, item);
          if (this._isExpanded(item)) {
            cache.ensureSubCacheForScaledIndex(scaledIndex);
          }
        } else {
          this._toggleAttribute('loading', true, el);
          this._loadPage(this._getPageForIndex(scaledIndex), cache);
        }

      }

      _pagesForPhysicalItems() {
        // TODO: potentially heavy operation to run first visible index,
        // reconsider if performance issues occur on data binding / scrolling.
        // TODO: _vidxOffset shouldn't be read from here.
        const firstVisiblePage = this._getPageForIndex(this._firstVisibleIndex + this._vidxOffset);

        return [firstVisiblePage].concat(
          this._physicalItems
            .filter(row => row.index)
            .items(row => this._getPageForIndex(row.index))
        ).reduce((prev, curr) => {
          if (prev.indexOf(curr) === -1) {
            prev.push(curr);
          }

          return prev;
        }, []);
      }

      _expandedInstanceChangedCallback(inst, value) {
        if (inst.item === undefined) {
          return;
        }
        if (value) {
          this.expandItem(inst.item);
        } else {
          this.collapseItem(inst.item);
        }
      }

      /**
       * Returns a value that identifies the item. Uses `itemIdPath` if available.
       * Can be customized by overriding.
       */
      getItemId(item) {
        return this.itemIdPath ? this.get(this.itemIdPath, item) : item;
      }

      _isExpanded(item) {
        return this.expandedItems && this._getItemIndexInArray(item, this.expandedItems) > -1;
      }

      _expandedItemsChanged(e) {
        this._cache.updateSize();
        this._effectiveSize = this._cache.effectiveSize;
        this._assignModels();
      }

      /**
       * Expands the given item tree.
       */
      expandItem(item) {
        if (!this._isExpanded(item)) {
          this.push('expandedItems', item);
        }
      }

      /**
       * Collapses the given item tree.
       */
      collapseItem(item) {
        if (this._isExpanded(item)) {
          this.splice('expandedItems', this._getItemIndexInArray(item, this.expandedItems), 1);
        }
      }

      _getIndexLevel(index) {
        let {cache} = this._cache.getCacheAndIndex(index);
        let level = 0;
        while (cache.parentCache) {
          cache = cache.parentCache;
          level++;
        }
        return level;
      }

      _canPopulate() {
        return this._hasData && this._columnTree;
      }

      _loadPage(page, cache) {
        // make sure same page isn't requested multiple times.
        if (!cache.pendingRequests[page] && this.dataProvider) {
          this._setLoading(true);
          cache.pendingRequests[page] = true;
          const params = {
            page,
            pageSize: this.pageSize,
            sortOrders: this._mapSorters(),
            filters: this._mapFilters(),
            parentItem: cache.parentItem
          };

          this.dataProvider(params, (items, size) => {
            if (size !== undefined) {
              cache.size = size;
            } else {
              if (params.parentItem) {
                cache.size = items.length;
              }
            }

            items.forEach((item, itemsIndex) => {
              cache.items[page * this.pageSize + itemsIndex] = item;
            });
            this._cache.updateSize();
            this._effectiveSize = this._cache.effectiveSize;

            Array.from(this.$.items.children).forEach(row => {
              const cachedItem = this._cache.getItemForIndex(row.index);
              if (items.indexOf(cachedItem) > -1) {
                this._toggleAttribute('loading', false, row);
                this._updateItem(row, cachedItem);
              }
            });

            this._hasData = true;
            this._increasePoolIfNeeded(0);

            delete cache.pendingRequests[page];

            this._setLoading(this._cache.isLoading());
          });
        }
      }

      _getPageForIndex(index) {
        return Math.floor(index / this.pageSize);
      }

      /**
       * Clears the cached pages and reloads data from dataprovider when needed.
       */
      clearCache() {
        this._cache = new ItemCache(this);
        Array.from(this.$.items.children).forEach(row => {
          Array.from(row.children).forEach(cell => {
            // Force data system to pick up subproperty changes
            cell._instance && cell._instance._setPendingProperty('item', {}, false);
          });
        });
        this._cache.size = this.size || 0;
        this._cache.updateSize();
        this._hasData = false;
        this._assignModels();

        if (!this._effectiveSize) {
          this._loadPage(0, this._cache);
        }
      }

      _flushItemsDebouncer() {
        if (this._debouncerLoad) {
          this._debouncerLoad.flush();
        }
      }

      _pageSizeChanged(pageSize, oldPageSize) {
        if (oldPageSize !== undefined && pageSize !== oldPageSize) {
          this.clearCache();
        }
      }

      _checkSize() {
        if (this.size === undefined && this._effectiveSize === 0) {
          console.warn(
            'The <vaadin-grid> needs the total number of items' +
            ' in order to display rows. Set the total number of items' +
            ' to the `size` property, or provide the total number of items' +
            ' in the second argument of the `dataProvider`’s `callback` call.'
          );
        }
      }

      _dataProviderChanged(dataProvider, oldDataProvider) {
        if (oldDataProvider !== undefined) {
          this.clearCache();
        }

        if (dataProvider && this.items && this.items.length) {
          // Fixes possibly invalid cached lastVisibleIndex value in <iron-list>
          this._scrollToIndex(this._firstVisibleIndex);
        }

        this._ensureFirstPageLoaded();

        this._debouncerCheckSize = Debouncer.debounce(
          this._debouncerCheckSize,
          timeOut.after(2000),
          this._checkSize.bind(this));

        this._scrollHandler();
      }

      _ensureFirstPageLoaded() {
        if (!this._hasData) {
          // load data before adding rows to make sure they have content when
          // rendered for the first time.
          this._loadPage(0, this._cache, () => {
            const hadData = this._hasData;
            this._hasData = true;
            if (!hadData) {
              this.notifyResize();
            }
          });
        }
      }

      _itemsEqual(item1, item2) {
        return this.getItemId(item1) === this.getItemId(item2);
      }

      _getItemIndexInArray(item, array) {
        let result = -1;
        array.forEach((i, idx) => {
          if (this._itemsEqual(i, item)) {
            result = idx;
          }
        });
        return result;
      }

    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const DynamicColumnsMixin = superClass => class DynamicColumnsMixin extends superClass {

      ready() {
        super.ready();
        this._addNodeObserver();
      }

      _hasColumnGroups(columns) {
        for (let i = 0; i < columns.length; i++) {
          if (columns[i].localName === 'vaadin-grid-column-group') {
            return true;
          }
        }

        return false;
      }

      _getChildColumns(el) {
        return FlattenedNodesObserver.getFlattenedNodes(el).filter(this._isColumnElement);
      }

      _flattenColumnGroups(columns) {
        return columns.map(col => {
          if (col.localName === 'vaadin-grid-column-group') {
            return this._getChildColumns(col);
          } else {
            return [col];
          }
        }).reduce((prev, curr) => {
          return prev.concat(curr);
        }, []);
      }

      _getColumnTree() {
        var rootColumns = FlattenedNodesObserver.getFlattenedNodes(this).filter(this._isColumnElement);
        var _columnTree = [];

        for (var c = rootColumns; ;) {
          _columnTree.push(c);
          if (!this._hasColumnGroups(c)) {
            break;
          }
          c = this._flattenColumnGroups(c);
        }

        return _columnTree;
      }

      _updateColumnTree() {
        var columnTree = this._getColumnTree();
        if (!this._arrayEquals(columnTree, this._columnTree)) {
          this._columnTree = columnTree;
        }
      }

      _addNodeObserver() {
        this._observer = new FlattenedNodesObserver(this, info => {

          const rowDetailsTemplate = info.addedNodes.filter(n => n.localName === 'template' && n.classList.contains('row-details'))[0];
          if (rowDetailsTemplate && this._rowDetailsTemplate !== rowDetailsTemplate) {
            this._rowDetailsTemplate = rowDetailsTemplate;
          }

          if (info.addedNodes.filter(this._isColumnElement).length > 0 ||
            info.removedNodes.filter(this._isColumnElement).length > 0) {
            this._updateColumnTree();
          }

          this._debouncerCheckImports = Debouncer.debounce(
            this._debouncerCheckImports,
            timeOut.after(2000),
            this._checkImports.bind(this));

          this._ensureFirstPageLoaded();
        });
      }

      _arrayEquals(arr1, arr2) {
        if (!arr1 || !arr2 || arr1.length != arr2.length) {
          return false;
        }

        for (var i = 0, l = arr1.length; i < l; i++) {
          // Check if we have nested arrays
          if (arr1[i] instanceof Array && arr2[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this._arrayEquals(arr1[i], arr2[i])) {
              return false;
            }
          } else if (arr1[i] != arr2[i]) {
            return false;
          }
        }
        return true;
      }

      _checkImports() {
        [
          'vaadin-grid-column-group',
          'vaadin-grid-filter',
          'vaadin-grid-tree-toggle',
          'vaadin-grid-selection-column',
          'vaadin-grid-sorter'
        ].forEach(elementName => {
          var element = this.querySelector(elementName);
          if (element && !(element instanceof PolymerElement)) {
            console.warn(`Make sure you have imported the required module for <${elementName}> element.`);
          }
        });
      }

      _updateFirstAndLastColumn() {
        Array.from(this.shadowRoot.querySelectorAll('tr')).forEach(row => this._updateFirstAndLastColumnForRow(row));
      }

      _updateFirstAndLastColumnForRow(row) {
        Array.from(row.querySelectorAll('[part~="cell"]:not([part~="details-cell"])'))
          .sort((a, b) => {
            return a._column._order - b._column._order;
          }).forEach((cell, cellIndex, children) => {
            this._toggleAttribute('first-column', cellIndex === 0, cell);
            this._toggleAttribute('last-column', cellIndex === children.length - 1, cell);
          });
      }

      _isColumnElement(node) {
        return node.nodeType === Node.ELEMENT_NODE && /\bcolumn\b/.test(node.localName);
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * @polymerMixin
     */
    const FilterMixin = superClass => class FilterMixin extends superClass {

      static get properties() {
        return {
          _filters: {
            type: Array,
            value: function() {
              return [];
            }
          }
        };
      }

      ready() {
        super.ready();
        this.addEventListener('filter-changed', this._filterChanged.bind(this));
      }

      _filterChanged(e) {
        if (this._filters.indexOf(e.target) === -1) {
          this._filters.push(e.target);
        }

        e.stopPropagation();

        if (this.dataProvider) {
          this.clearCache();
        }
      }

      _mapFilters() {
        return this._filters.map(filter => {
          return {
            path: filter.path,
            value: filter.value
          };
        });
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `vaadin-grid-templatizer` is a helper element for the `vaadin-grid` that is preparing and
     * stamping instances of cells and columns templates
     *
     * @memberof Vaadin
     * @private
     */
    class GridTemplatizer extends (class extends PolymerElement {}) {
      static get is() {
        return 'vaadin-grid-templatizer';
      }

      static get properties() {
        return {
          dataHost: Object,

          template: Object,

          _templateInstances: {
            type: Array,
            value: function() {
              return [];
            }
          },

          _parentPathValues: {
            value: function() {
              return {};
            }
          },

          _grid: Object
        };
      }

      static get observers() {
        return [
          '_templateInstancesChanged(_templateInstances.*, _parentPathValues.*)'
        ];
      }

      constructor() {
        super();

        this._instanceProps = {
          detailsOpened: true,
          index: true,
          item: true,
          selected: true,
          expanded: true,
          level: true
        };
      }

      createInstance() {
        this._ensureTemplatized();
        const instance = new this._TemplateClass({});
        this.addInstance(instance);

        return instance;
      }

      addInstance(instance) {
        if (this._templateInstances.indexOf(instance) === -1) {
          this._templateInstances.push(instance);
          requestAnimationFrame(() => this.notifyPath('_templateInstances.*', this._templateInstances));
        }
      }

      removeInstance(instance) {
        const index = this._templateInstances.indexOf(instance);
        this.splice('_templateInstances', index, 1);
      }

      _ensureTemplatized() {
        if (!this._TemplateClass) {
          this._TemplateClass = templatize(this.template, this, {
            instanceProps: this._instanceProps,
            parentModel: true,

            forwardHostProp: function(prop, value) {
              this._forwardParentProp(prop, value);

              if (this._templateInstances) {
                this._templateInstances.forEach(inst => inst.notifyPath(prop, value));
              }
            },

            notifyInstanceProp: function(inst, prop, value) {
              if (prop === 'index' || prop === 'item') {
                // We don’t need a change notification for these.
                return;
              }

              const originalProp = `__${prop}__`;

              // Notify for only user-action changes, not for scrolling updates. E. g.,
              // if `detailsOpened` is different from `__detailsOpened__`, which was set during render.
              if (inst[originalProp] === value) {
                return;
              }
              inst[originalProp] = value;

              const row = Array.from(this._grid.$.items.children).filter(row => this._grid._itemsEqual(row._item, inst.item))[0];
              if (row) {
                Array.from(row.children).forEach(cell => {
                  if (cell._instance) {
                    cell._instance[originalProp] = value;
                    cell._instance.notifyPath(prop, value);
                  }
                });
              }

              const itemPrefix = 'item.';
              if (Array.isArray(this._grid.items) && prop.indexOf(itemPrefix) === 0) {
                const itemsIndex = this._grid.items.indexOf(inst.item);
                const path = prop.slice(itemPrefix.length);
                this._grid.notifyPath(`items.${itemsIndex}.${path}`, value);
              }

              const gridCallback = `_${prop}InstanceChangedCallback`;
              if (this._grid && this._grid[gridCallback]) {
                this._grid[gridCallback](inst, value);
              }
            }

          });
        }
      }

      _forwardParentProp(prop, value) {
        this._parentPathValues[prop] = value;
        this._templateInstances.forEach(inst => inst.notifyPath(prop, value));
      }

      _templateInstancesChanged(t, p) {
        let index, count;
        if (t.path === '_templateInstances') {
          // Iterate all instances
          index = 0;
          count = this._templateInstances.length;
        } else if (t.path === '_templateInstances.splices') {
          // Iterate only new instances
          index = t.value.index;
          count = t.value.addedCount;
        } else {
          return;
        }
        Object.keys(this._parentPathValues || {}).forEach(keyName => {
          for (var i = index; i < index + count; i++) {
            this._templateInstances[i].set(keyName, this._parentPathValues[keyName]);
          }
        });
      }

    }

    customElements.define(GridTemplatizer.is, GridTemplatizer);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const RowDetailsMixin = superClass => class RowDetailsMixin extends superClass {
      static get properties() {
        return {
          /**
           * An array containing references to items with open row details.
           */
          detailsOpenedItems: {
            type: Array,
            value: function() {
              return [];
            }
          },

          _rowDetailsTemplate: Object,

          /**
           * Custom function for rendering the content of the row details.
           * Receives three arguments:
           *
           * - `root` The row details content DOM element. Append your content to it.
           * - `grid` The `<vaadin-grid>` element.
           * - `rowData` The object with the properties related with
           *   the rendered item, contains:
           *   - `rowData.index` The index of the item.
           *   - `rowData.item` The item.
           */
          rowDetailsRenderer: Function,

          _detailsCells: {
            type: Array,
          }
        };
      }

      static get observers() {
        return [
          '_detailsOpenedItemsChanged(detailsOpenedItems.*, _rowDetailsTemplate, rowDetailsRenderer)',
          '_rowDetailsTemplateOrRendererChanged(_rowDetailsTemplate, rowDetailsRenderer)'
        ];
      }

      _rowDetailsTemplateOrRendererChanged(rowDetailsTemplate, rowDetailsRenderer) {
        if (rowDetailsTemplate && rowDetailsRenderer) {
          throw new Error('You should only use either a renderer or a template for row details');
        }
        if (rowDetailsTemplate || rowDetailsRenderer) {
          if (rowDetailsTemplate && !rowDetailsTemplate.templatizer) {
            var templatizer = new GridTemplatizer();
            templatizer._grid = this;
            templatizer.dataHost = this.dataHost;
            templatizer.template = rowDetailsTemplate;
            rowDetailsTemplate.templatizer = templatizer;
          }

          if (this._columnTree) {
            // Only update the rows if the column tree has already been initialized
            Array.from(this.$.items.children).forEach(row => {
              if (!row.querySelector('[part~=details-cell]')) {
                this._updateRow(row, this._columnTree[this._columnTree.length - 1]);
                this._a11yUpdateRowDetailsOpened(row, false);
              }
              // Clear any old template instances
              delete row.querySelector('[part~=details-cell]')._instance;
            });
          }

          if (this.detailsOpenedItems.length) {
            Array.from(this.$.items.children).forEach(this._toggleDetailsCell, this);
            this._update();
          }
        }
      }

      _detailsOpenedItemsChanged(changeRecord, rowDetailsTemplate, rowDetailsRenderer) {
        if (changeRecord.path === 'detailsOpenedItems.length' || !changeRecord.value) {
          // Let’s avoid duplicate work of both “.splices” and “.length” updates.
          return;
        }
        Array.from(this.$.items.children).forEach(row => {
          this._toggleDetailsCell(row, row._item);
          this._a11yUpdateRowDetailsOpened(row, this._isDetailsOpened(row._item));
        });
      }

      _configureDetailsCell(cell) {
        cell.setAttribute('part', 'cell details-cell');
        // Freeze the details cell, so that it does not scroll horizontally
        // with the normal cells. This way it looks less weird.
        this._toggleAttribute('frozen', true, cell);
      }

      _toggleDetailsCell(row, item) {
        const cell = row.querySelector('[part~="details-cell"]');
        if (!cell) {
          return;
        }
        const detailsHidden = !this._isDetailsOpened(item);
        const hiddenChanged = !!cell.hidden !== detailsHidden;

        if (!cell._instance && !cell._renderer || cell.hidden !== detailsHidden) {
          cell.hidden = detailsHidden;
          if (detailsHidden) {
            row.style.removeProperty('padding-bottom');
          } else {
            if (this.rowDetailsRenderer) {
              cell._renderer = this.rowDetailsRenderer;
              cell._renderer.call(this, cell._content, this, {index: row.index, item: item});
            } else if (this._rowDetailsTemplate && !cell._instance) {
              // Stamp the template
              cell._instance = this._rowDetailsTemplate.templatizer.createInstance();
              cell._content.innerHTML = '';
              cell._content.appendChild(cell._instance.root);
              this._updateItem(row, item);
            }

            flush();
            row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);

            requestAnimationFrame(() => this.notifyResize());
          }
        }
        if (hiddenChanged) {
          this._updateMetrics();
          this._positionItems();
        }
      }

      _updateDetailsCellHeights() {
        Array.from(this.$.items.querySelectorAll('[part~="details-cell"]:not([hidden])')).forEach(cell => {
          cell.parentElement.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);
        });
      }

      _isDetailsOpened(item) {
        return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;
      }

      /**
       * Open the details row of a given item.
       */
      openItemDetails(item) {
        if (!this._isDetailsOpened(item)) {
          this.push('detailsOpenedItems', item);
        }
      }

      /**
       * Close the details row of a given item.
       */
      closeItemDetails(item) {
        if (this._isDetailsOpened(item)) {
          this.splice('detailsOpenedItems', this._getItemIndexInArray(item, this.detailsOpenedItems), 1);
        }
      }

      _detailsOpenedInstanceChangedCallback(instance, value) {
        if (super._detailsOpenedInstanceChangedCallback) {
          super._detailsOpenedInstanceChangedCallback(instance, value);
        }
        if (value) {
          this.openItemDetails(instance.item);
        } else {
          this.closeItemDetails(instance.item);
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const ScrollMixin = superClass => class ScrollMixin extends superClass {

      get _timeouts() {
        return {
          SCROLL_PERIOD: 1000,
          WHEEL_SCROLLING: 200,
          SCROLLING: 100,
          IGNORE_WHEEL: 500
        };
      }

      static get properties() {
        return {

          // Cached array of frozen cells
          _frozenCells: {
            type: Array,
            value: function() {
              return [];
            },
          },

          _scrollbarWidth: {
            type: Number,
            value: function() {
              // Create the measurement node
              var scrollDiv = document.createElement('div');
              scrollDiv.style.width = '100px';
              scrollDiv.style.height = '100px';
              scrollDiv.style.overflow = 'scroll';
              scrollDiv.style.position = 'absolute';
              scrollDiv.style.top = '-9999px';
              document.body.appendChild(scrollDiv);
              // Get the scrollbar width
              var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
              // Delete the DIV
              document.body.removeChild(scrollDiv);
              return scrollbarWidth;
            }
          },

          _rowWithFocusedElement: Element

        };
      }

      static get observers() {
        return [
          '_scrollHeightUpdated(_estScrollHeight)'
        ];
      }

      ready() {
        super.ready();
        this.scrollTarget = this.$.table;

        this.addEventListener('wheel', e => {
          this._wheelScrolling = true;
          this._debouncerWheelScrolling = Debouncer.debounce(
            this._debouncerWheelScrolling,
            timeOut.after(this._timeouts.WHEEL_SCROLLING),
            () => this._wheelScrolling = false
          );
          this._onWheel(e);
        });

        this.$.table.addEventListener('scroll', e => {
          if (this.$.outerscroller.outerScrolling) {
            e.stopImmediatePropagation();
          }
        }, true);

        this.$.items.addEventListener('focusin', (e) => {
          const itemsIndex = e.composedPath().indexOf(this.$.items);
          this._rowWithFocusedElement = e.composedPath()[itemsIndex - 1];
        });
        this.$.items.addEventListener('focusout', () => this._rowWithFocusedElement = undefined);
      }

      _onWheel(e) {
        if (e.ctrlKey || this._hasScrolledAncestor(e.target, e.deltaX, e.deltaY)) {
          return;
        }

        var table = this.$.table;

        var deltaY = e.deltaY;
        if (e.deltaMode === 1) {
          // Mode 1 == scrolling by lines instead of pixels
          deltaY *= this._physicalAverage;
        }

        var momentum = Math.abs(e.deltaX) + Math.abs(deltaY);

        if (this._canScroll(table, e.deltaX, deltaY)) {
          e.preventDefault();
          table.scrollTop += deltaY;
          table.scrollLeft += e.deltaX;
          this._scrollHandler();
          this._hasResidualMomentum = true;

          this._ignoreNewWheel = true;
          this._debouncerIgnoreNewWheel = Debouncer.debounce(
            this._debouncerIgnoreNewWheel,
            timeOut.after(this._timeouts.IGNORE_WHEEL),
            () => this._ignoreNewWheel = false
          );
        } else if (this._hasResidualMomentum && momentum <= this._previousMomentum || this._ignoreNewWheel) {
          e.preventDefault();
        } else if (momentum > this._previousMomentum) {
          this._hasResidualMomentum = false;
        }
        this._previousMomentum = momentum;
      }

      /**
       * Determines if the element has an ancestor prior to this
       * cell content that handles the scroll delta
       */
      _hasScrolledAncestor(el, deltaX, deltaY) {
        if (this._canScroll(el, deltaX, deltaY)) {
          return true;
        } else if (el.localName !== 'vaadin-grid-cell-content' && el !== this && el.parentElement) {
          return this._hasScrolledAncestor(el.parentElement, deltaX, deltaY);
        }
      }

      /**
       * Determines if the the given scroll deltas can be applied to the element
       * (fully or partially)
       */
      _canScroll(el, deltaX, deltaY) {
        return (deltaY > 0 && el.scrollTop < el.scrollHeight - el.offsetHeight) ||
        (deltaY < 0 && el.scrollTop > 0) ||
        (deltaX > 0 && el.scrollLeft < el.scrollWidth - el.offsetWidth) ||
        (deltaX < 0 && el.scrollLeft > 0);
      }

      _scheduleScrolling() {
        if (!this._scrollingFrame) {
          // Defer setting state attributes to avoid Edge hiccups
          this._scrollingFrame = requestAnimationFrame(() => this._toggleAttribute('scrolling', true, this.$.scroller));
        }
        this._debounceScrolling = Debouncer.debounce(
          this._debounceScrolling,
          timeOut.after(this._timeouts.SCROLLING),
          () => {
            cancelAnimationFrame(this._scrollingFrame);
            delete this._scrollingFrame;
            this._toggleAttribute('scrolling', false, this.$.scroller);
            if (!this.$.outerscroller.outerScrolling) {
              this._reorderRows();
            }
          }
        );

        if (!this._scrollPeriodFrame) {
          this._scrollPeriodFrame = requestAnimationFrame(() => this._toggleAttribute('scroll-period', true, this.$.scroller));
        }
        this._debounceScrollPeriod = Debouncer.debounce(
          this._debounceScrollPeriod,
          timeOut.after(this._timeouts.SCROLL_PERIOD),
          () => {
            cancelAnimationFrame(this._scrollPeriodFrame);
            delete this._scrollPeriodFrame;
            this._toggleAttribute('scroll-period', false, this.$.scroller);
          }
        );
      }

      _afterScroll() {
        this._translateStationaryElements();

        if (!this.hasAttribute('reordering')) {
          this._scheduleScrolling();
        }

        const os = this.$.outerscroller;
        if (!this._ios && (this._wheelScrolling || os.passthrough)) {
          os.syncOuterScroller();
        }

        if (this._ios) {
          // Enable vertical rubberband feedback
          const overScroll = Math.max(-os.scrollTop, 0) ||
            Math.min(0, os.scrollHeight - os.scrollTop - os.offsetHeight);
          this.$.items.style.transform = `translateY(${overScroll}px)`;
        }

        this._updateOverflow();
      }

      _updateOverflow() {
        // Set overflow styling attributes
        let overflow = '';
        const table = this.$.table;
        if (table.scrollTop < table.scrollHeight - table.clientHeight) {
          overflow += ' bottom';
        }

        if (table.scrollTop > 0) {
          overflow += ' top';
        }

        if (table.scrollLeft < table.scrollWidth - table.clientWidth) {
          overflow += ' right';
        }

        if (table.scrollLeft > 0) {
          overflow += ' left';
        }

        this._debounceOverflow = Debouncer.debounce(
          this._debounceOverflow,
          animationFrame$1,
          () => {
            const value = overflow.trim();
            if (value.length > 0 && this.getAttribute('overflow') !== value) {
              this.setAttribute('overflow', value);
            } else if (value.length == 0 && this.hasAttribute('overflow')) {
              this.removeAttribute('overflow');
            }
          }
        );
      }

      // correct order needed for preserving correct tab order between cell contents.
      _reorderRows() {
        const body = this.$.items;
        const items = body.querySelectorAll('tr');
        if (!items.length) {
          return;
        }

        const adjustedVirtualStart = this._virtualStart + this._vidxOffset;

        // Which row to use as a target?
        const targetRow = this._rowWithFocusedElement || Array.from(items).filter(row => !row.hidden)[0];
        if (!targetRow) {
          // All rows are hidden, don't reorder
          return;
        }

        // Where the target row should be?
        const targetPhysicalIndex = targetRow.index - adjustedVirtualStart;

        // Reodrer the DOM elements to keep the target row at the target physical index
        const delta = Array.from(items).indexOf(targetRow) - targetPhysicalIndex;
        if (delta > 0) {
          for (let i = 0; i < delta; i++) {
            body.appendChild(items[i]);
          }
        } else if (delta < 0) {
          for (let i = items.length + delta; i < items.length; i++) {
            body.insertBefore(items[i], items[0]);
          }
        }
      }

      _frozenCellsChanged() {
        this._debouncerCacheElements = Debouncer.debounce(
          this._debouncerCacheElements,
          microTask,
          () => {
            Array.from(this.root.querySelectorAll('[part~="cell"]')).forEach(function(cell) {
              cell.style.transform = '';
            });
            this._frozenCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen]'));
            this._translateStationaryElements();
          }
        );
        this._updateLastFrozen();
      }

      _updateLastFrozen() {
        if (!this._columnTree) {
          return;
        }

        const columnsRow = this._columnTree[this._columnTree.length - 1].slice(0);
        columnsRow.sort((a, b) => {
          return a._order - b._order;
        });
        const lastFrozen = columnsRow.reduce((prev, col, index) => {
          col._lastFrozen = false;
          return col.frozen && !col.hidden ? index : prev;
        }, undefined);
        if (lastFrozen !== undefined) {
          columnsRow[lastFrozen]._lastFrozen = true;
        }
      }

      _translateStationaryElements() {
        if (this._edge && !this._scrollbarWidth) {
          // Fixed mode (Tablet Edge)
          this.$.items.style.transform =
          this._getTranslate(-this._scrollLeft || 0, -this._scrollTop || 0);

          this.$.footer.style.transform = this.$.header.style.transform =
          this._getTranslate(-this._scrollLeft || 0, 0);
        } else {
          this.$.footer.style.transform = this.$.header.style.transform = this._getTranslate(0, this._scrollTop);
        }

        var frozenCellTransform = this._getTranslate(this._scrollLeft, 0);
        for (var i = 0; i < this._frozenCells.length; i++) {
          this._frozenCells[i].style.transform = frozenCellTransform;
        }
      }

      _getTranslate(x, y) {
        return 'translate(' + x + 'px,' + y + 'px)';
      }

      _scrollHeightUpdated(_estScrollHeight) {
        this.$.outersizer.style.top = this.$.fixedsizer.style.top = _estScrollHeight + 'px';
      }

    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * @polymerMixin
     */
    const SelectionMixin = superClass => class SelectionMixin extends superClass {

      static get properties() {
        return {
          /**
           * An array that contains the selected items.
           */
          selectedItems: {
            type: Object,
            notify: true,
            value: () => []
          }
        };
      }

      static get observers() {
        return [
          '_selectedItemsChanged(selectedItems.*)'
        ];
      }

      _isSelected(item) {
        return this.selectedItems && this._getItemIndexInArray(item, this.selectedItems) > -1;
      }

      /**
       * Selects the given item.
       *
       * @method selectItem
       * @param {Object} item The item object
       */
      selectItem(item) {
        if (!this._isSelected(item)) {
          this.push('selectedItems', item);
        }
      }

      /**
       * Deselects the given item if it is already selected.
       *
       * @method deselect
       * @param {Object} item The item object
       */
      deselectItem(item) {
        const index = this._getItemIndexInArray(item, this.selectedItems);
        if (index > -1) {
          this.splice('selectedItems', index, 1);
        }
      }

      /**
       * Toggles the selected state of the given item.
       *
       * @method toggle
       * @param {Object} item The item object
       */
      _toggleItem(item) {
        const index = this._getItemIndexInArray(item, this.selectedItems);
        if (index === -1) {
          this.selectItem(item);
        } else {
          this.deselectItem(item);
        }
      }

      _selectedItemsChanged(e) {
        if (this.$.items.children.length && (e.path === 'selectedItems' || e.path === 'selectedItems.splices')) {
          Array.from(this.$.items.children).forEach(row => {
            this._updateItem(row, row._item);
          });
        }
      }

      _selectedInstanceChangedCallback(instance, value) {
        if (super._selectedInstanceChangedCallback) {
          super._selectedInstanceChangedCallback(instance, value);
        }
        if (value) {
          this.selectItem(instance.item);
        } else {
          this.deselectItem(instance.item);
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const SortMixin = superClass => class SortMixin extends superClass {
      static get properties() {
        return {
          /**
           * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.
           */
          multiSort: {
            type: Boolean,
            value: false
          },

          _sorters: {
            type: Array,
            value: function() {
              return [];
            }
          },

          _previousSorters: {
            type: Array,
            value: function() {
              return [];
            }
          }
        };
      }

      ready() {
        super.ready();
        this.addEventListener('sorter-changed', this._onSorterChanged);

        // With Polymer 2 & shady the 'sorter-changed' listener isn't guaranteed to be registered
        // before child <vaadin-grid-sorter>'s upgrade and fire the events. The following
        // makes sure that 'sorter-changed' is fired for all <vaadin-grid-sorter> elements
        // after this (<vaadin-grid>) is ready (and the listeners are active).
        if (window.ShadyDOM) {
          microTask.run(() => {
            const sorters = this.querySelectorAll('vaadin-grid-sorter');
            Array.from(sorters).forEach((sorter) => {
              // Don't try to fire if the sorter hasn't been upgraded yet
              if (sorter instanceof PolymerElement) {
                sorter.dispatchEvent(new CustomEvent('sorter-changed', {bubbles: true, composed: true}));
              }
            });
          });
        }
      }

      _onSorterChanged(e) {
        const sorter = e.target;

        this._removeArrayItem(this._sorters, sorter);
        sorter._order = null;

        if (this.multiSort) {
          if (sorter.direction) {
            this._sorters.unshift(sorter);
          }

          this._sorters.forEach((sorter, index) => sorter._order = this._sorters.length > 1 ? index : null, this);
        } else {
          if (sorter.direction) {
            this._sorters.forEach(sorter => {
              sorter._order = null;
              sorter.direction = null;
            });
            this._sorters = [sorter];
          }
        }

        e.stopPropagation();

        if (this.dataProvider &&
          // No need to clear cache if sorters didn't change
          JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())) {
          this.clearCache();
        }

        this._a11yUpdateSorters();

        this._previousSorters = this._mapSorters();
      }

      _mapSorters() {
        return this._sorters.map(sorter => {
          return {
            path: sorter.path,
            direction: sorter.direction
          };
        });
      }

      _removeArrayItem(array, item) {
        const index = array.indexOf(item);
        if (index > -1) {
          array.splice(index, 1);
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * @polymerMixin
     */
    const KeyboardNavigationMixin = superClass => class KeyboardNavigationMixin extends superClass {
      static get properties() {
        return {
          _headerFocusable: {
            type: Object,
            observer: '_focusableChanged'
          },
          _itemsFocusable: {
            type: Object,
            observer: '_focusableChanged'
          },
          _footerFocusable: {
            type: Object,
            observer: '_focusableChanged'
          },
          _navigatingIsHidden: Boolean,
          _focusedItemIndex: {
            type: Number,
            value: 0
          },
          _focusedColumnOrder: Number
        };
      }

      ready() {
        super.ready();

        if (this._ios || this._android) {
          // Disable keyboard navigation on mobile devices
          return;
        }

        this.addEventListener('keydown', this._onKeyDown);
        this.addEventListener('focusin', this._onFocusIn);
        this.addEventListener('focusout', this._onFocusOut);

        // When focus goes from cell to another cell, focusin/focusout events do
        // not escape the grid’s shadowRoot, thus listening inside the shadowRoot.
        this.$.table.addEventListener('focusin', this._onCellFocusIn.bind(this));
        this.$.table.addEventListener('focusout', this._onCellFocusOut.bind(this));

        this.addEventListener('mousedown', () => {
          this._toggleAttribute('navigating', false, this);
          this._isMousedown = true;
        });
        this.addEventListener('mouseup', () => this._isMousedown = false);
      }

      _focusableChanged(focusable, oldFocusable) {
        if (oldFocusable) {
          oldFocusable.setAttribute('tabindex', '-1');
        }
        if (focusable) {
          focusable.setAttribute('tabindex', '0');
        }
      }

      _onKeyDown(e) {
        // Disable <iron-list> keydown handler
        e.stopImmediatePropagation();

        // Ensure standard key value, unified across browsers
        let key = e.key;
        if (key === 'Up' || key === 'Down' || key === 'Left' || key === 'Right') {
          // MSIE & Edge
          key = 'Arrow' + key;
        }
        if (key === 'Esc') {
          // MSIE & Edge
          key = 'Escape';
        }
        if (key === 'Spacebar') {
          // MSIE
          key = ' ';
        }

        let keyGroup;
        switch (key) {
          case 'ArrowUp':
          case 'ArrowDown':
          case 'ArrowLeft':
          case 'ArrowRight':
          case 'PageUp':
          case 'PageDown':
          case 'Home':
          case 'End':
            keyGroup = 'Navigation';
            break;
          case 'Enter':
          case 'Escape':
          case 'F2':
            keyGroup = 'Interaction';
            break;
          case 'Tab':
            keyGroup = 'Tab';
            break;
          case ' ':
            keyGroup = 'Space';
            break;
        }

        this._detectInteracting(e);
        if (this.hasAttribute('interacting') && keyGroup !== 'Interaction') {
          // When in the interacting mode, only the “Interaction” keys are handled.
          keyGroup = undefined;
        }

        if (keyGroup) {
          this[`_on${keyGroup}KeyDown`](e, key);
        }
      }

      _ensureScrolledToIndex(index) {
        const targetRowInDom = Array.from(this.$.items.children).filter(child => child.index === index)[0];
        if (!targetRowInDom) {
          this._scrollToIndex(index);
        }
      }

      _onNavigationKeyDown(e, key) {
        e.preventDefault();

        function indexOfChildElement(el) {
          return Array.prototype.indexOf.call(el.parentNode.children, el);
        }

        const visibleItemsCount = this._lastVisibleIndex - this._firstVisibleIndex - 1;

        let dx = 0, dy = 0;
        switch (key) {
          case 'ArrowRight':
            dx = 1;
            break;
          case 'ArrowLeft':
            dx = -1;
            break;
          case 'Home':
            dx = -Infinity;
            e.ctrlKey && (dy = -Infinity);
            break;
          case 'End':
            dx = Infinity;
            e.ctrlKey && (dy = Infinity);
            break;
          case 'ArrowDown':
            dy = 1;
            break;
          case 'ArrowUp':
            dy = -1;
            break;
          case 'PageDown':
            dy = visibleItemsCount;
            break;
          case 'PageUp':
            dy = -visibleItemsCount;
            break;
        }

        const activeCell = e.composedPath()[0];
        const columnIndex = indexOfChildElement(activeCell);
        const isRowDetails = this._elementMatches(activeCell, '[part~="details-cell"]');

        const activeRow = activeCell.parentNode;

        const activeRowGroup = activeRow.parentNode;
        const maxRowIndex = (activeRowGroup === this.$.items ? this._effectiveSize : activeRowGroup.children.length) - 1;

        // Body rows have index property, otherwise DOM child index of the row is used.
        const rowIndex = (activeRowGroup === this.$.items) ?
          (this._focusedItemIndex !== undefined ? this._focusedItemIndex : activeRow.index) :
          indexOfChildElement(activeRow);

        // Index of the destination row
        let dstRowIndex = Math.max(0, Math.min(rowIndex + dy, maxRowIndex));

        // Row details navigation logic
        let dstIsRowDetails = false;
        if (activeRowGroup === this.$.items) {
          const item = activeRow._item;
          const dstItem = this._cache.getItemForIndex(dstRowIndex);
          // Should we navigate to row details?
          if (isRowDetails) {
            dstIsRowDetails = dy === 0;
          } else {
            dstIsRowDetails = dy === 1 && this._isDetailsOpened(item) ||
              dy === -1 && dstRowIndex !== rowIndex && this._isDetailsOpened(dstItem);
          }
          // Should we navigate between details and regular cells of the same row?
          if (dstIsRowDetails !== isRowDetails &&
              (dy === 1 && dstIsRowDetails || dy === -1 && !dstIsRowDetails)) {
            dstRowIndex = rowIndex;
          }
        }

        // Header and footer could have hidden rows, e. g., if none of the columns
        // or groups on the given column tree level define template. Skip them
        // in vertical keyboard navigation.
        if (activeRowGroup !== this.$.items) {
          if (dstRowIndex > rowIndex) {
            while (
              dstRowIndex < maxRowIndex &&
              activeRowGroup.children[dstRowIndex].hidden
            ) {
              dstRowIndex++;
            }
          } else if (dstRowIndex < rowIndex) {
            while (
              dstRowIndex > 0 &&
              activeRowGroup.children[dstRowIndex].hidden
            ) {
              dstRowIndex--;
            }
          }
        }

        // _focusedColumnOrder is memoized — this is to ensure predictable
        // navigation when entering and leaving detail and column group cells.
        if (this._focusedColumnOrder === undefined) {
          if (isRowDetails) {
            this._focusedColumnOrder = 0;
          } else {
            this._focusedColumnOrder = this._getColumns(activeRowGroup, rowIndex)[columnIndex]._order;
          }
        }

        // Find orderedColumnIndex — the index of order closest matching the
        // original _focusedColumnOrder in the sorted array of orders
        // of the visible columns on the destination row.
        const dstColumns = this._getColumns(activeRowGroup, dstRowIndex);
        const dstSortedColumnOrders = dstColumns.filter(c => !c.hidden).map(c => c._order)
          .sort((b, a) => (b - a));
        const maxOrderedColumnIndex = dstSortedColumnOrders.length - 1;
        const orderedColumnIndex = dstSortedColumnOrders.indexOf(
          dstSortedColumnOrders.slice(0).sort((b, a) =>
            Math.abs(b - this._focusedColumnOrder) - Math.abs(a - this._focusedColumnOrder)
          )[0]
        );

        // Index of the destination column order
        const dstOrderedColumnIndex = (dy === 0 && isRowDetails) ? orderedColumnIndex :
          Math.max(0, Math.min(orderedColumnIndex + dx, maxOrderedColumnIndex));

        if (dstOrderedColumnIndex !== orderedColumnIndex) {
          // Horizontal movement invalidates stored _focusedColumnOrder
          this._focusedColumnOrder = undefined;
        }

        // Ensure correct vertical scroll position, destination row is visible
        if (activeRowGroup === this.$.items) {
          this._ensureScrolledToIndex(dstRowIndex);
        }

        // This has to be set after scrolling, otherwise it can be removed by
        // `_preventScrollerRotatingCellFocus(item, index)` during scrolling.
        this._toggleAttribute('navigating', true, this);

        const columnIndexByOrder = dstColumns.reduce((acc, col, i) => (acc[col._order] = i, acc), {});
        const dstColumnIndex = columnIndexByOrder[dstSortedColumnOrders[dstOrderedColumnIndex]];

        // For body rows, use index property to find destination row, otherwise use DOM child index
        const dstRow = activeRowGroup === this.$.items ?
          Array.from(activeRowGroup.children).filter(el => el.index === dstRowIndex)[0] :
          activeRowGroup.children[dstRowIndex];
        if (!dstRow) {
          return;
        }

        // Here we go!
        const dstCell = dstIsRowDetails ?
          Array.from(dstRow.children)
            .filter(el => this._elementMatches(el, '[part~="details-cell"]'))[0] :
          dstRow.children[dstColumnIndex];
        this._scrollHorizontallyToCell(dstCell);
        if (activeRowGroup === this.$.items) {
          // When scrolling with repeated keydown, sometimes FocusEvent listeners
          // are too late to update _focusedItemIndex. Ensure next keydown
          // listener invocation gets updated _focusedItemIndex value.
          this._focusedItemIndex = dstRowIndex;
        }

        if (activeRowGroup === this.$.items) {
          const dstRect = dstCell.getBoundingClientRect();
          const footerTop = this.$.footer.getBoundingClientRect().top;
          const headerBottom = this.$.header.getBoundingClientRect().bottom;
          if (dstRect.bottom > footerTop) {
            this.$.table.scrollTop += dstRect.bottom - footerTop;
            this._scrollHandler();
          } else if (dstRect.top < headerBottom) {
            this.$.table.scrollTop -= headerBottom - dstRect.top;
            this._scrollHandler();
          }
        }

        dstCell.focus();
      }

      _parseEventPath(path) {
        const tableIndex = path.indexOf(this.$.table);
        return {
          rowGroup: path[tableIndex - 1],
          row: path[tableIndex - 2],
          cell: path[tableIndex - 3]
        };
      }

      _onInteractionKeyDown(e, key) {
        const localTarget = e.composedPath()[0];
        const localTargetIsTextInput = localTarget.localName === 'input' &&
          !/^(button|checkbox|color|file|image|radio|range|reset|submit)$/i.test(localTarget.type);

        let wantInteracting;
        switch (key) {
          case 'Enter':
            wantInteracting = this.hasAttribute('interacting') ? !localTargetIsTextInput : true;
            break;
          case 'Escape':
            wantInteracting = false;
            break;
          case 'F2':
            wantInteracting = !this.hasAttribute('interacting');
            break;
        }

        const {cell} = this._parseEventPath(e.composedPath());

        if (this.hasAttribute('interacting') !== wantInteracting) {
          if (wantInteracting) {
            const focusTarget = cell._content.querySelector('[focus-target]') ||
              cell._content.firstElementChild;
            if (focusTarget) {
              e.preventDefault();
              focusTarget.focus();
              this._toggleAttribute('interacting', true, this);
              this._toggleAttribute('navigating', false, this);
            }
          } else {
            e.preventDefault();
            this._focusedColumnOrder = undefined;
            cell.focus();
            this._toggleAttribute('interacting', false, this);
            this._toggleAttribute('navigating', true, this);
          }
        }
      }

      _predictFocusStepTarget(srcElement, step) {
        const tabOrder = [
          this.$.table,
          this._headerFocusable,
          this._itemsFocusable,
          this._footerFocusable,
          this.$.focusexit
        ];

        let index = tabOrder.indexOf(srcElement);

        index += step;
        while (index >= 0 && index <= tabOrder.length - 1 &&
            (!tabOrder[index] || tabOrder[index].parentNode.hidden)) {
          index += step;
        }

        return tabOrder[index];
      }

      _onTabKeyDown(e) {
        const focusTarget = this._predictFocusStepTarget(e.composedPath()[0], e.shiftKey ? -1 : 1);

        if (focusTarget === this.$.table) {
          // The focus is about to exit the grid to the top.
          this.$.table.focus();
        } else if (focusTarget === this.$.focusexit) {
          // The focus is about to exit the grid to the bottom.
          this.$.focusexit.focus();
        } else if (focusTarget === this._itemsFocusable) {
          let itemsFocusTarget = focusTarget;
          const targetRow = this._itemsFocusable.parentNode;
          this._ensureScrolledToIndex(this._focusedItemIndex);
          if (targetRow.index !== this._focusedItemIndex) {
            // The target row, which is about to be focused next, has been
            // assigned with a new index since last focus, probably because of
            // scrolling. Focus the row for the stored focused item index instead.
            const columnIndex = Array.from(targetRow.children).indexOf(this._itemsFocusable);
            const focusedItemRow = Array.from(this.$.items.children)
              .filter(row => row.index === this._focusedItemIndex)[0];
            if (focusedItemRow) {
              itemsFocusTarget = focusedItemRow.children[columnIndex];
            }
          }
          e.preventDefault();
          itemsFocusTarget.focus();
        } else {
          e.preventDefault();
          focusTarget.focus();
        }

        this._toggleAttribute('navigating', true, this);
      }

      _onSpaceKeyDown(e) {
        e.preventDefault();

        const cell = e.composedPath()[0];
        if (cell._content && cell._content.firstElementChild) {
          const wasNavigating = this.hasAttribute('navigating');
          cell._content.firstElementChild.click();
          this._toggleAttribute('navigating', wasNavigating, this);
        } else {
          this.dispatchEvent(new CustomEvent('cell-activate', {detail: {
            model: this.__getRowModel(cell.parentElement)
          }}));
        }
      }

      _onFocusIn(e) {
        if (!this._isMousedown) {
          this._toggleAttribute('navigating', true, this);
        }

        const rootTarget = e.composedPath()[0];

        if (rootTarget === this.$.table ||
            rootTarget === this.$.focusexit) {
          // The focus enters the top (bottom) of the grid, meaning that user has
          // tabbed (shift-tabbed) into the grid. Move the focus to
          // the first (the last) focusable.
          this._predictFocusStepTarget(
            rootTarget,
            rootTarget === this.$.table ? 1 : -1
          ).focus();
          this._toggleAttribute('interacting', false, this);
        } else {
          this._detectInteracting(e);
        }
      }

      _onFocusOut(e) {
        this._toggleAttribute('navigating', false, this);
        this._detectInteracting(e);
      }

      _onCellFocusIn(e) {
        this._detectInteracting(e);

        if (e.composedPath().indexOf(this.$.table) === 3) {
          const cell = e.composedPath()[0];
          this._activeRowGroup = cell.parentNode.parentNode;
          if (this._activeRowGroup === this.$.header) {
            this._headerFocusable = cell;
          } else if (this._activeRowGroup === this.$.items) {
            this._itemsFocusable = cell;
          } else if (this._activeRowGroup === this.$.footer) {
            this._footerFocusable = cell;
          }
          // Inform cell content of the focus (used in <vaadin-grid-sorter>)
          cell._content.dispatchEvent(new CustomEvent('cell-focusin', {bubbles: false}));
        }

        this._detectFocusedItemIndex(e);
      }

      _onCellFocusOut(e) {
        if (e.composedPath().indexOf(this.$.table) === 3) {
          const cell = e.composedPath()[0];
          // Inform cell content of the focus (used in <vaadin-grid-sorter>)
          cell._content.dispatchEvent(new CustomEvent('cell-focusout', {bubbles: false}));
        }
      }

      _detectInteracting(e) {
        this._toggleAttribute('interacting',
          e.composedPath().some(el => el.localName === 'vaadin-grid-cell-content'),
          this);
      }

      _detectFocusedItemIndex(e) {
        const {rowGroup, row} = this._parseEventPath(e.composedPath());
        if (rowGroup === this.$.items) {
          this._focusedItemIndex = row.index;
        }
      }

      _preventScrollerRotatingCellFocus(item, index) {
        if (item.index === this._focusedItemIndex && this.hasAttribute('navigating') && this._activeRowGroup === this.$.items) {
          // Focused item has went, hide navigation mode
          this._navigatingIsHidden = true;
          this._toggleAttribute('navigating', false, this);
        }
        if (index === this._focusedItemIndex && this._navigatingIsHidden) {
          // Focused item is back, restore navigation mode
          this._navigatingIsHidden = false;
          this._toggleAttribute('navigating', true, this);
        }
      }

      _getColumns(rowGroup, rowIndex) {
        let columnTreeLevel = this._columnTree.length - 1;
        if (rowGroup === this.$.header) {
          columnTreeLevel = rowIndex;
        } else if (rowGroup === this.$.footer) {
          columnTreeLevel = this._columnTree.length - 1 - rowIndex;
        }
        return this._columnTree[columnTreeLevel];
      }

      _resetKeyboardNavigation() {
        if (this.$.header.firstElementChild) {
          this._headerFocusable = this.$.header.firstElementChild.firstElementChild;
        }

        if (this.$.items.firstElementChild) {
          const firstVisibleIndexRow = this._iterateItems((pidx, vidx) => {
            if (this._firstVisibleIndex === vidx) {
              return this.$.items.children[pidx];
            }
          });
          if (firstVisibleIndexRow) {
            this._itemsFocusable = firstVisibleIndexRow.firstElementChild;
          }
        }

        if (this.$.footer.firstElementChild) {
          this._footerFocusable = this.$.footer.firstElementChild.firstElementChild;
        }
      }

      _scrollHorizontallyToCell(dstCell) {
        if (dstCell.hasAttribute('frozen') || this._elementMatches(dstCell, '[part~="details-cell"]')) {
          // These cells are, by design, always visible, no need to scroll.
          return;
        }

        const dstCellRect = dstCell.getBoundingClientRect();
        const dstRow = dstCell.parentNode;
        const dstCellIndex = Array.from(dstRow.children).indexOf(dstCell);
        const tableRect = this.$.table.getBoundingClientRect();
        let leftBoundary = tableRect.left, rightBoundary = tableRect.right;
        for (let i = dstCellIndex - 1; i >= 0; i--) {
          const cell = dstRow.children[i];
          if (cell.hasAttribute('hidden') ||
              this._elementMatches(cell, '[part~="details-cell"]')) {
            continue;
          }
          if (cell.hasAttribute('frozen')) {
            leftBoundary = cell.getBoundingClientRect().right;
            break;
          }
        }
        for (let i = dstCellIndex + 1; i < dstRow.children.length; i++) {
          const cell = dstRow.children[i];
          if (cell.hasAttribute('hidden') ||
              this._elementMatches(cell, '[part~="details-cell"]')) {
            continue;
          }
          if (cell.hasAttribute('frozen')) {
            rightBoundary = cell.getBoundingClientRect().left;
            break;
          }
        }

        if (dstCellRect.left < leftBoundary) {
          this.$.table.scrollLeft += Math.round(dstCellRect.left - leftBoundary);
        }
        if (dstCellRect.right > rightBoundary) {
          this.$.table.scrollLeft += Math.round(dstCellRect.right - rightBoundary);
        }
      }

      _elementMatches(el, query) {
        return el.matches ? el.matches(query) :
          Array.from(el.parentNode.querySelectorAll(query)).indexOf(el) !== -1;
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const ColumnReorderingMixin = superClass => class ColumnReorderingMixin extends GestureEventListeners(superClass) {

      static get properties() {
        return {
          /**
           * Set to true to allow column reordering.
           */
          columnReorderingAllowed: {
            type: Boolean,
            value: false
          },

          _orderBaseScope: {
            type: Number,
            value: 10000000
          }
        };
      }

      static get observers() {
        return [
          '_updateOrders(_columnTree, _columnTree.*)'
        ];
      }

      ready() {
        super.ready();
        addListener(this, 'track', this._onTrackEvent);
        this._reorderGhost = this.shadowRoot.querySelector('[part="reorder-ghost"]');

        this.addEventListener('touchstart', this._onTouchStart.bind(this));
        this.addEventListener('touchmove', this._onTouchMove.bind(this));
        this.addEventListener('touchend', this._onTouchEnd.bind(this));
        this.addEventListener('contextmenu', this._onContextMenu.bind(this));
      }

      _onContextMenu(e) {
        if (this.hasAttribute('reordering')) {
          e.preventDefault();
        }
      }

      _onTouchStart(e) {
        // Touch event, delay activation by 100ms
        this._startTouchReorderTimeout = setTimeout(() => {
          this._onTrackStart({
            detail: {
              x: e.touches[0].clientX,
              y: e.touches[0].clientY
            }
          });
        }, 100);
      }

      _onTouchMove(e) {
        if (this._draggedColumn) {
          e.preventDefault();
        }
        clearTimeout(this._startTouchReorderTimeout);
      }

      _onTouchEnd() {
        clearTimeout(this._startTouchReorderTimeout);
        this._onTrackEnd();
      }

      _onTrackEvent(e) {
        if (e.detail.state === 'start') {
          const path = e.composedPath();
          const headerCell = path[path.indexOf(this.$.header) - 2];
          if (!headerCell || !headerCell._content) {
            // Not a header column
            return;
          }

          const activeElement = this.getRootNode().activeElement;
          if (headerCell._content.contains(this.getRootNode().activeElement)
              && (!this._ie || !this._isFocusable(activeElement))) {
            // Something was focused inside the cell
            return;
          }

          if (this.$.scroller.hasAttribute('column-resizing')) {
            // Resizing is in progress
            return;
          }

          if (!this._touchDevice) {
            // Not a touch device
            this._onTrackStart(e);
          }
        } else if (e.detail.state === 'track') {
          this._onTrack(e);
        } else if (e.detail.state === 'end') {
          this._onTrackEnd(e);
        }
      }

      _onTrackStart(e) {
        if (!this.columnReorderingAllowed) {
          return;
        }

        // Cancel reordering if there are draggable nodes on the event path
        const path = e.path || dom(e).path;
        if (path && path.filter(node => node.hasAttribute && node.hasAttribute('draggable'))[0]) {
          return;
        }

        const headerCell = this._cellFromPoint(e.detail.x, e.detail.y);
        if (!headerCell || headerCell.getAttribute('part').indexOf('header-cell') === -1) {
          return;
        }

        this._toggleAttribute('reordering', true, this);
        this._draggedColumn = headerCell._column;
        while (this._draggedColumn.parentElement.childElementCount === 1) {
          // This is the only column in the group, drag the whole group instead
          this._draggedColumn = this._draggedColumn.parentElement;
        }
        this._setSiblingsReorderStatus(this._draggedColumn, 'allowed');
        this._draggedColumn._reorderStatus = 'dragging';

        this._updateGhost(headerCell);
        this._reorderGhost.style.visibility = 'visible';
        this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);
        this._autoScroller();
      }

      _onTrack(e) {
        if (!this._draggedColumn) {
          // Reordering didn’t start. Skip this event.
          return;
        }

        const targetCell = this._cellFromPoint(e.detail.x, e.detail.y);
        if (!targetCell) {
          return;
        }

        const targetColumn = this._getTargetColumn(targetCell, this._draggedColumn);
        if (this._isSwapAllowed(this._draggedColumn, targetColumn) &&
          this._isSwappableByPosition(targetColumn, e.detail.x)) {
          this._swapColumnOrders(this._draggedColumn, targetColumn);
        }

        this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);
        this._lastDragClientX = e.detail.x;
      }

      _onTrackEnd() {
        if (!this._draggedColumn) {
          // Reordering didn’t start. Skip this event.
          return;
        }

        this._toggleAttribute('reordering', false, this);
        this._draggedColumn._reorderStatus = '';
        this._setSiblingsReorderStatus(this._draggedColumn, '');
        this._draggedColumn = null;
        this._lastDragClientX = null;
        this._reorderGhost.style.visibility = 'hidden';
      }

      _cellFromPoint(x, y) {
        x = x || 0;
        y = y || 0;
        if (!this._draggedColumn) {
          this._toggleAttribute('no-content-pointer-events', true, this.$.scroller);
        }
        let cell;
        if (useShadow) {
          cell = this.shadowRoot.elementFromPoint(x, y);
        } else {
          cell = document.elementFromPoint(x, y);

          // Workaround a FF58 bug
          if (cell.localName === 'vaadin-grid-cell-content') {
            cell = cell.assignedSlot.parentNode;
          }

        }
        this._toggleAttribute('no-content-pointer-events', false, this.$.scroller);

        // Make sure the element is actually a cell
        if (cell && cell._column) {
          return cell;
        }
      }

      _updateGhostPosition(eventClientX, eventClientY) {
        const ghostRect = this._reorderGhost.getBoundingClientRect();
        // // This is where we want to position the ghost
        const targetLeft = eventClientX - ghostRect.width / 2;
        const targetTop = eventClientY - ghostRect.height / 2;
        // Current position
        const _left = parseInt(this._reorderGhost._left || 0);
        const _top = parseInt(this._reorderGhost._top || 0);
        // Reposition the ghost
        this._reorderGhost._left = _left - (ghostRect.left - targetLeft);
        this._reorderGhost._top = _top - (ghostRect.top - targetTop);
        this._reorderGhost.style.transform = `translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`;
      }

      _getInnerText(e) {
        if (e.localName) {
          // Custom implementation needed since IE11 doesn't respect the spec in case of hidden elements
          if (getComputedStyle(e).display === 'none') {
            return '';
          } else {
            return Array.from(e.childNodes).map(n => this._getInnerText(n)).join('');
          }
        } else {
          return e.textContent;
        }
      }

      _updateGhost(cell) {
        const ghost = this._reorderGhost;
        ghost.textContent = this._getInnerText(cell._content);
        const style = window.getComputedStyle(cell);
        ['boxSizing', 'display', 'width', 'height', 'background', 'alignItems', 'padding', 'border', 'flex-direction', 'overflow']
          .forEach(propertyName => ghost.style[propertyName] = style[propertyName]);
        return ghost;
      }

      _updateOrders(columnTree, splices) {
        if (columnTree === undefined || splices === undefined) {
          return;
        }

        // Set order numbers to top-level columns
        columnTree[0].forEach((column, index) => column._order = (index + 1) * this._orderBaseScope);
      }

      _setSiblingsReorderStatus(column, status) {
        Array.from(column.parentNode.children)
          .filter(child => /column/.test(child.localName) && this._isSwapAllowed(child, column))
          .forEach(sibling => sibling._reorderStatus = status);
      }

      _autoScroller() {
        if (this._lastDragClientX) {
          const rightDiff = this._lastDragClientX - this.getBoundingClientRect().right + 50;
          const leftDiff = this.getBoundingClientRect().left - this._lastDragClientX + 50;

          if (rightDiff > 0) {
            this.$.table.scrollLeft += rightDiff / 10;
          } else if (leftDiff > 0) {
            this.$.table.scrollLeft -= leftDiff / 10;
          }
          this._scrollHandler();
        }

        if (this._draggedColumn) {
          this.async(this._autoScroller, 10);
        }
      }

      _isSwapAllowed(column1, column2) {
        if (column1 && column2) {
          const differentColumns = column1 !== column2;
          const sameParent = column1.parentElement === column2.parentElement;
          const sameFrozen = column1.frozen === column2.frozen;
          return differentColumns && sameParent && sameFrozen;
        }
      }

      _isSwappableByPosition(targetColumn, clientX) {
        const targetCell =
          Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~="cell"]')).filter(cell => targetColumn.contains(cell._column))[0];
        const sourceCellRect = this.$.header.querySelector('tr:not([hidden]) [reorder-status=dragging]').getBoundingClientRect();
        const targetRect = targetCell.getBoundingClientRect();
        if (targetRect.left > sourceCellRect.left) {
          return clientX > targetRect.right - sourceCellRect.width;
        } else {
          return clientX < targetRect.left + sourceCellRect.width;
        }
      }

      _swapColumnOrders(column1, column2) {
        const _order = column1._order;
        column1._order = column2._order;
        column2._order = _order;
        this._updateLastFrozen();
        this._updateFirstAndLastColumn();
      }

      _getTargetColumn(targetCell, draggedColumn) {
        if (targetCell && draggedColumn) {
          let candidate = targetCell._column;
          while (candidate.parentElement !== draggedColumn.parentElement && candidate !== this) {
            candidate = candidate.parentElement;
          }
          if (candidate.parentElement === draggedColumn.parentElement) {
            return candidate;
          } else {
            return targetCell._column;
          }
        }
      }

    };

    /**
    @license
    Copyright (c) 2018 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * @polymerMixin
     */
    const ColumnBaseMixin = superClass => class ColumnBaseMixin extends superClass {
      static get properties() {
        return {
          /**
           * When set to true, the column is user-resizable.
           * @default false
           */
          resizable: {
            type: Boolean,
            value: function() {
              if (this.localName === 'vaadin-grid-column-group') {
                return;
              }

              const parent = this.parentNode;
              if (parent && parent.localName === 'vaadin-grid-column-group') {
                return parent.resizable || false;
              } else {
                return false;
              }
            }
          },

          _headerTemplate: {
            type: Object
          },

          _footerTemplate: {
            type: Object
          },

          /**
           * When true, the column is frozen. When a column inside of a column group is frozen,
           * all of the sibling columns inside the group will get frozen also.
           */
          frozen: {
            type: Boolean,
            value: false
          },

          /**
           * When set to true, the cells for this column are hidden.
           */
          hidden: {
            type: Boolean
          },

          /**
           * Text content to display in the header cell of the column.
           */
          header: {
            type: String
          },

          /**
           * Aligns the columns cell content horizontally.
           * Supported values: "start", "center" and "end".
           */
          textAlign: {
            type: String
          },

          _lastFrozen: {
            type: Boolean,
            value: false
          },

          _order: Number,

          _reorderStatus: Boolean,

          _emptyCells: Array,

          _headerCell: Object,

          _footerCell: Object,

          _grid: Object,

          /**
           * Custom function for rendering the header content.
           * Receives two arguments:
           *
           * - `root` The header cell content DOM element. Append your content to it.
           * - `column` The `<vaadin-grid-column>` element.
           */
          headerRenderer: Function,

          /**
           * Custom function for rendering the footer content.
           * Receives two arguments:
           *
           * - `root` The footer cell content DOM element. Append your content to it.
           * - `column` The `<vaadin-grid-column>` element.
           */
          footerRenderer: Function
        };
      }

      static get observers() {
        return [
          '_widthChanged(width, _headerCell, _footerCell, _cells.*)',
          '_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)',
          '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)',
          '_pathOrHeaderChanged(path, header, _headerCell, _footerCell, _cells.*, renderer, headerRenderer, _bodyTemplate, _headerTemplate)',
          '_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)',
          '_orderChanged(_order, _headerCell, _footerCell, _cells.*)',
          '_lastFrozenChanged(_lastFrozen)',
          '_setBodyTemplateOrRenderer(_bodyTemplate, renderer, _cells, _cells.*)',
          '_setHeaderTemplateOrRenderer(_headerTemplate, headerRenderer, _headerCell)',
          '_setFooterTemplateOrRenderer(_footerTemplate, footerRenderer, _footerCell)',
          '_resizableChanged(resizable, _headerCell)',
          '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)',
          '_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)'
        ];
      }

      /** @protected */
      connectedCallback() {
        super.connectedCallback();

        this._bodyTemplate && (this._bodyTemplate.templatizer._grid = this._grid);
        this._headerTemplate && (this._headerTemplate.templatizer._grid = this._grid);
        this._footerTemplate && (this._footerTemplate.templatizer._grid = this._grid);

        this._templateObserver.flush();
        if (!this._bodyTemplate) {
          // The observer might not have triggered if the tag is empty. Run manually.
          this._templateObserver.callback();
        }

        requestAnimationFrame(() => {
          this._allCells.forEach(cell => {
            if (!cell._content.parentNode) {
              this._grid && this._grid.appendChild(cell._content);
            }
          });
        });
      }

      /** @protected */
      disconnectedCallback() {
        super.disconnectedCallback();

        requestAnimationFrame(() => {
          if (!this._findHostGrid()) {
            this._allCells.forEach(cell => {
              if (cell._content.parentNode) {
                cell._content.parentNode.removeChild(cell._content);
              }
            });
          }
        });

        this._gridValue = undefined;
      }

      _findHostGrid() {
        let el = this;
        // Custom elements extending grid must have a specific localName
        while (el && !/^vaadin.*grid$/.test(el.localName)) {
          el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;
        }
        return el || undefined;
      }

      get _grid() {
        if (!this._gridValue) {
          this._gridValue = this._findHostGrid();
        }
        return this._gridValue;
      }

      get _allCells() {
        return []
          .concat(this._cells || [])
          .concat(this._emptyCells || [])
          .concat(this._headerCell)
          .concat(this._footerCell)
          .filter(cell => cell);
      }

      constructor() {
        super();

        this._templateObserver = new FlattenedNodesObserver(this, info => {
          this._headerTemplate = this._prepareHeaderTemplate();
          this._footerTemplate = this._prepareFooterTemplate();
          this._bodyTemplate = this._prepareBodyTemplate();
        });
      }

      _prepareHeaderTemplate() {
        return this._prepareTemplatizer(this._findTemplate(true) || null, {});
      }

      _prepareFooterTemplate() {
        return this._prepareTemplatizer(this._findTemplate(false, true) || null, {});
      }

      _prepareBodyTemplate() {
        return this._prepareTemplatizer(this._findTemplate() || null);
      }

      _prepareTemplatizer(template, instanceProps) {
        if (template && !template.templatizer) {
          const templatizer = new GridTemplatizer();
          templatizer._grid = this._grid;
          templatizer.dataHost = this.dataHost;
          templatizer._instanceProps = instanceProps || templatizer._instanceProps;
          templatizer.template = template;
          template.templatizer = templatizer;
        }

        return template;
      }

      _renderHeaderAndFooter() {
        if (this.headerRenderer) {
          this.__runRenderer(this.headerRenderer, this._headerCell);
        }
        if (this.footerRenderer) {
          this.__runRenderer(this.footerRenderer, this._footerCell);
        }
      }

      __runRenderer(renderer, cell, rowData) {
        const args = [cell._content, this];
        if (rowData && rowData.item) {
          args.push(rowData);
        }
        renderer.apply(this, args);
      }

      __setColumnTemplateOrRenderer(template, renderer, cells) {
        if (template && renderer) {
          throw new Error('You should only use either a renderer or a template');
        }

        cells.forEach(cell => {
          const model = this._grid.__getRowModel(cell.parentElement);

          if (renderer) {
            cell._renderer = renderer;

            if (model.item || renderer === this.headerRenderer || renderer === this.footerRenderer) {
              this.__runRenderer(renderer, cell, model);
            }
          } else if (cell._template !== template) {
            cell._template = template;

            cell._content.innerHTML = '';
            template.templatizer._grid = template.templatizer._grid || this._grid;
            const inst = template.templatizer.createInstance();
            cell._content.appendChild(inst.root);
            cell._instance = inst;
            if (model.item) {
              cell._instance.setProperties(model);
            }
          }
        });
      }

      _setBodyTemplateOrRenderer(template, renderer, cells, splices) {
        if ((template || renderer) && cells) {
          this.__setColumnTemplateOrRenderer(template, renderer, cells);
        }
      }

      _setHeaderTemplateOrRenderer(headerTemplate, headerRenderer, headerCell) {
        if ((headerTemplate || headerRenderer) && headerCell) {
          this.__setColumnTemplateOrRenderer(headerTemplate, headerRenderer, [headerCell]);
        }
      }

      _setFooterTemplateOrRenderer(footerTemplate, footerRenderer, footerCell) {
        if ((footerTemplate || footerRenderer) && footerCell) {
          this.__setColumnTemplateOrRenderer(footerTemplate, footerRenderer, [footerCell]);
          this._grid.__updateHeaderFooterRowVisibility(footerCell.parentElement);
        }
      }

      _selectFirstTemplate(header = false, footer = false) {
        return FlattenedNodesObserver.getFlattenedNodes(this)
          .filter(node =>
            node.localName === 'template'
            && node.classList.contains('header') === header
            && node.classList.contains('footer') === footer
          )[0];
      }

      _findTemplate(header, footer) {
        const template = this._selectFirstTemplate(header, footer);
        if (template) {
          if (this.dataHost) {
            // set dataHost to the context where template has been defined
            template._rootDataHost = this.dataHost._rootDataHost || this.dataHost;
          }
        }
        return template;
      }

      _flexGrowChanged(flexGrow, headerCell, footerCell, cells) {
        if (this.parentElement && this.parentElement._columnPropChanged) {
          this.parentElement._columnPropChanged('flexGrow');
        }

        this._allCells.forEach(cell => cell.style.flexGrow = flexGrow);
      }

      _orderChanged(order, headerCell, footerCell, cells) {
        this._allCells.forEach(cell => cell.style.order = order);
      }

      _widthChanged(width, headerCell, footerCell, cells) {
        if (this.parentElement && this.parentElement._columnPropChanged) {
          this.parentElement._columnPropChanged('width');
        }

        this._allCells.forEach(cell => cell.style.width = width);
      }

      _frozenChanged(frozen, headerCell, footerCell, cells) {
        if (this.parentElement && this.parentElement._columnPropChanged) {
          this.parentElement._columnPropChanged('frozen', frozen);
        }

        this._allCells.forEach(cell => this._toggleAttribute('frozen', frozen, cell));

        this._grid && this._grid._frozenCellsChanged && this._grid._frozenCellsChanged();
      }

      _lastFrozenChanged(lastFrozen) {
        this._allCells.forEach(cell => this._toggleAttribute('last-frozen', lastFrozen, cell));

        if (this.parentElement && this.parentElement._columnPropChanged) {
          this.parentElement._lastFrozen = lastFrozen;
        }
      }

      _pathOrHeaderChanged(path, header, headerCell, footerCell, cells, renderer, headerRenderer, bodyTemplate, headerTemplate) {
        const hasHeaderText = header !== undefined;
        if (!headerRenderer && !headerTemplate && hasHeaderText && headerCell) {
          this.__setTextContent(headerCell._content, header);
        }

        if (path && cells.value) {
          if (!renderer && !bodyTemplate) {
            const pathRenderer = (root, owner, {item}) => this.__setTextContent(root, this.get(path, item));
            this.__setColumnTemplateOrRenderer(undefined, pathRenderer, cells.value);
          }

          if (!headerRenderer && !headerTemplate && !hasHeaderText && headerCell && header !== null) {
            this.__setTextContent(headerCell._content, this._generateHeader(path));
          }
        }

        if (headerCell) {
          this._grid.__updateHeaderFooterRowVisibility(headerCell.parentElement);
        }
      }

      __setTextContent(node, textContent) {
        node.textContent !== textContent && (node.textContent = textContent);
      }

      _generateHeader(path) {
        return path
          .substr(path.lastIndexOf('.') + 1)
          .replace(/([A-Z])/g, '-$1').toLowerCase()
          .replace(/-/g, ' ')
          .replace(/^./, match => match.toUpperCase());
      }

      _toggleAttribute(name, bool, node) {
        if (node.hasAttribute(name) === !bool) {
          if (bool) {
            node.setAttribute(name, '');
          } else {
            node.removeAttribute(name);
          }
        }
      }

      _reorderStatusChanged(reorderStatus, headerCell, footerCell, cells) {
        this._allCells.forEach(cell => cell.setAttribute('reorder-status', reorderStatus));
      }

      _resizableChanged(resizable, headerCell) {
        if (resizable === undefined || headerCell === undefined) {
          return;
        }

        if (headerCell) {
          [headerCell].concat(this._emptyCells).forEach(cell => {
            if (cell) {
              const existingHandle = cell.querySelector('[part~="resize-handle"]');
              if (existingHandle) {
                cell.removeChild(existingHandle);
              }

              if (resizable) {
                const handle = document.createElement('div');
                handle.setAttribute('part', 'resize-handle');
                cell.appendChild(handle);
              }
            }
          });
        }
      }

      _textAlignChanged(textAlign, _cells, _headerCell, _footerCell) {
        if (textAlign === undefined) {
          return;
        }
        if (['start', 'end', 'center'].indexOf(textAlign) === -1) {
          console.warn('textAlign can only be set as "start", "end" or "center"');
          return;
        }

        let textAlignFallback;
        if (getComputedStyle(this._grid).direction === 'ltr') {
          if (textAlign === 'start') {
            textAlignFallback = 'left';
          } else if (textAlign === 'end') {
            textAlignFallback = 'right';
          }
        } else {
          if (textAlign === 'start') {
            textAlignFallback = 'right';
          } else if (textAlign === 'end') {
            textAlignFallback = 'left';
          }
        }

        this._allCells.forEach(cell => {
          cell._content.style.textAlign = textAlign;
          if (getComputedStyle(cell._content).textAlign !== textAlign) {
            cell._content.style.textAlign = textAlignFallback;
          }
        });
      }

      _hiddenChanged(hidden, headerCell, footerCell, cells) {
        if (this.parentElement && this.parentElement._columnPropChanged) {
          this.parentElement._columnPropChanged('hidden', hidden);
        }

        this._allCells.forEach(cell => this._toggleAttribute('hidden', hidden, cell));

        if (!!hidden !== !!this._previousHidden && this._grid) {
          this._grid._updateLastFrozen && this._grid._updateLastFrozen();
          this._grid.notifyResize && this._grid.notifyResize();
        }
        this._previousHidden = hidden;
      }

    };

    /**
     * A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`
     * should look like.
     *
     * See `<vaadin-grid>` documentation and demos for instructions and examples on how
     * to configure the `<vaadin-grid-column>`.
     * ```
     *
     * @memberof Vaadin
     * @mixes Vaadin.Grid.ColumnBaseMixin
     */
    class GridColumnElement extends ColumnBaseMixin(PolymerElement) {
      static get is() {
        return 'vaadin-grid-column';
      }

      static get properties() {
        return {
          /**
           * Width of the cells for this column.
           */
          width: {
            type: String,
            value: '100px'
          },

          /**
           * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.
           */
          flexGrow: {
            type: Number,
            value: 1
          },

          /**
           * Custom function for rendering the cell content.
           * Receives three arguments:
           *
           * - `root` The cell content DOM element. Append your content to it.
           * - `column` The `<vaadin-grid-column>` element.
           * - `rowData` The object with the properties related with
           *   the rendered item, contains:
           *   - `rowData.index` The index of the item.
           *   - `rowData.item` The item.
           *   - `rowData.expanded` Sublevel toggle state.
           *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.
           *   - `rowData.selected` Selected state.
           */
          renderer: Function,

          /**
           * Path to an item sub-property whose value gets displayed in the column body cells.
           * The property name is also shown in the column header if an explicit header or renderer isn't defined.
           */
          path: {
            type: String
          },

          _bodyTemplate: {
            type: Object
          },

          _cells: Array

        };
      }

    }

    customElements.define(GridColumnElement.is, GridColumnElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * This Element is used internally by vaadin-grid.
     *
     * @private
     */
    class GridOuterScrollerElement extends (class extends PolymerElement {}) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: block;
        height: 100%;
        width: 100%;
        position: absolute;
        top: 0;
        box-sizing: border-box;
        overflow: auto;
      }

      :host([passthrough]) {
        pointer-events: none;
      }
    </style>

    <slot></slot>
`;
      }

      static get is() {
        return 'vaadin-grid-outer-scroller';
      }

      static get properties() {
        return {

          scrollTarget: {
            type: Object
          },

          scrollHandler: {
            type: Object
          },

          passthrough: {
            type: Boolean,
            reflectToAttribute: true,
            value: true
          },

          outerScrolling: Boolean,

          noScrollbars: Boolean,

          _touchDevice: Boolean
        };
      }

      ready() {
        super.ready();
        this.addEventListener('scroll', () => this._syncScrollTarget());
        this.parentElement.addEventListener('mousemove', this._onMouseMove.bind(this));

        // for some reason scroll bars are hidden in iOS if this style is
        // added in stylesheets or before attaching.
        this.style.webkitOverflowScrolling = 'touch';

        this.addEventListener('mousedown', _ => this.outerScrolling = true);
        this.addEventListener('mouseup', _ => {
          this.outerScrolling = false;
          this.scrollHandler._scrollHandler();
        });
      }

      _onMouseMove(e) {
        // Ignore mousemove events on touch devices
        if (!this._touchDevice) {
          if (this.noScrollbars && this.parentElement.hasAttribute('scroll-period')) {
            this.passthrough = e.offsetY <= this.clientHeight - 20 && e.offsetX <= this.clientWidth - 20;
          } else {
            this.passthrough = e.offsetY <= this.clientHeight && e.offsetX <= this.clientWidth;
          }
        }
      }

      syncOuterScroller() {
        this.scrollTop = this.scrollTarget.scrollTop;
        this.scrollLeft = this.scrollTarget.scrollLeft;
      }

      _syncScrollTarget() {
        requestAnimationFrame(() => {
          this.scrollTarget.scrollTop = this.scrollTop;
          this.scrollTarget.scrollLeft = this.scrollLeft;
          this.scrollHandler._scrollHandler();
        });

      }
    }

    customElements.define(GridOuterScrollerElement.is, GridOuterScrollerElement);

    const $_documentContainer$8 = document.createElement('template');

    $_documentContainer$8.innerHTML = `<dom-module id="vaadin-grid-styles">
  <template>
    <style>
      @keyframes vaadin-grid-appear {
        to {
          opacity: 1;
        }
      }

      :host {
        display: block;
        animation: 1ms vaadin-grid-appear;
        height: 400px;
        flex: 1 1 auto;
        align-self: stretch;
        position: relative;
      }

      :host([hidden]) {
        display: none !important;
      }

      #scroller {
        display: block;
        transform: translateY(0);
        width: auto;
        height: auto;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }

      :host([height-by-rows]) {
        height: auto;
        align-self: flex-start;
        flex-grow: 0;
        width: 100%;
      }

      :host([height-by-rows]) #scroller {
        width: 100%;
        height: 100%;
        position: relative;
      }

      #table {
        display: block;
        width: 100%;
        height: 100%;
        overflow: auto;
        z-index: -2;
        position: relative;
        outline: none;
      }

      /* Avoid jumpy headers on Edge & IE */
      [wheel-scrolling][edge] #table,
      [wheel-scrolling][ie] #table {
        z-index: auto;
      }

      #header {
        display: block;
        position: absolute;
        top: 0;
        width: 100%;
      }

      th {
        text-align: inherit;
      }

      /* Safari doesn't work with \`inherit\` */
      [safari] th {
        text-align: initial;
      }

      #footer {
        display: block;
        position: absolute;
        bottom: 0;
        width: 100%;
      }

      #items {
        display: block;
        width: 100%;
        position: relative;
        z-index: -1;
      }

      #items,
      #outersizer,
      #fixedsizer {
        border-top: 0 solid transparent;
        border-bottom: 0 solid transparent;
      }

      [part~="row"] {
        display: flex;
        width: 100%;
        box-sizing: border-box;
        margin: 0;
      }

      [part~="row"][loading] [part~="body-cell"] ::slotted(vaadin-grid-cell-content) {
        opacity: 0;
      }

      #items [part~="row"] {
        position: absolute;
      }

      #items [part~="row"]:empty {
        height: 1em;
      }

      [part~="cell"]:not([part~="details-cell"]) {
        flex-shrink: 0;
        flex-grow: 1;
        box-sizing: border-box;
        display: flex;
        width: 100%;
        position: relative;
        align-items: center;
        padding: 0;
        white-space: nowrap;
      }

      [part~="details-cell"] {
        position: absolute;
        bottom: 0;
        width: 100%;
        box-sizing: border-box;
        padding: 0;
      }

      [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        display: block;
        width: 100%;
        box-sizing: border-box;
        overflow: hidden;
      }

      [hidden] {
        display: none !important;
      }

      [frozen] {
        z-index: 2;
        will-change: transform;
      }

      #outerscroller {
        /* Needed (at least) for Android Chrome */
        z-index: 0;
      }

      #scroller:not([safari]) #outerscroller {
        /* Needed for Android Chrome (#1020). Can't be applied to Safari
        since it would re-introduce the sub-pixel overflow bug (#853) */
        will-change: transform;
      }

      [no-scrollbars]:not([safari]):not([firefox]) #outerscroller,
      [no-scrollbars][safari] #table,
      [no-scrollbars][firefox] #table {
        overflow: hidden;
      }

      [no-scrollbars]:not([safari]):not([firefox]) #outerscroller {
        pointer-events: none;
      }

      [scrolling][safari] #outerscroller,
      [scrolling][firefox] #outerscroller {
        pointer-events: auto;
      }

      [ios] #outerscroller {
        pointer-events: auto;
        z-index: -3;
      }

      [ios][scrolling] #outerscroller {
        z-index: 0;
      }

      /* Reordering styles */
      :host([reordering]) [part~="cell"] ::slotted(vaadin-grid-cell-content),
      :host([reordering]) [part~="resize-handle"],
      #scroller[no-content-pointer-events] [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        pointer-events: none;
      }

      [part~="reorder-ghost"] {
        visibility: hidden;
        position: fixed;
        pointer-events: none;
        opacity: 0.5;

        /* Prevent overflowing the grid in Firefox */
        top: 0;
        left: 0;
      }

      :host([reordering]) {
        -moz-user-select: none;
        -webkit-user-select: none;
        user-select: none;
      }

      #scroller[ie][column-reordering-allowed] [part~="header-cell"] {
        -ms-user-select: none;
      }

      :host([reordering]) #outerscroller {
        -webkit-overflow-scrolling: auto !important;
      }

      /* Resizing styles */
      [part~="resize-handle"] {
        position: absolute;
        top: 0;
        right: 0;
        height: 100%;
        cursor: col-resize;
        z-index: 1;
      }

      [part~="resize-handle"]::before {
        position: absolute;
        content: "";
        height: 100%;
        width: 35px;
        transform: translateX(-50%);
      }

      [last-column] [part~="resize-handle"]::before,
      [last-frozen] [part~="resize-handle"]::before {
        width: 18px;
        transform: translateX(-100%);
      }

      #scroller[column-resizing] {
        -ms-user-select: none;
        -moz-user-select: none;
        -webkit-user-select: none;
        user-select: none;
      }

      /* Sizer styles */
      .sizer {
        display: flex;
        position: relative;
        width: 100%;
        visibility: hidden;
      }

      .sizer [part~="details-cell"] {
        display: none !important;
      }

      .sizer [part~="cell"][hidden] {
        display: none !important;
      }

      .sizer [part~="cell"] {
        display: block;
        flex-shrink: 0;
        line-height: 0;
        margin-top: -1em;
        height: 0 !important;
        min-height: 0 !important;
        max-height: 0 !important;
        padding: 0 !important;
      }

      .sizer [part~="cell"]::before {
        content: "-";
      }

      .sizer [part~="cell"] ::slotted(vaadin-grid-cell-content) {
        display: none !important;
      }

      /* Fixed mode (Tablet Edge) */
      #fixedsizer {
        position: absolute;
      }

      :not([edge][no-scrollbars]) #fixedsizer {
        display: none;
      }

      [edge][no-scrollbars] {
        /* Any value other than ‘none’ for the transform results in the creation of both a stacking context and
        a containing block. The object acts as a containing block for fixed positioned descendants. */
        transform: translateZ(0);
        overflow: hidden;
      }

      [edge][no-scrollbars] #header,
      [edge][no-scrollbars] #footer {
        position: fixed;
      }

      [edge][no-scrollbars] #items {
        position: fixed;
        width: 100%;
        will-change: transform;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$8.content);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    const TOUCH_DEVICE = (() => {
      try {
        document.createEvent('TouchEvent');
        return true;
      } catch (e) {
        return false;
      }
    })();

    /**
     *
     * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the
     * the grid can be populated in two ways: imperatively by using renderer callback function and
     * declaratively by using Polymer's Templates.
     *
     * ### Quick Start
     *
     * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.
     *
     * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`
     * shorthand properties for the columns to define what gets rendered in the cells of the column.
     *
     * #### Example:
     * ```html
     * <vaadin-grid>
     *   <vaadin-grid-column path="name.first" header="First name"></vaadin-grid-column>
     *   <vaadin-grid-column path="name.last" header="Last name"></vaadin-grid-column>
     *   <vaadin-grid-column path="email"></vaadin-grid-column>
     * </vaadin-grid>
     * ```
     *
     * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,
     * `renderer` and `footerRenderer`.
     *
     * Each of those renderer functions provides `root`, `column`, `rowData` arguments when applicable.
     * Generate DOM content, append it to the `root` element and control the state
     * of the host element by accessing `column`. Before generating new content,
     * users are able to check if there is already content in `root` for reusing it.
     *
     * Renderers are called on initialization of new column cells and each time the
     * related row data is updated. DOM generated during the renderer call can be reused
     * in the next renderer call and will be provided with the `root` argument.
     * On first call it will be empty.
     *
     * #### Example:
     * ```html
     * <vaadin-grid>
     *   <vaadin-grid-column></vaadin-grid-column>
     *   <vaadin-grid-column></vaadin-grid-column>
     *   <vaadin-grid-column></vaadin-grid-column>
     * </vaadin-grid>
     * ```
     * ```js
     * const grid = document.querySelector('vaadin-grid');
     * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},
     *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];
     *
     * const columns = grid.querySelectorAll('vaadin-grid-column');
     *
     * columns[0].headerRenderer = function(root) {
     *   root.textContent = 'Name';
     * };
     * columns[0].renderer = function(root, column, rowData) {
     *   root.textContent = rowData.item.name;
     * };
     *
     * columns[1].headerRenderer = function(root) {
     *   root.textContent = 'Surname';
     * };
     * columns[1].renderer = function(root, column, rowData) {
     *   root.textContent = rowData.item.surname;
     * };
     *
     * columns[2].headerRenderer = function(root) {
     *   root.textContent = 'Role';
     * };
     * columns[2].renderer = function(root, column, rowData) {
     *   root.textContent = rowData.item.role;
     * };
     * ```
     *
     * Alternatively, the content can be provided with Polymer's Templates:
     *
     * #### Example:
     * ```html
     * <vaadin-grid items='[{"name": "John", "surname": "Lennon", "role": "singer"},
     * {"name": "Ringo", "surname": "Starr", "role": "drums"}]'>
     *   <vaadin-grid-column>
     *     <template class="header">Name</template>
     *     <template>[[item.name]]</template>
     *   </vaadin-grid-column>
     *   <vaadin-grid-column>
     *     <template class="header">Surname</template>
     *     <template>[[item.surname]]</template>
     *   </vaadin-grid-column>
     *   <vaadin-grid-column>
     *     <template class="header">Role</template>
     *     <template>[[item.role]]</template>
     *   </vaadin-grid-column>
     * </vaadin-grid>
     * ```
     *
     * The following helper elements can be used for further customization:
     * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)
     * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)
     * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)
     * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)
     * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)
     *
     * __Note that the helper elements must be explicitly imported.__
     * If you want to import everything at once you can use the `all-imports.html` bundle.
     *
     * A column template can be decorated with one the following class names to specify its purpose
     * - `header`: Marks a header template
     * - `footer`: Marks a footer template
     * - `row-details`: Marks a row details template
     *
     * The following built-in template variables can be bound to inside the column templates:
     * - `[[index]]`: Number representing the row index
     * - `[[item]]` and it's sub-properties: Data object (provided by a data provider / items array)
     * - `{{selected}}`: True if the item is selected (can be two-way bound)
     * - `{{detailsOpened}}`: True if the item has row details opened (can be two-way bound)
     * - `{{expanded}}`: True if the item has tree sublevel expanded (can be two-way bound)
     * - `[[level]]`: Number of the tree sublevel of the item, first level-items have 0
     *
     * ### Lazy Loading with Function Data Provider
     *
     * In addition to assigning an array to the items property, you can alternatively
     * provide the `<vaadin-grid>` data through the
     * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.
     * The `<vaadin-grid>` calls this function lazily, only when it needs more data
     * to be displayed.
     *
     * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) in
     * the API reference below for the detailed data provider arguments description,
     * and the “Assigning Data” page in the demos.
     *
     * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__
     *
     * __Also, note that when using function data providers, the total number of items
     * needs to be set manually. The total number of items can be returned
     * in the second argument of the data provider callback:__
     *
     * ```javascript
     * grid.dataProvider = function(params, callback) {
     *   var url = 'https://api.example/data' +
     *       '?page=' + params.page +        // the requested page index
     *       '&per_page=' + params.pageSize; // number of items on the page
     *   var xhr = new XMLHttpRequest();
     *   xhr.onload = function() {
     *     var response = JSON.parse(xhr.responseText);
     *     callback(
     *       response.employees, // requested page of items
     *       response.totalSize  // total number of items
     *     );
     *   };
     *   xhr.open('GET', url, true);
     *   xhr.send();
     * };
     * ```
     *
     * __Alternatively, you can use the `size` property to set the total number of items:__
     *
     * ```javascript
     * grid.size = 200; // The total number of items
     * grid.dataProvider = function(params, callback) {
     *   var url = 'https://api.example/data' +
     *       '?page=' + params.page +        // the requested page index
     *       '&per_page=' + params.pageSize; // number of items on the page
     *   var xhr = new XMLHttpRequest();
     *   xhr.onload = function() {
     *     var response = JSON.parse(xhr.responseText);
     *     callback(response.employees);
     *   };
     *   xhr.open('GET', url, true);
     *   xhr.send();
     * };
     * ```
     *
     * ### Styling
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name | Description
     * ----------------|----------------
     * `row` | Row in the internal table
     * `cell` | Cell in the internal table
     * `header-cell` | Header cell in the internal table
     * `body-cell` | Body cell in the internal table
     * `footer-cell` | Footer cell in the internal table
     * `details-cell` | Row details cell in the internal table
     * `resize-handle` | Handle for resizing the columns
     * `reorder-ghost` | Ghost element of the header cell being dragged
     *
     * The following state attributes are available for styling:
     *
     * Attribute    | Description | Part name
     * -------------|-------------|------------
     * `loading` | Set when the grid is loading data from data provider | :host
     * `interacting` | Keyboard navigation in interaction mode | :host
     * `navigating` | Keyboard navigation in navigation mode | :host
     * `overflow` | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `left`, `right` | :host
     * `reordering` | Set when the grid's columns are being reordered | :host
     * `reorder-status` | Reflects the status of a cell while columns are being reordered | cell
     * `frozen` | Frozen cell | cell
     * `last-frozen` | Last frozen cell | cell
    * * `first-column` | First visible cell on a row | cell
     * `last-column` | Last visible cell on a row | cell
     * `selected` | Selected row | row
     * `expanded` | Expanded row | row
     * `loading` | Row that is waiting for data from data provider | row
     * `odd` | Odd row | row
     * `first` | The first body row | row
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.ThemableMixin
     * @mixes Vaadin.Grid.A11yMixin
     * @mixes Vaadin.Grid.ActiveItemMixin
     * @mixes Vaadin.Grid.ArrayDataProviderMixin
     * @mixes Vaadin.Grid.ColumnResizingMixin
     * @mixes Vaadin.Grid.DataProviderMixin
     * @mixes Vaadin.Grid.DynamicColumnsMixin
     * @mixes Vaadin.Grid.FilterMixin
     * @mixes Vaadin.Grid.RowDetailsMixin
     * @mixes Vaadin.Grid.ScrollMixin
     * @mixes Vaadin.Grid.SelectionMixin
     * @mixes Vaadin.Grid.SortMixin
     * @mixes Vaadin.Grid.KeyboardNavigationMixin
     * @mixes Vaadin.Grid.ColumnReorderingMixin
     * @demo demo/index.html
     */
    class GridElement extends
      ElementMixin$1(
        ThemableMixin(
          DataProviderMixin(
            ArrayDataProviderMixin(
              DynamicColumnsMixin(
                ActiveItemMixin(
                  ScrollMixin(
                    SelectionMixin(
                      SortMixin(
                        RowDetailsMixin(
                          KeyboardNavigationMixin(
                            A11yMixin(
                              FilterMixin(
                                ColumnReorderingMixin(
                                  ColumnResizingMixin(
                                    GridScrollerElement))))))))))))))) {
      static get template() {
        return html$1`
    <style include="vaadin-grid-styles"></style>

    <div id="scroller" no-scrollbars\$="[[!_scrollbarWidth]]" wheel-scrolling\$="[[_wheelScrolling]]" safari\$="[[_safari]]" ios\$="[[_ios]]" loading\$="[[loading]]" edge\$="[[_edge]]" firefox\$="[[_firefox]]" ie\$="[[_ie]]" column-reordering-allowed\$="[[columnReorderingAllowed]]">

      <table id="table" role="grid" aria-multiselectable="true" tabindex="0">
        <caption id="fixedsizer" class="sizer" part="row"></caption>
        <thead id="header" role="rowgroup"></thead>
        <tbody id="items" role="rowgroup"></tbody>
        <tfoot id="footer" role="rowgroup"></tfoot>
      </table>

      <div part="reorder-ghost"></div>
      <vaadin-grid-outer-scroller id="outerscroller" _touch-device="[[_touchDevice]]" scroll-target="[[scrollTarget]]" scroll-handler="[[_this]]" no-scrollbars="[[!_scrollbarWidth]]">
        <div id="outersizer" class="sizer" part="row"></div>
      </vaadin-grid-outer-scroller>
    </div>

    <!-- The template needs at least one slot or else shady doesn't distribute -->
    <slot name="nodistribute"></slot>

    <div id="focusexit" tabindex="0"></div>
`;
      }

      static get is() {
        return 'vaadin-grid';
      }

      static get version() {
        return '5.2.7';
      }

      static get observers() {
        return [
          '_columnTreeChanged(_columnTree, _columnTree.*)'
        ];
      }

      static get properties() {
        return {

          _this: {
            type: Object,
            value: function() {
              return this;
            }
          },

          _safari: {
            type: Boolean,
            value: /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
          },

          _ios: {
            type: Boolean,
            value: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
          },

          _edge: {
            type: Boolean,
            value: typeof CSS !== 'undefined' && CSS.supports('(-ms-ime-align:auto)')
          },

          _ie: {
            type: Boolean,
            value: !!(navigator.userAgent.match(/Trident/) && !navigator.userAgent.match(/MSIE/))
          },

          _firefox: {
            type: Boolean,
            value: navigator.userAgent.toLowerCase().indexOf('firefox') > -1
          },

          _android: {
            type: Boolean,
            value: /android/i.test(navigator.userAgent)
          },

          _touchDevice: {
            type: Boolean,
            value: TOUCH_DEVICE
          },

          /**
           * If true, the grid's height is defined by the number of its rows.
           */
          heightByRows: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          }
        };
      }

      constructor() {
        super();
        this.addEventListener('animationend', this._onAnimationEnd);
      }

      _createScrollerRows(count) {
        const rows = [];
        for (var i = 0; i < count; i++) {
          const row = document.createElement('tr');
          row.setAttribute('part', 'row');
          row.setAttribute('role', 'row');
          if (this._columnTree) {
            this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);
          }
          rows.push(row);
        }

        if (this._columnTree) {
          this._columnTree[this._columnTree.length - 1].forEach(c => c.notifyPath('_cells.*', c._cells));
        }

        beforeNextRender(this, () => {
          this._updateFirstAndLastColumn();
          this._resetKeyboardNavigation();
        });
        return rows;
      }

      _getRowTarget() {
        return this.$.items;
      }

      _createCell(tagName) {
        const contentId = this._contentIndex = this._contentIndex + 1 || 0;
        const slotName = 'vaadin-grid-cell-content-' + contentId;

        const cellContent = document.createElement('vaadin-grid-cell-content');
        cellContent.setAttribute('slot', slotName);

        const cell = document.createElement(tagName);
        cell.id = slotName.replace('-content-', '-');
        cell.setAttribute('tabindex', '-1');
        cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');

        const slot = document.createElement('slot');
        slot.setAttribute('name', slotName);

        cell.appendChild(slot);

        cell._content = cellContent;

        // With native Shadow DOM, mousedown on slotted element does not focus
        // focusable slot wrapper, that is why cells are not focused with
        // mousedown. Workaround: listen for mousedown and focus manually.
        cellContent.addEventListener('mousedown', () => {
          if (window.chrome) {
            // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903
            const mouseUpListener = () => {
              if (!cellContent.contains(this.getRootNode().activeElement)) {
                cell.focus();
              }
              // If focus is in the cell content — respect it, do not change.
              document.removeEventListener('mouseup', mouseUpListener, true);
            };
            document.addEventListener('mouseup', mouseUpListener, true);
          } else {
            // Focus on mouseup, on the other hand, removes selection on Safari.
            // Watch out sync focus removal issue, only async focus works here.
            setTimeout(() => {
              if (!cellContent.contains(this.getRootNode().activeElement)) {
                cell.focus();
              }
            });
          }
        });

        return cell;
      }

      _updateRow(row, columns, section, isColumnRow, noNotify) {
        section = section || 'body';

        const contentsFragment = document.createDocumentFragment();

        Array.from(row.children).forEach(cell => cell._vacant = true);
        row.innerHTML = '';
        if (row.id !== 'outersizer' && row.id !== 'fixedsizer') {
          row.hidden = true;
        }
        columns.forEach((column, index) => {
          let cell;

          if (section === 'body') {
            // Body
            column._cells = column._cells || [];
            cell = column._cells.filter(cell => cell._vacant)[0];
            if (!cell) {
              cell = this._createCell('td');
              column._cells.push(cell);
            }
            cell.setAttribute('part', 'cell body-cell');
            row.appendChild(cell);

            if (index === columns.length - 1 && (this._rowDetailsTemplate || this.rowDetailsRenderer)) {
              // Add details cell as last cell to body rows
              this._detailsCells = this._detailsCells || [];
              const detailsCell = this._detailsCells.filter(cell => cell._vacant)[0] || this._createCell('td');
              if (this._detailsCells.indexOf(detailsCell) === -1) {
                this._detailsCells.push(detailsCell);
              }
              if (!detailsCell._content.parentElement) {
                contentsFragment.appendChild(detailsCell._content);
              }
              this._configureDetailsCell(detailsCell);
              row.appendChild(detailsCell);
              this._a11ySetRowDetailsCell(row, detailsCell);
              detailsCell._vacant = false;
            }

            if (column.notifyPath && !noNotify) {
              column.notifyPath('_cells.*', column._cells);
            }
          } else {
            // Header & footer
            const tagName = section === 'header' ? 'th' : 'td';
            if (isColumnRow || column.localName === 'vaadin-grid-column-group') {
              cell = column[`_${section}Cell`] || this._createCell(tagName);
              cell._column = column;
              row.appendChild(cell);
              column[`_${section}Cell`] = cell;
            } else {
              column._emptyCells = column._emptyCells || [];
              cell = column._emptyCells.filter(cell => cell._vacant)[0] || this._createCell(tagName);
              cell._column = column;
              row.appendChild(cell);
              if (column._emptyCells.indexOf(cell) === -1) {
                column._emptyCells.push(cell);
              }
            }
            cell.setAttribute('part', `cell ${section}-cell`);
            this.__updateHeaderFooterRowVisibility(row);
          }

          if (!cell._content.parentElement) {
            contentsFragment.appendChild(cell._content);
          }
          cell._vacant = false;
          cell._column = column;
        });

        // Might be empty if only cache was used
        this.appendChild(contentsFragment);

        this._frozenCellsChanged();
        this._updateFirstAndLastColumnForRow(row);
      }

      __updateHeaderFooterRowVisibility(row) {
        if (!row) {
          return;
        }

        const visibleRowCells = Array.from(row.children).filter(cell => {
          const column = cell._column;
          if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {
            // The cell is an "empty cell"  -> doesn't block hiding the row
            return false;
          }
          if (row.parentElement === this.$.header) {
            if (column.headerRenderer || column._headerTemplate) {
              // The cell is the header cell of a column that has a header renderer
              // or a header template -> row should be visible
              return true;
            }
            if (column.header === null) {
              // The column header is explicilty set to null -> doesn't block hiding the row
              return false;
            }
            if (column.path || column.header !== undefined) {
              // The column has an explicit non-null header or a path that generates a header
              // -> row should be visible
              return true;
            }
          } else {
            if (column.footerRenderer || column._footerTemplate) {
              // The cell is the footer cell of a column that has a footer renderer
              // or a footer template -> row should be visible
              return true;
            }
          }
        });

        if (row.hidden !== !visibleRowCells.length) {
          row.hidden = !visibleRowCells.length;
          this.notifyResize();
        }
      }

      _updateScrollerItem(row, index) {
        this._preventScrollerRotatingCellFocus(row, index);

        if (!this._columnTree) {
          return;
        }

        this._toggleAttribute('first', index === 0, row);
        this._toggleAttribute('odd', index % 2, row);
        this._a11yUpdateRowRowindex(row, index);
        this._getItem(index, row);
      }

      _columnTreeChanged(columnTree, splices) {
        Array.from(this.$.items.children).forEach(row => this._updateRow(row, columnTree[columnTree.length - 1]));

        while (this.$.header.children.length < columnTree.length) {
          const headerRow = document.createElement('tr');
          headerRow.setAttribute('part', 'row');
          headerRow.setAttribute('role', 'row');
          this.$.header.appendChild(headerRow);

          const footerRow = document.createElement('tr');
          footerRow.setAttribute('part', 'row');
          footerRow.setAttribute('role', 'row');
          this.$.footer.appendChild(footerRow);
        }
        while (this.$.header.children.length > columnTree.length) {
          this.$.header.removeChild(this.$.header.firstElementChild);
          this.$.footer.removeChild(this.$.footer.firstElementChild);
        }

        Array.from(this.$.header.children)
          .forEach((headerRow, index) => this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1));

        Array.from(this.$.footer.children)
          .forEach((footerRow, index) => this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0));

        // Sizer rows
        this._updateRow(this.$.outersizer, columnTree[columnTree.length - 1]);
        this._updateRow(this.$.fixedsizer, columnTree[columnTree.length - 1]);

        this._resizeHandler();
        this._frozenCellsChanged();
        this._updateFirstAndLastColumn();
        this._resetKeyboardNavigation();
        this._a11yUpdateHeaderRows();
        this._a11yUpdateFooterRows();
      }

      _updateItem(row, item) {
        row._item = item;
        const model = this.__getRowModel(row);

        this._toggleAttribute('selected', model.selected, row);
        this._a11yUpdateRowSelected(row, model.selected);
        this._a11yUpdateRowLevel(row, model.level);
        this._toggleAttribute('expanded', model.expanded, row);
        if (this._rowDetailsTemplate || this.rowDetailsRenderer) {
          this._toggleDetailsCell(row, item);
        }

        Array.from(row.children).forEach(cell => {
          if (cell._renderer) {
            const owner = cell._column || this;
            cell._renderer.call(owner, cell._content, owner, model);
          } else if (cell._instance) {
            cell._instance.__detailsOpened__ = model.detailsOpened;
            cell._instance.__selected__ = model.selected;
            cell._instance.__level__ = model.level;
            cell._instance.__expanded__ = model.expanded;
            cell._instance.setProperties(model);
          }
        });

        this._debouncerUpdateHeights = Debouncer.debounce(this._debouncerUpdateHeights,
          timeOut.after(1), () => {
            this._updateMetrics();
            this._positionItems();
            this._updateScrollerSize();
          }
        );
      }

      _resizeHandler() {
        this._updateDetailsCellHeights();
        this._accessIronListAPI(super._resizeHandler, true);
        this._updateHeaderFooterMetrics();
      }

      _updateHeaderFooterMetrics() {
        const headerHeight = this.$.header.clientHeight + 'px';
        const footerHeight = this.$.footer.clientHeight + 'px';
        [this.$.outersizer, this.$.fixedsizer, this.$.items].forEach(element => {
          element.style.borderTopWidth = headerHeight;
          element.style.borderBottomWidth = footerHeight;
        });

        afterNextRender(this.$.header, () => {
          if (this._pendingScrollToIndex) {
            this._scrollToIndex(this._pendingScrollToIndex);
          }
        });
      }

      _onAnimationEnd(e) {
        // ShadyCSS applies scoping suffixes to animation names
        if (e.animationName.indexOf('vaadin-grid-appear') === 0) {
          this._render();
          this._updateHeaderFooterMetrics();
          e.stopPropagation();
          this.notifyResize();
        }
      }

      _toggleAttribute(name, bool, node) {
        if (node.hasAttribute(name) === !bool) {
          if (bool) {
            node.setAttribute(name, '');
          } else {
            node.removeAttribute(name);
          }
        }
      }

      __getRowModel(row) {
        return {
          index: row.index,
          item: row._item,
          level: this._getIndexLevel(row.index),
          expanded: this._isExpanded(row._item),
          selected: this._isSelected(row._item),
          detailsOpened:
            !!(this._rowDetailsTemplate || this.rowDetailsRenderer) && this._isDetailsOpened(row._item)
        };
      }

      /**
       * Manually invoke existing renderers for all the columns
       * (header, footer and body cells) and opened row details.
       */
      render() {
        if (this._columnTree) {
          // header and footer renderers
          this._columnTree.forEach(level => {
            level.forEach(column => column._renderHeaderAndFooter());
          });

          // body and row details renderers
          this._update();
        }
      }

      /**
       * Updates the computed metrics and positioning of internal grid parts
       * (row/details cell positioning etc). Needs to be invoked whenever the sizing of grid
       * content changes asynchronously to ensure consistent appearance (e.g. when a
       * contained image whose bounds aren't known beforehand finishes loading).
       */
      notifyResize() {
        super.notifyResize();
      }
    }

    customElements.define(GridElement.is, GridElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-grid-selection-column>` is a helper element for the `<vaadin-grid>`
     * that provides default templates and functionality for item selection.
     *
     * #### Example:
     * ```html
     * <vaadin-grid items="[[items]]">
     *  <vaadin-grid-selection-column frozen auto-select></vaadin-grid-selection-column>
     *
     *  <vaadin-grid-column>
     *    ...
     * ```
     *
     * By default the selection column displays `<vaadin-checkbox>` elements in the
     * column cells. The checkboxes in the body rows toggle selection of the corresponding row items.
     *
     * When the grid data is provided as an array of [`items`](#/elements/vaadin-grid#property-items),
     * the column header gets an additional checkbox that can be used for toggling
     * selection for all the items at once.
     *
     * __The default content can also be overridden__
     *
     * @memberof Vaadin
     * @extends Vaadin.GridColumnElement
     */
    class GridSelectionColumnElement extends GridColumnElement {
      static get template() {
        return html$1`
    <template class="header" id="defaultHeaderTemplate">
      <vaadin-checkbox class="vaadin-grid-select-all-checkbox" aria-label="Select All" hidden\$="[[_selectAllHidden]]" on-checked-changed="_onSelectAllCheckedChanged" checked="[[_isChecked(selectAll, _indeterminate)]]" indeterminate="[[_indeterminate]]">
      </vaadin-checkbox>
    </template>
    <template id="defaultBodyTemplate">
      <vaadin-checkbox aria-label="Select Row" checked="{{selected}}">
      </vaadin-checkbox>
    </template>
`;
      }

      static get is() {
        return 'vaadin-grid-selection-column';
      }

      static get properties() {
        return {
          /**
           * Width of the cells for this column.
           */
          width: {
            type: String,
            value: '56px'
          },

          /**
           * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.
           */
          flexGrow: {
            type: Number,
            value: 0
          },

          /**
           * When true, all the items are selected.
           */
          selectAll: {
            type: Boolean,
            value: false,
            notify: true
          },

          /**
           * When true, the active gets automatically selected.
           */
          autoSelect: {
            type: Boolean,
            value: false,
          },

          _indeterminate: Boolean,

          /**
           * The previous state of activeItem. When activeItem turns to `null`,
           * previousActiveItem will have an Object with just unselected activeItem
           */
          _previousActiveItem: Object,

          _selectAllHidden: Boolean
        };
      }

      static get observers() {
        return [
          '_onSelectAllChanged(selectAll)'
        ];
      }

      _pathOrHeaderChanged(path, header, headerCell, footerCell, cells, renderer, headerRenderer, bodyTemplate, headerTemplate) {
        // As a special case, allow overriding the default header / body templates
        if (cells.value && (path !== undefined || renderer !== undefined)) {
          this._bodyTemplate = bodyTemplate = undefined;
          this.__cleanCellsOfTemplateProperties(cells.value);
        }
        if (headerCell && (header !== undefined || headerRenderer !== undefined)) {
          this._headerTemplate = headerTemplate = undefined;
          this.__cleanCellsOfTemplateProperties([headerCell]);
        }
        super._pathOrHeaderChanged(path, header, headerCell, footerCell, cells, renderer, headerRenderer, bodyTemplate, headerTemplate);
      }

      __cleanCellsOfTemplateProperties(cells) {
        cells.forEach(cell => {
          cell._content.innerHTML = '';
          delete cell._instance;
          delete cell._template;
        });
      }

      _prepareHeaderTemplate() {
        const headerTemplate = this._prepareTemplatizer(this._findTemplate(true) || this.$.defaultHeaderTemplate);
        // needed to override the dataHost correctly in case internal template is used.
        headerTemplate.templatizer.dataHost = headerTemplate === this.$.defaultHeaderTemplate ? this : this.dataHost;

        return headerTemplate;
      }

      _prepareBodyTemplate() {
        const template = this._prepareTemplatizer(this._findTemplate() || this.$.defaultBodyTemplate);
        // needed to override the dataHost correctly in case internal template is used.
        template.templatizer.dataHost = template === this.$.defaultBodyTemplate ? this : this.dataHost;

        return template;
      }

      constructor() {
        super();

        this._boundOnActiveItemChanged = this._onActiveItemChanged.bind(this);
        this._boundOnDataProviderChanged = this._onDataProviderChanged.bind(this);
        this._boundOnSelectedItemsChanged = this._onSelectedItemsChanged.bind(this);
      }

      /** @protected */
      disconnectedCallback() {
        this._grid.removeEventListener('active-item-changed', this._boundOnActiveItemChanged);
        this._grid.removeEventListener('data-provider-changed', this._boundOnDataProviderChanged);
        this._grid.removeEventListener('filter-changed', this._boundOnSelectedItemsChanged);
        this._grid.removeEventListener('selected-items-changed', this._boundOnSelectedItemsChanged);

        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        if (isSafari && window.ShadyDOM && this.parentElement) {
          // Detach might have beem caused by order change.
          // Shady on safari doesn't restore isAttached so we'll need to do it manually.
          const parent = this.parentElement;
          const nextSibling = this.nextElementSibling;
          parent.removeChild(this);
          if (nextSibling) {
            parent.insertBefore(this, nextSibling);
          } else {
            parent.appendChild(this);
          }
        }

        super.disconnectedCallback();
      }

      /** @protected */
      connectedCallback() {
        super.connectedCallback();
        if (this._grid) {
          this._grid.addEventListener('active-item-changed', this._boundOnActiveItemChanged);
          this._grid.addEventListener('data-provider-changed', this._boundOnDataProviderChanged);
          this._grid.addEventListener('filter-changed', this._boundOnSelectedItemsChanged);
          this._grid.addEventListener('selected-items-changed', this._boundOnSelectedItemsChanged);
        }
      }

      _onSelectAllChanged(selectAll) {
        if (selectAll === undefined || !this._grid) {
          return;
        }

        if (this._selectAllChangeLock) {
          return;
        }

        this._grid.selectedItems = selectAll && Array.isArray(this._grid.items) ? this._grid._filter(this._grid.items) : [];
      }

      // Return true if array `a` contains all the items in `b`
      // We need this when sorting or to preserve selection after filtering.
      _arrayContains(a, b) {
        for (var i = 0; a && b && b[i] && a.indexOf(b[i]) >= 0; i++); // eslint-disable-line
        return i == b.length;
      }

      _onSelectAllCheckedChanged(e) {
        this.selectAll = this._indeterminate || e.target.checked;
      }

      // iOS needs indeterminated + checked at the same time
      _isChecked(selectAll, indeterminate) {
        return indeterminate || selectAll;
      }

      _onActiveItemChanged(e) {
        const activeItem = e.detail.value;
        if (this.autoSelect) {
          const item = activeItem || this._previousActiveItem;
          if (item) {
            this._grid._toggleItem(item);
          }
        }
        this._previousActiveItem = activeItem;
      }

      _onSelectedItemsChanged(e) {
        this._selectAllChangeLock = true;
        if (Array.isArray(this._grid.items)) {
          if (!this._grid.selectedItems.length) {
            this.selectAll = false;
            this._indeterminate = false;
          } else if (this._arrayContains(this._grid.selectedItems, this._grid._filter(this._grid.items))) {
            this.selectAll = true;
            this._indeterminate = false;
          } else {
            this.selectAll = false;
            this._indeterminate = true;
          }
        }
        this._selectAllChangeLock = false;
      }

      _onDataProviderChanged(e) {
        this._selectAllHidden = !Array.isArray(this._grid.items);
      }
    }

    customElements.define(GridSelectionColumnElement.is, GridSelectionColumnElement);

    let props$i = () => [
        { propKey: "value", propValue: { type: Array }, rx: false },
        { propKey: "valuedyn", propValue: { type: Array }, rx: false },
        { propKey: "valueperm", propValue: { type: Array }, rx: false },
        { propKey: "type", propValue: { type: String }, rx: false },
        { propKey: "label", propValue: { type: Array }, rx: false },
        { propKey: "props", propValue: { type: Array }, rx: false },
        { propKey: "test", propValue: { type: Array }, rx: false },
        { propKey: "years", propValue: { type: Array }, rx: false }
      ];

    class XGrid extends rxmixin(props$i, LitElement) {
        valuechangedHandler(e) {
            console.log(this.shadowRoot.querySelector('.thediv').selectedItems);
            let event = new CustomEvent('gridchanged', { detail: {selected: this.shadowRoot.querySelector('.thediv').selectedItems} });
            this.dispatchEvent(event);

        }

        clickHandler(e) {
            console.log(e);

        }

        render() {

            return html`
        <style>
            .thediv {
                font-size: var(--parmaco-font-size-m);
                border: 1px solid var(--whcg-shade-20pct);
                border-radius: 5px 5px 4px 4px;
                background-color: var(--whcg-shade-10pct);
                max-height: 400px;
                width: 100%;
            }
        </style>
        <vaadin-grid class="thediv" aria-label="Content Renderer Function" @change="${(e) => this.valuechangedHandler(e)}">
            <vaadin-grid-selection-column auto-select></vaadin-grid-selection-column>
            <vaadin-grid-column id="first"></vaadin-grid-column>
        </vaadin-grid>
        `;
        }


        constructor() {
            super();
        }

        connectedCallback() {
            super.connectedCallback();
            window.addEventListener('resize', (event) => {
                this.shadowRoot.querySelector('.thediv').style.width = `${this.offsetWidth}px`;
              });
        }



        updated(changedProps) {
            super.updated(changedProps);

            if (changedProps.has('props')) {
                let data = [];
                
                data = this.props[0].json_schema.map(schema => {
                    return {data: schema.json_schema[0].data_schema,
                        id: schema.json_schema[1].data_schema,
                        selected: schema.json_schema[2].data_schema}
                });

                let selectedIds = data.filter(item => {
                    return item.selected == true
                }).map(item => {
                    return {id: item.id}
                });
                

                const grid = this.shadowRoot.querySelector('vaadin-grid');
                grid.items = data;
                grid.itemIdPath="id";

                
                if(data.length < 8) {
                    console.log(data.length);
                    grid.heightByRows = true;
                } 
                
            
                const columns = this.shadowRoot.querySelectorAll('vaadin-grid-column');
                
                columns[0].renderer = function (root, column, rowData) {
                    
                    root.textContent = rowData.item.data;
                };
                columns[0].headerRenderer = function (root, column) {
                    root.textContent = 'HEADER';
                    root.addEventListener('click', e => {
                        this.clickHandler(e);
                    });
                };

                columns[0].footerRenderer = function (root, column) {
                    root.textContent = '';
                };

                grid.selectedItems = selectedIds;            
            }
            
        }
    }

    window.customElements.define('x-grid', XGrid);

    let props$j = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
        { propKey: "grids", propValue: { type: Array }, rx: true },
      ]);

    class XGridbox extends rxmixin(props$j, LitElement) {

        constructor() {
            super();
            this.okToRender = false;
          }

          gridChangedHandler(e, index) {
            let event = new CustomEvent('gridchanged', { detail: {...e.detail, grid: index} });
            this.dispatchEvent(event);
          }

          getData(value, index) {
            return getData.call(this, value, index)
          }

        // rowChangedHandler(e, index) {
        //     let event = new CustomEvent('tablechanged', { detail: {row: index, column: e.detail.column, value: e.detail.value}}); 
        //     this.dispatchEvent(event);
        // }

        firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.grids$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.rendergrids = this.grids;

                
                this.okToRender = true;
                this.requestUpdate();
            });
        }

        render() {
            
            return this.okToRender ? html`
            <style>
                .gridbox {
                    display: flex;
                    flex-direction: column;                   
                }
            </style>
            
            <div class="gridbox">
                ${toRender.call(this, prepareRender(this.rendergrids))}
            </div>
            ` : html``
        }

        updated(changedProperties){
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
              if (propName === "props") {
                console.log('BG', this.props);
                this.props.forEach(prop => {
                    if (prop.name == 'grids') {
                        this.grids = prop;
                    }
                });
              }        });   
        }
    }




    customElements.define('x-gridbox', XGridbox);

    function fiveMainSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "boxs"
                ],
                boxs: {
                    ui_widget: "x-gridbox",
                    ui_classnames: "gridbox",
                    ui_order: [
                        "grids",
                    ],
                    grids: {
                        ui_widget: "x-grid",
                        ui_classnames: "grid",
                        ui_order: [
                            "rows",
                        ],
                        rows: {
                            ui_order: [
                                "data",
                                "id",
                                "selected"
                            ],
                        },
                    },
                }

            },
            json_schema: {
                type: 'Object',
                properties: {
                    boxs: {
                        type: 'Array',
                        items: {
                            type: 'Object',
                            properties: {
                                grids: {
                                    type: 'Array',
                                    items: {
                                        type: 'Object',
                                        properties: {
                                            rows: {
                                                type: 'Array',
                                                items: {
                                                    type: 'Object',
                                                    properties: {
                                                        data: {
                                                            type: 'String',
                                                        },
                                                        id: {
                                                            type: 'String',
                                                        },
                                                        selected: {
                                                            type: 'Boolean',
                                                        }
                                                    },
                                                }
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
            },
            data_schema:
            {
                boxs: [
                    {
                        grids: [
                            {
                                rows: {
                                    fn: 'getCounty',
                                    parameter: 'identity'
                                }
                            },
                        ],
                    },
                    // {
                    //     grids: {
                    //         fn: 'getMunicipality',
                    //         parameter: 'identity'
                    //     },
                    // },
                    // // {
                    // //     grids: [
                    // //         {
                    // //             rows: {
                    // //                 fn: 'getMunicipality',
                    // //                 parameter: 'identity'
                    // //             },
                    // //         },
                    // //     ],
                    // // },
                    // {
                    //     grids: [
                    //         {
                    //             rows: {
                    //                 fn: 'getLKF',
                    //                 parameter: 'identity'
                    //             },
                    //         },
                    //     ],
                    // }
                ]
            }
        }
    }



    // export function fiveMainSchemas() {

    //     return {
    //         ui_schema: {
    //             ui_order: [
    //                 "grids",
    //             ],
    //             grids: {
    //                 ui_widget: "x-grid",
    //                 ui_classnames: "grid",
    //                 ui_order: [
    //                     "rows",
    //                 ],
    //                 rows: {
    //                     ui_order: [
    //                         "data",
    //                         "id",
    //                         "selected"
    //                     ],
    //                 },
    //             },
    //         },
    //         json_schema: {
    //             type: 'Object',
    //             properties: {
    //                 grids: {
    //                     type: 'Array',
    //                     items: {
    //                         type: 'Object',
    //                         properties: {
    //                             rows: {
    //                                 type: 'Array',
    //                                 items: {
    //                                     type: 'Object',
    //                                     properties: {
    //                                         data: {
    //                                             type: 'Number',
    //                                         },
    //                                         id: {
    //                                             type: 'String',
    //                                         },
    //                                         selected: {
    //                                             type: 'Boolean',
    //                                         }
    //                                     },
    //                                 }
    //                             },
    //                         }
    //                     }
    //                 }
    //             }
    //         },
    //         data_schema: {
    //             grids: [
    //                 {
    //                     rows: {
    //                         fn: 'getCounty',
    //                         parameter: 'identity'
    //                     }
    //                 },
    //                 {
    //                     rows: {
    //                         fn: 'getMunicipality',
    //                         parameter: 'identity'
    //                     },
    //                 },
    //                 {
    //                     rows: {
    //                         fn: 'getLKF',
    //                         parameter: 'identity'
    //                     },
    //                 },
    //             ],
    //         }
    //     }
    // }

    const $_documentContainer$9 = document.createElement('template');

    $_documentContainer$9.innerHTML = `<dom-module id="lumo-overlay">
  <template>
    <style>
      :host {
        top: var(--lumo-space-m);
        right: var(--lumo-space-m);
        bottom: var(--lumo-space-m);
        left: var(--lumo-space-m);
        /* Workaround for Edge issue (only on Surface), where an overflowing vaadin-list-box inside vaadin-select-overlay makes the overlay transparent */
        /* stylelint-disable-next-line */
        outline: 0px solid transparent;
      }

      [part="overlay"] {
        background-color: var(--lumo-base-color);
        background-image: linear-gradient(var(--lumo-tint-5pct), var(--lumo-tint-5pct));
        border-radius: var(--lumo-border-radius-m);
        box-shadow: 0 0 0 1px var(--lumo-shade-5pct), var(--lumo-box-shadow-m);
        color: var(--lumo-body-text-color);
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        font-weight: 400;
        line-height: var(--lumo-line-height-m);
        letter-spacing: 0;
        text-transform: none;
        -webkit-text-size-adjust: 100%;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      [part="content"] {
        padding: var(--lumo-space-xs);
      }

      [part="backdrop"] {
        background-color: var(--lumo-shade-20pct);
        animation: 0.2s lumo-overlay-backdrop-enter both;
        will-change: opacity;
      }

      @keyframes lumo-overlay-backdrop-enter {
        0% {
          opacity: 0;
        }
      }

      :host([closing]) [part="backdrop"] {
        animation: 0.2s lumo-overlay-backdrop-exit both;
      }

      @keyframes lumo-overlay-backdrop-exit {
        100% {
          opacity: 0;
        }
      }

      @keyframes lumo-overlay-dummy-animation {
        0% { opacity: 1; }
        100% { opacity: 1; }
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$9.content);

    const $_documentContainer$a = document.createElement('template');

    $_documentContainer$a.innerHTML = `<dom-module id="lumo-menu-overlay-core">
  <template>
    <style>
      :host([opening]),
      :host([closing]) {
        animation: 0.14s lumo-overlay-dummy-animation;
      }

      [part="overlay"] {
        will-change: opacity, transform;
      }

      :host([opening]) [part="overlay"] {
        animation: 0.1s lumo-menu-overlay-enter ease-out both;
      }

      @keyframes lumo-menu-overlay-enter {
        0% {
          opacity: 0;
          transform: translateY(-4px);
        }
      }

      :host([closing]) [part="overlay"] {
        animation: 0.1s lumo-menu-overlay-exit both;
      }

      @keyframes lumo-menu-overlay-exit {
        100% {
          opacity: 0;
        }
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-menu-overlay">
  <template>
    <style include="lumo-overlay lumo-menu-overlay-core">
      /* Small viewport (bottom sheet) styles */
      /* Use direct media queries instead of the state attributes (\`[phone]\` and \`[fullscreen]\`) provided by the elements */
      @media (max-width: 420px), (max-height: 420px) {
        :host {
          top: 0 !important;
          right: 0 !important;
          bottom: var(--vaadin-overlay-viewport-bottom, 0) !important;
          left: 0 !important;
          align-items: stretch !important;
          justify-content: flex-end !important;
        }

        [part="overlay"] {
          max-height: 50vh;
          width: 100vw;
          border-radius: 0;
          box-shadow: var(--lumo-box-shadow-xl);
        }

        /* The content part scrolls instead of the overlay part, because of the gradient fade-out */
        [part="content"] {
          padding: 30px var(--lumo-space-m);
          max-height: inherit;
          box-sizing: border-box;
          -webkit-overflow-scrolling: touch;
          overflow: auto;
          -webkit-mask-image: linear-gradient(transparent, #000 40px, #000 calc(100% - 40px), transparent);
          mask-image: linear-gradient(transparent, #000 40px, #000 calc(100% - 40px), transparent);
        }

        [part="backdrop"] {
          display: block;
        }

        /* Animations */

        :host([opening]) [part="overlay"] {
          animation: 0.2s lumo-mobile-menu-overlay-enter cubic-bezier(.215, .61, .355, 1) both;
        }

        :host([closing]),
        :host([closing]) [part="backdrop"] {
          animation-delay: 0.14s;
        }

        :host([closing]) [part="overlay"] {
          animation: 0.14s 0.14s lumo-mobile-menu-overlay-exit cubic-bezier(.55, .055, .675, .19) both;
        }
      }

      @keyframes lumo-mobile-menu-overlay-enter {
        0% {
          transform: translateY(150%);
        }
      }

      @keyframes lumo-mobile-menu-overlay-exit {
        100% {
          transform: translateY(150%);
        }
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$a.content);

    const $_documentContainer$b = document.createElement('template');

    $_documentContainer$b.innerHTML = `<dom-module id="lumo-field-button">
  <template>
    <style>
      [part\$="button"] {
        flex: none;
        width: 1em;
        height: 1em;
        line-height: 1;
        font-size: var(--lumo-icon-size-m);
        text-align: center;
        color: var(--lumo-contrast-60pct);
        transition: 0.2s color;
        cursor: var(--lumo-clickable-cursor);
      }

      :host(:not([readonly])) [part\$="button"]:hover {
        color: var(--lumo-contrast-90pct);
      }

      :host([disabled]) [part\$="button"],
      :host([readonly]) [part\$="button"] {
        color: var(--lumo-contrast-20pct);
      }

      [part\$="button"]::before {
        font-family: "lumo-icons";
        display: block;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$b.content);

    const $_documentContainer$c = document.createElement('template');

    $_documentContainer$c.innerHTML = `<dom-module id="lumo-required-field">
  <template>
    <style>
      [part="label"] {
        align-self: flex-start;
        color: var(--lumo-secondary-text-color);
        font-weight: 500;
        font-size: var(--lumo-font-size-s);
        margin-left: calc(var(--lumo-border-radius-m) / 4);
        transition: color 0.2s;
        line-height: 1;
        padding-bottom: 0.5em;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        position: relative;
        max-width: 100%;
        box-sizing: border-box;
      }

      :host([has-label])::before {
        margin-top: calc(var(--lumo-font-size-s) * 1.5);
      }

      :host([has-label]) {
        padding-top: var(--lumo-space-m);
      }

      :host([required]) [part="label"] {
        padding-right: 1em;
      }

      [part="label"]::after {
        content: var(--lumo-required-field-indicator, "•");
        transition: opacity 0.2s;
        opacity: 0;
        color: var(--lumo-primary-text-color);
        position: absolute;
        right: 0;
        width: 1em;
        text-align: center;
      }

      :host([required]:not([has-value])) [part="label"]::after {
        opacity: 1;
      }

      :host([invalid]) [part="label"]::after {
        color: var(--lumo-error-text-color);
      }

      [part="error-message"] {
        margin-left: calc(var(--lumo-border-radius-m) / 4);
        font-size: var(--lumo-font-size-xs);
        line-height: var(--lumo-line-height-xs);
        color: var(--lumo-error-text-color);
        will-change: max-height;
        transition: 0.4s max-height;
        max-height: 5em;
      }

      /* Margin that doesn’t reserve space when there’s no error message */
      [part="error-message"]:not(:empty)::before,
      [part="error-message"]:not(:empty)::after {
        content: "";
        display: block;
        height: 0.4em;
      }

      :host(:not([invalid])) [part="error-message"] {
        max-height: 0;
        overflow: hidden;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$c.content);

    const $_documentContainer$d = html$1`<dom-module id="lumo-text-field" theme-for="vaadin-text-field">
  <template>
    <style include="lumo-required-field">
      :host {
        --lumo-text-field-size: var(--lumo-size-m);
        color: var(--lumo-body-text-color);
        font-size: var(--lumo-font-size-m);
        font-family: var(--lumo-font-family);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        -webkit-tap-highlight-color: transparent;
        padding: var(--lumo-space-xs) 0;
      }

      :host::before {
        height: var(--lumo-text-field-size);
        box-sizing: border-box;
        display: inline-flex;
        align-items: center;
      }

      :host([focused]:not([readonly])) [part="label"] {
        color: var(--lumo-primary-text-color);
      }

      [part="value"],
      [part="input-field"] ::slotted([part="value"]) {
        cursor: inherit;
        min-height: var(--lumo-text-field-size);
        padding: 0 0.25em;
        --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);
        -webkit-mask-image: var(--_lumo-text-field-overflow-mask-image);
      }

      [part="value"]:focus {
        -webkit-mask-image: none;
        mask-image: none;
      }

      /*
        TODO: CSS custom property in \`mask-image\` causes crash in Edge
        see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/15415089/
      */
      @-moz-document url-prefix() {
        [part="value"],
        [part="input-field"] ::slotted([part="value"]) {
          mask-image: var(--_lumo-text-field-overflow-mask-image);
        }
      }

      [part="value"]::-webkit-input-placeholder {
        color: inherit;
        transition: opacity 0.175s 0.05s;
        opacity: 0.5;
      }

      [part="value"]:-ms-input-placeholder {
        color: inherit;
        opacity: 0.5;
      }

      [part="value"]::-moz-placeholder {
        color: inherit;
        transition: opacity 0.175s 0.05s;
        opacity: 0.5;
      }

      [part="value"]::placeholder {
        color: inherit;
        transition: opacity 0.175s 0.1s;
        opacity: 0.5;
      }

      [part="input-field"] {
        border-radius: var(--lumo-border-radius);
        background-color: var(--lumo-contrast-10pct);
        padding: 0 calc(0.375em + var(--lumo-border-radius) / 4 - 1px);
        font-weight: 500;
        line-height: 1;
        position: relative;
        cursor: text;
        box-sizing: border-box;
      }

      /* Used for hover and activation effects */
      [part="input-field"]::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        border-radius: inherit;
        pointer-events: none;
        background-color: var(--lumo-contrast-50pct);
        opacity: 0;
        transition: transform 0.15s, opacity 0.2s;
        transform-origin: 100% 0;
      }

      /* Hover */

      :host(:hover:not([readonly]):not([focused])) [part="label"] {
        color: var(--lumo-body-text-color);
      }

      :host(:hover:not([readonly]):not([focused])) [part="input-field"]::after {
        opacity: 0.1;
      }

      /* Touch device adjustment */
      @media (pointer: coarse) {
        :host(:hover:not([readonly]):not([focused])) [part="label"] {
          color: var(--lumo-secondary-text-color);
        }

        :host(:hover:not([readonly]):not([focused])) [part="input-field"]::after {
          opacity: 0;
        }

        :host(:active:not([readonly]):not([focused])) [part="input-field"]::after {
          opacity: 0.2;
        }
      }

      /* Trigger when not focusing using the keyboard */
      :host([focused]:not([focus-ring]):not([readonly])) [part="input-field"]::after {
        transform: scaleX(0);
        transition-duration: 0.15s, 1s;
      }

      /* Focus-ring */

      :host([focus-ring]) [part="input-field"] {
        box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      /* Read-only and disabled */
      :host([readonly]) [part="value"]::-webkit-input-placeholder,
      :host([disabled]) [part="value"]::-webkit-input-placeholder {
        opacity: 0;
      }

      :host([readonly]) [part="value"]:-ms-input-placeholder,
      :host([disabled]) [part="value"]:-ms-input-placeholder {
        opacity: 0;
      }

      :host([readonly]) [part="value"]::-moz-placeholder,
      :host([disabled]) [part="value"]::-moz-placeholder {
        opacity: 0;
      }

      :host([readonly]) [part="value"]::placeholder,
      :host([disabled]) [part="value"]::placeholder {
        opacity: 0;
      }

      /* Read-only */

      :host([readonly]) [part="input-field"] {
        color: var(--lumo-secondary-text-color);
        background-color: transparent;
        cursor: default;
      }

      :host([readonly]) [part="input-field"]::after {
        background-color: transparent;
        opacity: 1;
        border: 1px dashed var(--lumo-contrast-30pct);
      }

      /* Disabled style */

      :host([disabled]) {
        pointer-events: none;
      }

      :host([disabled]) [part="input-field"] {
        background-color: var(--lumo-contrast-5pct);
      }

      :host([disabled]) [part="label"],
      :host([disabled]) [part="value"],
      :host([disabled]) [part="input-field"] ::slotted(*) {
        color: var(--lumo-disabled-text-color);
        -webkit-text-fill-color: var(--lumo-disabled-text-color);
      }

      /* Invalid style */

      :host([invalid]) [part="input-field"] {
        background-color: var(--lumo-error-color-10pct);
      }

      :host([invalid]) [part="input-field"]::after {
        background-color: var(--lumo-error-color-50pct);
      }

      :host([invalid][focus-ring]) [part="input-field"] {
        box-shadow: 0 0 0 2px var(--lumo-error-color-50pct);
      }

      /* Small theme */

      :host([theme~="small"]) {
        font-size: var(--lumo-font-size-s);
        --lumo-text-field-size: var(--lumo-size-s);
      }

      :host([theme~="small"][has-label]) [part="label"] {
        font-size: var(--lumo-font-size-xs);
      }

      :host([theme~="small"][has-label]) [part="error-message"] {
        font-size: var(--lumo-font-size-xxs);
      }

      /* Text align */

      :host([theme~="align-center"]) [part="value"] {
        text-align: center;
        --_lumo-text-field-overflow-mask-image: none;
      }

      :host([theme~="align-right"]) [part="value"] {
        text-align: right;
        --_lumo-text-field-overflow-mask-image: none;
      }

      @-moz-document url-prefix() {
        /* Firefox is smart enough to align overflowing text to right */
        :host([theme~="align-right"]) [part="value"] {
          --_lumo-text-field-overflow-mask-image: linear-gradient(to right, transparent 0.25em, #000 1.5em);
        }
      }

      /* Slotted content */

      [part="input-field"] ::slotted(:not([part]):not(iron-icon)) {
        color: var(--lumo-secondary-text-color);
        font-weight: 400;
      }

      /* Slotted icons */

      [part="input-field"] ::slotted(iron-icon) {
        color: var(--lumo-contrast-60pct);
        width: var(--lumo-icon-size-m);
        height: var(--lumo-icon-size-m);
      }

      /* Vaadin icons are based on a 16x16 grid (unlike Lumo and Material icons with 24x24), so they look too big by default */
      [part="input-field"] ::slotted(iron-icon[icon^="vaadin:"]) {
        padding: 0.25em;
        box-sizing: border-box !important;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$d.content);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    const $_documentContainer$e = document.createElement('template');

    $_documentContainer$e.innerHTML = `<dom-module id="vaadin-text-field-shared-styles">
  <template>
    <style>
      :host {
        display: inline-flex;
        outline: none;
      }

      :host::before {
        content: "\\2003";
        width: 0;
        display: inline-block;
        /* Size and position this element on the same vertical position as the input-field element
           to make vertical align for the host element work as expected */
      }

      :host([hidden]) {
        display: none !important;
      }

      .vaadin-text-field-container,
      .vaadin-text-area-container {
        display: flex;
        flex-direction: column;
        min-width: 100%;
        max-width: 100%;
        width: var(--vaadin-text-field-default-width, 12em);
      }

      [part="label"]:empty {
        display: none;
      }

      [part="input-field"] {
        display: flex;
        align-items: center;
        flex: auto;
      }

      .vaadin-text-field-container [part="input-field"] {
        flex-grow: 0;
      }

      /* Reset the native input styles */
      [part="value"] {
        -webkit-appearance: none;
        -moz-appearance: none;
        outline: none;
        margin: 0;
        padding: 0;
        border: 0;
        border-radius: 0;
        min-width: 0;
        font: inherit;
        font-size: 1em;
        line-height: normal;
        color: inherit;
        background-color: transparent;
        /* Disable default invalid style in Firefox */
        box-shadow: none;
      }

      [part="input-field"] ::slotted(*) {
        flex: none;
      }

      /* Slotted by vaadin-dropdown-menu-text-field */
      [part="value"],
      [part="input-field"] ::slotted([part="value"]) {
        flex: auto;
        white-space: nowrap;
        overflow: hidden;
        width: 100%;
        height: 100%;
      }

      [part="value"]::-ms-clear {
        display: none;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$e.content);

    /**
     * @polymerMixin
     * @mixes Vaadin.ControlStateMixin
     */
    const TextFieldMixin = subclass => class VaadinTextFieldMixin extends ControlStateMixin(subclass) {
      static get properties() {
        return {
          /**
           * Whether the value of the control can be automatically completed by the browser.
           * List of available options at:
           * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete
           */
          autocomplete: {
            type: String
          },

          /**
           * This is a property supported by Safari that is used to control whether
           * autocorrection should be enabled when the user is entering/editing the text.
           * Possible values are:
           * on: Enable autocorrection.
           * off: Disable autocorrection.
           */
          autocorrect: {
            type: String
          },

          /**
           * This is a property supported by Safari and Chrome that is used to control whether
           * autocapitalization should be enabled when the user is entering/editing the text.
           * Possible values are:
           * characters: Characters capitalization.
           * words: Words capitalization.
           * sentences: Sentences capitalization.
           * none: No capitalization.
           */
          autocapitalize: {
            type: String
          },

          /**
           * Error to show when the input value is invalid.
           */
          errorMessage: {
            type: String,
            value: ''
          },

          /**
           * String used for the label element.
           */
          label: {
            type: String,
            value: '',
            observer: '_labelChanged'
          },

          /**
           * Maximum number of characters (in Unicode code points) that the user can enter.
           */
          maxlength: {
            type: Number
          },

          /**
           * Minimum number of characters (in Unicode code points) that the user can enter.
           */
          minlength: {
            type: Number
          },

          /**
           * The name of the control, which is submitted with the form data.
           */
          name: {
            type: String
          },

          /**
           * A hint to the user of what can be entered in the control.
           */
          placeholder: {
            type: String
          },

          /**
           * This attribute indicates that the user cannot modify the value of the control.
           */
          readonly: {
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * Specifies that the user must fill in a value.
           */
          required: {
            type: Boolean,
            reflectToAttribute: true
          },


          /**
           * The initial value of the control.
           * It can be used for two-way data binding.
           */
          value: {
            type: String,
            value: '',
            observer: '_valueChanged',
            notify: true
          },

          /**
           * This property is set to true when the control value is invalid.
           */
          invalid: {
            type: Boolean,
            reflectToAttribute: true,
            notify: true,
            value: false
          },

          /**
           * When set to true, user is prevented from typing a value that
           * conflicts with the given `pattern`.
           */
          preventInvalidInput: {
            type: Boolean
          },

          _labelId: {
            type: String
          },

          _errorId: {
            type: String
          }
        };
      }

      get focusElement() {
        return this.root && this.root.querySelector('[part=value]');
      }

      _onInput(e) {
        if (this.preventInvalidInput) {
          const input = this.focusElement;
          if (input.value.length > 0 && !this.checkValidity()) {
            input.value = this.value || '';
          }
        }
      }

      _onChange(e) {
        // In the Shadow DOM, the `change` event is not leaked into the
        // ancestor tree, so we must do this manually.
        const changeEvent = new CustomEvent('change', {
          detail: {
            sourceEvent: e
          },
          bubbles: e.bubbles,
          cancelable: e.cancelable,
        });
        this.dispatchEvent(changeEvent);
      }

      _valueChanged(newVal, oldVal) {
        // setting initial value to empty string, skip validation
        if (newVal === '' && oldVal === undefined) {
          return;
        }
        if (this.invalid) {
          this.validate();
        }
        if (newVal !== '' && newVal != null) {
          this.setAttribute('has-value', '');
        } else {
          this.removeAttribute('has-value');
        }
      }

      _labelChanged(label) {
        if (label !== '' && label != null) {
          this.setAttribute('has-label', '');
        } else {
          this.removeAttribute('has-label');
        }
      }

      /**
       * Returns true if the current input value satisfies all constraints (if any)
       * @returns {boolean}
       */
      checkValidity() {
        if (this.required || this.pattern || this.maxlength || this.minlength) {
          return this.focusElement.checkValidity();
        } else {
          return !this.invalid;
        }
      }


      ready() {
        super.ready();
        if (!(window.ShadyCSS && window.ShadyCSS.nativeCss)) {
          this.updateStyles();
        }

        var uniqueId = TextFieldMixin._uniqueId = 1 + TextFieldMixin._uniqueId || 0;
        this._errorId = `${this.constructor.is}-error-${uniqueId}`;
        this._labelId = `${this.constructor.is}-label-${uniqueId}`;

        /* istanbul ignore if */
        if (navigator.userAgent.match(/Trident/)) {
          this._addIEListeners();
        }
      }

      /**
       * Returns true if `value` is valid.
       * `<iron-form>` uses this to check the validity or all its elements.
       *
       * @return {boolean} True if the value is valid.
       */
      validate() {
        return !(this.invalid = !this.checkValidity());
      }

      _addIEListeners() {
        // IE11 dispatches `input` event in following cases:
        // - focus or blur, when placeholder attribute is set
        // - placeholder attribute value changed
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/101220/
        const prevent = e => {
          e.stopImmediatePropagation();
          this.focusElement.removeEventListener('input', prevent);
        };
        const shouldPreventInput = () => this.placeholder && this.focusElement.addEventListener('input', prevent);
        this.focusElement.addEventListener('focusin', shouldPreventInput);
        this.focusElement.addEventListener('focusout', shouldPreventInput);
        this._createPropertyObserver('placeholder', shouldPreventInput);
      }

      _getActiveErrorId(invalid, errorMessage, errorId) {
        return errorMessage && invalid ? errorId : undefined;
      }

      _getActiveLabelId(label, labelId) {
        return label ? labelId : undefined;
      }

      _getErrorMessageAriaHidden(invalid, errorMessage, errorId) {
        return (!this._getActiveErrorId(invalid, errorMessage, errorId)).toString();
      }

      /**
       * @protected
       */
      attributeChangedCallback(prop, oldVal, newVal) {
        super.attributeChangedCallback(prop, oldVal, newVal);
        // Needed until Edge has CSS Custom Properties (present in Edge Preview)
        /* istanbul ignore if */
        if (!(window.ShadyCSS && window.ShadyCSS.nativeCss) &&
          /^(focused|focus-ring|invalid|disabled|placeholder|has-value)$/.test(prop)) {
          this.updateStyles();
        }

        // Safari has an issue with repainting shadow root element styles when a host attribute changes.
        // Need this workaround (toggle any inline css property on and off) until the issue gets fixed.
        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        /* istanbul ignore if */
        if (isSafari && this.root) {
          const WEBKIT_PROPERTY = '-webkit-backface-visibility';
          this.root.querySelectorAll('*').forEach(el => {
            el.style[WEBKIT_PROPERTY] = 'visible';
            el.style[WEBKIT_PROPERTY] = '';
          });
        }
      }

      /**
       * Fired when the user commits a value change.
       *
       * @event change
       */
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-text-field>` is a Web Component for text field control in forms.
     *
     * ```html
     * <vaadin-text-field label="First Name">
     * </vaadin-text-field>
     * ```
     *
     * ### Prefixes and suffixes
     *
     * These are child elements of a `<vaadin-text-field>` that are displayed
     * inline with the input, before or after.
     * In order for an element to be considered as a prefix, it must have the slot
     * attribute set to `prefix` (and similarly for `suffix`).
     *
     * ```html
     * <vaadin-text-field label="Email address">
     *   <div slot="prefix">Sent to:</div>
     *   <div slot="suffix">@vaadin.com</div>
     * </vaadin-text-area>
     * ```
     *
     * ### Styling
     *
     * The following custom properties are available for styling:
     *
     * Custom property | Description | Default
     * ----------------|-------------|-------------
     * `--vaadin-text-field-default-width` | Set the default width of the input field | `12em`
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name | Description
     * ----------------|----------------
     * `label` | The label element
     * `input-field` | The element that wraps prefix, value and suffix
     * `value` | The text value element inside the `input-field` element
     * `error-message` | The error message element
     *
     * The following state attributes are available for styling:
     *
     * Attribute    | Description | Part name
     * -------------|-------------|------------
     * `disabled` | Set to a disabled text field | :host
     * `has-value` | Set when the element has a value | :host
     * `has-label` | Set when the element has a label | :host
     * `invalid` | Set when the element is invalid | :host
     * `focused` | Set when the element is focused | :host
     * `focus-ring` | Set when the element is keyboard focused | :host
     * `readonly` | Set to a readonly text field | :host
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.TextFieldMixin
     * @mixes Vaadin.ThemableMixin
     * @demo demo/index.html
     */
    class TextFieldElement extends ElementMixin$1(TextFieldMixin(ThemableMixin(PolymerElement))) {
      static get template() {
        return html$1`
    <style include="vaadin-text-field-shared-styles">
      /* polymer-cli linter breaks with empty line */
    </style>

    <div class="vaadin-text-field-container">

      <label part="label" on-click="focus" id="[[_labelId]]">[[label]]</label>

      <div part="input-field">

        <slot name="prefix"></slot>

        <input part="value" autocomplete\$="[[autocomplete]]" autocorrect\$="[[autocorrect]]" autocapitalize\$="[[autocapitalize]]" autofocus\$="[[autofocus]]" disabled\$="[[disabled]]" list="[[list]]" maxlength\$="[[maxlength]]" minlength\$="[[minlength]]" pattern="[[pattern]]" placeholder\$="[[placeholder]]" readonly\$="[[readonly]]" aria-readonly\$="[[readonly]]" required\$="[[required]]" aria-required\$="[[required]]" value="{{value::input}}" title="[[title]]" on-blur="validate" on-input="_onInput" on-change="_onChange" aria-describedby\$="[[_getActiveErrorId(invalid, errorMessage, _errorId)]]" aria-labelledby\$="[[_getActiveLabelId(label, _labelId)]]" aria-invalid\$="[[invalid]]">

        <slot name="suffix"></slot>

      </div>

      <div part="error-message" id="[[_errorId]]" aria-live="assertive" aria-hidden\$="[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]">[[errorMessage]]</div>

    </div>
`;
      }

      static get is() {
        return 'vaadin-text-field';
      }

      static get version() {
        return '2.1.7';
      }

      static get properties() {
        return {
          /**
           * Identifies a list of pre-defined options to suggest to the user.
           * The value must be the id of a <datalist> element in the same document.
           */
          list: {
            type: String
          },

          /**
           * A regular expression that the value is checked against.
           * The pattern must match the entire value, not just some subset.
           */
          pattern: {
            type: String
          },

          /**
           * Message to show to the user when validation fails.
           */
          title: {
            type: String
          }
        };
      }
    }

    customElements.define(TextFieldElement.is, TextFieldElement);

    const $_documentContainer$f = document.createElement('template');

    $_documentContainer$f.innerHTML = `<dom-module id="lumo-item" theme-for="vaadin-item">
  <template>
    <style>
      :host {
        display: flex;
        align-items: center;
        box-sizing: border-box;
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        line-height: var(--lumo-line-height-xs);
        padding: 0.5em 1em;
        min-height: var(--lumo-size-m);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        -webkit-tap-highlight-color: transparent;
      }

      /* Selectable items have a checkmark icon */
      :host([tabindex])::before {
        display: var(--_lumo-item-selected-icon-display, none);
        content: var(--lumo-icons-checkmark);
        font-family: lumo-icons;
        font-size: var(--lumo-icon-size-m);
        line-height: 1;
        font-weight: normal;
        width: 1em;
        height: 1em;
        margin: calc((1 - var(--lumo-line-height-xs)) * var(--lumo-font-size-m) / 2) 0;
        color: var(--lumo-primary-text-color);
        flex: none;
        opacity: 0;
        transition: transform 0.2s cubic-bezier(.12, .32, .54, 2), opacity 0.1s;
      }

      :host([selected])::before {
        opacity: 1;
      }

      :host([active]:not([selected]))::before {
        transform: scale(0.8);
        opacity: 0;
        transition-duration: 0s;
      }

      [part="content"] {
        flex: auto;
      }

      /* Disabled item */

      :host([disabled]) {
        color: var(--lumo-disabled-text-color);
        cursor: default;
        pointer-events: none;
      }

      /* Slotted icons */

      :host ::slotted(iron-icon) {
        width: var(--lumo-icon-size-m);
        height: var(--lumo-icon-size-m);
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$f.content);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * A mixin providing `focused`, `focus-ring`, `active`, `disabled` and `selected`.
     *
     * `focused`, `active` and `focus-ring` are set as only as attributes.
     * @polymerMixin
     */
    const ItemMixin = superClass => class VaadinItemMixin extends superClass {
      static get properties() {
        return {

          /**
           * Used for mixin detection because `instanceof` does not work with mixins.
           * e.g. in VaadinListMixin it filters items by using the
           * `element._hasVaadinItemMixin` condition.
           */
          _hasVaadinItemMixin: {
            value: true
          },

          /**
           * If true, the user cannot interact with this element.
           */
          disabled: {
            type: Boolean,
            value: false,
            observer: '_disabledChanged',
            reflectToAttribute: true
          },

          /**
           * If true, the item is in selected state.
           */
          selected: {
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            observer: '_selectedChanged'
          },

          _value: String
        };
      }

      constructor() {
        super();

        /**
         * Submittable string value. The default value is the trimmed text content of the element.
         * @type {string}
         */
        this.value;
      }

      get value() {
        return this._value !== undefined ? this._value : this.textContent.trim();
      }

      set value(value) {
        this._value = value;
      }

      ready() {
        super.ready();

        const attrValue = this.getAttribute('value');
        if (attrValue !== null) {
          this.value = attrValue;
        }

        this.addEventListener('focus', e => this._setFocused(true), true);
        this.addEventListener('blur', e => this._setFocused(false), true);
        this.addEventListener('mousedown', e => {
          this._setActive(this._mousedown = true);
          const mouseUpListener = () => {
            this._setActive(this._mousedown = false);
            document.removeEventListener('mouseup', mouseUpListener);
          };
          document.addEventListener('mouseup', mouseUpListener);
        });
        this.addEventListener('keydown', e => this._onKeydown(e));
        this.addEventListener('keyup', e => this._onKeyup(e));
      }

      /**
       * @protected
       */
      disconnectedCallback() {
        super.disconnectedCallback();

        // in Firefox and Safari, blur does not fire on the element when it is removed,
        // especially between keydown and keyup events, being active at the same time.
        // reproducible in `<vaadin-dropdown-menu>` when closing overlay on select.
        if (this.hasAttribute('active')) {
          this._setFocused(false);
        }
      }

      _selectedChanged(selected) {
        this.setAttribute('aria-selected', selected);
      }

      _disabledChanged(disabled) {
        if (disabled) {
          this.selected = false;
          this.setAttribute('aria-disabled', 'true');
          this.blur();
        } else {
          this.removeAttribute('aria-disabled');
        }
      }

      _setFocused(focused) {
        if (focused) {
          this.setAttribute('focused', '');
          if (!this._mousedown) {
            this.setAttribute('focus-ring', '');
          }
        } else {
          this.removeAttribute('focused');
          this.removeAttribute('focus-ring');
          this._setActive(false);
        }
      }

      _setActive(active) {
        if (active) {
          this.setAttribute('active', '');
        } else {
          this.removeAttribute('active');
        }
      }

      _onKeydown(event) {
        if (/^( |SpaceBar|Enter)$/.test(event.key) && !event.defaultPrevented) {
          event.preventDefault();
          this._setActive(true);
        }
      }

      _onKeyup(event) {
        if (this.hasAttribute('active')) {
          this._setActive(false);
          this.click();
        }
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-item>` is a Web Component providing layout for items in tabs and menus.
     *
     * ```
     *   <vaadin-item>
     *     Item content
     *   </vaadin-item>
     * ```
     *
     * ### Selectable
     *
     * `<vaadin-item>` has the `selected` property and the corresponding state attribute.
     * Currently, the component sets the `selected` to false, when `disabled` property is set to true.
     * But other than that, the `<vaadin-item>` does not switch selection by itself.
     * In general, it is the wrapper component, like `<vaadin-list-box>`, which should update
     * the `selected` property on the items, e. g. on mousedown or when Enter / Spacebar is pressed.
     *
     * ### Styling
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name | Description
     * ---|---
     * `content` | The element that wraps the slot
     *
     * The following state attributes are available for styling:
     *
     * Attribute  | Description | Part name
     * -----------|-------------|------------
     * `disabled` | Set to a disabled item | :host
     * `focused` | Set when the element is focused | :host
     * `focus-ring` | Set when the element is keyboard focused | :host
     * `selected` | Set when the item is selected | :host
     * `active` | Set when mousedown or enter/spacebar pressed | :host
     *
     * @memberof Vaadin
     * @mixes Vaadin.ItemMixin
     * @mixes Vaadin.ThemableMixin
     */
    class ItemElement extends ItemMixin(ThemableMixin(PolymerElement)) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }
    </style>
    <div part="content">
      <slot></slot>
    </div>
`;
      }

      static get is() {
        return 'vaadin-item';
      }

      static get version() {
        return '2.1.0';
      }
    }

    customElements.define(ItemElement.is, ItemElement);

    const $_documentContainer$g = document.createElement('template');

    $_documentContainer$g.innerHTML = `<dom-module id="lumo-list-box" theme-for="vaadin-list-box">
  <template>
    <style>
      :host {
        -webkit-tap-highlight-color: transparent;
        --_lumo-item-selected-icon-display: var(--_lumo-list-box-item-selected-icon-display, block);
      }

      /* IE11 flexbox issue workaround (vaadin-items are flex containers with min-height) */
      [part="items"] {
        display: flex;
        flex-direction: column;
      }

      [part="items"] ::slotted(*) {
        flex: none;
      }

      /* Normal item */

      [part="items"] ::slotted(vaadin-item) {
        -webkit-tap-highlight-color: var(--lumo-primary-color-10pct);
        cursor: default;
      }

      [part="items"] ::slotted(vaadin-item) {
        outline: none;
        border-radius: var(--lumo-border-radius);
        padding-left: var(--_lumo-list-box-item-padding-left, calc(var(--lumo-border-radius) / 4));
        padding-right: calc(var(--lumo-space-l) + var(--lumo-border-radius) / 4);
      }

      /* Workaround to display checkmark in IE11 when list-box is not used in dropdown-menu */
      [part="items"] ::slotted(vaadin-item)::before {
        display: var(--_lumo-item-selected-icon-display);
      }

      /* Hovered item */
      /* TODO a workaround until we have "focus-follows-mouse". After that, use the hover style for focus-ring as well */

      [part="items"] ::slotted(vaadin-item:hover:not([disabled])) {
        background-color: var(--lumo-primary-color-10pct);
      }

      /* Focused item */

      [part="items"] ::slotted([focus-ring]:not([disabled])) {
        box-shadow: inset 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      @media (pointer: coarse) {
        [part="items"] ::slotted(vaadin-item:hover:not([disabled])) {
          background-color: transparent;
        }

        [part="items"] ::slotted([focus-ring]:not([disabled])) {
          box-shadow: none;
        }
      }

      /* Easily add section dividers */

      [part="items"] ::slotted(hr) {
        height: 1px;
        border: 0;
        padding: 0;
        margin: var(--lumo-space-s) var(--lumo-border-radius);
        background-color: var(--lumo-contrast-10pct);
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$g.content);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    /**
     * A mixin for `nav` elements, facilitating navigation and selection of childNodes.
     *
     * @polymerMixin
     */
    const ListMixin = superClass => class VaadinListMixin extends superClass {
      static get properties() {
        return {
          /**
           * Used for mixin detection because `instanceof` does not work with mixins.
           */
          _hasVaadinListMixin: {
            value: true
          },

          /**
           * The index of the item selected in the items array
           */
          selected: {
            type: Number,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * Define how items are disposed in the dom.
           * Possible values are: `horizontal|vertical`.
           * It also changes navigation keys from left/right to up/down.
           */
          orientation: {
            type: String,
            reflectToAttribute: true,
            value: ''
          },

          /**
           * The list of items from which a selection can be made.
           * It is populated from the elements passed to the light DOM,
           * and updated dynamically when adding or removing items.
           *
           * The item elements must implement `Vaadin.ItemMixin`.
           *
           * Note: unlike `<vaadin-combo-box>`, this property is read-only,
           * so if you want to provide items by iterating array of data,
           * you have to use `dom-repeat` and place it to the light DOM.
           */
          items: {
            type: Array,
            readOnly: true,
            notify: true
          }
        };
      }

      static get observers() {
        return ['_enhanceItems(items, orientation, selected)'];
      }

      ready() {
        super.ready();
        this.addEventListener('keydown', e => this._onKeydown(e));
        this.addEventListener('click', e => this._onClick(e));

        this._observer = new FlattenedNodesObserver(this, info => {
          this._setItems(this._filterItems(Array.from(this.children)));
        });
      }

      _enhanceItems(items, orientation, selected) {
        if (items) {
          this.setAttribute('aria-orientation', orientation || 'vertical');
          this.items.forEach(item => {
            orientation ? item.setAttribute('orientation', orientation) : item.removeAttribute('orientation');
            item.updateStyles();
          });

          this._setFocusable(selected);

          const itemToSelect = items[selected];
          items.forEach(item => item.selected = item === itemToSelect);
          if (itemToSelect && !itemToSelect.disabled) {
            this._scrollToItem(selected);
          }
        }
      }

      get focused() {
        return this.getRootNode().activeElement;
      }

      _filterItems(array) {
        return array.filter(e => e._hasVaadinItemMixin);
      }

      _onClick(event) {
        if (event.metaKey || event.shiftKey || event.ctrlKey) {
          return;
        }

        const item = this._filterItems(event.composedPath())[0];
        let idx;
        if (item && !item.disabled && ((idx = this.items.indexOf(item)) >= 0)) {
          this.selected = idx;
        }
      }

      _onKeydown(event) {
        if (event.metaKey || event.ctrlKey) {
          return;
        }

        // IE names for arrows do not include the Arrow prefix
        const key = event.key.replace(/^Arrow/, '');

        const currentIdx = this.items.indexOf(this.focused);
        let condition = item => !item.disabled;
        let idx, increment;

        if (this._vertical && key === 'Up' || !this._vertical && key === 'Left') {
          increment = -1;
          idx = currentIdx - 1;
        } else if (this._vertical && key === 'Down' || !this._vertical && key === 'Right') {
          increment = 1;
          idx = currentIdx + 1;
        } else if (key === 'Home') {
          increment = 1;
          idx = 0;
        } else if (key === 'End') {
          increment = -1;
          idx = this.items.length - 1;
        } else if (key.length == 1) {
          increment = 1;
          idx = currentIdx + 1;
          condition = item => !item.disabled &&
            item.textContent.trim().toLowerCase().indexOf(key.toLowerCase()) === 0;
        }

        idx = this._getAvailableIndex(idx, increment, condition);
        if (idx >= 0) {
          this._focus(idx);
          event.preventDefault();
        }
      }

      _getAvailableIndex(idx, increment, condition) {
        const totalItems = this.items.length;
        for (let i = 0; typeof idx == 'number' && i < totalItems; i++, idx += (increment || 1)) {
          if (idx < 0) {
            idx = totalItems - 1;
          } else if (idx >= totalItems) {
            idx = 0;
          }

          const item = this.items[idx];
          if (condition(item)) {
            return idx;
          }
        }
        return -1;
      }

      _setFocusable(idx) {
        idx = this._getAvailableIndex(idx, 1, item => !item.disabled);
        const item = this.items[idx] || this.items[0];
        this.items.forEach(e => e.tabIndex = e === item ? 0 : -1);
      }

      _focus(idx) {
        const item = this.items[idx];
        this.items.forEach(e => e.focused = e === item);
        this._setFocusable(idx);
        this._scrollToItem(idx);
        item.focus();
      }

      focus() {
        // In initialisation (e.g vaadin-select) observer might not been run yet.
        this._observer.flush();
        const firstItem = (this.querySelector('[tabindex="0"]') || this.items[0]);
        firstItem && firstItem.focus();
      }

      /* @protected */
      get _scrollerElement() {
        // Returning scroller element of the component
      }

      // Scroll the container to have the next item by the edge of the viewport
      _scrollToItem(idx) {
        const item = this.items[idx];
        if (!item) {
          return;
        }

        const props = this._vertical ? ['top', 'bottom'] : ['left', 'right'];
        const scrollerRect = this._scrollerElement.getBoundingClientRect();
        const nextItemRect = (this.items[idx + 1] || item).getBoundingClientRect();
        const prevItemRect = (this.items[idx - 1] || item).getBoundingClientRect();

        let scrollDistance = 0;
        if (nextItemRect[props[1]] >= scrollerRect[props[1]]) {
          scrollDistance = nextItemRect[props[1]] - scrollerRect[props[1]];
        } else if (prevItemRect[props[0]] <= scrollerRect[props[0]]) {
          scrollDistance = prevItemRect[props[0]] - scrollerRect[props[0]];
        }

        this._scroll(scrollDistance);
      }

      /* @protected */
      get _vertical() {
        return this.orientation !== 'horizontal';
      }

      _scroll(pixels) {
        this._scrollerElement['scroll' + (this._vertical ? 'Top' : 'Left')] += pixels;
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-list-box>` is a Web Component for creating menus.
     *
     * ```
     *   <vaadin-list-box selected="2">
     *     <vaadin-item>Item 1</vaadin-item>
     *     <vaadin-item>Item 2</vaadin-item>
     *     <vaadin-item>Item 3</vaadin-item>
     *     <vaadin-item>Item 4</vaadin-item>
     *   </vaadin-list-box>
     * ```
     *
     * ### Styling
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name         | Description
     * ------------------|------------------------
     * `items`           | The items container
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.ListMixin
     * @mixes Vaadin.ThemableMixin
     * @demo demo/index.html
     */
    class ListBoxElement extends ElementMixin$1(ListMixin(ThemableMixin(PolymerElement))) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: flex;
      }

      :host([hidden]) {
        display: none !important;
      }

      [part="items"] {
        height: 100%;
        width: 100%;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
      }
    </style>
    <div part="items">
      <slot></slot>
    </div>
`;
      }

      static get is() {
        return 'vaadin-list-box';
      }

      static get version() {
        return '1.1.0';
      }

      static get properties() {
        return {
          // We don't need to define this property since super default is vertical,
          // but we don't want it to be modified, or be shown in the API docs.
          /** @private */
          orientation: {
            readOnly: true
          }
        };
      }

      ready() {
        super.ready();
        this.setAttribute('role', 'list');
      }

      get _scrollerElement() {
        return this.shadowRoot.querySelector('[part="items"]');
      }
    }

    customElements.define(ListBoxElement.is, ListBoxElement);

    const $_documentContainer$h = html$1`<dom-module id="lumo-select" theme-for="vaadin-select">
  <template>
    <style include="lumo-field-button">
      :host {
        outline: none;
        -webkit-tap-highlight-color: transparent;
      }

      [selected] {
        padding-left: 0;
        padding-right: 0;
      }

      [part="toggle-button"]::before {
        content: var(--lumo-icons-dropdown);
      }

      /* Highlight the toggle button when hovering over the entire component */
      :host(:hover:not([readonly]):not([disabled])) [part="toggle-button"] {
        color: var(--lumo-contrast-80pct);
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-select-text-field" theme-for="vaadin-select-text-field">
  <template>
    <style>
      [part="input-field"] {
        cursor: default;
      }

      [part="input-field"] ::slotted([part="value"]) {
        display: flex;
      }

      /* ShadyCSS limitation workaround */
      [part="input-field"] ::slotted([part="value"]) [selected]::before {
        display: none;
      }

      [part="input-field"]:focus {
        outline: none;
      }
    </style>
  </template>
</dom-module><dom-module id="lumo-select-overlay" theme-for="vaadin-select-overlay">
  <template>
    <style include="lumo-menu-overlay">
      :host {
        --_lumo-item-selected-icon-display: block;
      }

      :host([bottom-aligned]) {
        justify-content: flex-end;
      }

      [part~="overlay"] {
        min-width: var(--vaadin-select-text-field-width);
      }

      /* Small viewport adjustment */
      :host([phone]) {
        top: 0 !important;
        right: 0 !important;
        bottom: var(--vaadin-overlay-viewport-bottom, 0) !important;
        left: 0 !important;
        align-items: stretch;
        justify-content: flex-end;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$h.content);

    /**
    @license
    Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
    This code may only be used under the BSD style license found at
    http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
    http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
    found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
    part of the polymer project is also subject to an additional IP rights grant
    found at http://polymer.github.io/PATENTS.txt
    */

    /**
    `iron-media-query` can be used to data bind to a CSS media query.
    The `query` property is a bare CSS media query.
    The `query-matches` property is a boolean representing whether the page matches
    that media query.

    Example:

    ```html
    <iron-media-query query="(min-width: 600px)" query-matches="{{queryMatches}}">
    </iron-media-query>
    ```

    @group Iron Elements
    @demo demo/index.html
    @hero hero.svg
    @element iron-media-query
    */
    Polymer({

      is: 'iron-media-query',

      properties: {

        /**
         * The Boolean return value of the media query.
         */
        queryMatches: {type: Boolean, value: false, readOnly: true, notify: true},

        /**
         * The CSS media query to evaluate.
         */
        query: {type: String, observer: 'queryChanged'},

        /**
         * If true, the query attribute is assumed to be a complete media query
         * string rather than a single media feature.
         */
        full: {type: Boolean, value: false},

        /**
         * @type {function(MediaQueryList)}
         */
        _boundMQHandler: {
          value: function() {
            return this.queryHandler.bind(this);
          }
        },

        /**
         * @type {MediaQueryList}
         */
        _mq: {value: null}
      },

      attached: function() {
        this.style.display = 'none';
        this.queryChanged();
      },

      detached: function() {
        this._remove();
      },

      _add: function() {
        if (this._mq) {
          this._mq.addListener(this._boundMQHandler);
        }
      },

      _remove: function() {
        if (this._mq) {
          this._mq.removeListener(this._boundMQHandler);
        }
        this._mq = null;
      },

      queryChanged: function() {
        this._remove();
        var query = this.query;
        if (!query) {
          return;
        }
        if (!this.full && query[0] !== '(') {
          query = '(' + query + ')';
        }
        this._mq = window.matchMedia(query);
        this._add();
        this.queryHandler(this._mq);
      },

      queryHandler: function(mq) {
        this._setQueryMatches(mq.matches);
      }

    });

    const p$1 = Element.prototype;
    const matches$1 = p$1.matches || p$1.matchesSelector || p$1.mozMatchesSelector ||
      p$1.msMatchesSelector || p$1.oMatchesSelector || p$1.webkitMatchesSelector;

    /**
     * `Polymer.IronFocusablesHelper` relies on some Polymer-specific legacy API,
     * especially the `root` property which does not exist for native shadow DOM.
     * That's why we have this helper here.
     * See https://github.com/PolymerElements/iron-overlay-behavior/issues/282
     */
    const FocusablesHelper = {

      /**
       * Returns a sorted array of tabbable nodes, including the root node.
       * It searches the tabbable nodes in the light and shadow dom of the children,
       * sorting the result by tabindex.
       * @param {!Node} node
       * @return {!Array<!HTMLElement>}
       */
      getTabbableNodes: function(node) {
        const result = [];
        // If there is at least one element with tabindex > 0, we need to sort
        // the final array by tabindex.
        const needsSortByTabIndex = this._collectTabbableNodes(node, result);
        if (needsSortByTabIndex) {
          return this._sortByTabIndex(result);
        }
        return result;
      },

      /**
       * Returns if a element is focusable.
       * @param {!HTMLElement} element
       * @return {boolean}
       */
      isFocusable: function(element) {
        // From http://stackoverflow.com/a/1600194/4228703:
        // There isn't a definite list, it's up to the browser. The only
        // standard we have is DOM Level 2 HTML
        // https://www.w3.org/TR/DOM-Level-2-HTML/html.html, according to which the
        // only elements that have a focus() method are HTMLInputElement,
        // HTMLSelectElement, HTMLTextAreaElement and HTMLAnchorElement. This
        // notably omits HTMLButtonElement and HTMLAreaElement. Referring to these
        // tests with tabbables in different browsers
        // http://allyjs.io/data-tables/focusable.html

        // Elements that cannot be focused if they have [disabled] attribute.
        if (matches$1.call(element, 'input, select, textarea, button, object')) {
          return matches$1.call(element, ':not([disabled])');
        }
        // Elements that can be focused even if they have [disabled] attribute.
        return matches$1.call(element, 'a[href], area[href], iframe, [tabindex], [contentEditable]');
      },

      /**
       * Returns if a element is tabbable. To be tabbable, a element must be
       * focusable, visible, and with a tabindex !== -1.
       * @param {!HTMLElement} element
       * @return {boolean}
       */
      isTabbable: function(element) {
        return this.isFocusable(element) &&
            matches$1.call(element, ':not([tabindex="-1"])') &&
            this._isVisible(element);
      },

      /**
       * Returns the normalized element tabindex. If not focusable, returns -1.
       * It checks for the attribute "tabindex" instead of the element property
       * `tabIndex` since browsers assign different values to it.
       * e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
       * @param {!HTMLElement} element
       * @return {!number}
       * @private
       */
      _normalizedTabIndex: function(element) {
        if (this.isFocusable(element)) {
          const tabIndex = element.getAttribute('tabindex') || 0;
          return Number(tabIndex);
        }
        return -1;
      },

      /**
       * Searches for nodes that are tabbable and adds them to the `result` array.
       * Returns if the `result` array needs to be sorted by tabindex.
       * @param {!Node} node The starting point for the search; added to `result` if tabbable.
       * @param {!Array<!HTMLElement>} result
       * @return {boolean}
       * @private
       */
      _collectTabbableNodes: function(node, result) {
        // If not an element or not visible, no need to explore children.
        if (node.nodeType !== Node.ELEMENT_NODE || !this._isVisible(node)) {
          return false;
        }
        const element = /** @type {!HTMLElement} */ (node);
        const tabIndex = this._normalizedTabIndex(element);
        let needsSort = tabIndex > 0;
        if (tabIndex >= 0) {
          result.push(element);
        }

        // In ShadowDOM v1, tab order is affected by the order of distribution.
        // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];
        // in ShadowDOM v0 tab order is not affected by the distribution order,
        // in fact getTabbableNodes(#root) returns [#B, #A].
        //  <div id="root">
        //   <!-- shadow -->
        //     <slot name="a">
        //     <slot name="b">
        //   <!-- /shadow -->
        //   <input id="A" slot="a">
        //   <input id="B" slot="b" tabindex="1">
        //  </div>
        let children;
        if (element.localName === 'slot') {
          children = element.assignedNodes({flatten: true});
        } else {
          // Use shadow root if possible, will check for distributed nodes.
          children = (element.shadowRoot || element).children;
        }
        for (let i = 0; i < children.length; i++) {
          // Ensure method is always invoked to collect tabbable children.
          needsSort = this._collectTabbableNodes(children[i], result) || needsSort;
        }
        return needsSort;
      },

      /**
       * Returns false if the element has `visibility: hidden` or `display: none`
       * @param {!HTMLElement} element
       * @return {boolean}
       * @private
       */
      _isVisible: function(element) {
        // Check inline style first to save a re-flow. If looks good, check also
        // computed style.
        let style = element.style;
        if (style.visibility !== 'hidden' && style.display !== 'none') {
          style = window.getComputedStyle(element);
          return (style.visibility !== 'hidden' && style.display !== 'none');
        }
        return false;
      },

      /**
       * Sorts an array of tabbable elements by tabindex. Returns a new array.
       * @param {!Array<!HTMLElement>} tabbables
       * @return {!Array<!HTMLElement>}
       * @private
       */
      _sortByTabIndex: function(tabbables) {
        // Implement a merge sort as Array.prototype.sort does a non-stable sort
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
        const len = tabbables.length;
        if (len < 2) {
          return tabbables;
        }
        const pivot = Math.ceil(len / 2);
        const left = this._sortByTabIndex(tabbables.slice(0, pivot));
        const right = this._sortByTabIndex(tabbables.slice(pivot));
        return this._mergeSortByTabIndex(left, right);
      },

      /**
       * Merge sort iterator, merges the two arrays into one, sorted by tab index.
       * @param {!Array<!HTMLElement>} left
       * @param {!Array<!HTMLElement>} right
       * @return {!Array<!HTMLElement>}
       * @private
       */
      _mergeSortByTabIndex: function(left, right) {
        const result = [];
        while ((left.length > 0) && (right.length > 0)) {
          if (this._hasLowerTabOrder(left[0], right[0])) {
            result.push(right.shift());
          } else {
            result.push(left.shift());
          }
        }

        return result.concat(left, right);
      },

      /**
       * Returns if element `a` has lower tab order compared to element `b`
       * (both elements are assumed to be focusable and tabbable).
       * Elements with tabindex = 0 have lower tab order compared to elements
       * with tabindex > 0.
       * If both have same tabindex, it returns false.
       * @param {!HTMLElement} a
       * @param {!HTMLElement} b
       * @return {boolean}
       * @private
       */
      _hasLowerTabOrder: function(a, b) {
        // Normalize tabIndexes
        // e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
        const ati = Math.max(a.tabIndex, 0);
        const bti = Math.max(b.tabIndex, 0);
        return (ati === 0 || bti === 0) ? bti > ati : ati > bti;
      }
    };

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    let overlayContentCounter = 0;

    const createOverlayContent = (cssText) => {
      overlayContentCounter++;
      const is = `vaadin-overlay-content-${overlayContentCounter}`;

      const styledTemplate = document.createElement('template');
      const style = document.createElement('style');
      style.textContent = ':host { display: block; }' + cssText;
      styledTemplate.content.appendChild(style);

      if (window.ShadyCSS) {
        window.ShadyCSS.prepareTemplate(styledTemplate, is);
      }

      // NOTE(platosha): Have to use an awkward IIFE returning class here
      // to prevent this class from showing up in analysis.json & API docs.
      /** @private */
      const klass = (() => class extends HTMLElement {
        static get is() {
          return is;
        }

        connectedCallback() {
          if (window.ShadyCSS) {
            window.ShadyCSS.styleElement(this);
          }

          if (!this.shadowRoot) {
            this.attachShadow({mode: 'open'});
            this.shadowRoot.appendChild(document.importNode(styledTemplate.content, true));
          }
        }
      })();

      customElements.define(klass.is, klass);

      return document.createElement(is);
    };

    /**
     *
     * `<vaadin-overlay>` is a Web Component for creating overlays. The content of the overlay
     * can be populated in two ways: imperatively by using renderer callback function and
     * declaratively by using Polymer's Templates.
     *
     * ### Rendering
     *
     * By default, the overlay uses the content provided by using the renderer callback function.
     *
     * The renderer function provides `root`, `owner`, `model` arguments when applicable.
     * Generate DOM content by using `model` object properties if needed, append it to the `root`
     * element and control the state of the host element by accessing `owner`. Before generating new
     * content, users are able to check if there is already content in `root` for reusing it.
     *
     * ```html
     * <vaadin-overlay id="overlay"></vaadin-overlay>
     * ```
     * ```js
     * const overlay = document.querySelector('#overlay');
     * overlay.renderer = function(root) {
     *  root.textContent = "Overlay content";
     * };
     * ```
     *
     * Renderer is called on the opening of the overlay and each time the related model is updated.
     * DOM generated during the renderer call can be reused
     * in the next renderer call and will be provided with the `root` argument.
     * On first call it will be empty.
     *
     * **NOTE:** when the renderer property is defined, the `<template>` content is not used.
     *
     * ### Templating
     *
     * Alternatively, the content can be provided with Polymer Template.
     * Overlay finds the first child template and uses that in case renderer callback function
     * is not provided. You can also set a custom template using the `template` property.
     *
     * After the content from the template is stamped, the `content` property
     * points to the content container.
     *
     * The overlay provides `forwardHostProp` when calling
     * `Polymer.Templatize.templatize` for the template, so that the bindings
     * from the parent scope propagate to the content.  You can also pass
     * custom `instanceProps` object using the `instanceProps` property.
     *
     * ```html
     * <vaadin-overlay>
     *   <template>Overlay content</template>
     * </vaadin-overlay>
     * ```
     *
     * **NOTE:** when using `instanceProps`: because of the Polymer limitation,
     * every template can only be templatized once, so it is important
     * to set `instanceProps` before the `template` is assigned to the overlay.
     *
     * ### Styling
     *
     * To style the overlay content, use styles in the parent scope:
     *
     * - If the overlay is used in a component, then the component styles
     *   apply the overlay content.
     * - If the overlay is used in the global DOM scope, then global styles
     *   apply to the overlay content.
     *
     * See examples for styling the overlay content in the live demos.
     *
     * The following Shadow DOM parts are available for styling the overlay component itself:
     *
     * Part name  | Description
     * -----------|---------------------------------------------------------|
     * `backdrop` | Backdrop of the overlay
     * `overlay`  | Container for position/sizing/alignment of the content
     * `content`  | Content of the overlay
     *
     * The following state attributes are available for styling:
     *
     * Attribute | Description | Part
     * ---|---|---
     * `opening` | Applied just after the overlay is attached to the DOM. You can apply a CSS @keyframe animation for this state. | `:host`
     * `closing` | Applied just before the overlay is detached from the DOM. You can apply a CSS @keyframe animation for this state. | `:host`
     *
     * The following custom CSS properties are available for styling:
     *
     * Custom CSS property | Description | Default value
     * ---|---|---
     * `--vaadin-overlay-viewport-bottom` | Bottom offset of the visible viewport area | `0` or detected offset
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.ThemableMixin
     * @demo demo/index.html
     */
    class OverlayElement extends ThemableMixin(PolymerElement) {
      static get template() {
        return html$1`
    <style>
      :host {
        z-index: 200;
        position: fixed;

        /*
          Despite of what the names say, <vaadin-overlay> is just a container
          for position/sizing/alignment. The actual overlay is the overlay part.
        */

        /*
          Default position constraints: the entire viewport. Note: themes can
          override this to introduce gaps between the overlay and the viewport.
        */
        top: 0;
        right: 0;
        bottom: var(--vaadin-overlay-viewport-bottom);
        left: 0;

        /* Use flexbox alignment for the overlay part. */
        display: flex;
        flex-direction: column; /* makes dropdowns sizing easier */
        /* Align to center by default. */
        align-items: center;
        justify-content: center;

        /* Allow centering when max-width/max-height applies. */
        margin: auto;

        /* The host is not clickable, only the overlay part is. */
        pointer-events: none;

        /* Remove tap highlight on touch devices. */
        -webkit-tap-highlight-color: transparent;

        /* CSS API for host */
        --vaadin-overlay-viewport-bottom: 0;
      }

      :host([hidden]),
      :host(:not([opened]):not([closing])) {
        display: none !important;
      }

      [part="overlay"] {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
        pointer-events: auto;

        /* Prevent overflowing the host in MSIE 11 */
        max-width: 100%;
        box-sizing: border-box;

        -webkit-tap-highlight-color: initial; /* reenable tap highlight inside */
      }

      [part="backdrop"] {
        z-index: -1;
        content: "";
        background: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        pointer-events: auto;
      }
    </style>

    <div id="backdrop" part="backdrop" hidden\$="{{!withBackdrop}}"></div>
    <div part="overlay" id="overlay" tabindex="0">
      <div part="content" id="content">
        <slot></slot>
      </div>
    </div>
`;
      }

      static get is() {
        return 'vaadin-overlay';
      }

      static get properties() {
        return {
          opened: {
            type: Boolean,
            notify: true,
            observer: '_openedChanged',
            reflectToAttribute: true
          },

          /**
           * Owner element passed with renderer function
           */
          owner: Element,

          /**
           * Custom function for rendering the content of the overlay.
           * Receives three arguments:
           *
           * - `root` The root container DOM element. Append your content to it.
           * - `owner` The host element of the renderer function.
           * - `model` The object with the properties related with rendering.
           */
          renderer: Function,

          /**
           * The template of the overlay content.
           */
          template: {
            type: Object,
            notify: true
          },

          /**
           * Optional argument for `Polymer.Templatize.templatize`.
           */
          instanceProps: {
            type: Object
          },

          /**
           * References the content container after the template is stamped.
           */
          content: {
            type: Object,
            notify: true
          },

          withBackdrop: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Object with properties that is passed to `renderer` function
           */
          model: Object,

          /**
           * When true the overlay won't disable the main content, showing
           * it doesn’t change the functionality of the user interface.
           */
          modeless: {
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            observer: '_modelessChanged'
          },

          /**
           * When set to true, the overlay is hidden. This also closes the overlay
           * immediately in case there is a closing animation in progress.
           */
          hidden: {
            type: Boolean,
            reflectToAttribute: true,
            observer: '_hiddenChanged'
          },

          /**
           * When true move focus to the first focusable element in the overlay,
           * or to the overlay if there are no focusable elements.
           */
          focusTrap: {
            type: Boolean,
            value: false
          },

          /**
           * Set to true to enable restoring of focus when overlay is closed.
           */
          restoreFocusOnClose: {
            type: Boolean,
            value: false,
          },

          _mouseDownInside: {
            type: Boolean
          },

          _mouseUpInside: {
            type: Boolean
          },

          _instance: {
            type: Object
          },

          _originalContentPart: Object,

          _contentNodes: Array,

          _oldOwner: Element,

          _oldModel: Object,

          _oldTemplate: Object,

          _oldInstanceProps: Object,

          _oldRenderer: Object,

          _oldOpened: Boolean
        };
      }

      static get observers() {
        return [
          '_templateOrRendererChanged(template, renderer, owner, model, instanceProps, opened)'
        ];
      }

      constructor() {
        super();
        this._boundMouseDownListener = this._mouseDownListener.bind(this);
        this._boundMouseUpListener = this._mouseUpListener.bind(this);
        this._boundOutsideClickListener = this._outsideClickListener.bind(this);
        this._boundKeydownListener = this._keydownListener.bind(this);

        this._observer = new FlattenedNodesObserver(this, info => {
          this._setTemplateFromNodes(info.addedNodes);
        });

        // Listener for preventing closing of the paper-dialog and all components extending `iron-overlay-behavior`.
        this._boundIronOverlayCanceledListener = this._ironOverlayCanceled.bind(this);

        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
          this._boundIosResizeListener = () => this._detectIosNavbar();
        }
      }

      ready() {
        super.ready();

        this._observer.flush();

        // Need to add dummy click listeners to this and the backdrop or else
        // the document click event listener (_outsideClickListener) may never
        // get invoked on iOS Safari (reproducible in <vaadin-dialog>
        // and <vaadin-context-menu>).
        this.addEventListener('click', () => {});
        this.$.backdrop.addEventListener('click', () => {});
      }

      _detectIosNavbar() {
        if (!this.opened) {
          return;
        }

        const innerHeight = window.innerHeight;
        const innerWidth = window.innerWidth;

        const landscape = innerWidth > innerHeight;

        const clientHeight = document.documentElement.clientHeight;

        if (landscape && clientHeight > innerHeight) {
          this.style.setProperty('--vaadin-overlay-viewport-bottom', clientHeight - innerHeight + 'px');
        } else {
          this.style.setProperty('--vaadin-overlay-viewport-bottom', '0');
        }
      }

      _setTemplateFromNodes(nodes) {
        this.template = nodes.filter(node => node.localName && node.localName === 'template')[0] || this.template;
      }

      /**
       * @event vaadin-overlay-close
       * fired before the `vaadin-overlay` will be closed. If canceled the closing of the overlay is canceled as well.
       */
      close(sourceEvent) {
        var evt = new CustomEvent('vaadin-overlay-close', {bubbles: true, cancelable: true, detail: {sourceEvent: sourceEvent}});
        this.dispatchEvent(evt);
        if (!evt.defaultPrevented) {
          this.opened = false;
        }
      }

      connectedCallback() {
        super.connectedCallback();

        if (this._boundIosResizeListener) {
          this._detectIosNavbar();
          window.addEventListener('resize', this._boundIosResizeListener);
        }
      }

      disconnectedCallback() {
        super.disconnectedCallback();

        this._boundIosResizeListener && window.removeEventListener('resize', this._boundIosResizeListener);
      }

      _ironOverlayCanceled(event) {
        event.preventDefault();
      }

      _mouseDownListener(event) {
        this._mouseDownInside = event.composedPath().indexOf(this.$.overlay) >= 0;
      }

      _mouseUpListener(event) {
        this._mouseUpInside = event.composedPath().indexOf(this.$.overlay) >= 0;
      }

      /**
       * We need to listen on 'click' / 'tap' event and capture it and close the overlay before
       * propagating the event to the listener in the button. Otherwise, if the clicked button would call
       * open(), this would happen: https://www.youtube.com/watch?v=Z86V_ICUCD4
       *
       * @event vaadin-overlay-outside-click
       * fired before the `vaadin-overlay` will be closed on outside click. If canceled the closing of the overlay is canceled as well.
       */
      _outsideClickListener(event) {
        if (event.composedPath().indexOf(this.$.overlay) !== -1 ||
            this._mouseDownInside || this._mouseUpInside) {
          this._mouseDownInside = false;
          this._mouseUpInside = false;
          return;
        }
        if (!this._last) {
          return;
        }

        const evt = new CustomEvent('vaadin-overlay-outside-click', {bubbles: true, cancelable: true, detail: {sourceEvent: event}});
        this.dispatchEvent(evt);

        if (this.opened && !evt.defaultPrevented) {
          this.close(event);
        }
      }

      /**
       * @event vaadin-overlay-escape-press
       * fired before the `vaadin-overlay` will be closed on ESC button press. If canceled the closing of the overlay is canceled as well.
       */
      _keydownListener(event) {
        if (!this._last) {
          return;
        }

        // TAB
        if (event.key === 'Tab' && this.focusTrap) {
          // if only tab key is pressed, cycle forward, else cycle backwards.
          this._cycleTab(event.shiftKey ? -1 : 1);

          event.preventDefault();

        // ESC
        } else if (event.key === 'Escape' || event.key === 'Esc') {
          const evt = new CustomEvent('vaadin-overlay-escape-press', {bubbles: true, cancelable: true, detail: {sourceEvent: event}});
          this.dispatchEvent(evt);

          if (this.opened && !evt.defaultPrevented) {
            this.close(event);
          }
        }
      }

      _ensureTemplatized() {
        this._setTemplateFromNodes(Array.from(this.children));
      }

      /**
       * @event vaadin-overlay-open
       * fired after the `vaadin-overlay` is opened.
       */
      _openedChanged(opened, wasOpened) {
        if (!this._instance) {
          this._ensureTemplatized();
        }

        if (opened) {
          // Store focused node.
          this.__restoreFocusNode = this._getActiveElement();
          this._animatedOpening();

          afterNextRender(this, () => {
            if (this.focusTrap && !this.contains(document._activeElement || document.activeElement)) {
              this._cycleTab(0, 0);
            }

            const evt = new CustomEvent('vaadin-overlay-open', {bubbles: true});
            this.dispatchEvent(evt);
          });

          if (!this.modeless) {
            this._enterModalState();
          }
        } else if (wasOpened) {
          this._animatedClosing();
          this._exitModalState();
        }
      }

      _hiddenChanged(hidden) {
        if (hidden && this.hasAttribute('closing')) {
          this._flushAnimation('closing');
        }
      }

      _shouldAnimate() {
        const name = getComputedStyle(this).getPropertyValue('animation-name');
        const hidden = getComputedStyle(this).getPropertyValue('display') === 'none';
        return !hidden && name && name != 'none';
      }

      _enqueueAnimation(type, callback) {
        const handler = `__${type}Handler`;
        const listener = () => {
          callback();
          this.removeEventListener('animationend', listener);
          delete this[handler];
        };
        this[handler] = listener;
        this.addEventListener('animationend', listener);
      }

      _flushAnimation(type) {
        const handler = `__${type}Handler`;
        if (typeof this[handler] === 'function') {
          this[handler]();
        }
      }

      _animatedOpening() {
        if (this.parentNode === document.body && this.hasAttribute('closing')) {
          this._flushAnimation('closing');
        }
        this._attachOverlay();
        this.setAttribute('opening', '');

        const finishOpening = () => {
          this.removeAttribute('opening');
          document.addEventListener('iron-overlay-canceled', this._boundIronOverlayCanceledListener);
        };

        if (this._shouldAnimate()) {
          this._enqueueAnimation('opening', finishOpening);
        } else {
          finishOpening();
        }
      }

      _attachOverlay() {
        this._placeholder = document.createComment('vaadin-overlay-placeholder');
        this.parentNode.insertBefore(this._placeholder, this);
        document.body.appendChild(this);
      }

      _animatedClosing() {
        if (this.hasAttribute('opening')) {
          this._flushAnimation('opening');
        }
        if (this._placeholder) {
          this.setAttribute('closing', '');

          const finishClosing = () => {
            document.removeEventListener('iron-overlay-canceled', this._boundIronOverlayCanceledListener);
            this._detachOverlay();
            this.removeAttribute('closing');

            if (this.restoreFocusOnClose && this.__restoreFocusNode) {
              // If the activeElement is `<body>` or inside the overlay,
              // we are allowed to restore the focus. In all the other
              // cases focus might have been moved elsewhere by another
              // component or by the user interaction (e.g. click on a
              // button outside the overlay).
              const activeElement = this._getActiveElement();

              if (activeElement === document.body || this._deepContains(activeElement)) {
                this.__restoreFocusNode.focus();
              }
              this.__restoreFocusNode = null;
            }
          };

          if (this._shouldAnimate()) {
            this._enqueueAnimation('closing', finishClosing);
          } else {
            finishClosing();
          }
        }
      }

      _detachOverlay() {
        this._placeholder.parentNode.insertBefore(this, this._placeholder);
        this._placeholder.parentNode.removeChild(this._placeholder);
      }

      /**
       * Returns all attached overlays.
       */
      static get __attachedInstances() {
        return Array.from(document.body.children).filter(el => el instanceof OverlayElement);
      }

      /**
       * returns true if this is the last one in the opened overlays stack
       */
      get _last() {
        return this === OverlayElement.__attachedInstances.pop();
      }

      _modelessChanged(modeless) {
        if (!modeless) {
          if (this.opened) {
            this._enterModalState();
          }
        } else {
          this._exitModalState();
        }
      }

      _enterModalState() {
        document.addEventListener('mousedown', this._boundMouseDownListener);
        document.addEventListener('mouseup', this._boundMouseUpListener);
        document.addEventListener('click', this._boundOutsideClickListener, true);
        document.addEventListener('keydown', this._boundKeydownListener);

        if (document.body.style.pointerEvents !== 'none') {
          // Set body pointer-events to 'none' to disable mouse interactions with
          // other document nodes.
          this._previousDocumentPointerEvents = document.body.style.pointerEvents;
          document.body.style.pointerEvents = 'none';
        }

        // Disable pointer events in other attached overlays
        OverlayElement.__attachedInstances.forEach(el => {
          if (el !== this) {
            el.shadowRoot.querySelector('[part="overlay"]').style.pointerEvents = 'none';
          }
        });
      }

      _exitModalState() {
        document.removeEventListener('mousedown', this._boundMouseDownListener);
        document.removeEventListener('mouseup', this._boundMouseUpListener);
        document.removeEventListener('click', this._boundOutsideClickListener, true);
        document.removeEventListener('keydown', this._boundKeydownListener);

        if (this._previousDocumentPointerEvents !== undefined) {
          // Restore body pointer-events
          document.body.style.pointerEvents = this._previousDocumentPointerEvents;
          delete this._previousDocumentPointerEvents;
        }

        // Restore pointer events in the previous overlay(s)
        const instances = OverlayElement.__attachedInstances;
        let el;
        // Use instances.pop() to ensure the reverse order
        while (el = instances.pop()) {
          if (el === this) {
            // Skip the current instance
            continue;
          }
          el.shadowRoot.querySelector('[part="overlay"]').style.removeProperty('pointer-events');
          if (!el.modeless) {
            // Stop after the last modal
            break;
          }
        }
      }

      _removeOldContent() {
        if (!this.content || !this._contentNodes) {
          return;
        }

        this._observer.disconnect();

        this._contentNodes.forEach(node => {
          if (node.parentNode === this.content) {
            this.content.removeChild(node);
          }
        });

        if (this._originalContentPart) {
          // Restore the original <div part="content">
          this.$.content.parentNode.replaceChild(this._originalContentPart, this.$.content);
          this.$.content = this._originalContentPart;
          this._originalContentPart = undefined;
        }

        this._observer.connect();

        this._contentNodes = undefined;
        this.content = undefined;
      }

      _stampOverlayTemplate(template, instanceProps) {
        this._removeOldContent();

        if (!template._Templatizer) {
          template._Templatizer = templatize(template, this, {
            instanceProps: instanceProps,
            forwardHostProp: function(prop, value) {
              if (this._instance) {
                this._instance.forwardHostProp(prop, value);
              }
            }
          });
        }

        this._instance = new template._Templatizer({});
        this._contentNodes = Array.from(this._instance.root.childNodes);

        const templateRoot = template._templateRoot || (template._templateRoot = template.getRootNode());
        const _isScoped = templateRoot !== document;

        if (_isScoped) {
          if (!this.$.content.shadowRoot) {
            this.$.content.attachShadow({mode: 'open'});
          }

          let scopeCssText = Array.from(templateRoot.querySelectorAll('style'))
            .reduce((result, style) => result + style.textContent, '');

          if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
            // NOTE(platosha): ShadyCSS removes <style>’s from templates, so
            // we have to use these protected APIs to get their contents back
            const styleInfo = window.ShadyCSS.ScopingShim
              ._styleInfoForNode(templateRoot.host);
            if (styleInfo) {
              scopeCssText += styleInfo._getStyleRules().parsedCssText;
              scopeCssText += '}';
            }
          }

          // The overlay root’s :host styles should not apply inside the overlay
          scopeCssText = scopeCssText.replace(/:host/g, ':host-nomatch');

          if (scopeCssText) {
            if (window.ShadyCSS && !window.ShadyCSS.nativeShadow) {
              // ShadyDOM: replace the <div part="content"> with a generated
              // styled custom element
              const contentPart = createOverlayContent(scopeCssText);
              contentPart.id = 'content';
              contentPart.setAttribute('part', 'content');
              this.$.content.parentNode.replaceChild(contentPart, this.$.content);
              // NOTE(platosha): carry the style scope of the content part
              contentPart.className = this.$.content.className;
              this._originalContentPart = this.$.content;
              this.$.content = contentPart;
            } else {
              // Shadow DOM: append a style to the content shadowRoot
              const style = document.createElement('style');
              style.textContent = scopeCssText;
              this.$.content.shadowRoot.appendChild(style);
              this._contentNodes.unshift(style);
            }
          }

          this.$.content.shadowRoot.appendChild(this._instance.root);
          this.content = this.$.content.shadowRoot;
        } else {
          this.appendChild(this._instance.root);
          this.content = this;
        }
      }

      _removeNewRendererOrTemplate(template, oldTemplate, renderer, oldRenderer) {
        if (template !== oldTemplate) {
          this.template = undefined;
        } else if (renderer !== oldRenderer) {
          this.renderer = undefined;
        }
      }

      /**
       * Manually invoke existing renderer.
       */
      render() {
        if (this.renderer) {
          this.renderer.call(this.owner, this.content, this.owner, this.model);
        }
      }

      _templateOrRendererChanged(template, renderer, owner, model, instanceProps, opened) {
        if (template && renderer) {
          this._removeNewRendererOrTemplate(template, this._oldTemplate, renderer, this._oldRenderer);
          throw new Error('You should only use either a renderer or a template for overlay content');
        }

        const ownerOrModelChanged = (this._oldOwner !== owner || this._oldModel !== model);
        this._oldModel = model;
        this._oldOwner = owner;

        const templateOrInstancePropsChanged = (this._oldInstanceProps !== instanceProps || this._oldTemplate !== template);
        this._oldInstanceProps = instanceProps;
        this._oldTemplate = template;

        const rendererChanged = this._oldRenderer !== renderer;
        this._oldRenderer = renderer;

        const openedChanged = this._oldOpened !== opened;
        this._oldOpened = opened;

        if (template && templateOrInstancePropsChanged) {
          this._stampOverlayTemplate(template, instanceProps);
        } else if (renderer && (rendererChanged || openedChanged || ownerOrModelChanged)) {
          this.content = this;

          if (rendererChanged) {
            while (this.content.firstChild) {
              this.content.removeChild(this.content.firstChild);
            }
          }

          if (opened) {
            this.render();
          }
        }
      }

      _isFocused(element) {
        return element && element.getRootNode().activeElement === element;
      }

      _focusedIndex(elements) {
        elements = elements || this._getFocusableElements();
        return elements.indexOf(elements.filter(this._isFocused).pop());
      }

      _cycleTab(increment, index) {
        const focusableElements = this._getFocusableElements();

        if (index === undefined) {
          index = this._focusedIndex(focusableElements);
        }

        index += increment;

        // rollover to first item
        if (index >= focusableElements.length) {
          index = 0;
        // go to last item
        } else if (index < 0) {
          index = focusableElements.length - 1;
        }

        focusableElements[index].focus();
      }

      _getFocusableElements() {
        // collect all focusable elements
        return FocusablesHelper.getTabbableNodes(this.$.overlay);
      }

      _getActiveElement() {
        let active = document._activeElement || document.activeElement;
        // document.activeElement can be null
        // https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
        // In IE 11, it can also be an object when operating in iframes
        // or document.documentElement (when overlay closed on outside click).
        // In these cases, default it to document.body.
        if (!active || active === document.documentElement || active instanceof Element === false) {
          active = document.body;
        }
        while (active.shadowRoot && active.shadowRoot.activeElement) {
          active = active.shadowRoot.activeElement;
        }
        return active;
      }

      _deepContains(node) {
        if (this.contains(node)) {
          return true;
        }
        let n = node;
        const doc = node.ownerDocument;
        // walk from node to `this` or `document`
        while (n && n !== doc && n !== this) {
          n = n.parentNode || n.host;
        }
        return n === this;
      }
    }

    customElements.define(OverlayElement.is, OverlayElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    const $_documentContainer$i = document.createElement('template');

    $_documentContainer$i.innerHTML = `<dom-module id="vaadin-select-overlay-styles" theme-for="vaadin-select-overlay">
  <template>
    <style>
      :host {
        align-items: flex-start;
        justify-content: flex-start;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$i.content);
    /**
      * The overlay element.
      *
      * ### Styling
      *
      * See [`<vaadin-overlay>` documentation](https://github.com/vaadin/vaadin-overlay/blob/master/src/vaadin-overlay.html)
      * for `<vaadin-select-overlay>` parts.
      *
      * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
      *
      * @memberof Vaadin
      * @extends Vaadin.OverlayElement
      */
    class SelectOverlayElement extends OverlayElement {
      static get is() {
        return 'vaadin-select-overlay';
      }
    }
    customElements.define(SelectOverlayElement.is, SelectOverlayElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */

    let memoizedTemplate;
    /**
      * The text-field element.
      *
      * ### Styling
      *
      * See [`<vaadin-text-field>` documentation](https://github.com/vaadin/vaadin-text-field/blob/master/src/vaadin-text-field.html)
      * for `<vaadin-select-text-field>` parts and available slots (prefix, suffix etc.)
      *
      * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
      *
      * @memberof Vaadin
      * @extends Vaadin.TextFieldElement
      */
    class SelectTextFieldElement extends TextFieldElement {
      static get is() {
        return 'vaadin-select-text-field';
      }

      static get template() {
        if (!memoizedTemplate) {
          // Clone the superclass template
          memoizedTemplate = super.template.cloneNode(true);

          // Create a slot for the value element
          const slot = document.createElement('slot');
          slot.setAttribute('name', 'value');

          // Insert the slot before the text-field
          const input = memoizedTemplate.content.querySelector('input');

          input.parentElement.replaceChild(slot, input);
          slot.appendChild(input);
        }
        return memoizedTemplate;
      }

      get focusElement() {
        return this.shadowRoot.querySelector('[part=input-field]');
      }
    }

    customElements.define(SelectTextFieldElement.is, SelectTextFieldElement);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    const $_documentContainer$j = document.createElement('template');

    $_documentContainer$j.innerHTML = `<custom-style>
  <style>
    @font-face {
      font-family: "vaadin-select-icons";
      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAASEAAsAAAAABDgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAABCAAAAGAAAABgDxIGKmNtYXAAAAFoAAAAVAAAAFQXVtKHZ2FzcAAAAbwAAAAIAAAACAAAABBnbHlmAAABxAAAAHwAAAB8CohkJ2hlYWQAAAJAAAAANgAAADYOavgEaGhlYQAAAngAAAAkAAAAJAarA8ZobXR4AAACnAAAABQAAAAUCAABP2xvY2EAAAKwAAAADAAAAAwAKABSbWF4cAAAArwAAAAgAAAAIAAHABduYW1lAAAC3AAAAYYAAAGGmUoJ+3Bvc3QAAARkAAAAIAAAACAAAwAAAAMEAAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA6QADwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADgAAAAKAAgAAgACAAEAIOkA//3//wAAAAAAIOkA//3//wAB/+MXBAADAAEAAAAAAAAAAAAAAAEAAf//AA8AAQAAAAAAAAAAAAIAADc5AQAAAAABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQE/AUAC6QIVABQAAAEwFx4BFxYxMDc+ATc2MTAjKgEjIgE/ISJPIiEhIk8iIUNCoEJDAhUhIk8iISEiTyIhAAEAAAABAABvL5bdXw889QALBAAAAAAA1jHaeQAAAADWMdp5AAAAAALpAhUAAAAIAAIAAAAAAAAAAQAAA8D/wAAABAAAAAAAAukAAQAAAAAAAAAAAAAAAAAAAAUEAAAAAAAAAAAAAAAAAAAABAABPwAAAAAACgAUAB4APgABAAAABQAVAAEAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAADgCuAAEAAAAAAAEABwAAAAEAAAAAAAIABwBgAAEAAAAAAAMABwA2AAEAAAAAAAQABwB1AAEAAAAAAAUACwAVAAEAAAAAAAYABwBLAAEAAAAAAAoAGgCKAAMAAQQJAAEADgAHAAMAAQQJAAIADgBnAAMAAQQJAAMADgA9AAMAAQQJAAQADgB8AAMAAQQJAAUAFgAgAAMAAQQJAAYADgBSAAMAAQQJAAoANACkaWNvbW9vbgBpAGMAbwBtAG8AbwBuVmVyc2lvbiAxLjAAVgBlAHIAcwBpAG8AbgAgADEALgAwaWNvbW9vbgBpAGMAbwBtAG8AbwBuaWNvbW9vbgBpAGMAbwBtAG8AbwBuUmVndWxhcgBSAGUAZwB1AGwAYQByaWNvbW9vbgBpAGMAbwBtAG8AbwBuRm9udCBnZW5lcmF0ZWQgYnkgSWNvTW9vbi4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==) format('woff');
      font-weight: normal;
      font-style: normal;
    }
  </style>
</custom-style>`;

    document.head.appendChild($_documentContainer$j.content);
    /**
     *
     * `<vaadin-select>` is a Web Component for selecting values from a list of items. The content of the
     * the select can be populated in two ways: imperatively by using renderer callback function and
     * declaratively by using Polymer's Templates.
     *
     * ### Rendering
     *
     * By default, the select uses the content provided by using the renderer callback function.
     *
     * The renderer function provides `root`, `select` arguments.
     * Generate DOM content, append it to the `root` element and control the state
     * of the host element by accessing `select`.
     *
     * ```html
     * <vaadin-select id="select"></vaadin-select>
     * ```
     * ```js
     * const select = document.querySelector('#select');
     * select.renderer = function(root, select) {
     *   const listBox = document.createElement('vaadin-list-box');
     *   // append 3 <vaadin-item> elements
     *   ['Jose', 'Manolo', 'Pedro'].forEach(function(name) {
     *     const item = document.createElement('vaadin-item');
     *     item.textContent = name;
     *     listBox.appendChild(item);
     *   });
     *
     *   // update the content
     *   root.appendChild(listBox);
     * };
     * ```
     *
     * Renderer is called on initialization of new select and on its opening.
     * DOM generated during the renderer call can be reused
     * in the next renderer call and will be provided with the `root` argument.
     * On first call it will be empty.
     *
     * ### Polymer Templates
     *
     * Alternatively, the content can be provided with Polymer's Template.
     * Select finds the first child template and uses that in case renderer callback function
     * is not provided. You can also set a custom template using the `template` property.
     *
     * ```
     * <vaadin-select>
     *   <template>
     *     <vaadin-list-box>
     *       <vaadin-item label="foo">Foo</vaadin-item>
     *       <vaadin-item>Bar</vaadin-item>
     *       <vaadin-item>Baz</vaadin-item>
     *     </vaadin-list-box>
     *   </template>
     * </vaadin-select>
     * ```
     *
     * Hint: By setting the `label` property of inner vaadin-items you will
     * be able to change the visual representation of the selected value in the input part.
     *
     * ### Styling
     *
     * The following shadow DOM parts are available for styling:
     *
     * Part name | Description
     * ----------------|----------------
     * `toggle-button` | The toggle button
     *
     * The following state attributes are available for styling:
     *
     * Attribute    | Description | Part name
     * -------------|-------------|------------
     * `opened` | Set when the select is open | :host
     * `invalid` | Set when the element is invalid | :host
     * `focused` | Set when the element is focused | :host
     * `focus-ring` | Set when the element is keyboard focused | :host
     * `readonly` | Set when the select is read only | :host
     *
     * `<vaadin-select>` element sets these custom CSS properties:
     *
     * Property name | Description | Theme for element
     * --- | --- | ---
     * `--vaadin-select-text-field-width` | Width of the select text field | `vaadin-select-overlay`
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * In addition to `<vaadin-select>` itself, the following internal
     * components are themable:
     *
     * - `<vaadin-select-text-field>`
     * - `<vaadin-select-overlay>`
     *
     * Note: the `theme` attribute value set on `<vaadin-select>` is
     * propagated to the internal themable components listed above.
     *
     * @memberof Vaadin
     * @mixes Vaadin.ElementMixin
     * @mixes Vaadin.ControlStateMixin
     * @mixes Vaadin.ThemableMixin
     * @mixes Vaadin.ThemePropertyMixin
     * @demo demo/index.html
     */
    class SelectElement extends
      ElementMixin$1(
        ControlStateMixin(
          ThemableMixin(
            ThemePropertyMixin(
              mixinBehaviors(IronResizableBehavior, PolymerElement))))) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: inline-block;
      }

      vaadin-select-text-field {
        width: 100%;
        min-width: 0;
      }

      :host([hidden]) {
        display: none !important;
      }

      [part="toggle-button"] {
        font-family: "vaadin-select-icons";
      }

      [part="toggle-button"]::before {
        content: "\\e900";
      }
    </style>

    <vaadin-select-text-field placeholder="[[placeholder]]" label="[[label]]" required="[[required]]" invalid="[[invalid]]" error-message="[[errorMessage]]" readonly\$="[[readonly]]" theme\$="[[theme]]">
      <slot name="prefix" slot="prefix"></slot>
      <div part="value"></div>
      <div part="toggle-button" slot="suffix" role="button" aria-label="Toggle"></div>
    </vaadin-select-text-field>
    <vaadin-select-overlay opened="{{opened}}" with-backdrop="[[_phone]]" phone\$="[[_phone]]" theme\$="[[theme]]"></vaadin-select-overlay>

    <iron-media-query query="[[_phoneMediaQuery]]" query-matches="{{_phone}}"></iron-media-query>
`;
      }

      static get is() {
        return 'vaadin-select';
      }

      static get version() {
        return '2.0.2';
      }

      static get properties() {
        return {
          /**
           * Set when the select is open
           */
          opened: {
            type: Boolean,
            value: false,
            notify: true,
            reflectToAttribute: true,
            observer: '_openedChanged'
          },

          /**
           * Custom function for rendering the content of the `<vaadin-select>`.
           * Receives two arguments:
           *
           * - `root` The `<vaadin-select-overlay>` internal container
           *   DOM element. Append your content to it.
           * - `select` The reference to the `<vaadin-select>` element.
           */
          renderer: Function,

          /**
           * The error message to display when the select value is invalid
           */
          errorMessage: {
            type: String,
            value: ''
          },

          /**
           * String used for the label element.
           */
          label: {
            type: String
          },

          /**
           * It stores the the `value` property of the selected item, providing the
           * value for iron-form.
           * When there’s an item selected, it's the value of that item, otherwise
           * it's an empty string.
           * On change or initialization, the component finds the item which matches the
           * value and displays it.
           * If no value is provided to the component, it selects the first item without
           * value or empty value.
           * Hint: If you do not want to select any item by default, you can either set all
           * the values of inner vaadin-items, or set the vaadin-select value to
           * an inexistent value in the items list.
           */
          value: {
            type: String,
            value: '',
            notify: true,
            observer: '_valueChanged'
          },

          /**
           * The current required state of the select. True if required.
           */
          required: {
            type: Boolean,
            reflectToAttribute: true,
            observer: '_requiredChanged'
          },

          /**
           * Set to true if the value is invalid.
           */
          invalid: {
            type: Boolean,
            reflectToAttribute: true,
            notify: true,
            value: false
          },

          /**
           * The name of this element.
           */
          name: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * A hint to the user of what can be entered in the control.
           * The placeholder will be displayed in the case that there
           * is no item selected, or the selected item has an empty
           * string label, or the selected item has no label and it's
           * DOM content is empty.
           */
          placeholder: {
            type: String
          },

          /**
           * When present, it specifies that the element is read-only.
           */
          readonly: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          _phone: Boolean,

          _phoneMediaQuery: {
            value: '(max-width: 420px), (max-height: 420px)'
          },

          _overlayElement: Object,

          _inputElement: Object,

          _toggleElement: Object,

          _items: Object,

          _contentTemplate: Object,

          _oldTemplate: Object,

          _oldRenderer: Object
        };
      }

      static get observers() {
        return [
          '_updateSelectedItem(value, _items)',
          '_updateAriaExpanded(opened, _toggleElement)',
          '_templateOrRendererChanged(_contentTemplate, renderer, _overlayElement)'
        ];
      }

      /** @private */
      constructor() {
        super();
        this._boundSetPosition = this._setPosition.bind(this);
      }

      /** @private */
      connectedCallback() {
        super.connectedCallback();
        this.addEventListener('iron-resize', this._boundSetPosition);
      }

      ready() {
        super.ready();

        this._overlayElement = this.shadowRoot.querySelector('vaadin-select-overlay');
        this._valueElement = this.shadowRoot.querySelector('[part="value"]');
        this._toggleElement = this.shadowRoot.querySelector('[part="toggle-button"]');
        this._nativeInput = this.focusElement.shadowRoot.querySelector('input');
        this._nativeInput.setAttribute('aria-hidden', true);
        this._nativeInput.setAttribute('tabindex', -1);
        this._nativeInput.style.pointerEvents = 'none';

        this.focusElement.addEventListener('click', e => this.opened = !this.readonly);
        this.focusElement.addEventListener('keydown', e => this._onKeyDown(e));

        this._observer = new FlattenedNodesObserver(this, info => this._setTemplateFromNodes(info.addedNodes));
        this._observer.flush();
      }

      _setTemplateFromNodes(nodes) {
        const template = Array.from(nodes).filter(node => node.localName && node.localName === 'template')[0] || this._contentTemplate;
        this._overlayElement.template = this._contentTemplate = template;
        this._setForwardHostProps();
      }

      _setForwardHostProps() {
        if (this._overlayElement.content) {
          const origForwardHostProp = this._overlayElement._instance && this._overlayElement._instance.forwardHostProp;

          if (this._overlayElement._instance) {
            this._overlayElement._instance.forwardHostProp = (...args) => {
              origForwardHostProp.apply(this._overlayElement._instance, args);
              setTimeout(() => {
                this._updateValueSlot();
              });
            };

            this._assignMenuElement();
          }
        }
      }

      /**
       * Manually invoke existing renderer.
       */
      render() {
        this._overlayElement.render();
      }

      _removeNewRendererOrTemplate(template, oldTemplate, renderer, oldRenderer) {
        if (template !== oldTemplate) {
          this._contentTemplate = undefined;
        } else if (renderer !== oldRenderer) {
          this.renderer = undefined;
        }
      }

      _templateOrRendererChanged(template, renderer, overlay) {
        if (!overlay) {
          return;
        }

        if (template && renderer) {
          this._removeNewRendererOrTemplate(template, this._oldTemplate, renderer, this._oldRenderer);
          throw new Error('You should only use either a renderer or a template for select content');
        }

        this._oldTemplate = template;
        this._oldRenderer = renderer;

        if (renderer) {
          overlay.setProperties({owner: this, renderer: renderer});
          this.render();

          if (overlay.content.firstChild) {
            this._assignMenuElement();
          }
        }
      }

      _assignMenuElement() {
        this._menuElement = Array.from(this._overlayElement.content.children).filter(element => element.localName !== 'style')[0];

        if (this._menuElement) {
          this._menuElement.addEventListener('items-changed', e => {
            this._items = this._menuElement.items;
          });
          this._menuElement.addEventListener('selected-changed', e => this._updateValueSlot());
          this._menuElement.addEventListener('keydown', e => this._onKeyDownInside(e));
          this._menuElement.addEventListener('click', e => this.opened = false);
        }
      }

      /** @protected */
      get focusElement() {
        return this._inputElement ||
          (this._inputElement = this.shadowRoot.querySelector('vaadin-select-text-field'));
      }

      /** @private */
      disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('iron-resize', this._boundSetPosition);
        // Making sure the select is closed and removed from DOM after detaching the select.
        this.opened = false;
      }

      /** @private */
      notifyResize() {
        super.notifyResize();
        if (this.positionTarget && this.opened) {
          this._setPosition();
          // Schedule another position update (to cover virtual keyboard opening for example)
          requestAnimationFrame(this._setPosition.bind(this));
        }
      }

      _requiredChanged(required) {
        this.setAttribute('aria-required', required);
      }

      _valueChanged(value, oldValue) {
        if (value === '') {
          this.focusElement.removeAttribute('has-value');
        } else {
          this.focusElement.setAttribute('has-value', '');
        }

        // Skip validation for the initial empty string value
        if (value === '' && oldValue === undefined) {
          return;
        }
        this.validate();
      }

      _onKeyDown(e) {
        if (!this.readonly && !this.opened && /^(ArrowDown|Down|ArrowUp|Up|Enter|SpaceBar| )$/.test(e.key)) {
          e.preventDefault();
          this.opened = true;
        }
      }

      _onKeyDownInside(e) {
        if (/^(Tab)$/.test(e.key)) {
          this.opened = false;
        }
      }

      _openedChanged(opened, wasOpened) {
        if (opened) {
          if (
            !this._overlayElement ||
            !this._menuElement ||
            !this._toggleElement ||
            !this.focusElement ||
            this.disabled ||
            this.readonly
          ) {
            this.opened = false;
            return;
          }

          this._openedWithFocusRing = this.hasAttribute('focus-ring') || this.focusElement.hasAttribute('focus-ring');
          this._menuElement.focus();
          this._setPosition();
          window.addEventListener('scroll', this._boundSetPosition, true);
        } else if (wasOpened) {
          if (this._phone) {
            this._setFocused(false);
          } else {
            this.focusElement.focus();
            if (this._openedWithFocusRing) {
              this.focusElement.setAttribute('focus-ring', '');
            }
          }
          this.validate();
          window.removeEventListener('scroll', this._boundSetPosition, true);
        }
      }

      _hasContent(selected) {
        if (!selected) {
          return false;
        }
        return Boolean(
          selected.hasAttribute('label') ?
            selected.getAttribute('label') :
            selected.textContent.trim() || selected.children.length
        );
      }

      _attachSelectedItem(selected) {
        if (!selected) {
          return;
        }
        let labelItem;
        if (selected.hasAttribute('label')) {
          labelItem = document.createElement('vaadin-item');
          labelItem.textContent = selected.getAttribute('label');
        } else {
          labelItem = selected.cloneNode(true);
        }

        // store reference to the original item
        labelItem._sourceItem = selected;

        labelItem.removeAttribute('tabindex');

        this._valueElement.appendChild(labelItem);

        labelItem.selected = true;
      }

      _updateAriaExpanded(opened, toggleElement) {
        toggleElement && toggleElement.setAttribute('aria-expanded', opened);
      }

      _updateValueSlot() {
        this.opened = false;
        this._valueElement.innerHTML = '';

        const selected = this._items[this._menuElement.selected];

        const hasContent = this._hasContent(selected);

        // Toggle visibility of _valueElement vs fallback input with placeholder
        this._valueElement.slot = hasContent ? 'value' : '';

        // Ensure the slot distribution to apply correct style scope for cloned item
        if (hasContent && window.ShadyDOM) {
          window.ShadyDOM.flush();
        }

        this._attachSelectedItem(selected);

        if (!this._valueChanging && selected) {
          this._selectedChanging = true;
          this.value = selected.value || '';
          delete this._selectedChanging;
        }
      }

      _updateSelectedItem(value, items) {
        if (items) {
          this._menuElement.selected = items.reduce((prev, item, idx) => {
            return prev === undefined && item.value === value ? idx : prev;
          }, undefined);
          if (!this._selectedChanging) {
            this._valueChanging = true;
            this._updateValueSlot();
            delete this._valueChanging;
          }
        }
      }

      /** @override */
      _setFocused(focused) {
        // Keep `focused` state when opening the overlay for styling purpose.
        super._setFocused(this.opened || focused);
        this.focusElement._setFocused(this.hasAttribute('focused'));
        !this.hasAttribute('focused') && this.validate();
      }

      _setPosition() {
        const inputRect = this._inputElement.shadowRoot.querySelector('[part~="input-field"]').getBoundingClientRect();
        const viewportHeight = Math.min(window.innerHeight, document.documentElement.clientHeight);
        const bottomAlign = inputRect.top > (viewportHeight - inputRect.height) / 2;

        this._overlayElement.style.left = inputRect.left + 'px';
        if (bottomAlign) {
          this._overlayElement.setAttribute('bottom-aligned', '');
          this._overlayElement.style.removeProperty('top');
          this._overlayElement.style.bottom = (viewportHeight - inputRect.bottom) + 'px';
        } else {
          this._overlayElement.removeAttribute('bottom-aligned');
          this._overlayElement.style.removeProperty('bottom');
          this._overlayElement.style.top = inputRect.top + 'px';
        }

        this._overlayElement.updateStyles({'--vaadin-select-text-field-width': inputRect.width + 'px'});
      }

      /**
       * Returns true if `value` is valid, and sets the `invalid` flag appropriately.
       *
       * @return {boolean} True if the value is valid and sets the `invalid` flag appropriately
       */
      validate() {
        return !(this.invalid = !(this.disabled || !this.required || this.value));
      }
    }

    customElements.define(SelectElement.is, SelectElement);

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var pouchdb = createCommonjsModule(function (module, exports) {
    // PouchDB 7.0.0
    // 
    // (c) 2012-2018 Dale Harvey and the PouchDB team
    // PouchDB may be freely distributed under the Apache license, version 2.0.
    // For all details and documentation:
    // http://pouchdb.com
    (function(f){{module.exports=f();}})(function(){return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof commonjsRequire&&commonjsRequire;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t);}return n[i].exports}for(var u="function"==typeof commonjsRequire&&commonjsRequire,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){

    module.exports = argsArray;

    function argsArray(fun) {
      return function () {
        var len = arguments.length;
        if (len) {
          var args = [];
          var i = -1;
          while (++i < len) {
            args[i] = arguments[i];
          }
          return fun.call(this, args);
        } else {
          return fun.call(this, []);
        }
      };
    }
    },{}],2:[function(_dereq_,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var objectCreate = Object.create || objectCreatePolyfill;
    var objectKeys = Object.keys || objectKeysPolyfill;
    var bind = Function.prototype.bind || functionBindPolyfill;

    function EventEmitter() {
      if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
        this._events = objectCreate(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    var hasDefineProperty;
    try {
      var o = {};
      if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
      hasDefineProperty = o.x === 0;
    } catch (err) { hasDefineProperty = false; }
    if (hasDefineProperty) {
      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          // check whether the input is a positive number (whose value is zero or
          // greater and not a NaN).
          if (typeof arg !== 'number' || arg < 0 || arg !== arg)
            throw new TypeError('"defaultMaxListeners" must be a positive number');
          defaultMaxListeners = arg;
        }
      });
    } else {
      EventEmitter.defaultMaxListeners = defaultMaxListeners;
    }

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        if (arguments.length > 1)
          er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Unhandled "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
          // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
          // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = objectCreate(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
              listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
              prepend ? [listener, existing] : [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                existing.length + ' "' + String(type) + '" listeners ' +
                'added. Use emitter.setMaxListeners() to ' +
                'increase limit.');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            if (typeof console === 'object' && console.warn) {
              console.warn('%s: %s', w.name, w.message);
            }
          }
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        switch (arguments.length) {
          case 0:
            return this.listener.call(this.target);
          case 1:
            return this.listener.call(this.target, arguments[0]);
          case 2:
            return this.listener.call(this.target, arguments[0], arguments[1]);
          case 3:
            return this.listener.call(this.target, arguments[0], arguments[1],
                arguments[2]);
          default:
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i)
              args[i] = arguments[i];
            this.listener.apply(this.target, args);
        }
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = bind.call(onceWrapper, state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = objectCreate(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (position === 0)
              list.shift();
            else
              spliceOne(list, position);

            if (list.length === 1)
              events[type] = list[0];

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = objectCreate(null);
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = objectCreate(null);
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = objectKeys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = objectCreate(null);
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }

          return this;
        };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (!events)
        return [];

      var evlistener = events[type];
      if (!evlistener)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function objectCreatePolyfill(proto) {
      var F = function() {};
      F.prototype = proto;
      return new F;
    }
    function objectKeysPolyfill(obj) {
      for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) ;
      return k;
    }
    function functionBindPolyfill(context) {
      var fn = this;
      return function () {
        return fn.apply(context, arguments);
      };
    }

    },{}],3:[function(_dereq_,module,exports){
    (function (global){
    var Mutation = global.MutationObserver || global.WebKitMutationObserver;

    var scheduleDrain;

    {
      if (Mutation) {
        var called = 0;
        var observer = new Mutation(nextTick);
        var element = global.document.createTextNode('');
        observer.observe(element, {
          characterData: true
        });
        scheduleDrain = function () {
          element.data = (called = ++called % 2);
        };
      } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
        var channel = new global.MessageChannel();
        channel.port1.onmessage = nextTick;
        scheduleDrain = function () {
          channel.port2.postMessage(0);
        };
      } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
        scheduleDrain = function () {

          // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
          // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
          var scriptEl = global.document.createElement('script');
          scriptEl.onreadystatechange = function () {
            nextTick();

            scriptEl.onreadystatechange = null;
            scriptEl.parentNode.removeChild(scriptEl);
            scriptEl = null;
          };
          global.document.documentElement.appendChild(scriptEl);
        };
      } else {
        scheduleDrain = function () {
          setTimeout(nextTick, 0);
        };
      }
    }

    var draining;
    var queue = [];
    //named nextTick for less confusing stack traces
    function nextTick() {
      draining = true;
      var i, oldQueue;
      var len = queue.length;
      while (len) {
        oldQueue = queue;
        queue = [];
        i = -1;
        while (++i < len) {
          oldQueue[i]();
        }
        len = queue.length;
      }
      draining = false;
    }

    module.exports = immediate;
    function immediate(task) {
      if (queue.push(task) === 1 && !draining) {
        scheduleDrain();
      }
    }

    }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    },{}],4:[function(_dereq_,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }

    },{}],5:[function(_dereq_,module,exports){
    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ());
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] };

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

    },{}],6:[function(_dereq_,module,exports){
    (function (factory) {
        if (typeof exports === 'object') {
            // Node/CommonJS
            module.exports = factory();
        } else {
            // Browser globals (with support for web workers)
            var glob;

            try {
                glob = window;
            } catch (e) {
                glob = self;
            }

            glob.SparkMD5 = factory();
        }
    }(function (undefined) {

        /*
         * Fastest md5 implementation around (JKM md5).
         * Credits: Joseph Myers
         *
         * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
         * @see http://jsperf.com/md5-shootout/7
         */

        /* this function is much faster,
          so if possible we use it. Some IEs
          are the only ones I know of that
          need the idiotic second function,
          generated by an if clause.  */
        var hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];

        function md5cycle(x, k) {
            var a = x[0],
                b = x[1],
                c = x[2],
                d = x[3];

            a += (b & c | ~b & d) + k[0] - 680876936 | 0;
            a  = (a << 7 | a >>> 25) + b | 0;
            d += (a & b | ~a & c) + k[1] - 389564586 | 0;
            d  = (d << 12 | d >>> 20) + a | 0;
            c += (d & a | ~d & b) + k[2] + 606105819 | 0;
            c  = (c << 17 | c >>> 15) + d | 0;
            b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
            b  = (b << 22 | b >>> 10) + c | 0;
            a += (b & c | ~b & d) + k[4] - 176418897 | 0;
            a  = (a << 7 | a >>> 25) + b | 0;
            d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
            d  = (d << 12 | d >>> 20) + a | 0;
            c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
            c  = (c << 17 | c >>> 15) + d | 0;
            b += (c & d | ~c & a) + k[7] - 45705983 | 0;
            b  = (b << 22 | b >>> 10) + c | 0;
            a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
            a  = (a << 7 | a >>> 25) + b | 0;
            d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
            d  = (d << 12 | d >>> 20) + a | 0;
            c += (d & a | ~d & b) + k[10] - 42063 | 0;
            c  = (c << 17 | c >>> 15) + d | 0;
            b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
            b  = (b << 22 | b >>> 10) + c | 0;
            a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
            a  = (a << 7 | a >>> 25) + b | 0;
            d += (a & b | ~a & c) + k[13] - 40341101 | 0;
            d  = (d << 12 | d >>> 20) + a | 0;
            c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
            c  = (c << 17 | c >>> 15) + d | 0;
            b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
            b  = (b << 22 | b >>> 10) + c | 0;

            a += (b & d | c & ~d) + k[1] - 165796510 | 0;
            a  = (a << 5 | a >>> 27) + b | 0;
            d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
            d  = (d << 9 | d >>> 23) + a | 0;
            c += (d & b | a & ~b) + k[11] + 643717713 | 0;
            c  = (c << 14 | c >>> 18) + d | 0;
            b += (c & a | d & ~a) + k[0] - 373897302 | 0;
            b  = (b << 20 | b >>> 12) + c | 0;
            a += (b & d | c & ~d) + k[5] - 701558691 | 0;
            a  = (a << 5 | a >>> 27) + b | 0;
            d += (a & c | b & ~c) + k[10] + 38016083 | 0;
            d  = (d << 9 | d >>> 23) + a | 0;
            c += (d & b | a & ~b) + k[15] - 660478335 | 0;
            c  = (c << 14 | c >>> 18) + d | 0;
            b += (c & a | d & ~a) + k[4] - 405537848 | 0;
            b  = (b << 20 | b >>> 12) + c | 0;
            a += (b & d | c & ~d) + k[9] + 568446438 | 0;
            a  = (a << 5 | a >>> 27) + b | 0;
            d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
            d  = (d << 9 | d >>> 23) + a | 0;
            c += (d & b | a & ~b) + k[3] - 187363961 | 0;
            c  = (c << 14 | c >>> 18) + d | 0;
            b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
            b  = (b << 20 | b >>> 12) + c | 0;
            a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
            a  = (a << 5 | a >>> 27) + b | 0;
            d += (a & c | b & ~c) + k[2] - 51403784 | 0;
            d  = (d << 9 | d >>> 23) + a | 0;
            c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
            c  = (c << 14 | c >>> 18) + d | 0;
            b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
            b  = (b << 20 | b >>> 12) + c | 0;

            a += (b ^ c ^ d) + k[5] - 378558 | 0;
            a  = (a << 4 | a >>> 28) + b | 0;
            d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
            d  = (d << 11 | d >>> 21) + a | 0;
            c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
            c  = (c << 16 | c >>> 16) + d | 0;
            b += (c ^ d ^ a) + k[14] - 35309556 | 0;
            b  = (b << 23 | b >>> 9) + c | 0;
            a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
            a  = (a << 4 | a >>> 28) + b | 0;
            d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
            d  = (d << 11 | d >>> 21) + a | 0;
            c += (d ^ a ^ b) + k[7] - 155497632 | 0;
            c  = (c << 16 | c >>> 16) + d | 0;
            b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
            b  = (b << 23 | b >>> 9) + c | 0;
            a += (b ^ c ^ d) + k[13] + 681279174 | 0;
            a  = (a << 4 | a >>> 28) + b | 0;
            d += (a ^ b ^ c) + k[0] - 358537222 | 0;
            d  = (d << 11 | d >>> 21) + a | 0;
            c += (d ^ a ^ b) + k[3] - 722521979 | 0;
            c  = (c << 16 | c >>> 16) + d | 0;
            b += (c ^ d ^ a) + k[6] + 76029189 | 0;
            b  = (b << 23 | b >>> 9) + c | 0;
            a += (b ^ c ^ d) + k[9] - 640364487 | 0;
            a  = (a << 4 | a >>> 28) + b | 0;
            d += (a ^ b ^ c) + k[12] - 421815835 | 0;
            d  = (d << 11 | d >>> 21) + a | 0;
            c += (d ^ a ^ b) + k[15] + 530742520 | 0;
            c  = (c << 16 | c >>> 16) + d | 0;
            b += (c ^ d ^ a) + k[2] - 995338651 | 0;
            b  = (b << 23 | b >>> 9) + c | 0;

            a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
            a  = (a << 6 | a >>> 26) + b | 0;
            d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
            d  = (d << 10 | d >>> 22) + a | 0;
            c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
            c  = (c << 15 | c >>> 17) + d | 0;
            b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
            b  = (b << 21 |b >>> 11) + c | 0;
            a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
            a  = (a << 6 | a >>> 26) + b | 0;
            d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
            d  = (d << 10 | d >>> 22) + a | 0;
            c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
            c  = (c << 15 | c >>> 17) + d | 0;
            b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
            b  = (b << 21 |b >>> 11) + c | 0;
            a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
            a  = (a << 6 | a >>> 26) + b | 0;
            d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
            d  = (d << 10 | d >>> 22) + a | 0;
            c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
            c  = (c << 15 | c >>> 17) + d | 0;
            b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
            b  = (b << 21 |b >>> 11) + c | 0;
            a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
            a  = (a << 6 | a >>> 26) + b | 0;
            d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
            d  = (d << 10 | d >>> 22) + a | 0;
            c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
            c  = (c << 15 | c >>> 17) + d | 0;
            b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
            b  = (b << 21 | b >>> 11) + c | 0;

            x[0] = a + x[0] | 0;
            x[1] = b + x[1] | 0;
            x[2] = c + x[2] | 0;
            x[3] = d + x[3] | 0;
        }

        function md5blk(s) {
            var md5blks = [],
                i; /* Andy King said do it this way. */

            for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
            }
            return md5blks;
        }

        function md5blk_array(a) {
            var md5blks = [],
                i; /* Andy King said do it this way. */

            for (i = 0; i < 64; i += 4) {
                md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
            }
            return md5blks;
        }

        function md51(s) {
            var n = s.length,
                state = [1732584193, -271733879, -1732584194, 271733878],
                i,
                length,
                tail,
                tmp,
                lo,
                hi;

            for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk(s.substring(i - 64, i)));
            }
            s = s.substring(i - 64);
            length = s.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
            }
            tail[i >> 2] |= 0x80 << ((i % 4) << 3);
            if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                    tail[i] = 0;
                }
            }

            // Beware that the final length might not fit in 32 bits so we take care of that
            tmp = n * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;

            tail[14] = lo;
            tail[15] = hi;

            md5cycle(state, tail);
            return state;
        }

        function md51_array(a) {
            var n = a.length,
                state = [1732584193, -271733879, -1732584194, 271733878],
                i,
                length,
                tail,
                tmp,
                lo,
                hi;

            for (i = 64; i <= n; i += 64) {
                md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
            }

            // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
            // containing the last element of the parent array if the sub array specified starts
            // beyond the length of the parent array - weird.
            // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
            a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

            length = a.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= a[i] << ((i % 4) << 3);
            }

            tail[i >> 2] |= 0x80 << ((i % 4) << 3);
            if (i > 55) {
                md5cycle(state, tail);
                for (i = 0; i < 16; i += 1) {
                    tail[i] = 0;
                }
            }

            // Beware that the final length might not fit in 32 bits so we take care of that
            tmp = n * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;

            tail[14] = lo;
            tail[15] = hi;

            md5cycle(state, tail);

            return state;
        }

        function rhex(n) {
            var s = '',
                j;
            for (j = 0; j < 4; j += 1) {
                s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
            }
            return s;
        }

        function hex(x) {
            var i;
            for (i = 0; i < x.length; i += 1) {
                x[i] = rhex(x[i]);
            }
            return x.join('');
        }

        // In some cases the fast add32 function cannot be used..
        if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') ;

        // ---------------------------------------------------

        /**
         * ArrayBuffer slice polyfill.
         *
         * @see https://github.com/ttaubert/node-arraybuffer-slice
         */

        if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
            (function () {
                function clamp(val, length) {
                    val = (val | 0) || 0;

                    if (val < 0) {
                        return Math.max(val + length, 0);
                    }

                    return Math.min(val, length);
                }

                ArrayBuffer.prototype.slice = function (from, to) {
                    var length = this.byteLength,
                        begin = clamp(from, length),
                        end = length,
                        num,
                        target,
                        targetArray,
                        sourceArray;

                    if (to !== undefined) {
                        end = clamp(to, length);
                    }

                    if (begin > end) {
                        return new ArrayBuffer(0);
                    }

                    num = end - begin;
                    target = new ArrayBuffer(num);
                    targetArray = new Uint8Array(target);

                    sourceArray = new Uint8Array(this, begin, num);
                    targetArray.set(sourceArray);

                    return target;
                };
            })();
        }

        // ---------------------------------------------------

        /**
         * Helpers.
         */

        function toUtf8(str) {
            if (/[\u0080-\uFFFF]/.test(str)) {
                str = unescape(encodeURIComponent(str));
            }

            return str;
        }

        function utf8Str2ArrayBuffer(str, returnUInt8Array) {
            var length = str.length,
               buff = new ArrayBuffer(length),
               arr = new Uint8Array(buff),
               i;

            for (i = 0; i < length; i += 1) {
                arr[i] = str.charCodeAt(i);
            }

            return returnUInt8Array ? arr : buff;
        }

        function arrayBuffer2Utf8Str(buff) {
            return String.fromCharCode.apply(null, new Uint8Array(buff));
        }

        function concatenateArrayBuffers(first, second, returnUInt8Array) {
            var result = new Uint8Array(first.byteLength + second.byteLength);

            result.set(new Uint8Array(first));
            result.set(new Uint8Array(second), first.byteLength);

            return returnUInt8Array ? result : result.buffer;
        }

        function hexToBinaryString(hex) {
            var bytes = [],
                length = hex.length,
                x;

            for (x = 0; x < length - 1; x += 2) {
                bytes.push(parseInt(hex.substr(x, 2), 16));
            }

            return String.fromCharCode.apply(String, bytes);
        }

        // ---------------------------------------------------

        /**
         * SparkMD5 OOP implementation.
         *
         * Use this class to perform an incremental md5, otherwise use the
         * static methods instead.
         */

        function SparkMD5() {
            // call reset to init the instance
            this.reset();
        }

        /**
         * Appends a string.
         * A conversion will be applied if an utf8 string is detected.
         *
         * @param {String} str The string to be appended
         *
         * @return {SparkMD5} The instance itself
         */
        SparkMD5.prototype.append = function (str) {
            // Converts the string to utf8 bytes if necessary
            // Then append as binary
            this.appendBinary(toUtf8(str));

            return this;
        };

        /**
         * Appends a binary string.
         *
         * @param {String} contents The binary string to be appended
         *
         * @return {SparkMD5} The instance itself
         */
        SparkMD5.prototype.appendBinary = function (contents) {
            this._buff += contents;
            this._length += contents.length;

            var length = this._buff.length,
                i;

            for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
            }

            this._buff = this._buff.substring(i - 64);

            return this;
        };

        /**
         * Finishes the incremental computation, reseting the internal state and
         * returning the result.
         *
         * @param {Boolean} raw True to get the raw string, false to get the hex string
         *
         * @return {String} The result
         */
        SparkMD5.prototype.end = function (raw) {
            var buff = this._buff,
                length = buff.length,
                i,
                tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                ret;

            for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
            }

            this._finish(tail, length);
            ret = hex(this._hash);

            if (raw) {
                ret = hexToBinaryString(ret);
            }

            this.reset();

            return ret;
        };

        /**
         * Resets the internal state of the computation.
         *
         * @return {SparkMD5} The instance itself
         */
        SparkMD5.prototype.reset = function () {
            this._buff = '';
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];

            return this;
        };

        /**
         * Gets the internal state of the computation.
         *
         * @return {Object} The state
         */
        SparkMD5.prototype.getState = function () {
            return {
                buff: this._buff,
                length: this._length,
                hash: this._hash
            };
        };

        /**
         * Gets the internal state of the computation.
         *
         * @param {Object} state The state
         *
         * @return {SparkMD5} The instance itself
         */
        SparkMD5.prototype.setState = function (state) {
            this._buff = state.buff;
            this._length = state.length;
            this._hash = state.hash;

            return this;
        };

        /**
         * Releases memory used by the incremental buffer and other additional
         * resources. If you plan to use the instance again, use reset instead.
         */
        SparkMD5.prototype.destroy = function () {
            delete this._hash;
            delete this._buff;
            delete this._length;
        };

        /**
         * Finish the final calculation based on the tail.
         *
         * @param {Array}  tail   The tail (will be modified)
         * @param {Number} length The length of the remaining buffer
         */
        SparkMD5.prototype._finish = function (tail, length) {
            var i = length,
                tmp,
                lo,
                hi;

            tail[i >> 2] |= 0x80 << ((i % 4) << 3);
            if (i > 55) {
                md5cycle(this._hash, tail);
                for (i = 0; i < 16; i += 1) {
                    tail[i] = 0;
                }
            }

            // Do the final computation based on the tail and length
            // Beware that the final length may not fit in 32 bits so we take care of that
            tmp = this._length * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi = parseInt(tmp[1], 16) || 0;

            tail[14] = lo;
            tail[15] = hi;
            md5cycle(this._hash, tail);
        };

        /**
         * Performs the md5 hash on a string.
         * A conversion will be applied if utf8 string is detected.
         *
         * @param {String}  str The string
         * @param {Boolean} raw True to get the raw string, false to get the hex string
         *
         * @return {String} The result
         */
        SparkMD5.hash = function (str, raw) {
            // Converts the string to utf8 bytes if necessary
            // Then compute it using the binary function
            return SparkMD5.hashBinary(toUtf8(str), raw);
        };

        /**
         * Performs the md5 hash on a binary string.
         *
         * @param {String}  content The binary string
         * @param {Boolean} raw     True to get the raw string, false to get the hex string
         *
         * @return {String} The result
         */
        SparkMD5.hashBinary = function (content, raw) {
            var hash = md51(content),
                ret = hex(hash);

            return raw ? hexToBinaryString(ret) : ret;
        };

        // ---------------------------------------------------

        /**
         * SparkMD5 OOP implementation for array buffers.
         *
         * Use this class to perform an incremental md5 ONLY for array buffers.
         */
        SparkMD5.ArrayBuffer = function () {
            // call reset to init the instance
            this.reset();
        };

        /**
         * Appends an array buffer.
         *
         * @param {ArrayBuffer} arr The array to be appended
         *
         * @return {SparkMD5.ArrayBuffer} The instance itself
         */
        SparkMD5.ArrayBuffer.prototype.append = function (arr) {
            var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
                length = buff.length,
                i;

            this._length += arr.byteLength;

            for (i = 64; i <= length; i += 64) {
                md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
            }

            this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

            return this;
        };

        /**
         * Finishes the incremental computation, reseting the internal state and
         * returning the result.
         *
         * @param {Boolean} raw True to get the raw string, false to get the hex string
         *
         * @return {String} The result
         */
        SparkMD5.ArrayBuffer.prototype.end = function (raw) {
            var buff = this._buff,
                length = buff.length,
                tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                i,
                ret;

            for (i = 0; i < length; i += 1) {
                tail[i >> 2] |= buff[i] << ((i % 4) << 3);
            }

            this._finish(tail, length);
            ret = hex(this._hash);

            if (raw) {
                ret = hexToBinaryString(ret);
            }

            this.reset();

            return ret;
        };

        /**
         * Resets the internal state of the computation.
         *
         * @return {SparkMD5.ArrayBuffer} The instance itself
         */
        SparkMD5.ArrayBuffer.prototype.reset = function () {
            this._buff = new Uint8Array(0);
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];

            return this;
        };

        /**
         * Gets the internal state of the computation.
         *
         * @return {Object} The state
         */
        SparkMD5.ArrayBuffer.prototype.getState = function () {
            var state = SparkMD5.prototype.getState.call(this);

            // Convert buffer to a string
            state.buff = arrayBuffer2Utf8Str(state.buff);

            return state;
        };

        /**
         * Gets the internal state of the computation.
         *
         * @param {Object} state The state
         *
         * @return {SparkMD5.ArrayBuffer} The instance itself
         */
        SparkMD5.ArrayBuffer.prototype.setState = function (state) {
            // Convert string to buffer
            state.buff = utf8Str2ArrayBuffer(state.buff, true);

            return SparkMD5.prototype.setState.call(this, state);
        };

        SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

        SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

        /**
         * Performs the md5 hash on an array buffer.
         *
         * @param {ArrayBuffer} arr The array buffer
         * @param {Boolean}     raw True to get the raw string, false to get the hex one
         *
         * @return {String} The result
         */
        SparkMD5.ArrayBuffer.hash = function (arr, raw) {
            var hash = md51_array(new Uint8Array(arr)),
                ret = hex(hash);

            return raw ? hexToBinaryString(ret) : ret;
        };

        return SparkMD5;
    }));

    },{}],7:[function(_dereq_,module,exports){
    var v1 = _dereq_(10);
    var v4 = _dereq_(11);

    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;

    module.exports = uuid;

    },{"10":10,"11":11}],8:[function(_dereq_,module,exports){
    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]];
    }

    module.exports = bytesToUuid;

    },{}],9:[function(_dereq_,module,exports){
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection

    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                          (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
    if (getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

      module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
      };
    } else {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);

      module.exports = function mathRNG() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }

    },{}],10:[function(_dereq_,module,exports){
    var rng = _dereq_(9);
    var bytesToUuid = _dereq_(8);

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    var _nodeId;
    var _clockseq;

    // Previous uuid creation time
    var _lastMSecs = 0;
    var _lastNSecs = 0;

    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};
      var node = options.node || _nodeId;
      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // node and clockseq need to be initialized to random values if they're not
      // specified.  We do this lazily to minimize issues related to insufficient
      // system entropy.  See #189
      if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) {
          // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
          node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
          ];
        }
        if (clockseq == null) {
          // Per 4.2.2, randomize (14 bit) clockseq
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
        }
      }

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid(b);
    }

    module.exports = v1;

    },{"8":8,"9":9}],11:[function(_dereq_,module,exports){
    var rng = _dereq_(9);
    var bytesToUuid = _dereq_(8);

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options === 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rng)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid(rnds);
    }

    module.exports = v4;

    },{"8":8,"9":9}],12:[function(_dereq_,module,exports){

    /**
     * Stringify/parse functions that don't operate
     * recursively, so they avoid call stack exceeded
     * errors.
     */
    exports.stringify = function stringify(input) {
      var queue = [];
      queue.push({obj: input});

      var res = '';
      var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;
      while ((next = queue.pop())) {
        obj = next.obj;
        prefix = next.prefix || '';
        val = next.val || '';
        res += prefix;
        if (val) {
          res += val;
        } else if (typeof obj !== 'object') {
          res += typeof obj === 'undefined' ? null : JSON.stringify(obj);
        } else if (obj === null) {
          res += 'null';
        } else if (Array.isArray(obj)) {
          queue.push({val: ']'});
          for (i = obj.length - 1; i >= 0; i--) {
            arrayPrefix = i === 0 ? '' : ',';
            queue.push({obj: obj[i], prefix: arrayPrefix});
          }
          queue.push({val: '['});
        } else { // object
          keys = [];
          for (k in obj) {
            if (obj.hasOwnProperty(k)) {
              keys.push(k);
            }
          }
          queue.push({val: '}'});
          for (i = keys.length - 1; i >= 0; i--) {
            key = keys[i];
            value = obj[key];
            objPrefix = (i > 0 ? ',' : '');
            objPrefix += JSON.stringify(key) + ':';
            queue.push({obj: value, prefix: objPrefix});
          }
          queue.push({val: '{'});
        }
      }
      return res;
    };

    // Convenience function for the parse function.
    // This pop function is basically copied from
    // pouchCollate.parseIndexableString
    function pop(obj, stack, metaStack) {
      var lastMetaElement = metaStack[metaStack.length - 1];
      if (obj === lastMetaElement.element) {
        // popping a meta-element, e.g. an object whose value is another object
        metaStack.pop();
        lastMetaElement = metaStack[metaStack.length - 1];
      }
      var element = lastMetaElement.element;
      var lastElementIndex = lastMetaElement.index;
      if (Array.isArray(element)) {
        element.push(obj);
      } else if (lastElementIndex === stack.length - 2) { // obj with key+value
        var key = stack.pop();
        element[key] = obj;
      } else {
        stack.push(obj); // obj with key only
      }
    }

    exports.parse = function (str) {
      var stack = [];
      var metaStack = []; // stack for arrays and objects
      var i = 0;
      var collationIndex,parsedNum,numChar;
      var parsedString,lastCh,numConsecutiveSlashes,ch;
      var arrayElement, objElement;
      while (true) {
        collationIndex = str[i++];
        if (collationIndex === '}' ||
            collationIndex === ']' ||
            typeof collationIndex === 'undefined') {
          if (stack.length === 1) {
            return stack.pop();
          } else {
            pop(stack.pop(), stack, metaStack);
            continue;
          }
        }
        switch (collationIndex) {
          case ' ':
          case '\t':
          case '\n':
          case ':':
          case ',':
            break;
          case 'n':
            i += 3; // 'ull'
            pop(null, stack, metaStack);
            break;
          case 't':
            i += 3; // 'rue'
            pop(true, stack, metaStack);
            break;
          case 'f':
            i += 4; // 'alse'
            pop(false, stack, metaStack);
            break;
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case '-':
            parsedNum = '';
            i--;
            while (true) {
              numChar = str[i++];
              if (/[\d\.\-e\+]/.test(numChar)) {
                parsedNum += numChar;
              } else {
                i--;
                break;
              }
            }
            pop(parseFloat(parsedNum), stack, metaStack);
            break;
          case '"':
            parsedString = '';
            lastCh = void 0;
            numConsecutiveSlashes = 0;
            while (true) {
              ch = str[i++];
              if (ch !== '"' || (lastCh === '\\' &&
                  numConsecutiveSlashes % 2 === 1)) {
                parsedString += ch;
                lastCh = ch;
                if (lastCh === '\\') {
                  numConsecutiveSlashes++;
                } else {
                  numConsecutiveSlashes = 0;
                }
              } else {
                break;
              }
            }
            pop(JSON.parse('"' + parsedString + '"'), stack, metaStack);
            break;
          case '[':
            arrayElement = { element: [], index: stack.length };
            stack.push(arrayElement.element);
            metaStack.push(arrayElement);
            break;
          case '{':
            objElement = { element: {}, index: stack.length };
            stack.push(objElement.element);
            metaStack.push(objElement);
            break;
          default:
            throw new Error(
              'unexpectedly reached end of input: ' + collationIndex);
        }
      }
    };

    },{}],13:[function(_dereq_,module,exports){
    (function (process,global){

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var getArguments = _interopDefault(_dereq_(1));
    var nextTick = _interopDefault(_dereq_(3));
    var events = _dereq_(2);
    var inherits = _interopDefault(_dereq_(4));
    var Md5 = _interopDefault(_dereq_(6));
    var uuidV4 = _interopDefault(_dereq_(7));
    var vuvuzela = _interopDefault(_dereq_(12));

    function isBinaryObject(object) {
      return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||
        (typeof Blob !== 'undefined' && object instanceof Blob);
    }

    function cloneArrayBuffer(buff) {
      if (typeof buff.slice === 'function') {
        return buff.slice(0);
      }
      // IE10-11 slice() polyfill
      var target = new ArrayBuffer(buff.byteLength);
      var targetArray = new Uint8Array(target);
      var sourceArray = new Uint8Array(buff);
      targetArray.set(sourceArray);
      return target;
    }

    function cloneBinaryObject(object) {
      if (object instanceof ArrayBuffer) {
        return cloneArrayBuffer(object);
      }
      var size = object.size;
      var type = object.type;
      // Blob
      if (typeof object.slice === 'function') {
        return object.slice(0, size, type);
      }
      // PhantomJS slice() replacement
      return object.webkitSlice(0, size, type);
    }

    // most of this is borrowed from lodash.isPlainObject:
    // https://github.com/fis-components/lodash.isplainobject/
    // blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js

    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);

    function isPlainObject(value) {
      var proto = Object.getPrototypeOf(value);
      /* istanbul ignore if */
      if (proto === null) { // not sure when this happens, but I guess it can
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    function clone(object) {
      var newObject;
      var i;
      var len;

      if (!object || typeof object !== 'object') {
        return object;
      }

      if (Array.isArray(object)) {
        newObject = [];
        for (i = 0, len = object.length; i < len; i++) {
          newObject[i] = clone(object[i]);
        }
        return newObject;
      }

      // special case: to avoid inconsistencies between IndexedDB
      // and other backends, we automatically stringify Dates
      if (object instanceof Date) {
        return object.toISOString();
      }

      if (isBinaryObject(object)) {
        return cloneBinaryObject(object);
      }

      if (!isPlainObject(object)) {
        return object; // don't clone objects like Workers
      }

      newObject = {};
      for (i in object) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(object, i)) {
          var value = clone(object[i]);
          if (typeof value !== 'undefined') {
            newObject[i] = value;
          }
        }
      }
      return newObject;
    }

    function once(fun) {
      var called = false;
      return getArguments(function (args) {
        /* istanbul ignore if */
        if (called) {
          // this is a smoke test and should never actually happen
          throw new Error('once called more than once');
        } else {
          called = true;
          fun.apply(this, args);
        }
      });
    }

    function toPromise(func) {
      //create the function we will be returning
      return getArguments(function (args) {
        // Clone arguments
        args = clone(args);
        var self = this;
        // if the last argument is a function, assume its a callback
        var usedCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;
        var promise = new Promise(function (fulfill, reject) {
          var resp;
          try {
            var callback = once(function (err, mesg) {
              if (err) {
                reject(err);
              } else {
                fulfill(mesg);
              }
            });
            // create a callback for this invocation
            // apply the function in the orig context
            args.push(callback);
            resp = func.apply(self, args);
            if (resp && typeof resp.then === 'function') {
              fulfill(resp);
            }
          } catch (e) {
            reject(e);
          }
        });
        // if there is a callback, call it back
        if (usedCB) {
          promise.then(function (result) {
            usedCB(null, result);
          }, usedCB);
        }
        return promise;
      });
    }

    function logApiCall(self, name, args) {
      /* istanbul ignore if */
      if (self.constructor.listeners('debug').length) {
        var logArgs = ['api', self.name, name];
        for (var i = 0; i < args.length - 1; i++) {
          logArgs.push(args[i]);
        }
        self.constructor.emit('debug', logArgs);

        // override the callback itself to log the response
        var origCallback = args[args.length - 1];
        args[args.length - 1] = function (err, res) {
          var responseArgs = ['api', self.name, name];
          responseArgs = responseArgs.concat(
            err ? ['error', err] : ['success', res]
          );
          self.constructor.emit('debug', responseArgs);
          origCallback(err, res);
        };
      }
    }

    function adapterFun(name, callback) {
      return toPromise(getArguments(function (args) {
        if (this._closed) {
          return Promise.reject(new Error('database is closed'));
        }
        if (this._destroyed) {
          return Promise.reject(new Error('database is destroyed'));
        }
        var self = this;
        logApiCall(self, name, args);
        if (!this.taskqueue.isReady) {
          return new Promise(function (fulfill, reject) {
            self.taskqueue.addTask(function (failed) {
              if (failed) {
                reject(failed);
              } else {
                fulfill(self[name].apply(self, args));
              }
            });
          });
        }
        return callback.apply(this, args);
      }));
    }

    function mangle(key) {
      return '$' + key;
    }
    function unmangle(key) {
      return key.substring(1);
    }
    function Map$1() {
      this._store = {};
    }
    Map$1.prototype.get = function (key) {
      var mangled = mangle(key);
      return this._store[mangled];
    };
    Map$1.prototype.set = function (key, value) {
      var mangled = mangle(key);
      this._store[mangled] = value;
      return true;
    };
    Map$1.prototype.has = function (key) {
      var mangled = mangle(key);
      return mangled in this._store;
    };
    Map$1.prototype["delete"] = function (key) {
      var mangled = mangle(key);
      var res = mangled in this._store;
      delete this._store[mangled];
      return res;
    };
    Map$1.prototype.forEach = function (cb) {
      var keys = Object.keys(this._store);
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        var value = this._store[key];
        key = unmangle(key);
        cb(value, key);
      }
    };
    Object.defineProperty(Map$1.prototype, 'size', {
      get: function () {
        return Object.keys(this._store).length;
      }
    });

    function Set$1(array) {
      this._store = new Map$1();

      // init with an array
      if (array && Array.isArray(array)) {
        for (var i = 0, len = array.length; i < len; i++) {
          this.add(array[i]);
        }
      }
    }
    Set$1.prototype.add = function (key) {
      return this._store.set(key, true);
    };
    Set$1.prototype.has = function (key) {
      return this._store.has(key);
    };
    Set$1.prototype.forEach = function (cb) {
      this._store.forEach(function (value, key) {
        cb(key);
      });
    };
    Object.defineProperty(Set$1.prototype, 'size', {
      get: function () {
        return this._store.size;
      }
    });

    /* global Map,Set,Symbol */
    // Based on https://kangax.github.io/compat-table/es6/ we can sniff out
    // incomplete Map/Set implementations which would otherwise cause our tests to fail.
    // Notably they fail in IE11 and iOS 8.4, which this prevents.
    function supportsMapAndSet() {
      if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {
        return false;
      }
      var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);
      return prop && 'get' in prop && Map[Symbol.species] === Map;
    }

    // based on https://github.com/montagejs/collections

    var ExportedSet;
    var ExportedMap;

    {
      if (supportsMapAndSet()) { // prefer built-in Map/Set
        ExportedSet = Set;
        ExportedMap = Map;
      } else { // fall back to our polyfill
        ExportedSet = Set$1;
        ExportedMap = Map$1;
      }
    }

    // like underscore/lodash _.pick()
    function pick(obj, arr) {
      var res = {};
      for (var i = 0, len = arr.length; i < len; i++) {
        var prop = arr[i];
        if (prop in obj) {
          res[prop] = obj[prop];
        }
      }
      return res;
    }

    // Most browsers throttle concurrent requests at 6, so it's silly
    // to shim _bulk_get by trying to launch potentially hundreds of requests
    // and then letting the majority time out. We can handle this ourselves.
    var MAX_NUM_CONCURRENT_REQUESTS = 6;

    function identityFunction(x) {
      return x;
    }

    function formatResultForOpenRevsGet(result) {
      return [{
        ok: result
      }];
    }

    // shim for P/CouchDB adapters that don't directly implement _bulk_get
    function bulkGet(db, opts, callback) {
      var requests = opts.docs;

      // consolidate into one request per doc if possible
      var requestsById = new ExportedMap();
      requests.forEach(function (request) {
        if (requestsById.has(request.id)) {
          requestsById.get(request.id).push(request);
        } else {
          requestsById.set(request.id, [request]);
        }
      });

      var numDocs = requestsById.size;
      var numDone = 0;
      var perDocResults = new Array(numDocs);

      function collapseResultsAndFinish() {
        var results = [];
        perDocResults.forEach(function (res) {
          res.docs.forEach(function (info) {
            results.push({
              id: res.id,
              docs: [info]
            });
          });
        });
        callback(null, {results: results});
      }

      function checkDone() {
        if (++numDone === numDocs) {
          collapseResultsAndFinish();
        }
      }

      function gotResult(docIndex, id, docs) {
        perDocResults[docIndex] = {id: id, docs: docs};
        checkDone();
      }

      var allRequests = [];
      requestsById.forEach(function (value, key) {
        allRequests.push(key);
      });

      var i = 0;

      function nextBatch() {

        if (i >= allRequests.length) {
          return;
        }

        var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);
        var batch = allRequests.slice(i, upTo);
        processBatch(batch, i);
        i += batch.length;
      }

      function processBatch(batch, offset) {
        batch.forEach(function (docId, j) {
          var docIdx = offset + j;
          var docRequests = requestsById.get(docId);

          // just use the first request as the "template"
          // TODO: The _bulk_get API allows for more subtle use cases than this,
          // but for now it is unlikely that there will be a mix of different
          // "atts_since" or "attachments" in the same request, since it's just
          // replicate.js that is using this for the moment.
          // Also, atts_since is aspirational, since we don't support it yet.
          var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);
          docOpts.open_revs = docRequests.map(function (request) {
            // rev is optional, open_revs disallowed
            return request.rev;
          });

          // remove falsey / undefined revisions
          docOpts.open_revs = docOpts.open_revs.filter(identityFunction);

          var formatResult = identityFunction;

          if (docOpts.open_revs.length === 0) {
            delete docOpts.open_revs;

            // when fetching only the "winning" leaf,
            // transform the result so it looks like an open_revs
            // request
            formatResult = formatResultForOpenRevsGet;
          }

          // globally-supplied options
          ['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(function (param) {
            if (param in opts) {
              docOpts[param] = opts[param];
            }
          });
          db.get(docId, docOpts, function (err, res) {
            var result;
            /* istanbul ignore if */
            if (err) {
              result = [{error: err}];
            } else {
              result = formatResult(res);
            }
            gotResult(docIdx, docId, result);
            nextBatch();
          });
        });
      }

      nextBatch();

    }

    var hasLocal;

    try {
      localStorage.setItem('_pouch_check_localstorage', 1);
      hasLocal = !!localStorage.getItem('_pouch_check_localstorage');
    } catch (e) {
      hasLocal = false;
    }

    function hasLocalStorage() {
      return hasLocal;
    }

    // Custom nextTick() shim for browsers. In node, this will just be process.nextTick(). We

    inherits(Changes, events.EventEmitter);

    /* istanbul ignore next */
    function attachBrowserEvents(self) {
      if (hasLocalStorage()) {
        addEventListener("storage", function (e) {
          self.emit(e.key);
        });
      }
    }

    function Changes() {
      events.EventEmitter.call(this);
      this._listeners = {};

      attachBrowserEvents(this);
    }
    Changes.prototype.addListener = function (dbName, id, db, opts) {
      /* istanbul ignore if */
      if (this._listeners[id]) {
        return;
      }
      var self = this;
      var inprogress = false;
      function eventFunction() {
        /* istanbul ignore if */
        if (!self._listeners[id]) {
          return;
        }
        if (inprogress) {
          inprogress = 'waiting';
          return;
        }
        inprogress = true;
        var changesOpts = pick(opts, [
          'style', 'include_docs', 'attachments', 'conflicts', 'filter',
          'doc_ids', 'view', 'since', 'query_params', 'binary', 'return_docs'
        ]);

        /* istanbul ignore next */
        function onError() {
          inprogress = false;
        }

        db.changes(changesOpts).on('change', function (c) {
          if (c.seq > opts.since && !opts.cancelled) {
            opts.since = c.seq;
            opts.onChange(c);
          }
        }).on('complete', function () {
          if (inprogress === 'waiting') {
            nextTick(eventFunction);
          }
          inprogress = false;
        }).on('error', onError);
      }
      this._listeners[id] = eventFunction;
      this.on(dbName, eventFunction);
    };

    Changes.prototype.removeListener = function (dbName, id) {
      /* istanbul ignore if */
      if (!(id in this._listeners)) {
        return;
      }
      events.EventEmitter.prototype.removeListener.call(this, dbName,
        this._listeners[id]);
      delete this._listeners[id];
    };


    /* istanbul ignore next */
    Changes.prototype.notifyLocalWindows = function (dbName) {
      //do a useless change on a storage thing
      //in order to get other windows's listeners to activate
      if (hasLocalStorage()) {
        localStorage[dbName] = (localStorage[dbName] === "a") ? "b" : "a";
      }
    };

    Changes.prototype.notify = function (dbName) {
      this.emit(dbName);
      this.notifyLocalWindows(dbName);
    };

    function guardedConsole(method) {
      /* istanbul ignore else */
      if (typeof console !== 'undefined' && typeof console[method] === 'function') {
        var args = Array.prototype.slice.call(arguments, 1);
        console[method].apply(console, args);
      }
    }

    function randomNumber(min, max) {
      var maxTimeout = 600000; // Hard-coded default of 10 minutes
      min = parseInt(min, 10) || 0;
      max = parseInt(max, 10);
      if (max !== max || max <= min) {
        max = (min || 1) << 1; //doubling
      } else {
        max = max + 1;
      }
      // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout
      if (max > maxTimeout) {
        min = maxTimeout >> 1; // divide by two
        max = maxTimeout;
      }
      var ratio = Math.random();
      var range = max - min;

      return ~~(range * ratio + min); // ~~ coerces to an int, but fast.
    }

    function defaultBackOff(min) {
      var max = 0;
      if (!min) {
        max = 2000;
      }
      return randomNumber(min, max);
    }

    // designed to give info to browser users, who are disturbed
    // when they see http errors in the console
    function explainError(status, str) {
      guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);
    }

    var assign;
    {
      if (typeof Object.assign === 'function') {
        assign = Object.assign;
      } else {
        // lite Object.assign polyfill based on
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
        assign = function (target) {
          var to = Object(target);

          for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) { // Skip over if undefined or null
              for (var nextKey in nextSource) {
                // Avoid bugs when hasOwnProperty is shadowed
                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
          }
          return to;
        };
      }
    }

    var $inject_Object_assign = assign;

    inherits(PouchError, Error);

    function PouchError(status, error, reason) {
      Error.call(this, reason);
      this.status = status;
      this.name = error;
      this.message = reason;
      this.error = true;
    }

    PouchError.prototype.toString = function () {
      return JSON.stringify({
        status: this.status,
        name: this.name,
        message: this.message,
        reason: this.reason
      });
    };

    var UNAUTHORIZED = new PouchError(401, 'unauthorized', "Name or password is incorrect.");
    var MISSING_BULK_DOCS = new PouchError(400, 'bad_request', "Missing JSON list of 'docs'");
    var MISSING_DOC = new PouchError(404, 'not_found', 'missing');
    var REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');
    var INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');
    var MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');
    var RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');
    var NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');
    var UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');
    var BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');
    var INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');
    var QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');
    var DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');
    var BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');
    var NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');
    var DB_MISSING = new PouchError(404, 'not_found', 'Database not found');
    var IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');
    var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');
    var LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');
    var FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');
    var INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');
    var FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');
    var MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\'t found');
    var INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');

    function createError(error, reason) {
      function CustomPouchError(reason) {
        // inherit error properties from our parent error manually
        // so as to allow proper JSON parsing.
        /* jshint ignore:start */
        for (var p in error) {
          if (typeof error[p] !== 'function') {
            this[p] = error[p];
          }
        }
        /* jshint ignore:end */
        if (reason !== undefined) {
          this.reason = reason;
        }
      }
      CustomPouchError.prototype = PouchError.prototype;
      return new CustomPouchError(reason);
    }

    function generateErrorFromResponse(err) {

      if (typeof err !== 'object') {
        var data = err;
        err = UNKNOWN_ERROR;
        err.data = data;
      }

      if ('error' in err && err.error === 'conflict') {
        err.name = 'conflict';
        err.status = 409;
      }

      if (!('name' in err)) {
        err.name = err.error || 'unknown';
      }

      if (!('status' in err)) {
        err.status = 500;
      }

      if (!('message' in err)) {
        err.message = err.message || err.reason;
      }

      return err;
    }

    function tryFilter(filter, doc, req) {
      try {
        return !filter(doc, req);
      } catch (err) {
        var msg = 'Filter function threw: ' + err.toString();
        return createError(BAD_REQUEST, msg);
      }
    }

    function filterChange(opts) {
      var req = {};
      var hasFilter = opts.filter && typeof opts.filter === 'function';
      req.query = opts.query_params;

      return function filter(change) {
        if (!change.doc) {
          // CSG sends events on the changes feed that don't have documents,
          // this hack makes a whole lot of existing code robust.
          change.doc = {};
        }

        var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);

        if (typeof filterReturn === 'object') {
          return filterReturn;
        }

        if (filterReturn) {
          return false;
        }

        if (!opts.include_docs) {
          delete change.doc;
        } else if (!opts.attachments) {
          for (var att in change.doc._attachments) {
            /* istanbul ignore else */
            if (change.doc._attachments.hasOwnProperty(att)) {
              change.doc._attachments[att].stub = true;
            }
          }
        }
        return true;
      };
    }

    function flatten(arrs) {
      var res = [];
      for (var i = 0, len = arrs.length; i < len; i++) {
        res = res.concat(arrs[i]);
      }
      return res;
    }

    // shim for Function.prototype.name,

    // Determine id an ID is valid
    //   - invalid IDs begin with an underescore that does not begin '_design' or
    //     '_local'
    //   - any other string value is a valid id
    // Returns the specific error object for each case
    function invalidIdError(id) {
      var err;
      if (!id) {
        err = createError(MISSING_ID);
      } else if (typeof id !== 'string') {
        err = createError(INVALID_ID);
      } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {
        err = createError(RESERVED_ID);
      }
      if (err) {
        throw err;
      }
    }

    // Checks if a PouchDB object is "remote" or not. This is

    function isRemote(db) {
      if (typeof db._remote === 'boolean') {
        return db._remote;
      }
      /* istanbul ignore next */
      if (typeof db.type === 'function') {
        guardedConsole('warn',
          'db.type() is deprecated and will be removed in ' +
          'a future version of PouchDB');
        return db.type() === 'http';
      }
      /* istanbul ignore next */
      return false;
    }

    function listenerCount(ee, type) {
      return 'listenerCount' in ee ? ee.listenerCount(type) :
                                     events.EventEmitter.listenerCount(ee, type);
    }

    function parseDesignDocFunctionName(s) {
      if (!s) {
        return null;
      }
      var parts = s.split('/');
      if (parts.length === 2) {
        return parts;
      }
      if (parts.length === 1) {
        return [s, s];
      }
      return null;
    }

    function normalizeDesignDocFunctionName(s) {
      var normalized = parseDesignDocFunctionName(s);
      return normalized ? normalized.join('/') : null;
    }

    // originally parseUri 1.2.2, now patched by us
    // (c) Steven Levithan <stevenlevithan.com>
    // MIT License
    var keys = ["source", "protocol", "authority", "userInfo", "user", "password",
        "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
    var qName ="queryKey";
    var qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;

    // use the "loose" parser
    /* eslint maxlen: 0, no-useless-escape: 0 */
    var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

    function parseUri(str) {
      var m = parser.exec(str);
      var uri = {};
      var i = 14;

      while (i--) {
        var key = keys[i];
        var value = m[i] || "";
        var encoded = ['user', 'password'].indexOf(key) !== -1;
        uri[key] = encoded ? decodeURIComponent(value) : value;
      }

      uri[qName] = {};
      uri[keys[12]].replace(qParser, function ($0, $1, $2) {
        if ($1) {
          uri[qName][$1] = $2;
        }
      });

      return uri;
    }

    // Based on https://github.com/alexdavid/scope-eval v0.0.3
    // (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)
    // This is basically just a wrapper around new Function()

    function scopeEval(source, scope) {
      var keys = [];
      var values = [];
      for (var key in scope) {
        if (scope.hasOwnProperty(key)) {
          keys.push(key);
          values.push(scope[key]);
        }
      }
      keys.push(source);
      return Function.apply(null, keys).apply(null, values);
    }

    // this is essentially the "update sugar" function from daleharvey/pouchdb#1388
    // the diffFun tells us what delta to apply to the doc.  it either returns
    // the doc, or false if it doesn't need to do an update after all
    function upsert(db, docId, diffFun) {
      return new Promise(function (fulfill, reject) {
        db.get(docId, function (err, doc) {
          if (err) {
            /* istanbul ignore next */
            if (err.status !== 404) {
              return reject(err);
            }
            doc = {};
          }

          // the user might change the _rev, so save it for posterity
          var docRev = doc._rev;
          var newDoc = diffFun(doc);

          if (!newDoc) {
            // if the diffFun returns falsy, we short-circuit as
            // an optimization
            return fulfill({updated: false, rev: docRev});
          }

          // users aren't allowed to modify these values,
          // so reset them here
          newDoc._id = docId;
          newDoc._rev = docRev;
          fulfill(tryAndPut(db, newDoc, diffFun));
        });
      });
    }

    function tryAndPut(db, doc, diffFun) {
      return db.put(doc).then(function (res) {
        return {
          updated: true,
          rev: res.rev
        };
      }, function (err) {
        /* istanbul ignore next */
        if (err.status !== 409) {
          throw err;
        }
        return upsert(db, doc._id, diffFun);
      });
    }

    var thisAtob = function (str) {
      return atob(str);
    };

    var thisBtoa = function (str) {
      return btoa(str);
    };

    // Abstracts constructing a Blob object, so it also works in older
    // browsers that don't support the native Blob constructor (e.g.
    // old QtWebKit versions, Android < 4.4).
    function createBlob(parts, properties) {
      /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
      parts = parts || [];
      properties = properties || {};
      try {
        return new Blob(parts, properties);
      } catch (e) {
        if (e.name !== "TypeError") {
          throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
                      typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
                      typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :
                      WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
          builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
      }
    }

    // From http://stackoverflow.com/questions/14967647/ (continues on next line)
    // encode-decode-image-with-base64-breaks-image (2013-04-21)
    function binaryStringToArrayBuffer(bin) {
      var length = bin.length;
      var buf = new ArrayBuffer(length);
      var arr = new Uint8Array(buf);
      for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
      }
      return buf;
    }

    function binStringToBluffer(binString, type) {
      return createBlob([binaryStringToArrayBuffer(binString)], {type: type});
    }

    function b64ToBluffer(b64, type) {
      return binStringToBluffer(thisAtob(b64), type);
    }

    //Can't find original post, but this is close
    //http://stackoverflow.com/questions/6965107/ (continues on next line)
    //converting-between-strings-and-arraybuffers
    function arrayBufferToBinaryString(buffer) {
      var binary = '';
      var bytes = new Uint8Array(buffer);
      var length = bytes.byteLength;
      for (var i = 0; i < length; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return binary;
    }

    // shim for browsers that don't support it
    function readAsBinaryString(blob, callback) {
      var reader = new FileReader();
      var hasBinaryString = typeof reader.readAsBinaryString === 'function';
      reader.onloadend = function (e) {
        var result = e.target.result || '';
        if (hasBinaryString) {
          return callback(result);
        }
        callback(arrayBufferToBinaryString(result));
      };
      if (hasBinaryString) {
        reader.readAsBinaryString(blob);
      } else {
        reader.readAsArrayBuffer(blob);
      }
    }

    function blobToBinaryString(blobOrBuffer, callback) {
      readAsBinaryString(blobOrBuffer, function (bin) {
        callback(bin);
      });
    }

    function blobToBase64(blobOrBuffer, callback) {
      blobToBinaryString(blobOrBuffer, function (base64) {
        callback(thisBtoa(base64));
      });
    }

    // simplified API. universal browser support is assumed
    function readAsArrayBuffer(blob, callback) {
      var reader = new FileReader();
      reader.onloadend = function (e) {
        var result = e.target.result || new ArrayBuffer(0);
        callback(result);
      };
      reader.readAsArrayBuffer(blob);
    }

    // this is not used in the browser

    var setImmediateShim = global.setImmediate || global.setTimeout;
    var MD5_CHUNK_SIZE = 32768;

    function rawToBase64(raw) {
      return thisBtoa(raw);
    }

    function sliceBlob(blob, start, end) {
      if (blob.webkitSlice) {
        return blob.webkitSlice(start, end);
      }
      return blob.slice(start, end);
    }

    function appendBlob(buffer, blob, start, end, callback) {
      if (start > 0 || end < blob.size) {
        // only slice blob if we really need to
        blob = sliceBlob(blob, start, end);
      }
      readAsArrayBuffer(blob, function (arrayBuffer) {
        buffer.append(arrayBuffer);
        callback();
      });
    }

    function appendString(buffer, string, start, end, callback) {
      if (start > 0 || end < string.length) {
        // only create a substring if we really need to
        string = string.substring(start, end);
      }
      buffer.appendBinary(string);
      callback();
    }

    function binaryMd5(data, callback) {
      var inputIsString = typeof data === 'string';
      var len = inputIsString ? data.length : data.size;
      var chunkSize = Math.min(MD5_CHUNK_SIZE, len);
      var chunks = Math.ceil(len / chunkSize);
      var currentChunk = 0;
      var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();

      var append = inputIsString ? appendString : appendBlob;

      function next() {
        setImmediateShim(loadNextChunk);
      }

      function done() {
        var raw = buffer.end(true);
        var base64 = rawToBase64(raw);
        callback(base64);
        buffer.destroy();
      }

      function loadNextChunk() {
        var start = currentChunk * chunkSize;
        var end = start + chunkSize;
        currentChunk++;
        if (currentChunk < chunks) {
          append(buffer, data, start, end, next);
        } else {
          append(buffer, data, start, end, done);
        }
      }
      loadNextChunk();
    }

    function stringMd5(string) {
      return Md5.hash(string);
    }

    function rev$$1(doc, deterministic_revs) {
      var clonedDoc = clone(doc);
      if (!deterministic_revs) {
        return uuidV4.v4().replace(/-/g, '').toLowerCase();
      }

      delete clonedDoc._rev_tree;
      return stringMd5(JSON.stringify(clonedDoc));
    }

    var uuid = uuidV4.v4;

    // We fetch all leafs of the revision tree, and sort them based on tree length
    // and whether they were deleted, undeleted documents with the longest revision
    // tree (most edits) win
    // The final sort algorithm is slightly documented in a sidebar here:
    // http://guide.couchdb.org/draft/conflicts.html
    function winningRev(metadata) {
      var winningId;
      var winningPos;
      var winningDeleted;
      var toVisit = metadata.rev_tree.slice();
      var node;
      while ((node = toVisit.pop())) {
        var tree = node.ids;
        var branches = tree[2];
        var pos = node.pos;
        if (branches.length) { // non-leaf
          for (var i = 0, len = branches.length; i < len; i++) {
            toVisit.push({pos: pos + 1, ids: branches[i]});
          }
          continue;
        }
        var deleted = !!tree[1].deleted;
        var id = tree[0];
        // sort by deleted, then pos, then id
        if (!winningId || (winningDeleted !== deleted ? winningDeleted :
            winningPos !== pos ? winningPos < pos : winningId < id)) {
          winningId = id;
          winningPos = pos;
          winningDeleted = deleted;
        }
      }

      return winningPos + '-' + winningId;
    }

    // Pretty much all below can be combined into a higher order function to
    // traverse revisions
    // The return value from the callback will be passed as context to all
    // children of that node
    function traverseRevTree(revs, callback) {
      var toVisit = revs.slice();

      var node;
      while ((node = toVisit.pop())) {
        var pos = node.pos;
        var tree = node.ids;
        var branches = tree[2];
        var newCtx =
          callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);
        for (var i = 0, len = branches.length; i < len; i++) {
          toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});
        }
      }
    }

    function sortByPos(a, b) {
      return a.pos - b.pos;
    }

    function collectLeaves(revs) {
      var leaves = [];
      traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {
        if (isLeaf) {
          leaves.push({rev: pos + "-" + id, pos: pos, opts: opts});
        }
      });
      leaves.sort(sortByPos).reverse();
      for (var i = 0, len = leaves.length; i < len; i++) {
        delete leaves[i].pos;
      }
      return leaves;
    }

    // returns revs of all conflicts that is leaves such that
    // 1. are not deleted and
    // 2. are different than winning revision
    function collectConflicts(metadata) {
      var win = winningRev(metadata);
      var leaves = collectLeaves(metadata.rev_tree);
      var conflicts = [];
      for (var i = 0, len = leaves.length; i < len; i++) {
        var leaf = leaves[i];
        if (leaf.rev !== win && !leaf.opts.deleted) {
          conflicts.push(leaf.rev);
        }
      }
      return conflicts;
    }

    // compact a tree by marking its non-leafs as missing,
    // and return a list of revs to delete
    function compactTree(metadata) {
      var revs = [];
      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                                   revHash, ctx, opts) {
        if (opts.status === 'available' && !isLeaf) {
          revs.push(pos + '-' + revHash);
          opts.status = 'missing';
        }
      });
      return revs;
    }

    // build up a list of all the paths to the leafs in this revision tree
    function rootToLeaf(revs) {
      var paths = [];
      var toVisit = revs.slice();
      var node;
      while ((node = toVisit.pop())) {
        var pos = node.pos;
        var tree = node.ids;
        var id = tree[0];
        var opts = tree[1];
        var branches = tree[2];
        var isLeaf = branches.length === 0;

        var history = node.history ? node.history.slice() : [];
        history.push({id: id, opts: opts});
        if (isLeaf) {
          paths.push({pos: (pos + 1 - history.length), ids: history});
        }
        for (var i = 0, len = branches.length; i < len; i++) {
          toVisit.push({pos: pos + 1, ids: branches[i], history: history});
        }
      }
      return paths.reverse();
    }

    // for a better overview of what this is doing, read:

    function sortByPos$1(a, b) {
      return a.pos - b.pos;
    }

    // classic binary search
    function binarySearch(arr, item, comparator) {
      var low = 0;
      var high = arr.length;
      var mid;
      while (low < high) {
        mid = (low + high) >>> 1;
        if (comparator(arr[mid], item) < 0) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return low;
    }

    // assuming the arr is sorted, insert the item in the proper place
    function insertSorted(arr, item, comparator) {
      var idx = binarySearch(arr, item, comparator);
      arr.splice(idx, 0, item);
    }

    // Turn a path as a flat array into a tree with a single branch.
    // If any should be stemmed from the beginning of the array, that's passed
    // in as the second argument
    function pathToTree(path, numStemmed) {
      var root;
      var leaf;
      for (var i = numStemmed, len = path.length; i < len; i++) {
        var node = path[i];
        var currentLeaf = [node.id, node.opts, []];
        if (leaf) {
          leaf[2].push(currentLeaf);
          leaf = currentLeaf;
        } else {
          root = leaf = currentLeaf;
        }
      }
      return root;
    }

    // compare the IDs of two trees
    function compareTree(a, b) {
      return a[0] < b[0] ? -1 : 1;
    }

    // Merge two trees together
    // The roots of tree1 and tree2 must be the same revision
    function mergeTree(in_tree1, in_tree2) {
      var queue = [{tree1: in_tree1, tree2: in_tree2}];
      var conflicts = false;
      while (queue.length > 0) {
        var item = queue.pop();
        var tree1 = item.tree1;
        var tree2 = item.tree2;

        if (tree1[1].status || tree2[1].status) {
          tree1[1].status =
            (tree1[1].status ===  'available' ||
            tree2[1].status === 'available') ? 'available' : 'missing';
        }

        for (var i = 0; i < tree2[2].length; i++) {
          if (!tree1[2][0]) {
            conflicts = 'new_leaf';
            tree1[2][0] = tree2[2][i];
            continue;
          }

          var merged = false;
          for (var j = 0; j < tree1[2].length; j++) {
            if (tree1[2][j][0] === tree2[2][i][0]) {
              queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});
              merged = true;
            }
          }
          if (!merged) {
            conflicts = 'new_branch';
            insertSorted(tree1[2], tree2[2][i], compareTree);
          }
        }
      }
      return {conflicts: conflicts, tree: in_tree1};
    }

    function doMerge(tree, path, dontExpand) {
      var restree = [];
      var conflicts = false;
      var merged = false;
      var res;

      if (!tree.length) {
        return {tree: [path], conflicts: 'new_leaf'};
      }

      for (var i = 0, len = tree.length; i < len; i++) {
        var branch = tree[i];
        if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {
          // Paths start at the same position and have the same root, so they need
          // merged
          res = mergeTree(branch.ids, path.ids);
          restree.push({pos: branch.pos, ids: res.tree});
          conflicts = conflicts || res.conflicts;
          merged = true;
        } else if (dontExpand !== true) {
          // The paths start at a different position, take the earliest path and
          // traverse up until it as at the same point from root as the path we
          // want to merge.  If the keys match we return the longer path with the
          // other merged After stemming we dont want to expand the trees

          var t1 = branch.pos < path.pos ? branch : path;
          var t2 = branch.pos < path.pos ? path : branch;
          var diff = t2.pos - t1.pos;

          var candidateParents = [];

          var trees = [];
          trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});
          while (trees.length > 0) {
            var item = trees.pop();
            if (item.diff === 0) {
              if (item.ids[0] === t2.ids[0]) {
                candidateParents.push(item);
              }
              continue;
            }
            var elements = item.ids[2];
            for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {
              trees.push({
                ids: elements[j],
                diff: item.diff - 1,
                parent: item.ids,
                parentIdx: j
              });
            }
          }

          var el = candidateParents[0];

          if (!el) {
            restree.push(branch);
          } else {
            res = mergeTree(el.ids, t2.ids);
            el.parent[2][el.parentIdx] = res.tree;
            restree.push({pos: t1.pos, ids: t1.ids});
            conflicts = conflicts || res.conflicts;
            merged = true;
          }
        } else {
          restree.push(branch);
        }
      }

      // We didnt find
      if (!merged) {
        restree.push(path);
      }

      restree.sort(sortByPos$1);

      return {
        tree: restree,
        conflicts: conflicts || 'internal_node'
      };
    }

    // To ensure we dont grow the revision tree infinitely, we stem old revisions
    function stem(tree, depth) {
      // First we break out the tree into a complete list of root to leaf paths
      var paths = rootToLeaf(tree);
      var stemmedRevs;

      var result;
      for (var i = 0, len = paths.length; i < len; i++) {
        // Then for each path, we cut off the start of the path based on the
        // `depth` to stem to, and generate a new set of flat trees
        var path = paths[i];
        var stemmed = path.ids;
        var node;
        if (stemmed.length > depth) {
          // only do the stemming work if we actually need to stem
          if (!stemmedRevs) {
            stemmedRevs = {}; // avoid allocating this object unnecessarily
          }
          var numStemmed = stemmed.length - depth;
          node = {
            pos: path.pos + numStemmed,
            ids: pathToTree(stemmed, numStemmed)
          };

          for (var s = 0; s < numStemmed; s++) {
            var rev = (path.pos + s) + '-' + stemmed[s].id;
            stemmedRevs[rev] = true;
          }
        } else { // no need to actually stem
          node = {
            pos: path.pos,
            ids: pathToTree(stemmed, 0)
          };
        }

        // Then we remerge all those flat trees together, ensuring that we dont
        // connect trees that would go beyond the depth limit
        if (result) {
          result = doMerge(result, node, true).tree;
        } else {
          result = [node];
        }
      }

      // this is memory-heavy per Chrome profiler, avoid unless we actually stemmed
      if (stemmedRevs) {
        traverseRevTree(result, function (isLeaf, pos, revHash) {
          // some revisions may have been removed in a branch but not in another
          delete stemmedRevs[pos + '-' + revHash];
        });
      }

      return {
        tree: result,
        revs: stemmedRevs ? Object.keys(stemmedRevs) : []
      };
    }

    function merge(tree, path, depth) {
      var newTree = doMerge(tree, path);
      var stemmed = stem(newTree.tree, depth);
      return {
        tree: stemmed.tree,
        stemmedRevs: stemmed.revs,
        conflicts: newTree.conflicts
      };
    }

    // return true if a rev exists in the rev tree, false otherwise
    function revExists(revs, rev) {
      var toVisit = revs.slice();
      var splitRev = rev.split('-');
      var targetPos = parseInt(splitRev[0], 10);
      var targetId = splitRev[1];

      var node;
      while ((node = toVisit.pop())) {
        if (node.pos === targetPos && node.ids[0] === targetId) {
          return true;
        }
        var branches = node.ids[2];
        for (var i = 0, len = branches.length; i < len; i++) {
          toVisit.push({pos: node.pos + 1, ids: branches[i]});
        }
      }
      return false;
    }

    function getTrees(node) {
      return node.ids;
    }

    // check if a specific revision of a doc has been deleted
    //  - metadata: the metadata object from the doc store
    //  - rev: (optional) the revision to check. defaults to winning revision
    function isDeleted(metadata, rev) {
      if (!rev) {
        rev = winningRev(metadata);
      }
      var id = rev.substring(rev.indexOf('-') + 1);
      var toVisit = metadata.rev_tree.map(getTrees);

      var tree;
      while ((tree = toVisit.pop())) {
        if (tree[0] === id) {
          return !!tree[1].deleted;
        }
        toVisit = toVisit.concat(tree[2]);
      }
    }

    function isLocalId(id) {
      return (/^_local/).test(id);
    }

    // returns the current leaf node for a given revision
    function latest(rev, metadata) {
      var toVisit = metadata.rev_tree.slice();
      var node;
      while ((node = toVisit.pop())) {
        var pos = node.pos;
        var tree = node.ids;
        var id = tree[0];
        var opts = tree[1];
        var branches = tree[2];
        var isLeaf = branches.length === 0;

        var history = node.history ? node.history.slice() : [];
        history.push({id: id, pos: pos, opts: opts});

        if (isLeaf) {
          for (var i = 0, len = history.length; i < len; i++) {
            var historyNode = history[i];
            var historyRev = historyNode.pos + '-' + historyNode.id;

            if (historyRev === rev) {
              // return the rev of this leaf
              return pos + '-' + id;
            }
          }
        }

        for (var j = 0, l = branches.length; j < l; j++) {
          toVisit.push({pos: pos + 1, ids: branches[j], history: history});
        }
      }

      /* istanbul ignore next */
      throw new Error('Unable to resolve latest revision for id ' + metadata.id + ', rev ' + rev);
    }

    inherits(Changes$1, events.EventEmitter);

    function tryCatchInChangeListener(self, change, pending, lastSeq) {
      // isolate try/catches to avoid V8 deoptimizations
      try {
        self.emit('change', change, pending, lastSeq);
      } catch (e) {
        guardedConsole('error', 'Error in .on("change", function):', e);
      }
    }

    function Changes$1(db, opts, callback) {
      events.EventEmitter.call(this);
      var self = this;
      this.db = db;
      opts = opts ? clone(opts) : {};
      var complete = opts.complete = once(function (err, resp) {
        if (err) {
          if (listenerCount(self, 'error') > 0) {
            self.emit('error', err);
          }
        } else {
          self.emit('complete', resp);
        }
        self.removeAllListeners();
        db.removeListener('destroyed', onDestroy);
      });
      if (callback) {
        self.on('complete', function (resp) {
          callback(null, resp);
        });
        self.on('error', callback);
      }
      function onDestroy() {
        self.cancel();
      }
      db.once('destroyed', onDestroy);

      opts.onChange = function (change, pending, lastSeq) {
        /* istanbul ignore if */
        if (self.isCancelled) {
          return;
        }
        tryCatchInChangeListener(self, change, pending, lastSeq);
      };

      var promise = new Promise(function (fulfill, reject) {
        opts.complete = function (err, res) {
          if (err) {
            reject(err);
          } else {
            fulfill(res);
          }
        };
      });
      self.once('cancel', function () {
        db.removeListener('destroyed', onDestroy);
        opts.complete(null, {status: 'cancelled'});
      });
      this.then = promise.then.bind(promise);
      this['catch'] = promise['catch'].bind(promise);
      this.then(function (result) {
        complete(null, result);
      }, complete);



      if (!db.taskqueue.isReady) {
        db.taskqueue.addTask(function (failed) {
          if (failed) {
            opts.complete(failed);
          } else if (self.isCancelled) {
            self.emit('cancel');
          } else {
            self.validateChanges(opts);
          }
        });
      } else {
        self.validateChanges(opts);
      }
    }
    Changes$1.prototype.cancel = function () {
      this.isCancelled = true;
      if (this.db.taskqueue.isReady) {
        this.emit('cancel');
      }
    };
    function processChange(doc, metadata, opts) {
      var changeList = [{rev: doc._rev}];
      if (opts.style === 'all_docs') {
        changeList = collectLeaves(metadata.rev_tree)
        .map(function (x) { return {rev: x.rev}; });
      }
      var change = {
        id: metadata.id,
        changes: changeList,
        doc: doc
      };

      if (isDeleted(metadata, doc._rev)) {
        change.deleted = true;
      }
      if (opts.conflicts) {
        change.doc._conflicts = collectConflicts(metadata);
        if (!change.doc._conflicts.length) {
          delete change.doc._conflicts;
        }
      }
      return change;
    }

    Changes$1.prototype.validateChanges = function (opts) {
      var callback = opts.complete;
      var self = this;

      /* istanbul ignore else */
      if (PouchDB._changesFilterPlugin) {
        PouchDB._changesFilterPlugin.validate(opts, function (err) {
          if (err) {
            return callback(err);
          }
          self.doChanges(opts);
        });
      } else {
        self.doChanges(opts);
      }
    };

    Changes$1.prototype.doChanges = function (opts) {
      var self = this;
      var callback = opts.complete;

      opts = clone(opts);
      if ('live' in opts && !('continuous' in opts)) {
        opts.continuous = opts.live;
      }
      opts.processChange = processChange;

      if (opts.since === 'latest') {
        opts.since = 'now';
      }
      if (!opts.since) {
        opts.since = 0;
      }
      if (opts.since === 'now') {
        this.db.info().then(function (info) {
          /* istanbul ignore if */
          if (self.isCancelled) {
            callback(null, {status: 'cancelled'});
            return;
          }
          opts.since = info.update_seq;
          self.doChanges(opts);
        }, callback);
        return;
      }

      /* istanbul ignore else */
      if (PouchDB._changesFilterPlugin) {
        PouchDB._changesFilterPlugin.normalize(opts);
        if (PouchDB._changesFilterPlugin.shouldFilter(this, opts)) {
          return PouchDB._changesFilterPlugin.filter(this, opts);
        }
      } else {
        ['doc_ids', 'filter', 'selector', 'view'].forEach(function (key) {
          if (key in opts) {
            guardedConsole('warn',
              'The "' + key + '" option was passed in to changes/replicate, ' +
              'but pouchdb-changes-filter plugin is not installed, so it ' +
              'was ignored. Please install the plugin to enable filtering.'
            );
          }
        });
      }

      if (!('descending' in opts)) {
        opts.descending = false;
      }

      // 0 and 1 should return 1 document
      opts.limit = opts.limit === 0 ? 1 : opts.limit;
      opts.complete = callback;
      var newPromise = this.db._changes(opts);
      /* istanbul ignore else */
      if (newPromise && typeof newPromise.cancel === 'function') {
        var cancel = self.cancel;
        self.cancel = getArguments(function (args) {
          newPromise.cancel();
          cancel.apply(this, args);
        });
      }
    };

    /*
     * A generic pouch adapter
     */

    function compare(left, right) {
      return left < right ? -1 : left > right ? 1 : 0;
    }

    // Wrapper for functions that call the bulkdocs api with a single doc,
    // if the first result is an error, return an error
    function yankError(callback, docId) {
      return function (err, results) {
        if (err || (results[0] && results[0].error)) {
          err = err || results[0];
          err.docId = docId;
          callback(err);
        } else {
          callback(null, results.length ? results[0]  : results);
        }
      };
    }

    // clean docs given to us by the user
    function cleanDocs(docs) {
      for (var i = 0; i < docs.length; i++) {
        var doc = docs[i];
        if (doc._deleted) {
          delete doc._attachments; // ignore atts for deleted docs
        } else if (doc._attachments) {
          // filter out extraneous keys from _attachments
          var atts = Object.keys(doc._attachments);
          for (var j = 0; j < atts.length; j++) {
            var att = atts[j];
            doc._attachments[att] = pick(doc._attachments[att],
              ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);
          }
        }
      }
    }

    // compare two docs, first by _id then by _rev
    function compareByIdThenRev(a, b) {
      var idCompare = compare(a._id, b._id);
      if (idCompare !== 0) {
        return idCompare;
      }
      var aStart = a._revisions ? a._revisions.start : 0;
      var bStart = b._revisions ? b._revisions.start : 0;
      return compare(aStart, bStart);
    }

    // for every node in a revision tree computes its distance from the closest
    // leaf
    function computeHeight(revs) {
      var height = {};
      var edges = [];
      traverseRevTree(revs, function (isLeaf, pos, id, prnt) {
        var rev = pos + "-" + id;
        if (isLeaf) {
          height[rev] = 0;
        }
        if (prnt !== undefined) {
          edges.push({from: prnt, to: rev});
        }
        return rev;
      });

      edges.reverse();
      edges.forEach(function (edge) {
        if (height[edge.from] === undefined) {
          height[edge.from] = 1 + height[edge.to];
        } else {
          height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);
        }
      });
      return height;
    }

    function allDocsKeysParse(opts) {
      var keys =  ('limit' in opts) ?
        opts.keys.slice(opts.skip, opts.limit + opts.skip) :
        (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;
      opts.keys = keys;
      opts.skip = 0;
      delete opts.limit;
      if (opts.descending) {
        keys.reverse();
        opts.descending = false;
      }
    }

    // all compaction is done in a queue, to avoid attaching
    // too many listeners at once
    function doNextCompaction(self) {
      var task = self._compactionQueue[0];
      var opts = task.opts;
      var callback = task.callback;
      self.get('_local/compaction')["catch"](function () {
        return false;
      }).then(function (doc) {
        if (doc && doc.last_seq) {
          opts.last_seq = doc.last_seq;
        }
        self._compact(opts, function (err, res) {
          /* istanbul ignore if */
          if (err) {
            callback(err);
          } else {
            callback(null, res);
          }
          nextTick(function () {
            self._compactionQueue.shift();
            if (self._compactionQueue.length) {
              doNextCompaction(self);
            }
          });
        });
      });
    }

    function attachmentNameError(name) {
      if (name.charAt(0) === '_') {
        return name + ' is not a valid attachment name, attachment ' +
          'names cannot start with \'_\'';
      }
      return false;
    }

    inherits(AbstractPouchDB, events.EventEmitter);

    function AbstractPouchDB() {
      events.EventEmitter.call(this);

      // re-bind prototyped methods
      for (var p in AbstractPouchDB.prototype) {
        if (typeof this[p] === 'function') {
          this[p] = this[p].bind(this);
        }
      }
    }

    AbstractPouchDB.prototype.post =
      adapterFun('post', function (doc, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      if (typeof doc !== 'object' || Array.isArray(doc)) {
        return callback(createError(NOT_AN_OBJECT));
      }
      this.bulkDocs({docs: [doc]}, opts, yankError(callback, doc._id));
    });

    AbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
      if (typeof doc !== 'object' || Array.isArray(doc)) {
        return cb(createError(NOT_AN_OBJECT));
      }
      invalidIdError(doc._id);
      if (isLocalId(doc._id) && typeof this._putLocal === 'function') {
        if (doc._deleted) {
          return this._removeLocal(doc, cb);
        } else {
          return this._putLocal(doc, cb);
        }
      }
      var self = this;
      if (opts.force && doc._rev) {
        transformForceOptionToNewEditsOption();
        putDoc(function (err) {
          var result = err ? null : {ok: true, id: doc._id, rev: doc._rev};
          cb(err, result);
        });
      } else {
        putDoc(cb);
      }

      function transformForceOptionToNewEditsOption() {
        var parts = doc._rev.split('-');
        var oldRevId = parts[1];
        var oldRevNum = parseInt(parts[0], 10);

        var newRevNum = oldRevNum + 1;
        var newRevId = rev$$1();

        doc._revisions = {
          start: newRevNum,
          ids: [newRevId, oldRevId]
        };
        doc._rev = newRevNum + '-' + newRevId;
        opts.new_edits = false;
      }
      function putDoc(next) {
        if (typeof self._put === 'function' && opts.new_edits !== false) {
          self._put(doc, opts, next);
        } else {
          self.bulkDocs({docs: [doc]}, opts, yankError(next, doc._id));
        }
      }
    });

    AbstractPouchDB.prototype.putAttachment =
      adapterFun('putAttachment', function (docId, attachmentId, rev,
                                                  blob, type) {
      var api = this;
      if (typeof type === 'function') {
        type = blob;
        blob = rev;
        rev = null;
      }
      // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267
      /* istanbul ignore if */
      if (typeof type === 'undefined') {
        type = blob;
        blob = rev;
        rev = null;
      }
      if (!type) {
        guardedConsole('warn', 'Attachment', attachmentId, 'on document', docId, 'is missing content_type');
      }

      function createAttachment(doc) {
        var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;
        doc._attachments = doc._attachments || {};
        doc._attachments[attachmentId] = {
          content_type: type,
          data: blob,
          revpos: ++prevrevpos
        };
        return api.put(doc);
      }

      return api.get(docId).then(function (doc) {
        if (doc._rev !== rev) {
          throw createError(REV_CONFLICT);
        }

        return createAttachment(doc);
      }, function (err) {
         // create new doc
        /* istanbul ignore else */
        if (err.reason === MISSING_DOC.message) {
          return createAttachment({_id: docId});
        } else {
          throw err;
        }
      });
    });

    AbstractPouchDB.prototype.removeAttachment =
      adapterFun('removeAttachment', function (docId, attachmentId, rev,
                                                     callback) {
      var self = this;
      self.get(docId, function (err, obj) {
        /* istanbul ignore if */
        if (err) {
          callback(err);
          return;
        }
        if (obj._rev !== rev) {
          callback(createError(REV_CONFLICT));
          return;
        }
        /* istanbul ignore if */
        if (!obj._attachments) {
          return callback();
        }
        delete obj._attachments[attachmentId];
        if (Object.keys(obj._attachments).length === 0) {
          delete obj._attachments;
        }
        self.put(obj, callback);
      });
    });

    AbstractPouchDB.prototype.remove =
      adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {
      var doc;
      if (typeof optsOrRev === 'string') {
        // id, rev, opts, callback style
        doc = {
          _id: docOrId,
          _rev: optsOrRev
        };
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
      } else {
        // doc, opts, callback style
        doc = docOrId;
        if (typeof optsOrRev === 'function') {
          callback = optsOrRev;
          opts = {};
        } else {
          callback = opts;
          opts = optsOrRev;
        }
      }
      opts = opts || {};
      opts.was_delete = true;
      var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};
      newDoc._deleted = true;
      if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {
        return this._removeLocal(doc, callback);
      }
      this.bulkDocs({docs: [newDoc]}, opts, yankError(callback, newDoc._id));
    });

    AbstractPouchDB.prototype.revsDiff =
      adapterFun('revsDiff', function (req, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      var ids = Object.keys(req);

      if (!ids.length) {
        return callback(null, {});
      }

      var count = 0;
      var missing = new ExportedMap();

      function addToMissing(id, revId) {
        if (!missing.has(id)) {
          missing.set(id, {missing: []});
        }
        missing.get(id).missing.push(revId);
      }

      function processDoc(id, rev_tree) {
        // Is this fast enough? Maybe we should switch to a set simulated by a map
        var missingForId = req[id].slice(0);
        traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,
          opts) {
            var rev = pos + '-' + revHash;
            var idx = missingForId.indexOf(rev);
            if (idx === -1) {
              return;
            }

            missingForId.splice(idx, 1);
            /* istanbul ignore if */
            if (opts.status !== 'available') {
              addToMissing(id, rev);
            }
          });

        // Traversing the tree is synchronous, so now `missingForId` contains
        // revisions that were not found in the tree
        missingForId.forEach(function (rev) {
          addToMissing(id, rev);
        });
      }

      ids.map(function (id) {
        this._getRevisionTree(id, function (err, rev_tree) {
          if (err && err.status === 404 && err.message === 'missing') {
            missing.set(id, {missing: req[id]});
          } else if (err) {
            /* istanbul ignore next */
            return callback(err);
          } else {
            processDoc(id, rev_tree);
          }

          if (++count === ids.length) {
            // convert LazyMap to object
            var missingObj = {};
            missing.forEach(function (value, key) {
              missingObj[key] = value;
            });
            return callback(null, missingObj);
          }
        });
      }, this);
    });

    // _bulk_get API for faster replication, as described in
    // https://github.com/apache/couchdb-chttpd/pull/33
    // At the "abstract" level, it will just run multiple get()s in
    // parallel, because this isn't much of a performance cost
    // for local databases (except the cost of multiple transactions, which is
    // small). The http adapter overrides this in order
    // to do a more efficient single HTTP request.
    AbstractPouchDB.prototype.bulkGet =
      adapterFun('bulkGet', function (opts, callback) {
      bulkGet(this, opts, callback);
    });

    // compact one document and fire callback
    // by compacting we mean removing all revisions which
    // are further from the leaf in revision tree than max_height
    AbstractPouchDB.prototype.compactDocument =
      adapterFun('compactDocument', function (docId, maxHeight, callback) {
      var self = this;
      this._getRevisionTree(docId, function (err, revTree) {
        /* istanbul ignore if */
        if (err) {
          return callback(err);
        }
        var height = computeHeight(revTree);
        var candidates = [];
        var revs = [];
        Object.keys(height).forEach(function (rev) {
          if (height[rev] > maxHeight) {
            candidates.push(rev);
          }
        });

        traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {
          var rev = pos + '-' + revHash;
          if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {
            revs.push(rev);
          }
        });
        self._doCompaction(docId, revs, callback);
      });
    });

    // compact the whole database using single document
    // compaction
    AbstractPouchDB.prototype.compact =
      adapterFun('compact', function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      var self = this;
      opts = opts || {};

      self._compactionQueue = self._compactionQueue || [];
      self._compactionQueue.push({opts: opts, callback: callback});
      if (self._compactionQueue.length === 1) {
        doNextCompaction(self);
      }
    });
    AbstractPouchDB.prototype._compact = function (opts, callback) {
      var self = this;
      var changesOpts = {
        return_docs: false,
        last_seq: opts.last_seq || 0
      };
      var promises = [];

      function onChange(row) {
        promises.push(self.compactDocument(row.id, 0));
      }
      function onComplete(resp) {
        var lastSeq = resp.last_seq;
        Promise.all(promises).then(function () {
          return upsert(self, '_local/compaction', function deltaFunc(doc) {
            if (!doc.last_seq || doc.last_seq < lastSeq) {
              doc.last_seq = lastSeq;
              return doc;
            }
            return false; // somebody else got here first, don't update
          });
        }).then(function () {
          callback(null, {ok: true});
        })["catch"](callback);
      }
      self.changes(changesOpts)
        .on('change', onChange)
        .on('complete', onComplete)
        .on('error', callback);
    };

    /* Begin api wrappers. Specific functionality to storage belongs in the
       _[method] */
    AbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
      if (typeof id !== 'string') {
        return cb(createError(INVALID_ID));
      }
      if (isLocalId(id) && typeof this._getLocal === 'function') {
        return this._getLocal(id, cb);
      }
      var leaves = [], self = this;

      function finishOpenRevs() {
        var result = [];
        var count = leaves.length;
        /* istanbul ignore if */
        if (!count) {
          return cb(null, result);
        }

        // order with open_revs is unspecified
        leaves.forEach(function (leaf) {
          self.get(id, {
            rev: leaf,
            revs: opts.revs,
            latest: opts.latest,
            attachments: opts.attachments,
            binary: opts.binary
          }, function (err, doc) {
            if (!err) {
              // using latest=true can produce duplicates
              var existing;
              for (var i = 0, l = result.length; i < l; i++) {
                if (result[i].ok && result[i].ok._rev === doc._rev) {
                  existing = true;
                  break;
                }
              }
              if (!existing) {
                result.push({ok: doc});
              }
            } else {
              result.push({missing: leaf});
            }
            count--;
            if (!count) {
              cb(null, result);
            }
          });
        });
      }

      if (opts.open_revs) {
        if (opts.open_revs === "all") {
          this._getRevisionTree(id, function (err, rev_tree) {
            /* istanbul ignore if */
            if (err) {
              return cb(err);
            }
            leaves = collectLeaves(rev_tree).map(function (leaf) {
              return leaf.rev;
            });
            finishOpenRevs();
          });
        } else {
          if (Array.isArray(opts.open_revs)) {
            leaves = opts.open_revs;
            for (var i = 0; i < leaves.length; i++) {
              var l = leaves[i];
              // looks like it's the only thing couchdb checks
              if (!(typeof (l) === "string" && /^\d+-/.test(l))) {
                return cb(createError(INVALID_REV));
              }
            }
            finishOpenRevs();
          } else {
            return cb(createError(UNKNOWN_ERROR, 'function_clause'));
          }
        }
        return; // open_revs does not like other options
      }

      return this._get(id, opts, function (err, result) {
        if (err) {
          err.docId = id;
          return cb(err);
        }

        var doc = result.doc;
        var metadata = result.metadata;
        var ctx = result.ctx;

        if (opts.conflicts) {
          var conflicts = collectConflicts(metadata);
          if (conflicts.length) {
            doc._conflicts = conflicts;
          }
        }

        if (isDeleted(metadata, doc._rev)) {
          doc._deleted = true;
        }

        if (opts.revs || opts.revs_info) {
          var splittedRev = doc._rev.split('-');
          var revNo       = parseInt(splittedRev[0], 10);
          var revHash     = splittedRev[1];

          var paths = rootToLeaf(metadata.rev_tree);
          var path = null;

          for (var i = 0; i < paths.length; i++) {
            var currentPath = paths[i];
            var hashIndex = currentPath.ids.map(function (x) { return x.id; })
              .indexOf(revHash);
            var hashFoundAtRevPos = hashIndex === (revNo - 1);

            if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {
              path = currentPath;
            }
          }

          var indexOfRev = path.ids.map(function (x) { return x.id; })
            .indexOf(doc._rev.split('-')[1]) + 1;
          var howMany = path.ids.length - indexOfRev;
          path.ids.splice(indexOfRev, howMany);
          path.ids.reverse();

          if (opts.revs) {
            doc._revisions = {
              start: (path.pos + path.ids.length) - 1,
              ids: path.ids.map(function (rev) {
                return rev.id;
              })
            };
          }
          if (opts.revs_info) {
            var pos =  path.pos + path.ids.length;
            doc._revs_info = path.ids.map(function (rev) {
              pos--;
              return {
                rev: pos + '-' + rev.id,
                status: rev.opts.status
              };
            });
          }
        }

        if (opts.attachments && doc._attachments) {
          var attachments = doc._attachments;
          var count = Object.keys(attachments).length;
          if (count === 0) {
            return cb(null, doc);
          }
          Object.keys(attachments).forEach(function (key) {
            this._getAttachment(doc._id, key, attachments[key], {
              // Previously the revision handling was done in adapter.js
              // getAttachment, however since idb-next doesnt we need to
              // pass the rev through
              rev: doc._rev,
              binary: opts.binary,
              ctx: ctx
            }, function (err, data) {
              var att = doc._attachments[key];
              att.data = data;
              delete att.stub;
              delete att.length;
              if (!--count) {
                cb(null, doc);
              }
            });
          }, self);
        } else {
          if (doc._attachments) {
            for (var key in doc._attachments) {
              /* istanbul ignore else */
              if (doc._attachments.hasOwnProperty(key)) {
                doc._attachments[key].stub = true;
              }
            }
          }
          cb(null, doc);
        }
      });
    });

    // TODO: I dont like this, it forces an extra read for every
    // attachment read and enforces a confusing api between
    // adapter.js and the adapter implementation
    AbstractPouchDB.prototype.getAttachment =
      adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {
      var self = this;
      if (opts instanceof Function) {
        callback = opts;
        opts = {};
      }
      this._get(docId, opts, function (err, res) {
        if (err) {
          return callback(err);
        }
        if (res.doc._attachments && res.doc._attachments[attachmentId]) {
          opts.ctx = res.ctx;
          opts.binary = true;
          self._getAttachment(docId, attachmentId,
                              res.doc._attachments[attachmentId], opts, callback);
        } else {
          return callback(createError(MISSING_DOC));
        }
      });
    });

    AbstractPouchDB.prototype.allDocs =
      adapterFun('allDocs', function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;
      if (opts.start_key) {
        opts.startkey = opts.start_key;
      }
      if (opts.end_key) {
        opts.endkey = opts.end_key;
      }
      if ('keys' in opts) {
        if (!Array.isArray(opts.keys)) {
          return callback(new TypeError('options.keys must be an array'));
        }
        var incompatibleOpt =
          ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {
          return incompatibleOpt in opts;
        })[0];
        if (incompatibleOpt) {
          callback(createError(QUERY_PARSE_ERROR,
            'Query parameter `' + incompatibleOpt +
            '` is not compatible with multi-get'
          ));
          return;
        }
        if (!isRemote(this)) {
          allDocsKeysParse(opts);
          if (opts.keys.length === 0) {
            return this._allDocs({limit: 0}, callback);
          }
        }
      }

      return this._allDocs(opts, callback);
    });

    AbstractPouchDB.prototype.changes = function (opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      opts = opts || {};

      // By default set return_docs to false if the caller has opts.live = true,
      // this will prevent us from collecting the set of changes indefinitely
      // resulting in growing memory
      opts.return_docs = ('return_docs' in opts) ? opts.return_docs : !opts.live;

      return new Changes$1(this, opts, callback);
    };

    AbstractPouchDB.prototype.close = adapterFun('close', function (callback) {
      this._closed = true;
      this.emit('closed');
      return this._close(callback);
    });

    AbstractPouchDB.prototype.info = adapterFun('info', function (callback) {
      var self = this;
      this._info(function (err, info) {
        if (err) {
          return callback(err);
        }
        // assume we know better than the adapter, unless it informs us
        info.db_name = info.db_name || self.name;
        info.auto_compaction = !!(self.auto_compaction && !isRemote(self));
        info.adapter = self.adapter;
        callback(null, info);
      });
    });

    AbstractPouchDB.prototype.id = adapterFun('id', function (callback) {
      return this._id(callback);
    });

    /* istanbul ignore next */
    AbstractPouchDB.prototype.type = function () {
      return (typeof this._type === 'function') ? this._type() : this.adapter;
    };

    AbstractPouchDB.prototype.bulkDocs =
      adapterFun('bulkDocs', function (req, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      opts = opts || {};

      if (Array.isArray(req)) {
        req = {
          docs: req
        };
      }

      if (!req || !req.docs || !Array.isArray(req.docs)) {
        return callback(createError(MISSING_BULK_DOCS));
      }

      for (var i = 0; i < req.docs.length; ++i) {
        if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {
          return callback(createError(NOT_AN_OBJECT));
        }
      }

      var attachmentError;
      req.docs.forEach(function (doc) {
        if (doc._attachments) {
          Object.keys(doc._attachments).forEach(function (name) {
            attachmentError = attachmentError || attachmentNameError(name);
            if (!doc._attachments[name].content_type) {
              guardedConsole('warn', 'Attachment', name, 'on document', doc._id, 'is missing content_type');
            }
          });
        }
      });

      if (attachmentError) {
        return callback(createError(BAD_REQUEST, attachmentError));
      }

      if (!('new_edits' in opts)) {
        if ('new_edits' in req) {
          opts.new_edits = req.new_edits;
        } else {
          opts.new_edits = true;
        }
      }

      var adapter = this;
      if (!opts.new_edits && !isRemote(adapter)) {
        // ensure revisions of the same doc are sorted, so that
        // the local adapter processes them correctly (#2935)
        req.docs.sort(compareByIdThenRev);
      }

      cleanDocs(req.docs);

      // in the case of conflicts, we want to return the _ids to the user
      // however, the underlying adapter may destroy the docs array, so
      // create a copy here
      var ids = req.docs.map(function (doc) {
        return doc._id;
      });

      return this._bulkDocs(req, opts, function (err, res) {
        if (err) {
          return callback(err);
        }
        if (!opts.new_edits) {
          // this is what couch does when new_edits is false
          res = res.filter(function (x) {
            return x.error;
          });
        }
        // add ids for error/conflict responses (not required for CouchDB)
        if (!isRemote(adapter)) {
          for (var i = 0, l = res.length; i < l; i++) {
            res[i].id = res[i].id || ids[i];
          }
        }

        callback(null, res);
      });
    });

    AbstractPouchDB.prototype.registerDependentDatabase =
      adapterFun('registerDependentDatabase', function (dependentDb,
                                                              callback) {
      var depDB = new this.constructor(dependentDb, this.__opts);

      function diffFun(doc) {
        doc.dependentDbs = doc.dependentDbs || {};
        if (doc.dependentDbs[dependentDb]) {
          return false; // no update required
        }
        doc.dependentDbs[dependentDb] = true;
        return doc;
      }
      upsert(this, '_local/_pouch_dependentDbs', diffFun)
        .then(function () {
          callback(null, {db: depDB});
        })["catch"](callback);
    });

    AbstractPouchDB.prototype.destroy =
      adapterFun('destroy', function (opts, callback) {

      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }

      var self = this;
      var usePrefix = 'use_prefix' in self ? self.use_prefix : true;

      function destroyDb() {
        // call destroy method of the particular adaptor
        self._destroy(opts, function (err, resp) {
          if (err) {
            return callback(err);
          }
          self._destroyed = true;
          self.emit('destroyed');
          callback(null, resp || { 'ok': true });
        });
      }

      if (isRemote(self)) {
        // no need to check for dependent DBs if it's a remote DB
        return destroyDb();
      }

      self.get('_local/_pouch_dependentDbs', function (err, localDoc) {
        if (err) {
          /* istanbul ignore if */
          if (err.status !== 404) {
            return callback(err);
          } else { // no dependencies
            return destroyDb();
          }
        }
        var dependentDbs = localDoc.dependentDbs;
        var PouchDB = self.constructor;
        var deletedMap = Object.keys(dependentDbs).map(function (name) {
          // use_prefix is only false in the browser
          /* istanbul ignore next */
          var trueName = usePrefix ?
            name.replace(new RegExp('^' + PouchDB.prefix), '') : name;
          return new PouchDB(trueName, self.__opts).destroy();
        });
        Promise.all(deletedMap).then(destroyDb, callback);
      });
    });

    function TaskQueue() {
      this.isReady = false;
      this.failed = false;
      this.queue = [];
    }

    TaskQueue.prototype.execute = function () {
      var fun;
      if (this.failed) {
        while ((fun = this.queue.shift())) {
          fun(this.failed);
        }
      } else {
        while ((fun = this.queue.shift())) {
          fun();
        }
      }
    };

    TaskQueue.prototype.fail = function (err) {
      this.failed = err;
      this.execute();
    };

    TaskQueue.prototype.ready = function (db) {
      this.isReady = true;
      this.db = db;
      this.execute();
    };

    TaskQueue.prototype.addTask = function (fun) {
      this.queue.push(fun);
      if (this.failed) {
        this.execute();
      }
    };

    function parseAdapter(name, opts) {
      var match = name.match(/([a-z-]*):\/\/(.*)/);
      if (match) {
        // the http adapter expects the fully qualified name
        return {
          name: /https?/.test(match[1]) ? match[1] + '://' + match[2] : match[2],
          adapter: match[1]
        };
      }

      var adapters = PouchDB.adapters;
      var preferredAdapters = PouchDB.preferredAdapters;
      var prefix = PouchDB.prefix;
      var adapterName = opts.adapter;

      if (!adapterName) { // automatically determine adapter
        for (var i = 0; i < preferredAdapters.length; ++i) {
          adapterName = preferredAdapters[i];
          // check for browsers that have been upgraded from websql-only to websql+idb
          /* istanbul ignore if */
          if (adapterName === 'idb' && 'websql' in adapters &&
              hasLocalStorage() && localStorage['_pouch__websqldb_' + prefix + name]) {
            // log it, because this can be confusing during development
            guardedConsole('log', 'PouchDB is downgrading "' + name + '" to WebSQL to' +
              ' avoid data loss, because it was already opened with WebSQL.');
            continue; // keep using websql to avoid user data loss
          }
          break;
        }
      }

      var adapter = adapters[adapterName];

      // if adapter is invalid, then an error will be thrown later
      var usePrefix = (adapter && 'use_prefix' in adapter) ?
        adapter.use_prefix : true;

      return {
        name: usePrefix ? (prefix + name) : name,
        adapter: adapterName
      };
    }

    // OK, so here's the deal. Consider this code:
    //     var db1 = new PouchDB('foo');
    //     var db2 = new PouchDB('foo');
    //     db1.destroy();
    // ^ these two both need to emit 'destroyed' events,
    // as well as the PouchDB constructor itself.
    // So we have one db object (whichever one got destroy() called on it)
    // responsible for emitting the initial event, which then gets emitted
    // by the constructor, which then broadcasts it to any other dbs
    // that may have been created with the same name.
    function prepareForDestruction(self) {

      function onDestroyed(from_constructor) {
        self.removeListener('closed', onClosed);
        if (!from_constructor) {
          self.constructor.emit('destroyed', self.name);
        }
      }

      function onClosed() {
        self.removeListener('destroyed', onDestroyed);
        self.constructor.emit('unref', self);
      }

      self.once('destroyed', onDestroyed);
      self.once('closed', onClosed);
      self.constructor.emit('ref', self);
    }

    inherits(PouchDB, AbstractPouchDB);
    function PouchDB(name, opts) {
      // In Node our test suite only tests this for PouchAlt unfortunately
      /* istanbul ignore if */
      if (!(this instanceof PouchDB)) {
        return new PouchDB(name, opts);
      }

      var self = this;
      opts = opts || {};

      if (name && typeof name === 'object') {
        opts = name;
        name = opts.name;
        delete opts.name;
      }

      if (opts.deterministic_revs === undefined) {
        opts.deterministic_revs = true;
      }

      this.__opts = opts = clone(opts);

      self.auto_compaction = opts.auto_compaction;
      self.prefix = PouchDB.prefix;

      if (typeof name !== 'string') {
        throw new Error('Missing/invalid DB name');
      }

      var prefixedName = (opts.prefix || '') + name;
      var backend = parseAdapter(prefixedName, opts);

      opts.name = backend.name;
      opts.adapter = opts.adapter || backend.adapter;

      self.name = name;
      self._adapter = opts.adapter;
      PouchDB.emit('debug', ['adapter', 'Picked adapter: ', opts.adapter]);

      if (!PouchDB.adapters[opts.adapter] ||
          !PouchDB.adapters[opts.adapter].valid()) {
        throw new Error('Invalid Adapter: ' + opts.adapter);
      }

      AbstractPouchDB.call(self);
      self.taskqueue = new TaskQueue();

      self.adapter = opts.adapter;

      PouchDB.adapters[opts.adapter].call(self, opts, function (err) {
        if (err) {
          return self.taskqueue.fail(err);
        }
        prepareForDestruction(self);

        self.emit('created', self);
        PouchDB.emit('created', self.name);
        self.taskqueue.ready(self);
      });

    }

    // AbortController was introduced quite a while after fetch and
    // isnt required for PouchDB to function so polyfill if needed
    var a = (typeof AbortController !== 'undefined')
        ? AbortController
        : function () { return {abort: function () {}}; };

    var f$1 = fetch;
    var h = Headers;

    PouchDB.adapters = {};
    PouchDB.preferredAdapters = [];

    PouchDB.prefix = '_pouch_';

    var eventEmitter = new events.EventEmitter();

    function setUpEventEmitter(Pouch) {
      Object.keys(events.EventEmitter.prototype).forEach(function (key) {
        if (typeof events.EventEmitter.prototype[key] === 'function') {
          Pouch[key] = eventEmitter[key].bind(eventEmitter);
        }
      });

      // these are created in constructor.js, and allow us to notify each DB with
      // the same name that it was destroyed, via the constructor object
      var destructListeners = Pouch._destructionListeners = new ExportedMap();

      Pouch.on('ref', function onConstructorRef(db) {
        if (!destructListeners.has(db.name)) {
          destructListeners.set(db.name, []);
        }
        destructListeners.get(db.name).push(db);
      });

      Pouch.on('unref', function onConstructorUnref(db) {
        if (!destructListeners.has(db.name)) {
          return;
        }
        var dbList = destructListeners.get(db.name);
        var pos = dbList.indexOf(db);
        if (pos < 0) {
          /* istanbul ignore next */
          return;
        }
        dbList.splice(pos, 1);
        if (dbList.length > 1) {
          /* istanbul ignore next */
          destructListeners.set(db.name, dbList);
        } else {
          destructListeners["delete"](db.name);
        }
      });

      Pouch.on('destroyed', function onConstructorDestroyed(name) {
        if (!destructListeners.has(name)) {
          return;
        }
        var dbList = destructListeners.get(name);
        destructListeners["delete"](name);
        dbList.forEach(function (db) {
          db.emit('destroyed',true);
        });
      });
    }

    setUpEventEmitter(PouchDB);

    PouchDB.adapter = function (id, obj, addToPreferredAdapters) {
      /* istanbul ignore else */
      if (obj.valid()) {
        PouchDB.adapters[id] = obj;
        if (addToPreferredAdapters) {
          PouchDB.preferredAdapters.push(id);
        }
      }
    };

    PouchDB.plugin = function (obj) {
      if (typeof obj === 'function') { // function style for plugins
        obj(PouchDB);
      } else if (typeof obj !== 'object' || Object.keys(obj).length === 0) {
        throw new Error('Invalid plugin: got "' + obj + '", expected an object or a function');
      } else {
        Object.keys(obj).forEach(function (id) { // object style for plugins
          PouchDB.prototype[id] = obj[id];
        });
      }
      if (this.__defaults) {
        PouchDB.__defaults = $inject_Object_assign({}, this.__defaults);
      }
      return PouchDB;
    };

    PouchDB.defaults = function (defaultOpts) {
      function PouchAlt(name, opts) {
        if (!(this instanceof PouchAlt)) {
          return new PouchAlt(name, opts);
        }

        opts = opts || {};

        if (name && typeof name === 'object') {
          opts = name;
          name = opts.name;
          delete opts.name;
        }

        opts = $inject_Object_assign({}, PouchAlt.__defaults, opts);
        PouchDB.call(this, name, opts);
      }

      inherits(PouchAlt, PouchDB);

      PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();
      Object.keys(PouchDB).forEach(function (key) {
        if (!(key in PouchAlt)) {
          PouchAlt[key] = PouchDB[key];
        }
      });

      // make default options transitive
      // https://github.com/pouchdb/pouchdb/issues/5922
      PouchAlt.__defaults = $inject_Object_assign({}, this.__defaults, defaultOpts);

      return PouchAlt;
    };

    PouchDB.fetch = function (url, opts) {
      return f$1(url, opts);
    };

    // managed automatically by set-version.js
    var version = "7.0.0";

    // this would just be "return doc[field]", but fields
    // can be "deep" due to dot notation
    function getFieldFromDoc(doc, parsedField) {
      var value = doc;
      for (var i = 0, len = parsedField.length; i < len; i++) {
        var key = parsedField[i];
        value = value[key];
        if (!value) {
          break;
        }
      }
      return value;
    }

    function compare$1(left, right) {
      return left < right ? -1 : left > right ? 1 : 0;
    }

    // Converts a string in dot notation to an array of its components, with backslash escaping
    function parseField(fieldName) {
      // fields may be deep (e.g. "foo.bar.baz"), so parse
      var fields = [];
      var current = '';
      for (var i = 0, len = fieldName.length; i < len; i++) {
        var ch = fieldName[i];
        if (ch === '.') {
          if (i > 0 && fieldName[i - 1] === '\\') { // escaped delimiter
            current = current.substring(0, current.length - 1) + '.';
          } else { // not escaped, so delimiter
            fields.push(current);
            current = '';
          }
        } else { // normal character
          current += ch;
        }
      }
      fields.push(current);
      return fields;
    }

    var combinationFields = ['$or', '$nor', '$not'];
    function isCombinationalField(field) {
      return combinationFields.indexOf(field) > -1;
    }

    function getKey(obj) {
      return Object.keys(obj)[0];
    }

    function getValue(obj) {
      return obj[getKey(obj)];
    }


    // flatten an array of selectors joined by an $and operator
    function mergeAndedSelectors(selectors) {

      // sort to ensure that e.g. if the user specified
      // $and: [{$gt: 'a'}, {$gt: 'b'}], then it's collapsed into
      // just {$gt: 'b'}
      var res = {};

      selectors.forEach(function (selector) {
        Object.keys(selector).forEach(function (field) {
          var matcher = selector[field];
          if (typeof matcher !== 'object') {
            matcher = {$eq: matcher};
          }

          if (isCombinationalField(field)) {
            if (matcher instanceof Array) {
              res[field] = matcher.map(function (m) {
                return mergeAndedSelectors([m]);
              });
            } else {
              res[field] = mergeAndedSelectors([matcher]);
            }
          } else {
            var fieldMatchers = res[field] = res[field] || {};
            Object.keys(matcher).forEach(function (operator) {
              var value = matcher[operator];

              if (operator === '$gt' || operator === '$gte') {
                return mergeGtGte(operator, value, fieldMatchers);
              } else if (operator === '$lt' || operator === '$lte') {
                return mergeLtLte(operator, value, fieldMatchers);
              } else if (operator === '$ne') {
                return mergeNe(value, fieldMatchers);
              } else if (operator === '$eq') {
                return mergeEq(value, fieldMatchers);
              }
              fieldMatchers[operator] = value;
            });
          }
        });
      });

      return res;
    }



    // collapse logically equivalent gt/gte values
    function mergeGtGte(operator, value, fieldMatchers) {
      if (typeof fieldMatchers.$eq !== 'undefined') {
        return; // do nothing
      }
      if (typeof fieldMatchers.$gte !== 'undefined') {
        if (operator === '$gte') {
          if (value > fieldMatchers.$gte) { // more specificity
            fieldMatchers.$gte = value;
          }
        } else { // operator === '$gt'
          if (value >= fieldMatchers.$gte) { // more specificity
            delete fieldMatchers.$gte;
            fieldMatchers.$gt = value;
          }
        }
      } else if (typeof fieldMatchers.$gt !== 'undefined') {
        if (operator === '$gte') {
          if (value > fieldMatchers.$gt) { // more specificity
            delete fieldMatchers.$gt;
            fieldMatchers.$gte = value;
          }
        } else { // operator === '$gt'
          if (value > fieldMatchers.$gt) { // more specificity
            fieldMatchers.$gt = value;
          }
        }
      } else {
        fieldMatchers[operator] = value;
      }
    }

    // collapse logically equivalent lt/lte values
    function mergeLtLte(operator, value, fieldMatchers) {
      if (typeof fieldMatchers.$eq !== 'undefined') {
        return; // do nothing
      }
      if (typeof fieldMatchers.$lte !== 'undefined') {
        if (operator === '$lte') {
          if (value < fieldMatchers.$lte) { // more specificity
            fieldMatchers.$lte = value;
          }
        } else { // operator === '$gt'
          if (value <= fieldMatchers.$lte) { // more specificity
            delete fieldMatchers.$lte;
            fieldMatchers.$lt = value;
          }
        }
      } else if (typeof fieldMatchers.$lt !== 'undefined') {
        if (operator === '$lte') {
          if (value < fieldMatchers.$lt) { // more specificity
            delete fieldMatchers.$lt;
            fieldMatchers.$lte = value;
          }
        } else { // operator === '$gt'
          if (value < fieldMatchers.$lt) { // more specificity
            fieldMatchers.$lt = value;
          }
        }
      } else {
        fieldMatchers[operator] = value;
      }
    }

    // combine $ne values into one array
    function mergeNe(value, fieldMatchers) {
      if ('$ne' in fieldMatchers) {
        // there are many things this could "not" be
        fieldMatchers.$ne.push(value);
      } else { // doesn't exist yet
        fieldMatchers.$ne = [value];
      }
    }

    // add $eq into the mix
    function mergeEq(value, fieldMatchers) {
      // these all have less specificity than the $eq
      // TODO: check for user errors here
      delete fieldMatchers.$gt;
      delete fieldMatchers.$gte;
      delete fieldMatchers.$lt;
      delete fieldMatchers.$lte;
      delete fieldMatchers.$ne;
      fieldMatchers.$eq = value;
    }


    //
    // normalize the selector
    //
    function massageSelector(input) {
      var result = clone(input);
      var wasAnded = false;
      if ('$and' in result) {
        result = mergeAndedSelectors(result['$and']);
        wasAnded = true;
      }

      ['$or', '$nor'].forEach(function (orOrNor) {
        if (orOrNor in result) {
          // message each individual selector
          // e.g. {foo: 'bar'} becomes {foo: {$eq: 'bar'}}
          result[orOrNor].forEach(function (subSelector) {
            var fields = Object.keys(subSelector);
            for (var i = 0; i < fields.length; i++) {
              var field = fields[i];
              var matcher = subSelector[field];
              if (typeof matcher !== 'object' || matcher === null) {
                subSelector[field] = {$eq: matcher};
              }
            }
          });
        }
      });

      if ('$not' in result) {
        //This feels a little like forcing, but it will work for now,
        //I would like to come back to this and make the merging of selectors a little more generic
        result['$not'] = mergeAndedSelectors([result['$not']]);
      }

      var fields = Object.keys(result);

      for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        var matcher = result[field];

        if (typeof matcher !== 'object' || matcher === null) {
          matcher = {$eq: matcher};
        } else if ('$ne' in matcher && !wasAnded) {
          // I put these in an array, since there may be more than one
          // but in the "mergeAnded" operation, I already take care of that
          matcher.$ne = [matcher.$ne];
        }
        result[field] = matcher;
      }

      return result;
    }

    function pad(str, padWith, upToLength) {
      var padding = '';
      var targetLength = upToLength - str.length;
      /* istanbul ignore next */
      while (padding.length < targetLength) {
        padding += padWith;
      }
      return padding;
    }

    function padLeft(str, padWith, upToLength) {
      var padding = pad(str, padWith, upToLength);
      return padding + str;
    }

    var MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE
    var MAGNITUDE_DIGITS = 3; // ditto
    var SEP = ''; // set to '_' for easier debugging 

    function collate(a, b) {

      if (a === b) {
        return 0;
      }

      a = normalizeKey(a);
      b = normalizeKey(b);

      var ai = collationIndex(a);
      var bi = collationIndex(b);
      if ((ai - bi) !== 0) {
        return ai - bi;
      }
      switch (typeof a) {
        case 'number':
          return a - b;
        case 'boolean':
          return a < b ? -1 : 1;
        case 'string':
          return stringCollate(a, b);
      }
      return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);
    }

    // couch considers null/NaN/Infinity/-Infinity === undefined,
    // for the purposes of mapreduce indexes. also, dates get stringified.
    function normalizeKey(key) {
      switch (typeof key) {
        case 'undefined':
          return null;
        case 'number':
          if (key === Infinity || key === -Infinity || isNaN(key)) {
            return null;
          }
          return key;
        case 'object':
          var origKey = key;
          if (Array.isArray(key)) {
            var len = key.length;
            key = new Array(len);
            for (var i = 0; i < len; i++) {
              key[i] = normalizeKey(origKey[i]);
            }
          /* istanbul ignore next */
          } else if (key instanceof Date) {
            return key.toJSON();
          } else if (key !== null) { // generic object
            key = {};
            for (var k in origKey) {
              if (origKey.hasOwnProperty(k)) {
                var val = origKey[k];
                if (typeof val !== 'undefined') {
                  key[k] = normalizeKey(val);
                }
              }
            }
          }
      }
      return key;
    }

    function indexify(key) {
      if (key !== null) {
        switch (typeof key) {
          case 'boolean':
            return key ? 1 : 0;
          case 'number':
            return numToIndexableString(key);
          case 'string':
            // We've to be sure that key does not contain \u0000
            // Do order-preserving replacements:
            // 0 -> 1, 1
            // 1 -> 1, 2
            // 2 -> 2, 2
            /* eslint-disable no-control-regex */
            return key
              .replace(/\u0002/g, '\u0002\u0002')
              .replace(/\u0001/g, '\u0001\u0002')
              .replace(/\u0000/g, '\u0001\u0001');
            /* eslint-enable no-control-regex */
          case 'object':
            var isArray = Array.isArray(key);
            var arr = isArray ? key : Object.keys(key);
            var i = -1;
            var len = arr.length;
            var result = '';
            if (isArray) {
              while (++i < len) {
                result += toIndexableString(arr[i]);
              }
            } else {
              while (++i < len) {
                var objKey = arr[i];
                result += toIndexableString(objKey) +
                    toIndexableString(key[objKey]);
              }
            }
            return result;
        }
      }
      return '';
    }

    // convert the given key to a string that would be appropriate
    // for lexical sorting, e.g. within a database, where the
    // sorting is the same given by the collate() function.
    function toIndexableString(key) {
      var zero = '\u0000';
      key = normalizeKey(key);
      return collationIndex(key) + SEP + indexify(key) + zero;
    }

    function parseNumber(str, i) {
      var originalIdx = i;
      var num;
      var zero = str[i] === '1';
      if (zero) {
        num = 0;
        i++;
      } else {
        var neg = str[i] === '0';
        i++;
        var numAsString = '';
        var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);
        var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;
        /* istanbul ignore next */
        if (neg) {
          magnitude = -magnitude;
        }
        i += MAGNITUDE_DIGITS;
        while (true) {
          var ch = str[i];
          if (ch === '\u0000') {
            break;
          } else {
            numAsString += ch;
          }
          i++;
        }
        numAsString = numAsString.split('.');
        if (numAsString.length === 1) {
          num = parseInt(numAsString, 10);
        } else {
          /* istanbul ignore next */
          num = parseFloat(numAsString[0] + '.' + numAsString[1]);
        }
        /* istanbul ignore next */
        if (neg) {
          num = num - 10;
        }
        /* istanbul ignore next */
        if (magnitude !== 0) {
          // parseFloat is more reliable than pow due to rounding errors
          // e.g. Number.MAX_VALUE would return Infinity if we did
          // num * Math.pow(10, magnitude);
          num = parseFloat(num + 'e' + magnitude);
        }
      }
      return {num: num, length : i - originalIdx};
    }

    // move up the stack while parsing
    // this function moved outside of parseIndexableString for performance
    function pop(stack, metaStack) {
      var obj = stack.pop();

      if (metaStack.length) {
        var lastMetaElement = metaStack[metaStack.length - 1];
        if (obj === lastMetaElement.element) {
          // popping a meta-element, e.g. an object whose value is another object
          metaStack.pop();
          lastMetaElement = metaStack[metaStack.length - 1];
        }
        var element = lastMetaElement.element;
        var lastElementIndex = lastMetaElement.index;
        if (Array.isArray(element)) {
          element.push(obj);
        } else if (lastElementIndex === stack.length - 2) { // obj with key+value
          var key = stack.pop();
          element[key] = obj;
        } else {
          stack.push(obj); // obj with key only
        }
      }
    }

    function parseIndexableString(str) {
      var stack = [];
      var metaStack = []; // stack for arrays and objects
      var i = 0;

      /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
      while (true) {
        var collationIndex = str[i++];
        if (collationIndex === '\u0000') {
          if (stack.length === 1) {
            return stack.pop();
          } else {
            pop(stack, metaStack);
            continue;
          }
        }
        switch (collationIndex) {
          case '1':
            stack.push(null);
            break;
          case '2':
            stack.push(str[i] === '1');
            i++;
            break;
          case '3':
            var parsedNum = parseNumber(str, i);
            stack.push(parsedNum.num);
            i += parsedNum.length;
            break;
          case '4':
            var parsedStr = '';
            /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
            while (true) {
              var ch = str[i];
              if (ch === '\u0000') {
                break;
              }
              parsedStr += ch;
              i++;
            }
            // perform the reverse of the order-preserving replacement
            // algorithm (see above)
            /* eslint-disable no-control-regex */
            parsedStr = parsedStr.replace(/\u0001\u0001/g, '\u0000')
              .replace(/\u0001\u0002/g, '\u0001')
              .replace(/\u0002\u0002/g, '\u0002');
            /* eslint-enable no-control-regex */
            stack.push(parsedStr);
            break;
          case '5':
            var arrayElement = { element: [], index: stack.length };
            stack.push(arrayElement.element);
            metaStack.push(arrayElement);
            break;
          case '6':
            var objElement = { element: {}, index: stack.length };
            stack.push(objElement.element);
            metaStack.push(objElement);
            break;
          /* istanbul ignore next */
          default:
            throw new Error(
              'bad collationIndex or unexpectedly reached end of input: ' +
                collationIndex);
        }
      }
    }

    function arrayCollate(a, b) {
      var len = Math.min(a.length, b.length);
      for (var i = 0; i < len; i++) {
        var sort = collate(a[i], b[i]);
        if (sort !== 0) {
          return sort;
        }
      }
      return (a.length === b.length) ? 0 :
        (a.length > b.length) ? 1 : -1;
    }
    function stringCollate(a, b) {
      // See: https://github.com/daleharvey/pouchdb/issues/40
      // This is incompatible with the CouchDB implementation, but its the
      // best we can do for now
      return (a === b) ? 0 : ((a > b) ? 1 : -1);
    }
    function objectCollate(a, b) {
      var ak = Object.keys(a), bk = Object.keys(b);
      var len = Math.min(ak.length, bk.length);
      for (var i = 0; i < len; i++) {
        // First sort the keys
        var sort = collate(ak[i], bk[i]);
        if (sort !== 0) {
          return sort;
        }
        // if the keys are equal sort the values
        sort = collate(a[ak[i]], b[bk[i]]);
        if (sort !== 0) {
          return sort;
        }

      }
      return (ak.length === bk.length) ? 0 :
        (ak.length > bk.length) ? 1 : -1;
    }
    // The collation is defined by erlangs ordered terms
    // the atoms null, true, false come first, then numbers, strings,
    // arrays, then objects
    // null/undefined/NaN/Infinity/-Infinity are all considered null
    function collationIndex(x) {
      var id = ['boolean', 'number', 'string', 'object'];
      var idx = id.indexOf(typeof x);
      //false if -1 otherwise true, but fast!!!!1
      if (~idx) {
        if (x === null) {
          return 1;
        }
        if (Array.isArray(x)) {
          return 5;
        }
        return idx < 3 ? (idx + 2) : (idx + 3);
      }
      /* istanbul ignore next */
      if (Array.isArray(x)) {
        return 5;
      }
    }

    // conversion:
    // x yyy zz...zz
    // x = 0 for negative, 1 for 0, 2 for positive
    // y = exponent (for negative numbers negated) moved so that it's >= 0
    // z = mantisse
    function numToIndexableString(num) {

      if (num === 0) {
        return '1';
      }

      // convert number to exponential format for easier and
      // more succinct string sorting
      var expFormat = num.toExponential().split(/e\+?/);
      var magnitude = parseInt(expFormat[1], 10);

      var neg = num < 0;

      var result = neg ? '0' : '2';

      // first sort by magnitude
      // it's easier if all magnitudes are positive
      var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);
      var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);

      result += SEP + magString;

      // then sort by the factor
      var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)
      /* istanbul ignore next */
      if (neg) { // for negative reverse ordering
        factor = 10 - factor;
      }

      var factorStr = factor.toFixed(20);

      // strip zeros from the end
      factorStr = factorStr.replace(/\.?0+$/, '');

      result += SEP + factorStr;

      return result;
    }

    // create a comparator based on the sort object
    function createFieldSorter(sort) {

      function getFieldValuesAsArray(doc) {
        return sort.map(function (sorting) {
          var fieldName = getKey(sorting);
          var parsedField = parseField(fieldName);
          var docFieldValue = getFieldFromDoc(doc, parsedField);
          return docFieldValue;
        });
      }

      return function (aRow, bRow) {
        var aFieldValues = getFieldValuesAsArray(aRow.doc);
        var bFieldValues = getFieldValuesAsArray(bRow.doc);
        var collation = collate(aFieldValues, bFieldValues);
        if (collation !== 0) {
          return collation;
        }
        // this is what mango seems to do
        return compare$1(aRow.doc._id, bRow.doc._id);
      };
    }

    function filterInMemoryFields(rows, requestDef, inMemoryFields) {
      rows = rows.filter(function (row) {
        return rowFilter(row.doc, requestDef.selector, inMemoryFields);
      });

      if (requestDef.sort) {
        // in-memory sort
        var fieldSorter = createFieldSorter(requestDef.sort);
        rows = rows.sort(fieldSorter);
        if (typeof requestDef.sort[0] !== 'string' &&
            getValue(requestDef.sort[0]) === 'desc') {
          rows = rows.reverse();
        }
      }

      if ('limit' in requestDef || 'skip' in requestDef) {
        // have to do the limit in-memory
        var skip = requestDef.skip || 0;
        var limit = ('limit' in requestDef ? requestDef.limit : rows.length) + skip;
        rows = rows.slice(skip, limit);
      }
      return rows;
    }

    function rowFilter(doc, selector, inMemoryFields) {
      return inMemoryFields.every(function (field) {
        var matcher = selector[field];
        var parsedField = parseField(field);
        var docFieldValue = getFieldFromDoc(doc, parsedField);
        if (isCombinationalField(field)) {
          return matchCominationalSelector(field, matcher, doc);
        }

        return matchSelector(matcher, doc, parsedField, docFieldValue);
      });
    }

    function matchSelector(matcher, doc, parsedField, docFieldValue) {
      if (!matcher) {
        // no filtering necessary; this field is just needed for sorting
        return true;
      }

      return Object.keys(matcher).every(function (userOperator) {
        var userValue = matcher[userOperator];
        return match(userOperator, doc, userValue, parsedField, docFieldValue);
      });
    }

    function matchCominationalSelector(field, matcher, doc) {

      if (field === '$or') {
        return matcher.some(function (orMatchers) {
          return rowFilter(doc, orMatchers, Object.keys(orMatchers));
        });
      }

      if (field === '$not') {
        return !rowFilter(doc, matcher, Object.keys(matcher));
      }

      //`$nor`
      return !matcher.find(function (orMatchers) {
        return rowFilter(doc, orMatchers, Object.keys(orMatchers));
      });

    }

    function match(userOperator, doc, userValue, parsedField, docFieldValue) {
      if (!matchers[userOperator]) {
        throw new Error('unknown operator "' + userOperator +
          '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, ' +
          '$nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
      }
      return matchers[userOperator](doc, userValue, parsedField, docFieldValue);
    }

    function fieldExists(docFieldValue) {
      return typeof docFieldValue !== 'undefined' && docFieldValue !== null;
    }

    function fieldIsNotUndefined(docFieldValue) {
      return typeof docFieldValue !== 'undefined';
    }

    function modField(docFieldValue, userValue) {
      var divisor = userValue[0];
      var mod = userValue[1];
      if (divisor === 0) {
        throw new Error('Bad divisor, cannot divide by zero');
      }

      if (parseInt(divisor, 10) !== divisor ) {
        throw new Error('Divisor is not an integer');
      }

      if (parseInt(mod, 10) !== mod ) {
        throw new Error('Modulus is not an integer');
      }

      if (parseInt(docFieldValue, 10) !== docFieldValue) {
        return false;
      }

      return docFieldValue % divisor === mod;
    }

    function arrayContainsValue(docFieldValue, userValue) {
      return userValue.some(function (val) {
        if (docFieldValue instanceof Array) {
          return docFieldValue.indexOf(val) > -1;
        }

        return docFieldValue === val;
      });
    }

    function arrayContainsAllValues(docFieldValue, userValue) {
      return userValue.every(function (val) {
        return docFieldValue.indexOf(val) > -1;
      });
    }

    function arraySize(docFieldValue, userValue) {
      return docFieldValue.length === userValue;
    }

    function regexMatch(docFieldValue, userValue) {
      var re = new RegExp(userValue);

      return re.test(docFieldValue);
    }

    function typeMatch(docFieldValue, userValue) {

      switch (userValue) {
        case 'null':
          return docFieldValue === null;
        case 'boolean':
          return typeof (docFieldValue) === 'boolean';
        case 'number':
          return typeof (docFieldValue) === 'number';
        case 'string':
          return typeof (docFieldValue) === 'string';
        case 'array':
          return docFieldValue instanceof Array;
        case 'object':
          return ({}).toString.call(docFieldValue) === '[object Object]';
      }

      throw new Error(userValue + ' not supported as a type.' +
                      'Please use one of object, string, array, number, boolean or null.');

    }

    var matchers = {

      '$elemMatch': function (doc, userValue, parsedField, docFieldValue) {
        if (!Array.isArray(docFieldValue)) {
          return false;
        }

        if (docFieldValue.length === 0) {
          return false;
        }

        if (typeof docFieldValue[0] === 'object') {
          return docFieldValue.some(function (val) {
            return rowFilter(val, userValue, Object.keys(userValue));
          });
        }

        return docFieldValue.some(function (val) {
          return matchSelector(userValue, doc, parsedField, val);
        });
      },

      '$allMatch': function (doc, userValue, parsedField, docFieldValue) {
        if (!Array.isArray(docFieldValue)) {
          return false;
        }

        /* istanbul ignore next */
        if (docFieldValue.length === 0) {
          return false;
        }

        if (typeof docFieldValue[0] === 'object') {
          return docFieldValue.every(function (val) {
            return rowFilter(val, userValue, Object.keys(userValue));
          });
        }

        return docFieldValue.every(function (val) {
          return matchSelector(userValue, doc, parsedField, val);
        });
      },

      '$eq': function (doc, userValue, parsedField, docFieldValue) {
        return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) === 0;
      },

      '$gte': function (doc, userValue, parsedField, docFieldValue) {
        return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) >= 0;
      },

      '$gt': function (doc, userValue, parsedField, docFieldValue) {
        return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) > 0;
      },

      '$lte': function (doc, userValue, parsedField, docFieldValue) {
        return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) <= 0;
      },

      '$lt': function (doc, userValue, parsedField, docFieldValue) {
        return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) < 0;
      },

      '$exists': function (doc, userValue, parsedField, docFieldValue) {
        //a field that is null is still considered to exist
        if (userValue) {
          return fieldIsNotUndefined(docFieldValue);
        }

        return !fieldIsNotUndefined(docFieldValue);
      },

      '$mod': function (doc, userValue, parsedField, docFieldValue) {
        return fieldExists(docFieldValue) && modField(docFieldValue, userValue);
      },

      '$ne': function (doc, userValue, parsedField, docFieldValue) {
        return userValue.every(function (neValue) {
          return collate(docFieldValue, neValue) !== 0;
        });
      },
      '$in': function (doc, userValue, parsedField, docFieldValue) {
        return fieldExists(docFieldValue) && arrayContainsValue(docFieldValue, userValue);
      },

      '$nin': function (doc, userValue, parsedField, docFieldValue) {
        return fieldExists(docFieldValue) && !arrayContainsValue(docFieldValue, userValue);
      },

      '$size': function (doc, userValue, parsedField, docFieldValue) {
        return fieldExists(docFieldValue) && arraySize(docFieldValue, userValue);
      },

      '$all': function (doc, userValue, parsedField, docFieldValue) {
        return Array.isArray(docFieldValue) && arrayContainsAllValues(docFieldValue, userValue);
      },

      '$regex': function (doc, userValue, parsedField, docFieldValue) {
        return fieldExists(docFieldValue) && regexMatch(docFieldValue, userValue);
      },

      '$type': function (doc, userValue, parsedField, docFieldValue) {
        return typeMatch(docFieldValue, userValue);
      }
    };

    // return true if the given doc matches the supplied selector
    function matchesSelector(doc, selector) {
      /* istanbul ignore if */
      if (typeof selector !== 'object') {
        // match the CouchDB error message
        throw new Error('Selector error: expected a JSON object');
      }

      selector = massageSelector(selector);
      var row = {
        'doc': doc
      };

      var rowsMatched = filterInMemoryFields([row], { 'selector': selector }, Object.keys(selector));
      return rowsMatched && rowsMatched.length === 1;
    }

    function evalFilter(input) {
      return scopeEval('"use strict";\nreturn ' + input + ';', {});
    }

    function evalView(input) {
      var code = [
        'return function(doc) {',
        '  "use strict";',
        '  var emitted = false;',
        '  var emit = function (a, b) {',
        '    emitted = true;',
        '  };',
        '  var view = ' + input + ';',
        '  view(doc);',
        '  if (emitted) {',
        '    return true;',
        '  }',
        '};'
      ].join('\n');

      return scopeEval(code, {});
    }

    function validate(opts, callback) {
      if (opts.selector) {
        if (opts.filter && opts.filter !== '_selector') {
          var filterName = typeof opts.filter === 'string' ?
            opts.filter : 'function';
          return callback(new Error('selector invalid for filter "' + filterName + '"'));
        }
      }
      callback();
    }

    function normalize(opts) {
      if (opts.view && !opts.filter) {
        opts.filter = '_view';
      }

      if (opts.selector && !opts.filter) {
        opts.filter = '_selector';
      }

      if (opts.filter && typeof opts.filter === 'string') {
        if (opts.filter === '_view') {
          opts.view = normalizeDesignDocFunctionName(opts.view);
        } else {
          opts.filter = normalizeDesignDocFunctionName(opts.filter);
        }
      }
    }

    function shouldFilter(changesHandler, opts) {
      return opts.filter && typeof opts.filter === 'string' &&
        !opts.doc_ids && !isRemote(changesHandler.db);
    }

    function filter(changesHandler, opts) {
      var callback = opts.complete;
      if (opts.filter === '_view') {
        if (!opts.view || typeof opts.view !== 'string') {
          var err = createError(BAD_REQUEST,
            '`view` filter parameter not found or invalid.');
          return callback(err);
        }
        // fetch a view from a design doc, make it behave like a filter
        var viewName = parseDesignDocFunctionName(opts.view);
        changesHandler.db.get('_design/' + viewName[0], function (err, ddoc) {
          /* istanbul ignore if */
          if (changesHandler.isCancelled) {
            return callback(null, {status: 'cancelled'});
          }
          /* istanbul ignore next */
          if (err) {
            return callback(generateErrorFromResponse(err));
          }
          var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&
            ddoc.views[viewName[1]].map;
          if (!mapFun) {
            return callback(createError(MISSING_DOC,
              (ddoc.views ? 'missing json key: ' + viewName[1] :
                'missing json key: views')));
          }
          opts.filter = evalView(mapFun);
          changesHandler.doChanges(opts);
        });
      } else if (opts.selector) {
        opts.filter = function (doc) {
          return matchesSelector(doc, opts.selector);
        };
        changesHandler.doChanges(opts);
      } else {
        // fetch a filter from a design doc
        var filterName = parseDesignDocFunctionName(opts.filter);
        changesHandler.db.get('_design/' + filterName[0], function (err, ddoc) {
          /* istanbul ignore if */
          if (changesHandler.isCancelled) {
            return callback(null, {status: 'cancelled'});
          }
          /* istanbul ignore next */
          if (err) {
            return callback(generateErrorFromResponse(err));
          }
          var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];
          if (!filterFun) {
            return callback(createError(MISSING_DOC,
              ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]
                : 'missing json key: filters')));
          }
          opts.filter = evalFilter(filterFun);
          changesHandler.doChanges(opts);
        });
      }
    }

    function applyChangesFilterPlugin(PouchDB) {
      PouchDB._changesFilterPlugin = {
        validate: validate,
        normalize: normalize,
        shouldFilter: shouldFilter,
        filter: filter
      };
    }

    // TODO: remove from pouchdb-core (breaking)
    PouchDB.plugin(applyChangesFilterPlugin);

    PouchDB.version = version;

    function toObject(array) {
      return array.reduce(function (obj, item) {
        obj[item] = true;
        return obj;
      }, {});
    }
    // List of top level reserved words for doc
    var reservedWords = toObject([
      '_id',
      '_rev',
      '_attachments',
      '_deleted',
      '_revisions',
      '_revs_info',
      '_conflicts',
      '_deleted_conflicts',
      '_local_seq',
      '_rev_tree',
      //replication documents
      '_replication_id',
      '_replication_state',
      '_replication_state_time',
      '_replication_state_reason',
      '_replication_stats',
      // Specific to Couchbase Sync Gateway
      '_removed'
    ]);

    // List of reserved words that should end up the document
    var dataWords = toObject([
      '_attachments',
      //replication documents
      '_replication_id',
      '_replication_state',
      '_replication_state_time',
      '_replication_state_reason',
      '_replication_stats'
    ]);

    function parseRevisionInfo(rev) {
      if (!/^\d+-./.test(rev)) {
        return createError(INVALID_REV);
      }
      var idx = rev.indexOf('-');
      var left = rev.substring(0, idx);
      var right = rev.substring(idx + 1);
      return {
        prefix: parseInt(left, 10),
        id: right
      };
    }

    function makeRevTreeFromRevisions(revisions, opts) {
      var pos = revisions.start - revisions.ids.length + 1;

      var revisionIds = revisions.ids;
      var ids = [revisionIds[0], opts, []];

      for (var i = 1, len = revisionIds.length; i < len; i++) {
        ids = [revisionIds[i], {status: 'missing'}, [ids]];
      }

      return [{
        pos: pos,
        ids: ids
      }];
    }

    // Preprocess documents, parse their revisions, assign an id and a
    // revision for new writes that are missing them, etc
    function parseDoc(doc, newEdits, dbOpts) {
      if (!dbOpts) {
        dbOpts = {
          deterministic_revs: true
        };
      }

      var nRevNum;
      var newRevId;
      var revInfo;
      var opts = {status: 'available'};
      if (doc._deleted) {
        opts.deleted = true;
      }

      if (newEdits) {
        if (!doc._id) {
          doc._id = uuid();
        }
        newRevId = rev$$1(doc, dbOpts.deterministic_revs);
        if (doc._rev) {
          revInfo = parseRevisionInfo(doc._rev);
          if (revInfo.error) {
            return revInfo;
          }
          doc._rev_tree = [{
            pos: revInfo.prefix,
            ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]
          }];
          nRevNum = revInfo.prefix + 1;
        } else {
          doc._rev_tree = [{
            pos: 1,
            ids : [newRevId, opts, []]
          }];
          nRevNum = 1;
        }
      } else {
        if (doc._revisions) {
          doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);
          nRevNum = doc._revisions.start;
          newRevId = doc._revisions.ids[0];
        }
        if (!doc._rev_tree) {
          revInfo = parseRevisionInfo(doc._rev);
          if (revInfo.error) {
            return revInfo;
          }
          nRevNum = revInfo.prefix;
          newRevId = revInfo.id;
          doc._rev_tree = [{
            pos: nRevNum,
            ids: [newRevId, opts, []]
          }];
        }
      }

      invalidIdError(doc._id);

      doc._rev = nRevNum + '-' + newRevId;

      var result = {metadata : {}, data : {}};
      for (var key in doc) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(doc, key)) {
          var specialKey = key[0] === '_';
          if (specialKey && !reservedWords[key]) {
            var error = createError(DOC_VALIDATION, key);
            error.message = DOC_VALIDATION.message + ': ' + key;
            throw error;
          } else if (specialKey && !dataWords[key]) {
            result.metadata[key.slice(1)] = doc[key];
          } else {
            result.data[key] = doc[key];
          }
        }
      }
      return result;
    }

    function parseBase64(data) {
      try {
        return thisAtob(data);
      } catch (e) {
        var err = createError(BAD_ARG,
          'Attachment is not a valid base64 string');
        return {error: err};
      }
    }

    function preprocessString(att, blobType, callback) {
      var asBinary = parseBase64(att.data);
      if (asBinary.error) {
        return callback(asBinary.error);
      }

      att.length = asBinary.length;
      if (blobType === 'blob') {
        att.data = binStringToBluffer(asBinary, att.content_type);
      } else if (blobType === 'base64') {
        att.data = thisBtoa(asBinary);
      } else { // binary
        att.data = asBinary;
      }
      binaryMd5(asBinary, function (result) {
        att.digest = 'md5-' + result;
        callback();
      });
    }

    function preprocessBlob(att, blobType, callback) {
      binaryMd5(att.data, function (md5) {
        att.digest = 'md5-' + md5;
        // size is for blobs (browser), length is for buffers (node)
        att.length = att.data.size || att.data.length || 0;
        if (blobType === 'binary') {
          blobToBinaryString(att.data, function (binString) {
            att.data = binString;
            callback();
          });
        } else if (blobType === 'base64') {
          blobToBase64(att.data, function (b64) {
            att.data = b64;
            callback();
          });
        } else {
          callback();
        }
      });
    }

    function preprocessAttachment(att, blobType, callback) {
      if (att.stub) {
        return callback();
      }
      if (typeof att.data === 'string') { // input is a base64 string
        preprocessString(att, blobType, callback);
      } else { // input is a blob
        preprocessBlob(att, blobType, callback);
      }
    }

    function preprocessAttachments(docInfos, blobType, callback) {

      if (!docInfos.length) {
        return callback();
      }

      var docv = 0;
      var overallErr;

      docInfos.forEach(function (docInfo) {
        var attachments = docInfo.data && docInfo.data._attachments ?
          Object.keys(docInfo.data._attachments) : [];
        var recv = 0;

        if (!attachments.length) {
          return done();
        }

        function processedAttachment(err) {
          overallErr = err;
          recv++;
          if (recv === attachments.length) {
            done();
          }
        }

        for (var key in docInfo.data._attachments) {
          if (docInfo.data._attachments.hasOwnProperty(key)) {
            preprocessAttachment(docInfo.data._attachments[key],
              blobType, processedAttachment);
          }
        }
      });

      function done() {
        docv++;
        if (docInfos.length === docv) {
          if (overallErr) {
            callback(overallErr);
          } else {
            callback();
          }
        }
      }
    }

    function updateDoc(revLimit, prev, docInfo, results,
                       i, cb, writeDoc, newEdits) {

      if (revExists(prev.rev_tree, docInfo.metadata.rev) && !newEdits) {
        results[i] = docInfo;
        return cb();
      }

      // sometimes this is pre-calculated. historically not always
      var previousWinningRev = prev.winningRev || winningRev(prev);
      var previouslyDeleted = 'deleted' in prev ? prev.deleted :
        isDeleted(prev, previousWinningRev);
      var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :
        isDeleted(docInfo.metadata);
      var isRoot = /^1-/.test(docInfo.metadata.rev);

      if (previouslyDeleted && !deleted && newEdits && isRoot) {
        var newDoc = docInfo.data;
        newDoc._rev = previousWinningRev;
        newDoc._id = docInfo.metadata.id;
        docInfo = parseDoc(newDoc, newEdits);
      }

      var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);

      var inConflict = newEdits && ((
        (previouslyDeleted && deleted && merged.conflicts !== 'new_leaf') ||
        (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||
        (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));

      if (inConflict) {
        var err = createError(REV_CONFLICT);
        results[i] = err;
        return cb();
      }

      var newRev = docInfo.metadata.rev;
      docInfo.metadata.rev_tree = merged.tree;
      docInfo.stemmedRevs = merged.stemmedRevs || [];
      /* istanbul ignore else */
      if (prev.rev_map) {
        docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb
      }

      // recalculate
      var winningRev$$1 = winningRev(docInfo.metadata);
      var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$1);

      // calculate the total number of documents that were added/removed,
      // from the perspective of total_rows/doc_count
      var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :
        previouslyDeleted < winningRevIsDeleted ? -1 : 1;

      var newRevIsDeleted;
      if (newRev === winningRev$$1) {
        // if the new rev is the same as the winning rev, we can reuse that value
        newRevIsDeleted = winningRevIsDeleted;
      } else {
        // if they're not the same, then we need to recalculate
        newRevIsDeleted = isDeleted(docInfo.metadata, newRev);
      }

      writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
        true, delta, i, cb);
    }

    function rootIsMissing(docInfo) {
      return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';
    }

    function processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,
                         writeDoc, opts, overallCallback) {

      // Default to 1000 locally
      revLimit = revLimit || 1000;

      function insertDoc(docInfo, resultsIdx, callback) {
        // Cant insert new deleted documents
        var winningRev$$1 = winningRev(docInfo.metadata);
        var deleted = isDeleted(docInfo.metadata, winningRev$$1);
        if ('was_delete' in opts && deleted) {
          results[resultsIdx] = createError(MISSING_DOC, 'deleted');
          return callback();
        }

        // 4712 - detect whether a new document was inserted with a _rev
        var inConflict = newEdits && rootIsMissing(docInfo);

        if (inConflict) {
          var err = createError(REV_CONFLICT);
          results[resultsIdx] = err;
          return callback();
        }

        var delta = deleted ? 0 : 1;

        writeDoc(docInfo, winningRev$$1, deleted, deleted, false,
          delta, resultsIdx, callback);
      }

      var newEdits = opts.new_edits;
      var idsToDocs = new ExportedMap();

      var docsDone = 0;
      var docsToDo = docInfos.length;

      function checkAllDocsDone() {
        if (++docsDone === docsToDo && overallCallback) {
          overallCallback();
        }
      }

      docInfos.forEach(function (currentDoc, resultsIdx) {

        if (currentDoc._id && isLocalId(currentDoc._id)) {
          var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';
          api[fun](currentDoc, {ctx: tx}, function (err, res) {
            results[resultsIdx] = err || res;
            checkAllDocsDone();
          });
          return;
        }

        var id = currentDoc.metadata.id;
        if (idsToDocs.has(id)) {
          docsToDo--; // duplicate
          idsToDocs.get(id).push([currentDoc, resultsIdx]);
        } else {
          idsToDocs.set(id, [[currentDoc, resultsIdx]]);
        }
      });

      // in the case of new_edits, the user can provide multiple docs
      // with the same id. these need to be processed sequentially
      idsToDocs.forEach(function (docs, id) {
        var numDone = 0;

        function docWritten() {
          if (++numDone < docs.length) {
            nextDoc();
          } else {
            checkAllDocsDone();
          }
        }
        function nextDoc() {
          var value = docs[numDone];
          var currentDoc = value[0];
          var resultsIdx = value[1];

          if (fetchedDocs.has(id)) {
            updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,
              resultsIdx, docWritten, writeDoc, newEdits);
          } else {
            // Ensure stemming applies to new writes as well
            var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);
            currentDoc.metadata.rev_tree = merged.tree;
            currentDoc.stemmedRevs = merged.stemmedRevs || [];
            insertDoc(currentDoc, resultsIdx, docWritten);
          }
        }
        nextDoc();
      });
    }

    // IndexedDB requires a versioned database structure, so we use the
    // version here to manage migrations.
    var ADAPTER_VERSION = 5;

    // The object stores created for each database
    // DOC_STORE stores the document meta data, its revision history and state
    // Keyed by document id
    var DOC_STORE = 'document-store';
    // BY_SEQ_STORE stores a particular version of a document, keyed by its
    // sequence id
    var BY_SEQ_STORE = 'by-sequence';
    // Where we store attachments
    var ATTACH_STORE = 'attach-store';
    // Where we store many-to-many relations
    // between attachment digests and seqs
    var ATTACH_AND_SEQ_STORE = 'attach-seq-store';

    // Where we store database-wide meta data in a single record
    // keyed by id: META_STORE
    var META_STORE = 'meta-store';
    // Where we store local documents
    var LOCAL_STORE = 'local-store';
    // Where we detect blob support
    var DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';

    function safeJsonParse(str) {
      // This try/catch guards against stack overflow errors.
      // JSON.parse() is faster than vuvuzela.parse() but vuvuzela
      // cannot overflow.
      try {
        return JSON.parse(str);
      } catch (e) {
        /* istanbul ignore next */
        return vuvuzela.parse(str);
      }
    }

    function safeJsonStringify(json) {
      try {
        return JSON.stringify(json);
      } catch (e) {
        /* istanbul ignore next */
        return vuvuzela.stringify(json);
      }
    }

    function idbError(callback) {
      return function (evt) {
        var message = 'unknown_error';
        if (evt.target && evt.target.error) {
          message = evt.target.error.name || evt.target.error.message;
        }
        callback(createError(IDB_ERROR, message, evt.type));
      };
    }

    // Unfortunately, the metadata has to be stringified
    // when it is put into the database, because otherwise
    // IndexedDB can throw errors for deeply-nested objects.
    // Originally we just used JSON.parse/JSON.stringify; now
    // we use this custom vuvuzela library that avoids recursion.
    // If we could do it all over again, we'd probably use a
    // format for the revision trees other than JSON.
    function encodeMetadata(metadata, winningRev, deleted) {
      return {
        data: safeJsonStringify(metadata),
        winningRev: winningRev,
        deletedOrLocal: deleted ? '1' : '0',
        seq: metadata.seq, // highest seq for this doc
        id: metadata.id
      };
    }

    function decodeMetadata(storedObject) {
      if (!storedObject) {
        return null;
      }
      var metadata = safeJsonParse(storedObject.data);
      metadata.winningRev = storedObject.winningRev;
      metadata.deleted = storedObject.deletedOrLocal === '1';
      metadata.seq = storedObject.seq;
      return metadata;
    }

    // read the doc back out from the database. we don't store the
    // _id or _rev because we already have _doc_id_rev.
    function decodeDoc(doc) {
      if (!doc) {
        return doc;
      }
      var idx = doc._doc_id_rev.lastIndexOf(':');
      doc._id = doc._doc_id_rev.substring(0, idx - 1);
      doc._rev = doc._doc_id_rev.substring(idx + 1);
      delete doc._doc_id_rev;
      return doc;
    }

    // Read a blob from the database, encoding as necessary
    // and translating from base64 if the IDB doesn't support
    // native Blobs
    function readBlobData(body, type, asBlob, callback) {
      if (asBlob) {
        if (!body) {
          callback(createBlob([''], {type: type}));
        } else if (typeof body !== 'string') { // we have blob support
          callback(body);
        } else { // no blob support
          callback(b64ToBluffer(body, type));
        }
      } else { // as base64 string
        if (!body) {
          callback('');
        } else if (typeof body !== 'string') { // we have blob support
          readAsBinaryString(body, function (binary) {
            callback(thisBtoa(binary));
          });
        } else { // no blob support
          callback(body);
        }
      }
    }

    function fetchAttachmentsIfNecessary(doc, opts, txn, cb) {
      var attachments = Object.keys(doc._attachments || {});
      if (!attachments.length) {
        return cb && cb();
      }
      var numDone = 0;

      function checkDone() {
        if (++numDone === attachments.length && cb) {
          cb();
        }
      }

      function fetchAttachment(doc, att) {
        var attObj = doc._attachments[att];
        var digest = attObj.digest;
        var req = txn.objectStore(ATTACH_STORE).get(digest);
        req.onsuccess = function (e) {
          attObj.body = e.target.result.body;
          checkDone();
        };
      }

      attachments.forEach(function (att) {
        if (opts.attachments && opts.include_docs) {
          fetchAttachment(doc, att);
        } else {
          doc._attachments[att].stub = true;
          checkDone();
        }
      });
    }

    // IDB-specific postprocessing necessary because
    // we don't know whether we stored a true Blob or
    // a base64-encoded string, and if it's a Blob it
    // needs to be read outside of the transaction context
    function postProcessAttachments(results, asBlob) {
      return Promise.all(results.map(function (row) {
        if (row.doc && row.doc._attachments) {
          var attNames = Object.keys(row.doc._attachments);
          return Promise.all(attNames.map(function (att) {
            var attObj = row.doc._attachments[att];
            if (!('body' in attObj)) { // already processed
              return;
            }
            var body = attObj.body;
            var type = attObj.content_type;
            return new Promise(function (resolve) {
              readBlobData(body, type, asBlob, function (data) {
                row.doc._attachments[att] = $inject_Object_assign(
                  pick(attObj, ['digest', 'content_type']),
                  {data: data}
                );
                resolve();
              });
            });
          }));
        }
      }));
    }

    function compactRevs(revs, docId, txn) {

      var possiblyOrphanedDigests = [];
      var seqStore = txn.objectStore(BY_SEQ_STORE);
      var attStore = txn.objectStore(ATTACH_STORE);
      var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
      var count = revs.length;

      function checkDone() {
        count--;
        if (!count) { // done processing all revs
          deleteOrphanedAttachments();
        }
      }

      function deleteOrphanedAttachments() {
        if (!possiblyOrphanedDigests.length) {
          return;
        }
        possiblyOrphanedDigests.forEach(function (digest) {
          var countReq = attAndSeqStore.index('digestSeq').count(
            IDBKeyRange.bound(
              digest + '::', digest + '::\uffff', false, false));
          countReq.onsuccess = function (e) {
            var count = e.target.result;
            if (!count) {
              // orphaned
              attStore["delete"](digest);
            }
          };
        });
      }

      revs.forEach(function (rev) {
        var index = seqStore.index('_doc_id_rev');
        var key = docId + "::" + rev;
        index.getKey(key).onsuccess = function (e) {
          var seq = e.target.result;
          if (typeof seq !== 'number') {
            return checkDone();
          }
          seqStore["delete"](seq);

          var cursor = attAndSeqStore.index('seq')
            .openCursor(IDBKeyRange.only(seq));

          cursor.onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              var digest = cursor.value.digestSeq.split('::')[0];
              possiblyOrphanedDigests.push(digest);
              attAndSeqStore["delete"](cursor.primaryKey);
              cursor["continue"]();
            } else { // done
              checkDone();
            }
          };
        };
      });
    }

    function openTransactionSafely(idb, stores, mode) {
      try {
        return {
          txn: idb.transaction(stores, mode)
        };
      } catch (err) {
        return {
          error: err
        };
      }
    }

    var changesHandler = new Changes();

    function idbBulkDocs(dbOpts, req, opts, api, idb, callback) {
      var docInfos = req.docs;
      var txn;
      var docStore;
      var bySeqStore;
      var attachStore;
      var attachAndSeqStore;
      var metaStore;
      var docInfoError;
      var metaDoc;

      for (var i = 0, len = docInfos.length; i < len; i++) {
        var doc = docInfos[i];
        if (doc._id && isLocalId(doc._id)) {
          continue;
        }
        doc = docInfos[i] = parseDoc(doc, opts.new_edits, dbOpts);
        if (doc.error && !docInfoError) {
          docInfoError = doc;
        }
      }

      if (docInfoError) {
        return callback(docInfoError);
      }

      var allDocsProcessed = false;
      var docCountDelta = 0;
      var results = new Array(docInfos.length);
      var fetchedDocs = new ExportedMap();
      var preconditionErrored = false;
      var blobType = api._meta.blobSupport ? 'blob' : 'base64';

      preprocessAttachments(docInfos, blobType, function (err) {
        if (err) {
          return callback(err);
        }
        startTransaction();
      });

      function startTransaction() {

        var stores = [
          DOC_STORE, BY_SEQ_STORE,
          ATTACH_STORE,
          LOCAL_STORE, ATTACH_AND_SEQ_STORE,
          META_STORE
        ];
        var txnResult = openTransactionSafely(idb, stores, 'readwrite');
        if (txnResult.error) {
          return callback(txnResult.error);
        }
        txn = txnResult.txn;
        txn.onabort = idbError(callback);
        txn.ontimeout = idbError(callback);
        txn.oncomplete = complete;
        docStore = txn.objectStore(DOC_STORE);
        bySeqStore = txn.objectStore(BY_SEQ_STORE);
        attachStore = txn.objectStore(ATTACH_STORE);
        attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
        metaStore = txn.objectStore(META_STORE);

        metaStore.get(META_STORE).onsuccess = function (e) {
          metaDoc = e.target.result;
          updateDocCountIfReady();
        };

        verifyAttachments(function (err) {
          if (err) {
            preconditionErrored = true;
            return callback(err);
          }
          fetchExistingDocs();
        });
      }

      function onAllDocsProcessed() {
        allDocsProcessed = true;
        updateDocCountIfReady();
      }

      function idbProcessDocs() {
        processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,
                    txn, results, writeDoc, opts, onAllDocsProcessed);
      }

      function updateDocCountIfReady() {
        if (!metaDoc || !allDocsProcessed) {
          return;
        }
        // caching the docCount saves a lot of time in allDocs() and
        // info(), which is why we go to all the trouble of doing this
        metaDoc.docCount += docCountDelta;
        metaStore.put(metaDoc);
      }

      function fetchExistingDocs() {

        if (!docInfos.length) {
          return;
        }

        var numFetched = 0;

        function checkDone() {
          if (++numFetched === docInfos.length) {
            idbProcessDocs();
          }
        }

        function readMetadata(event) {
          var metadata = decodeMetadata(event.target.result);

          if (metadata) {
            fetchedDocs.set(metadata.id, metadata);
          }
          checkDone();
        }

        for (var i = 0, len = docInfos.length; i < len; i++) {
          var docInfo = docInfos[i];
          if (docInfo._id && isLocalId(docInfo._id)) {
            checkDone(); // skip local docs
            continue;
          }
          var req = docStore.get(docInfo.metadata.id);
          req.onsuccess = readMetadata;
        }
      }

      function complete() {
        if (preconditionErrored) {
          return;
        }

        changesHandler.notify(api._meta.name);
        callback(null, results);
      }

      function verifyAttachment(digest, callback) {

        var req = attachStore.get(digest);
        req.onsuccess = function (e) {
          if (!e.target.result) {
            var err = createError(MISSING_STUB,
              'unknown stub attachment with digest ' +
              digest);
            err.status = 412;
            callback(err);
          } else {
            callback();
          }
        };
      }

      function verifyAttachments(finish) {


        var digests = [];
        docInfos.forEach(function (docInfo) {
          if (docInfo.data && docInfo.data._attachments) {
            Object.keys(docInfo.data._attachments).forEach(function (filename) {
              var att = docInfo.data._attachments[filename];
              if (att.stub) {
                digests.push(att.digest);
              }
            });
          }
        });
        if (!digests.length) {
          return finish();
        }
        var numDone = 0;
        var err;

        function checkDone() {
          if (++numDone === digests.length) {
            finish(err);
          }
        }
        digests.forEach(function (digest) {
          verifyAttachment(digest, function (attErr) {
            if (attErr && !err) {
              err = attErr;
            }
            checkDone();
          });
        });
      }

      function writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
                        isUpdate, delta, resultsIdx, callback) {

        docInfo.metadata.winningRev = winningRev$$1;
        docInfo.metadata.deleted = winningRevIsDeleted;

        var doc = docInfo.data;
        doc._id = docInfo.metadata.id;
        doc._rev = docInfo.metadata.rev;

        if (newRevIsDeleted) {
          doc._deleted = true;
        }

        var hasAttachments = doc._attachments &&
          Object.keys(doc._attachments).length;
        if (hasAttachments) {
          return writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
            isUpdate, resultsIdx, callback);
        }

        docCountDelta += delta;
        updateDocCountIfReady();

        finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
          isUpdate, resultsIdx, callback);
      }

      function finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
                         isUpdate, resultsIdx, callback) {

        var doc = docInfo.data;
        var metadata = docInfo.metadata;

        doc._doc_id_rev = metadata.id + '::' + metadata.rev;
        delete doc._id;
        delete doc._rev;

        function afterPutDoc(e) {
          var revsToDelete = docInfo.stemmedRevs || [];

          if (isUpdate && api.auto_compaction) {
            revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));
          }

          if (revsToDelete && revsToDelete.length) {
            compactRevs(revsToDelete, docInfo.metadata.id, txn);
          }

          metadata.seq = e.target.result;
          // Current _rev is calculated from _rev_tree on read
          // delete metadata.rev;
          var metadataToStore = encodeMetadata(metadata, winningRev$$1,
            winningRevIsDeleted);
          var metaDataReq = docStore.put(metadataToStore);
          metaDataReq.onsuccess = afterPutMetadata;
        }

        function afterPutDocError(e) {
          // ConstraintError, need to update, not put (see #1638 for details)
          e.preventDefault(); // avoid transaction abort
          e.stopPropagation(); // avoid transaction onerror
          var index = bySeqStore.index('_doc_id_rev');
          var getKeyReq = index.getKey(doc._doc_id_rev);
          getKeyReq.onsuccess = function (e) {
            var putReq = bySeqStore.put(doc, e.target.result);
            putReq.onsuccess = afterPutDoc;
          };
        }

        function afterPutMetadata() {
          results[resultsIdx] = {
            ok: true,
            id: metadata.id,
            rev: metadata.rev
          };
          fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);
          insertAttachmentMappings(docInfo, metadata.seq, callback);
        }

        var putReq = bySeqStore.put(doc);

        putReq.onsuccess = afterPutDoc;
        putReq.onerror = afterPutDocError;
      }

      function writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
                                isUpdate, resultsIdx, callback) {


        var doc = docInfo.data;

        var numDone = 0;
        var attachments = Object.keys(doc._attachments);

        function collectResults() {
          if (numDone === attachments.length) {
            finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
              isUpdate, resultsIdx, callback);
          }
        }

        function attachmentSaved() {
          numDone++;
          collectResults();
        }

        attachments.forEach(function (key) {
          var att = docInfo.data._attachments[key];
          if (!att.stub) {
            var data = att.data;
            delete att.data;
            att.revpos = parseInt(winningRev$$1, 10);
            var digest = att.digest;
            saveAttachment(digest, data, attachmentSaved);
          } else {
            numDone++;
            collectResults();
          }
        });
      }

      // map seqs to attachment digests, which
      // we will need later during compaction
      function insertAttachmentMappings(docInfo, seq, callback) {

        var attsAdded = 0;
        var attsToAdd = Object.keys(docInfo.data._attachments || {});

        if (!attsToAdd.length) {
          return callback();
        }

        function checkDone() {
          if (++attsAdded === attsToAdd.length) {
            callback();
          }
        }

        function add(att) {
          var digest = docInfo.data._attachments[att].digest;
          var req = attachAndSeqStore.put({
            seq: seq,
            digestSeq: digest + '::' + seq
          });

          req.onsuccess = checkDone;
          req.onerror = function (e) {
            // this callback is for a constaint error, which we ignore
            // because this docid/rev has already been associated with
            // the digest (e.g. when new_edits == false)
            e.preventDefault(); // avoid transaction abort
            e.stopPropagation(); // avoid transaction onerror
            checkDone();
          };
        }
        for (var i = 0; i < attsToAdd.length; i++) {
          add(attsToAdd[i]); // do in parallel
        }
      }

      function saveAttachment(digest, data, callback) {


        var getKeyReq = attachStore.count(digest);
        getKeyReq.onsuccess = function (e) {
          var count = e.target.result;
          if (count) {
            return callback(); // already exists
          }
          var newAtt = {
            digest: digest,
            body: data
          };
          var putReq = attachStore.put(newAtt);
          putReq.onsuccess = callback;
        };
      }
    }

    // Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations
    // while falling back to a normal IDBCursor operation on browsers that don't support getAll() or
    // getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because
    // we're not processing each document one-at-a-time.
    function runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {

      if (batchSize === -1) {
        batchSize = 1000;
      }

      // Bail out of getAll()/getAllKeys() in the following cases:
      // 1) either method is unsupported - we need both
      // 2) batchSize is 1 (might as well use IDBCursor)
      // 3) descending – no real way to do this via getAll()/getAllKeys()

      var useGetAll = typeof objectStore.getAll === 'function' &&
        typeof objectStore.getAllKeys === 'function' &&
        batchSize > 1 && !descending;

      var keysBatch;
      var valuesBatch;
      var pseudoCursor;

      function onGetAll(e) {
        valuesBatch = e.target.result;
        if (keysBatch) {
          onBatch(keysBatch, valuesBatch, pseudoCursor);
        }
      }

      function onGetAllKeys(e) {
        keysBatch = e.target.result;
        if (valuesBatch) {
          onBatch(keysBatch, valuesBatch, pseudoCursor);
        }
      }

      function continuePseudoCursor() {
        if (!keysBatch.length) { // no more results
          return onBatch();
        }
        // fetch next batch, exclusive start
        var lastKey = keysBatch[keysBatch.length - 1];
        var newKeyRange;
        if (keyRange && keyRange.upper) {
          try {
            newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,
              true, keyRange.upperOpen);
          } catch (e) {
            if (e.name === "DataError" && e.code === 0) {
              return onBatch(); // we're done, startkey and endkey are equal
            }
          }
        } else {
          newKeyRange = IDBKeyRange.lowerBound(lastKey, true);
        }
        keyRange = newKeyRange;
        keysBatch = null;
        valuesBatch = null;
        objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
        objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
      }

      function onCursor(e) {
        var cursor = e.target.result;
        if (!cursor) { // done
          return onBatch();
        }
        // regular IDBCursor acts like a batch where batch size is always 1
        onBatch([cursor.key], [cursor.value], cursor);
      }

      if (useGetAll) {
        pseudoCursor = {"continue": continuePseudoCursor};
        objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
        objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
      } else if (descending) {
        objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;
      } else {
        objectStore.openCursor(keyRange).onsuccess = onCursor;
      }
    }

    // simple shim for objectStore.getAll(), falling back to IDBCursor
    function getAll(objectStore, keyRange, onSuccess) {
      if (typeof objectStore.getAll === 'function') {
        // use native getAll
        objectStore.getAll(keyRange).onsuccess = onSuccess;
        return;
      }
      // fall back to cursors
      var values = [];

      function onCursor(e) {
        var cursor = e.target.result;
        if (cursor) {
          values.push(cursor.value);
          cursor["continue"]();
        } else {
          onSuccess({
            target: {
              result: values
            }
          });
        }
      }

      objectStore.openCursor(keyRange).onsuccess = onCursor;
    }

    function allDocsKeys(keys, docStore, onBatch) {
      // It's not guaranted to be returned in right order  
      var valuesBatch = new Array(keys.length);
      var count = 0;
      keys.forEach(function (key, index) {
        docStore.get(key).onsuccess = function (event) {
          if (event.target.result) {
            valuesBatch[index] = event.target.result;
          } else {
            valuesBatch[index] = {key: key, error: 'not_found'};
          }
          count++;
          if (count === keys.length) {
            onBatch(keys, valuesBatch, {});
          }
        };
      });
    }

    function createKeyRange(start, end, inclusiveEnd, key, descending) {
      try {
        if (start && end) {
          if (descending) {
            return IDBKeyRange.bound(end, start, !inclusiveEnd, false);
          } else {
            return IDBKeyRange.bound(start, end, false, !inclusiveEnd);
          }
        } else if (start) {
          if (descending) {
            return IDBKeyRange.upperBound(start);
          } else {
            return IDBKeyRange.lowerBound(start);
          }
        } else if (end) {
          if (descending) {
            return IDBKeyRange.lowerBound(end, !inclusiveEnd);
          } else {
            return IDBKeyRange.upperBound(end, !inclusiveEnd);
          }
        } else if (key) {
          return IDBKeyRange.only(key);
        }
      } catch (e) {
        return {error: e};
      }
      return null;
    }

    function idbAllDocs(opts, idb, callback) {
      var start = 'startkey' in opts ? opts.startkey : false;
      var end = 'endkey' in opts ? opts.endkey : false;
      var key = 'key' in opts ? opts.key : false;
      var keys = 'keys' in opts ? opts.keys : false; 
      var skip = opts.skip || 0;
      var limit = typeof opts.limit === 'number' ? opts.limit : -1;
      var inclusiveEnd = opts.inclusive_end !== false;

      var keyRange ; 
      var keyRangeError;
      if (!keys) {
        keyRange = createKeyRange(start, end, inclusiveEnd, key, opts.descending);
        keyRangeError = keyRange && keyRange.error;
        if (keyRangeError && 
          !(keyRangeError.name === "DataError" && keyRangeError.code === 0)) {
          // DataError with error code 0 indicates start is less than end, so
          // can just do an empty query. Else need to throw
          return callback(createError(IDB_ERROR,
            keyRangeError.name, keyRangeError.message));
        }
      }

      var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE];

      if (opts.attachments) {
        stores.push(ATTACH_STORE);
      }
      var txnResult = openTransactionSafely(idb, stores, 'readonly');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      var txn = txnResult.txn;
      txn.oncomplete = onTxnComplete;
      txn.onabort = idbError(callback);
      var docStore = txn.objectStore(DOC_STORE);
      var seqStore = txn.objectStore(BY_SEQ_STORE);
      var metaStore = txn.objectStore(META_STORE);
      var docIdRevIndex = seqStore.index('_doc_id_rev');
      var results = [];
      var docCount;
      var updateSeq;

      metaStore.get(META_STORE).onsuccess = function (e) {
        docCount = e.target.result.docCount;
      };

      /* istanbul ignore if */
      if (opts.update_seq) {
        getMaxUpdateSeq(seqStore, function (e) { 
          if (e.target.result && e.target.result.length > 0) {
            updateSeq = e.target.result[0];
          }
        });
      }

      function getMaxUpdateSeq(objectStore, onSuccess) {
        function onCursor(e) {
          var cursor = e.target.result;
          var maxKey = undefined;
          if (cursor && cursor.key) {
            maxKey = cursor.key;
          } 
          return onSuccess({
            target: {
              result: [maxKey]
            }
          });
        }
        objectStore.openCursor(null, 'prev').onsuccess = onCursor;
      }

      // if the user specifies include_docs=true, then we don't
      // want to block the main cursor while we're fetching the doc
      function fetchDocAsynchronously(metadata, row, winningRev$$1) {
        var key = metadata.id + "::" + winningRev$$1;
        docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {
          row.doc = decodeDoc(e.target.result) || {};
          if (opts.conflicts) {
            var conflicts = collectConflicts(metadata);
            if (conflicts.length) {
              row.doc._conflicts = conflicts;
            }
          }
          fetchAttachmentsIfNecessary(row.doc, opts, txn);
        };
      }

      function allDocsInner(winningRev$$1, metadata) {
        var row = {
          id: metadata.id,
          key: metadata.id,
          value: {
            rev: winningRev$$1
          }
        };
        var deleted = metadata.deleted;
        if (deleted) {
          if (keys) {
            results.push(row);
            // deleted docs are okay with "keys" requests
            row.value.deleted = true;
            row.doc = null;
          }
        } else if (skip-- <= 0) {
          results.push(row);
          if (opts.include_docs) {
            fetchDocAsynchronously(metadata, row, winningRev$$1);
          }
        }
      }

      function processBatch(batchValues) {
        for (var i = 0, len = batchValues.length; i < len; i++) {
          if (results.length === limit) {
            break;
          }
          var batchValue = batchValues[i];
          if (batchValue.error && keys) {
            // key was not found with "keys" requests
            results.push(batchValue);
            continue;
          }
          var metadata = decodeMetadata(batchValue);
          var winningRev$$1 = metadata.winningRev;
          allDocsInner(winningRev$$1, metadata);
        }
      }

      function onBatch(batchKeys, batchValues, cursor) {
        if (!cursor) {
          return;
        }
        processBatch(batchValues);
        if (results.length < limit) {
          cursor["continue"]();
        }
      }

      function onGetAll(e) {
        var values = e.target.result;
        if (opts.descending) {
          values = values.reverse();
        }
        processBatch(values);
      }

      function onResultsReady() {
        var returnVal = {
          total_rows: docCount,
          offset: opts.skip,
          rows: results
        };
        
        /* istanbul ignore if */
        if (opts.update_seq && updateSeq !== undefined) {
          returnVal.update_seq = updateSeq;
        }
        callback(null, returnVal);
      }

      function onTxnComplete() {
        if (opts.attachments) {
          postProcessAttachments(results, opts.binary).then(onResultsReady);
        } else {
          onResultsReady();
        }
      }

      // don't bother doing any requests if start > end or limit === 0
      if (keyRangeError || limit === 0) {
        return;
      }
      if (keys) {
        return allDocsKeys(opts.keys, docStore, onBatch);
      }
      if (limit === -1) { // just fetch everything
        return getAll(docStore, keyRange, onGetAll);
      }
      // else do a cursor
      // choose a batch size based on the skip, since we'll need to skip that many
      runBatchedCursor(docStore, keyRange, opts.descending, limit + skip, onBatch);
    }

    //
    // Blobs are not supported in all versions of IndexedDB, notably
    // Chrome <37 and Android <5. In those versions, storing a blob will throw.
    //
    // Various other blob bugs exist in Chrome v37-42 (inclusive).
    // Detecting them is expensive and confusing to users, and Chrome 37-42
    // is at very low usage worldwide, so we do a hacky userAgent check instead.
    //
    // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
    // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
    // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
    //
    function checkBlobSupport(txn) {
      return new Promise(function (resolve) {
        var blob$$1 = createBlob(['']);
        var req = txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob$$1, 'key');

        req.onsuccess = function () {
          var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
          var matchedEdge = navigator.userAgent.match(/Edge\//);
          // MS Edge pretends to be Chrome 42:
          // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
          resolve(matchedEdge || !matchedChrome ||
            parseInt(matchedChrome[1], 10) >= 43);
        };

        req.onerror = txn.onabort = function (e) {
          // If the transaction aborts now its due to not being able to
          // write to the database, likely due to the disk being full
          e.preventDefault();
          e.stopPropagation();
          resolve(false);
        };
      })["catch"](function () {
        return false; // error, so assume unsupported
      });
    }

    function countDocs(txn, cb) {
      var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');
      index.count(IDBKeyRange.only('0')).onsuccess = function (e) {
        cb(e.target.result);
      };
    }

    // This task queue ensures that IDB open calls are done in their own tick

    var running = false;
    var queue = [];

    function tryCode(fun, err, res, PouchDB) {
      try {
        fun(err, res);
      } catch (err) {
        // Shouldn't happen, but in some odd cases
        // IndexedDB implementations might throw a sync
        // error, in which case this will at least log it.
        PouchDB.emit('error', err);
      }
    }

    function applyNext() {
      if (running || !queue.length) {
        return;
      }
      running = true;
      queue.shift()();
    }

    function enqueueTask(action, callback, PouchDB) {
      queue.push(function runAction() {
        action(function runCallback(err, res) {
          tryCode(callback, err, res, PouchDB);
          running = false;
          nextTick(function runNext() {
            applyNext(PouchDB);
          });
        });
      });
      applyNext();
    }

    function changes(opts, api, dbName, idb) {
      opts = clone(opts);

      if (opts.continuous) {
        var id = dbName + ':' + uuid();
        changesHandler.addListener(dbName, id, api, opts);
        changesHandler.notify(dbName);
        return {
          cancel: function () {
            changesHandler.removeListener(dbName, id);
          }
        };
      }

      var docIds = opts.doc_ids && new ExportedSet(opts.doc_ids);

      opts.since = opts.since || 0;
      var lastSeq = opts.since;

      var limit = 'limit' in opts ? opts.limit : -1;
      if (limit === 0) {
        limit = 1; // per CouchDB _changes spec
      }

      var results = [];
      var numResults = 0;
      var filter = filterChange(opts);
      var docIdsToMetadata = new ExportedMap();

      var txn;
      var bySeqStore;
      var docStore;
      var docIdRevIndex;

      function onBatch(batchKeys, batchValues, cursor) {
        if (!cursor || !batchKeys.length) { // done
          return;
        }

        var winningDocs = new Array(batchKeys.length);
        var metadatas = new Array(batchKeys.length);

        function processMetadataAndWinningDoc(metadata, winningDoc) {
          var change = opts.processChange(winningDoc, metadata, opts);
          lastSeq = change.seq = metadata.seq;

          var filtered = filter(change);
          if (typeof filtered === 'object') { // anything but true/false indicates error
            return Promise.reject(filtered);
          }

          if (!filtered) {
            return Promise.resolve();
          }
          numResults++;
          if (opts.return_docs) {
            results.push(change);
          }
          // process the attachment immediately
          // for the benefit of live listeners
          if (opts.attachments && opts.include_docs) {
            return new Promise(function (resolve) {
              fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {
                postProcessAttachments([change], opts.binary).then(function () {
                  resolve(change);
                });
              });
            });
          } else {
            return Promise.resolve(change);
          }
        }

        function onBatchDone() {
          var promises = [];
          for (var i = 0, len = winningDocs.length; i < len; i++) {
            if (numResults === limit) {
              break;
            }
            var winningDoc = winningDocs[i];
            if (!winningDoc) {
              continue;
            }
            var metadata = metadatas[i];
            promises.push(processMetadataAndWinningDoc(metadata, winningDoc));
          }

          Promise.all(promises).then(function (changes) {
            for (var i = 0, len = changes.length; i < len; i++) {
              if (changes[i]) {
                opts.onChange(changes[i]);
              }
            }
          })["catch"](opts.complete);

          if (numResults !== limit) {
            cursor["continue"]();
          }
        }

        // Fetch all metadatas/winningdocs from this batch in parallel, then process
        // them all only once all data has been collected. This is done in parallel
        // because it's faster than doing it one-at-a-time.
        var numDone = 0;
        batchValues.forEach(function (value, i) {
          var doc = decodeDoc(value);
          var seq = batchKeys[i];
          fetchWinningDocAndMetadata(doc, seq, function (metadata, winningDoc) {
            metadatas[i] = metadata;
            winningDocs[i] = winningDoc;
            if (++numDone === batchKeys.length) {
              onBatchDone();
            }
          });
        });
      }

      function onGetMetadata(doc, seq, metadata, cb) {
        if (metadata.seq !== seq) {
          // some other seq is later
          return cb();
        }

        if (metadata.winningRev === doc._rev) {
          // this is the winning doc
          return cb(metadata, doc);
        }

        // fetch winning doc in separate request
        var docIdRev = doc._id + '::' + metadata.winningRev;
        var req = docIdRevIndex.get(docIdRev);
        req.onsuccess = function (e) {
          cb(metadata, decodeDoc(e.target.result));
        };
      }

      function fetchWinningDocAndMetadata(doc, seq, cb) {
        if (docIds && !docIds.has(doc._id)) {
          return cb();
        }

        var metadata = docIdsToMetadata.get(doc._id);
        if (metadata) { // cached
          return onGetMetadata(doc, seq, metadata, cb);
        }
        // metadata not cached, have to go fetch it
        docStore.get(doc._id).onsuccess = function (e) {
          metadata = decodeMetadata(e.target.result);
          docIdsToMetadata.set(doc._id, metadata);
          onGetMetadata(doc, seq, metadata, cb);
        };
      }

      function finish() {
        opts.complete(null, {
          results: results,
          last_seq: lastSeq
        });
      }

      function onTxnComplete() {
        if (!opts.continuous && opts.attachments) {
          // cannot guarantee that postProcessing was already done,
          // so do it again
          postProcessAttachments(results).then(finish);
        } else {
          finish();
        }
      }

      var objectStores = [DOC_STORE, BY_SEQ_STORE];
      if (opts.attachments) {
        objectStores.push(ATTACH_STORE);
      }
      var txnResult = openTransactionSafely(idb, objectStores, 'readonly');
      if (txnResult.error) {
        return opts.complete(txnResult.error);
      }
      txn = txnResult.txn;
      txn.onabort = idbError(opts.complete);
      txn.oncomplete = onTxnComplete;

      bySeqStore = txn.objectStore(BY_SEQ_STORE);
      docStore = txn.objectStore(DOC_STORE);
      docIdRevIndex = bySeqStore.index('_doc_id_rev');

      var keyRange = (opts.since && !opts.descending) ?
        IDBKeyRange.lowerBound(opts.since, true) : null;

      runBatchedCursor(bySeqStore, keyRange, opts.descending, limit, onBatch);
    }

    var cachedDBs = new ExportedMap();
    var blobSupportPromise;
    var openReqList = new ExportedMap();

    function IdbPouch(opts, callback) {
      var api = this;

      enqueueTask(function (thisCallback) {
        init(api, opts, thisCallback);
      }, callback, api.constructor);
    }

    function init(api, opts, callback) {

      var dbName = opts.name;

      var idb = null;
      api._meta = null;

      // called when creating a fresh new database
      function createSchema(db) {
        var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});
        db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})
          .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
        db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});
        db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});
        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);

        // added in v2
        docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

        // added in v3
        db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});

        // added in v4
        var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
          {autoIncrement: true});
        attAndSeqStore.createIndex('seq', 'seq');
        attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
      }

      // migration to version 2
      // unfortunately "deletedOrLocal" is a misnomer now that we no longer
      // store local docs in the main doc-store, but whaddyagonnado
      function addDeletedOrLocalIndex(txn, callback) {
        var docStore = txn.objectStore(DOC_STORE);
        docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

        docStore.openCursor().onsuccess = function (event) {
          var cursor = event.target.result;
          if (cursor) {
            var metadata = cursor.value;
            var deleted = isDeleted(metadata);
            metadata.deletedOrLocal = deleted ? "1" : "0";
            docStore.put(metadata);
            cursor["continue"]();
          } else {
            callback();
          }
        };
      }

      // migration to version 3 (part 1)
      function createLocalStoreSchema(db) {
        db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})
          .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
      }

      // migration to version 3 (part 2)
      function migrateLocalStore(txn, cb) {
        var localStore = txn.objectStore(LOCAL_STORE);
        var docStore = txn.objectStore(DOC_STORE);
        var seqStore = txn.objectStore(BY_SEQ_STORE);

        var cursor = docStore.openCursor();
        cursor.onsuccess = function (event) {
          var cursor = event.target.result;
          if (cursor) {
            var metadata = cursor.value;
            var docId = metadata.id;
            var local = isLocalId(docId);
            var rev = winningRev(metadata);
            if (local) {
              var docIdRev = docId + "::" + rev;
              // remove all seq entries
              // associated with this docId
              var start = docId + "::";
              var end = docId + "::~";
              var index = seqStore.index('_doc_id_rev');
              var range = IDBKeyRange.bound(start, end, false, false);
              var seqCursor = index.openCursor(range);
              seqCursor.onsuccess = function (e) {
                seqCursor = e.target.result;
                if (!seqCursor) {
                  // done
                  docStore["delete"](cursor.primaryKey);
                  cursor["continue"]();
                } else {
                  var data = seqCursor.value;
                  if (data._doc_id_rev === docIdRev) {
                    localStore.put(data);
                  }
                  seqStore["delete"](seqCursor.primaryKey);
                  seqCursor["continue"]();
                }
              };
            } else {
              cursor["continue"]();
            }
          } else if (cb) {
            cb();
          }
        };
      }

      // migration to version 4 (part 1)
      function addAttachAndSeqStore(db) {
        var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
          {autoIncrement: true});
        attAndSeqStore.createIndex('seq', 'seq');
        attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
      }

      // migration to version 4 (part 2)
      function migrateAttsAndSeqs(txn, callback) {
        var seqStore = txn.objectStore(BY_SEQ_STORE);
        var attStore = txn.objectStore(ATTACH_STORE);
        var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);

        // need to actually populate the table. this is the expensive part,
        // so as an optimization, check first that this database even
        // contains attachments
        var req = attStore.count();
        req.onsuccess = function (e) {
          var count = e.target.result;
          if (!count) {
            return callback(); // done
          }

          seqStore.openCursor().onsuccess = function (e) {
            var cursor = e.target.result;
            if (!cursor) {
              return callback(); // done
            }
            var doc = cursor.value;
            var seq = cursor.primaryKey;
            var atts = Object.keys(doc._attachments || {});
            var digestMap = {};
            for (var j = 0; j < atts.length; j++) {
              var att = doc._attachments[atts[j]];
              digestMap[att.digest] = true; // uniq digests, just in case
            }
            var digests = Object.keys(digestMap);
            for (j = 0; j < digests.length; j++) {
              var digest = digests[j];
              attAndSeqStore.put({
                seq: seq,
                digestSeq: digest + '::' + seq
              });
            }
            cursor["continue"]();
          };
        };
      }

      // migration to version 5
      // Instead of relying on on-the-fly migration of metadata,
      // this brings the doc-store to its modern form:
      // - metadata.winningrev
      // - metadata.seq
      // - stringify the metadata when storing it
      function migrateMetadata(txn) {

        function decodeMetadataCompat(storedObject) {
          if (!storedObject.data) {
            // old format, when we didn't store it stringified
            storedObject.deleted = storedObject.deletedOrLocal === '1';
            return storedObject;
          }
          return decodeMetadata(storedObject);
        }

        // ensure that every metadata has a winningRev and seq,
        // which was previously created on-the-fly but better to migrate
        var bySeqStore = txn.objectStore(BY_SEQ_STORE);
        var docStore = txn.objectStore(DOC_STORE);
        var cursor = docStore.openCursor();
        cursor.onsuccess = function (e) {
          var cursor = e.target.result;
          if (!cursor) {
            return; // done
          }
          var metadata = decodeMetadataCompat(cursor.value);

          metadata.winningRev = metadata.winningRev ||
            winningRev(metadata);

          function fetchMetadataSeq() {
            // metadata.seq was added post-3.2.0, so if it's missing,
            // we need to fetch it manually
            var start = metadata.id + '::';
            var end = metadata.id + '::\uffff';
            var req = bySeqStore.index('_doc_id_rev').openCursor(
              IDBKeyRange.bound(start, end));

            var metadataSeq = 0;
            req.onsuccess = function (e) {
              var cursor = e.target.result;
              if (!cursor) {
                metadata.seq = metadataSeq;
                return onGetMetadataSeq();
              }
              var seq = cursor.primaryKey;
              if (seq > metadataSeq) {
                metadataSeq = seq;
              }
              cursor["continue"]();
            };
          }

          function onGetMetadataSeq() {
            var metadataToStore = encodeMetadata(metadata,
              metadata.winningRev, metadata.deleted);

            var req = docStore.put(metadataToStore);
            req.onsuccess = function () {
              cursor["continue"]();
            };
          }

          if (metadata.seq) {
            return onGetMetadataSeq();
          }

          fetchMetadataSeq();
        };

      }

      api._remote = false;
      api.type = function () {
        return 'idb';
      };

      api._id = toPromise(function (callback) {
        callback(null, api._meta.instanceId);
      });

      api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {
        idbBulkDocs(opts, req, reqOpts, api, idb, callback);
      };

      // First we look up the metadata in the ids database, then we fetch the
      // current revision(s) from the by sequence store
      api._get = function idb_get(id, opts, callback) {
        var doc;
        var metadata;
        var err;
        var txn = opts.ctx;
        if (!txn) {
          var txnResult = openTransactionSafely(idb,
            [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
          if (txnResult.error) {
            return callback(txnResult.error);
          }
          txn = txnResult.txn;
        }

        function finish() {
          callback(err, {doc: doc, metadata: metadata, ctx: txn});
        }

        txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {
          metadata = decodeMetadata(e.target.result);
          // we can determine the result here if:
          // 1. there is no such document
          // 2. the document is deleted and we don't ask about specific rev
          // When we ask with opts.rev we expect the answer to be either
          // doc (possibly with _deleted=true) or missing error
          if (!metadata) {
            err = createError(MISSING_DOC, 'missing');
            return finish();
          }

          var rev;
          if (!opts.rev) {
            rev = metadata.winningRev;
            var deleted = isDeleted(metadata);
            if (deleted) {
              err = createError(MISSING_DOC, "deleted");
              return finish();
            }
          } else {
            rev = opts.latest ? latest(opts.rev, metadata) : opts.rev;
          }

          var objectStore = txn.objectStore(BY_SEQ_STORE);
          var key = metadata.id + '::' + rev;

          objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {
            doc = e.target.result;
            if (doc) {
              doc = decodeDoc(doc);
            }
            if (!doc) {
              err = createError(MISSING_DOC, 'missing');
              return finish();
            }
            finish();
          };
        };
      };

      api._getAttachment = function (docId, attachId, attachment, opts, callback) {
        var txn;
        if (opts.ctx) {
          txn = opts.ctx;
        } else {
          var txnResult = openTransactionSafely(idb,
            [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
          if (txnResult.error) {
            return callback(txnResult.error);
          }
          txn = txnResult.txn;
        }
        var digest = attachment.digest;
        var type = attachment.content_type;

        txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {
          var body = e.target.result.body;
          readBlobData(body, type, opts.binary, function (blobData) {
            callback(null, blobData);
          });
        };
      };

      api._info = function idb_info(callback) {
        var updateSeq;
        var docCount;

        var txnResult = openTransactionSafely(idb, [META_STORE, BY_SEQ_STORE], 'readonly');
        if (txnResult.error) {
          return callback(txnResult.error);
        }
        var txn = txnResult.txn;
        txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
          docCount = e.target.result.docCount;
        };
        txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev').onsuccess = function (e) {
          var cursor = e.target.result;
          updateSeq = cursor ? cursor.key : 0;
        };

        txn.oncomplete = function () {
          callback(null, {
            doc_count: docCount,
            update_seq: updateSeq,
            // for debugging
            idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')
          });
        };
      };

      api._allDocs = function idb_allDocs(opts, callback) {
        idbAllDocs(opts, idb, callback);
      };

      api._changes = function idbChanges(opts) {
        return changes(opts, api, dbName, idb);
      };

      api._close = function (callback) {
        // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close
        // "Returns immediately and closes the connection in a separate thread..."
        idb.close();
        cachedDBs["delete"](dbName);
        callback();
      };

      api._getRevisionTree = function (docId, callback) {
        var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');
        if (txnResult.error) {
          return callback(txnResult.error);
        }
        var txn = txnResult.txn;
        var req = txn.objectStore(DOC_STORE).get(docId);
        req.onsuccess = function (event) {
          var doc = decodeMetadata(event.target.result);
          if (!doc) {
            callback(createError(MISSING_DOC));
          } else {
            callback(null, doc.rev_tree);
          }
        };
      };

      // This function removes revisions of document docId
      // which are listed in revs and sets this document
      // revision to to rev_tree
      api._doCompaction = function (docId, revs, callback) {
        var stores = [
          DOC_STORE,
          BY_SEQ_STORE,
          ATTACH_STORE,
          ATTACH_AND_SEQ_STORE
        ];
        var txnResult = openTransactionSafely(idb, stores, 'readwrite');
        if (txnResult.error) {
          return callback(txnResult.error);
        }
        var txn = txnResult.txn;

        var docStore = txn.objectStore(DOC_STORE);

        docStore.get(docId).onsuccess = function (event) {
          var metadata = decodeMetadata(event.target.result);
          traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                                             revHash, ctx, opts) {
            var rev = pos + '-' + revHash;
            if (revs.indexOf(rev) !== -1) {
              opts.status = 'missing';
            }
          });
          compactRevs(revs, docId, txn);
          var winningRev$$1 = metadata.winningRev;
          var deleted = metadata.deleted;
          txn.objectStore(DOC_STORE).put(
            encodeMetadata(metadata, winningRev$$1, deleted));
        };
        txn.onabort = idbError(callback);
        txn.oncomplete = function () {
          callback();
        };
      };


      api._getLocal = function (id, callback) {
        var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');
        if (txnResult.error) {
          return callback(txnResult.error);
        }
        var tx = txnResult.txn;
        var req = tx.objectStore(LOCAL_STORE).get(id);

        req.onerror = idbError(callback);
        req.onsuccess = function (e) {
          var doc = e.target.result;
          if (!doc) {
            callback(createError(MISSING_DOC));
          } else {
            delete doc['_doc_id_rev']; // for backwards compat
            callback(null, doc);
          }
        };
      };

      api._putLocal = function (doc, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        delete doc._revisions; // ignore this, trust the rev
        var oldRev = doc._rev;
        var id = doc._id;
        if (!oldRev) {
          doc._rev = '0-1';
        } else {
          doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);
        }

        var tx = opts.ctx;
        var ret;
        if (!tx) {
          var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
          if (txnResult.error) {
            return callback(txnResult.error);
          }
          tx = txnResult.txn;
          tx.onerror = idbError(callback);
          tx.oncomplete = function () {
            if (ret) {
              callback(null, ret);
            }
          };
        }

        var oStore = tx.objectStore(LOCAL_STORE);
        var req;
        if (oldRev) {
          req = oStore.get(id);
          req.onsuccess = function (e) {
            var oldDoc = e.target.result;
            if (!oldDoc || oldDoc._rev !== oldRev) {
              callback(createError(REV_CONFLICT));
            } else { // update
              var req = oStore.put(doc);
              req.onsuccess = function () {
                ret = {ok: true, id: doc._id, rev: doc._rev};
                if (opts.ctx) { // return immediately
                  callback(null, ret);
                }
              };
            }
          };
        } else { // new doc
          req = oStore.add(doc);
          req.onerror = function (e) {
            // constraint error, already exists
            callback(createError(REV_CONFLICT));
            e.preventDefault(); // avoid transaction abort
            e.stopPropagation(); // avoid transaction onerror
          };
          req.onsuccess = function () {
            ret = {ok: true, id: doc._id, rev: doc._rev};
            if (opts.ctx) { // return immediately
              callback(null, ret);
            }
          };
        }
      };

      api._removeLocal = function (doc, opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        var tx = opts.ctx;
        if (!tx) {
          var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
          if (txnResult.error) {
            return callback(txnResult.error);
          }
          tx = txnResult.txn;
          tx.oncomplete = function () {
            if (ret) {
              callback(null, ret);
            }
          };
        }
        var ret;
        var id = doc._id;
        var oStore = tx.objectStore(LOCAL_STORE);
        var req = oStore.get(id);

        req.onerror = idbError(callback);
        req.onsuccess = function (e) {
          var oldDoc = e.target.result;
          if (!oldDoc || oldDoc._rev !== doc._rev) {
            callback(createError(MISSING_DOC));
          } else {
            oStore["delete"](id);
            ret = {ok: true, id: id, rev: '0-0'};
            if (opts.ctx) { // return immediately
              callback(null, ret);
            }
          }
        };
      };

      api._destroy = function (opts, callback) {
        changesHandler.removeAllListeners(dbName);

        //Close open request for "dbName" database to fix ie delay.
        var openReq = openReqList.get(dbName);
        if (openReq && openReq.result) {
          openReq.result.close();
          cachedDBs["delete"](dbName);
        }
        var req = indexedDB.deleteDatabase(dbName);

        req.onsuccess = function () {
          //Remove open request from the list.
          openReqList["delete"](dbName);
          if (hasLocalStorage() && (dbName in localStorage)) {
            delete localStorage[dbName];
          }
          callback(null, { 'ok': true });
        };

        req.onerror = idbError(callback);
      };

      var cached = cachedDBs.get(dbName);

      if (cached) {
        idb = cached.idb;
        api._meta = cached.global;
        return nextTick(function () {
          callback(null, api);
        });
      }

      var req = indexedDB.open(dbName, ADAPTER_VERSION);
      openReqList.set(dbName, req);

      req.onupgradeneeded = function (e) {
        var db = e.target.result;
        if (e.oldVersion < 1) {
          return createSchema(db); // new db, initial schema
        }
        // do migrations

        var txn = e.currentTarget.transaction;
        // these migrations have to be done in this function, before
        // control is returned to the event loop, because IndexedDB

        if (e.oldVersion < 3) {
          createLocalStoreSchema(db); // v2 -> v3
        }
        if (e.oldVersion < 4) {
          addAttachAndSeqStore(db); // v3 -> v4
        }

        var migrations = [
          addDeletedOrLocalIndex, // v1 -> v2
          migrateLocalStore,      // v2 -> v3
          migrateAttsAndSeqs,     // v3 -> v4
          migrateMetadata         // v4 -> v5
        ];

        var i = e.oldVersion;

        function next() {
          var migration = migrations[i - 1];
          i++;
          if (migration) {
            migration(txn, next);
          }
        }

        next();
      };

      req.onsuccess = function (e) {

        idb = e.target.result;

        idb.onversionchange = function () {
          idb.close();
          cachedDBs["delete"](dbName);
        };

        idb.onabort = function (e) {
          guardedConsole('error', 'Database has a global failure', e.target.error);
          idb.close();
          cachedDBs["delete"](dbName);
        };

        // Do a few setup operations (in parallel as much as possible):
        // 1. Fetch meta doc
        // 2. Check blob support
        // 3. Calculate docCount
        // 4. Generate an instanceId if necessary
        // 5. Store docCount and instanceId on meta doc

        var txn = idb.transaction([
          META_STORE,
          DETECT_BLOB_SUPPORT_STORE,
          DOC_STORE
        ], 'readwrite');

        var storedMetaDoc = false;
        var metaDoc;
        var docCount;
        var blobSupport;
        var instanceId;

        function completeSetup() {
          if (typeof blobSupport === 'undefined' || !storedMetaDoc) {
            return;
          }
          api._meta = {
            name: dbName,
            instanceId: instanceId,
            blobSupport: blobSupport
          };

          cachedDBs.set(dbName, {
            idb: idb,
            global: api._meta
          });
          callback(null, api);
        }

        function storeMetaDocIfReady() {
          if (typeof docCount === 'undefined' || typeof metaDoc === 'undefined') {
            return;
          }
          var instanceKey = dbName + '_id';
          if (instanceKey in metaDoc) {
            instanceId = metaDoc[instanceKey];
          } else {
            metaDoc[instanceKey] = instanceId = uuid();
          }
          metaDoc.docCount = docCount;
          txn.objectStore(META_STORE).put(metaDoc);
        }

        //
        // fetch or generate the instanceId
        //
        txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
          metaDoc = e.target.result || { id: META_STORE };
          storeMetaDocIfReady();
        };

        //
        // countDocs
        //
        countDocs(txn, function (count) {
          docCount = count;
          storeMetaDocIfReady();
        });

        //
        // check blob support
        //
        if (!blobSupportPromise) {
          // make sure blob support is only checked once
          blobSupportPromise = checkBlobSupport(txn);
        }

        blobSupportPromise.then(function (val) {
          blobSupport = val;
          completeSetup();
        });

        // only when the metadata put transaction has completed,
        // consider the setup done
        txn.oncomplete = function () {
          storedMetaDoc = true;
          completeSetup();
        };
        txn.onabort = idbError(callback);
      };

      req.onerror = function () {
        var msg = 'Failed to open indexedDB, are you in private browsing mode?';
        guardedConsole('error', msg);
        callback(createError(IDB_ERROR, msg));
      };
    }

    IdbPouch.valid = function () {
      // Following #7085 buggy idb versions (typically Safari < 10.1) are
      // considered valid.

      // On Firefox SecurityError is thrown while referencing indexedDB if cookies
      // are not allowed. `typeof indexedDB` also triggers the error.
      try {
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        return typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';
      } catch (e) {
        return false;
      }
    };

    function IDBPouch (PouchDB) {
      PouchDB.adapter('idb', IdbPouch, true);
    }

    // dead simple promise pool, inspired by https://github.com/timdp/es6-promise-pool
    // but much smaller in code size. limits the number of concurrent promises that are executed


    function pool(promiseFactories, limit) {
      return new Promise(function (resolve, reject) {
        var running = 0;
        var current = 0;
        var done = 0;
        var len = promiseFactories.length;
        var err;

        function runNext() {
          running++;
          promiseFactories[current++]().then(onSuccess, onError);
        }

        function doNext() {
          if (++done === len) {
            /* istanbul ignore if */
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          } else {
            runNextBatch();
          }
        }

        function onSuccess() {
          running--;
          doNext();
        }

        /* istanbul ignore next */
        function onError(thisErr) {
          running--;
          err = err || thisErr;
          doNext();
        }

        function runNextBatch() {
          while (running < limit && current < len) {
            runNext();
          }
        }

        runNextBatch();
      });
    }

    var CHANGES_BATCH_SIZE = 25;
    var MAX_SIMULTANEOUS_REVS = 50;
    var CHANGES_TIMEOUT_BUFFER = 5000;
    var DEFAULT_HEARTBEAT = 10000;

    var supportsBulkGetMap = {};

    function readAttachmentsAsBlobOrBuffer(row) {
      var doc = row.doc || row.ok;
      var atts = doc._attachments;
      if (!atts) {
        return;
      }
      Object.keys(atts).forEach(function (filename) {
        var att = atts[filename];
        att.data = b64ToBluffer(att.data, att.content_type);
      });
    }

    function encodeDocId(id) {
      if (/^_design/.test(id)) {
        return '_design/' + encodeURIComponent(id.slice(8));
      }
      if (/^_local/.test(id)) {
        return '_local/' + encodeURIComponent(id.slice(7));
      }
      return encodeURIComponent(id);
    }

    function preprocessAttachments$1(doc) {
      if (!doc._attachments || !Object.keys(doc._attachments)) {
        return Promise.resolve();
      }

      return Promise.all(Object.keys(doc._attachments).map(function (key) {
        var attachment = doc._attachments[key];
        if (attachment.data && typeof attachment.data !== 'string') {
          return new Promise(function (resolve) {
            blobToBase64(attachment.data, resolve);
          }).then(function (b64) {
            attachment.data = b64;
          });
        }
      }));
    }

    function hasUrlPrefix(opts) {
      if (!opts.prefix) {
        return false;
      }
      var protocol = parseUri(opts.prefix).protocol;
      return protocol === 'http' || protocol === 'https';
    }

    // Get all the information you possibly can about the URI given by name and
    // return it as a suitable object.
    function getHost(name, opts) {
      // encode db name if opts.prefix is a url (#5574)
      if (hasUrlPrefix(opts)) {
        var dbName = opts.name.substr(opts.prefix.length);
        // Ensure prefix has a trailing slash
        var prefix = opts.prefix.replace(/\/?$/, '/');
        name = prefix + encodeURIComponent(dbName);
      }

      var uri = parseUri(name);
      if (uri.user || uri.password) {
        uri.auth = {username: uri.user, password: uri.password};
      }

      // Split the path part of the URI into parts using '/' as the delimiter
      // after removing any leading '/' and any trailing '/'
      var parts = uri.path.replace(/(^\/|\/$)/g, '').split('/');

      uri.db = parts.pop();
      // Prevent double encoding of URI component
      if (uri.db.indexOf('%') === -1) {
        uri.db = encodeURIComponent(uri.db);
      }

      uri.path = parts.join('/');

      return uri;
    }

    // Generate a URL with the host data given by opts and the given path
    function genDBUrl(opts, path) {
      return genUrl(opts, opts.db + '/' + path);
    }

    // Generate a URL with the host data given by opts and the given path
    function genUrl(opts, path) {
      // If the host already has a path, then we need to have a path delimiter
      // Otherwise, the path delimiter is the empty string
      var pathDel = !opts.path ? '' : '/';

      // If the host already has a path, then we need to have a path delimiter
      // Otherwise, the path delimiter is the empty string
      return opts.protocol + '://' + opts.host +
             (opts.port ? (':' + opts.port) : '') +
             '/' + opts.path + pathDel + path;
    }

    function paramsToStr(params) {
      return '?' + Object.keys(params).map(function (k) {
        return k + '=' + encodeURIComponent(params[k]);
      }).join('&');
    }

    function shouldCacheBust(opts) {
      var ua = (typeof navigator !== 'undefined' && navigator.userAgent) ?
          navigator.userAgent.toLowerCase() : '';
      var isIE = ua.indexOf('msie') !== -1;
      var isTrident = ua.indexOf('trident') !== -1;
      var isEdge = ua.indexOf('edge') !== -1;
      var isGET = !('method' in opts) || opts.method === 'GET';
      return (isIE || isTrident || isEdge) && isGET;
    }

    // Implements the PouchDB API for dealing with CouchDB instances over HTTP
    function HttpPouch(opts, callback) {

      // The functions that will be publicly available for HttpPouch
      var api = this;

      var host = getHost(opts.name, opts);
      var dbUrl = genDBUrl(host, '');

      opts = clone(opts);

      var ourFetch = function (url, options) {

        options = options || {};
        options.headers = options.headers || new h();

        if (opts.auth || host.auth) {
          var nAuth = opts.auth || host.auth;
          var str = nAuth.username + ':' + nAuth.password;
          var token = thisBtoa(unescape(encodeURIComponent(str)));
          options.headers.set('Authorization', 'Basic ' + token);
        }

        var headers = opts.headers || {};
        Object.keys(headers).forEach(function (key) {
          options.headers.append(key, headers[key]);
        });

        /* istanbul ignore if */
        if (shouldCacheBust(options)) {
          url += (url.indexOf('?') === -1 ? '?' : '&') + '_nonce=' + Date.now();
        }

        var fetchFun = opts.fetch || f$1;
        return fetchFun(url, options);
      };

      function adapterFun$$1(name, fun) {
        return adapterFun(name, getArguments(function (args) {
          setup().then(function () {
            return fun.apply(this, args);
          })["catch"](function (e) {
            var callback = args.pop();
            callback(e);
          });
        })).bind(api);
      }

      function fetchJSON(url, options, callback) {

        var result = {};

        options = options || {};
        options.headers = options.headers || new h();

        if (!options.headers.get('Content-Type')) {
          options.headers.set('Content-Type', 'application/json');
        }
        if (!options.headers.get('Accept')) {
          options.headers.set('Accept', 'application/json');
        }

        return ourFetch(url, options).then(function (response) {
          result.ok = response.ok;
          result.status = response.status;
          return response.json();
        }).then(function (json) {
          result.data = json;
          if (!result.ok) {
            result.data.status = result.status;
            var err = generateErrorFromResponse(result.data);
            if (callback) {
              return callback(err);
            } else {
              throw err;
            }
          }

          if (Array.isArray(result.data)) {
            result.data = result.data.map(function (v) {
              if (v.error || v.missing) {
                return generateErrorFromResponse(v);
              } else {
                return v;
              }
            });
          }

          if (callback) {
            callback(null, result.data);
          } else {
            return result;
          }
        });
      }

      var setupPromise;

      function setup() {
        if (opts.skip_setup) {
          return Promise.resolve();
        }

        // If there is a setup in process or previous successful setup
        // done then we will use that
        // If previous setups have been rejected we will try again
        if (setupPromise) {
          return setupPromise;
        }

        setupPromise = fetchJSON(dbUrl)["catch"](function (err) {
          if (err && err.status && err.status === 404) {
            // Doesnt exist, create it
            explainError(404, 'PouchDB is just detecting if the remote exists.');
            return fetchJSON(dbUrl, {method: 'PUT'});
          } else {
            return Promise.reject(err);
          }
        })["catch"](function (err) {
          // If we try to create a database that already exists, skipped in
          // istanbul since its catching a race condition.
          /* istanbul ignore if */
          if (err && err.status && err.status === 412) {
            return true;
          }
          return Promise.reject(err);
        });

        setupPromise["catch"](function () {
          setupPromise = null;
        });

        return setupPromise;
      }

      nextTick(function () {
        callback(null, api);
      });

      api._remote = true;

      /* istanbul ignore next */
      api.type = function () {
        return 'http';
      };

      api.id = adapterFun$$1('id', function (callback) {
        ourFetch(genUrl(host, '')).then(function (response) {
          return response.json();
        }).then(function (result) {
          var uuid$$1 = (result && result.uuid) ?
              (result.uuid + host.db) : genDBUrl(host, '');
          callback(null, uuid$$1);
        })["catch"](function (err) {
          callback(err);
        });
      });

      // Sends a POST request to the host calling the couchdb _compact function
      //    version: The version of CouchDB it is running
      api.compact = adapterFun$$1('compact', function (opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        opts = clone(opts);

        fetchJSON(genDBUrl(host, '_compact'), {method: 'POST'}).then(function () {
          function ping() {
            api.info(function (err, res) {
              // CouchDB may send a "compact_running:true" if it's
              // already compacting. PouchDB Server doesn't.
              /* istanbul ignore else */
              if (res && !res.compact_running) {
                callback(null, {ok: true});
              } else {
                setTimeout(ping, opts.interval || 200);
              }
            });
          }
          // Ping the http if it's finished compaction
          ping();
        });
      });

      api.bulkGet = adapterFun('bulkGet', function (opts, callback) {
        var self = this;

        function doBulkGet(cb) {
          var params = {};
          if (opts.revs) {
            params.revs = true;
          }
          if (opts.attachments) {
            /* istanbul ignore next */
            params.attachments = true;
          }
          if (opts.latest) {
            params.latest = true;
          }
          fetchJSON(genDBUrl(host, '_bulk_get' + paramsToStr(params)), {
            method: 'POST',
            body: JSON.stringify({ docs: opts.docs})
          }).then(function (result) {
            if (opts.attachments && opts.binary) {
              result.data.results.forEach(function (res) {
                res.docs.forEach(readAttachmentsAsBlobOrBuffer);
              });
            }
            cb(null, result.data);
          })["catch"](cb);
        }

        /* istanbul ignore next */
        function doBulkGetShim() {
          // avoid "url too long error" by splitting up into multiple requests
          var batchSize = MAX_SIMULTANEOUS_REVS;
          var numBatches = Math.ceil(opts.docs.length / batchSize);
          var numDone = 0;
          var results = new Array(numBatches);

          function onResult(batchNum) {
            return function (err, res) {
              // err is impossible because shim returns a list of errs in that case
              results[batchNum] = res.results;
              if (++numDone === numBatches) {
                callback(null, {results: flatten(results)});
              }
            };
          }

          for (var i = 0; i < numBatches; i++) {
            var subOpts = pick(opts, ['revs', 'attachments', 'binary', 'latest']);
            subOpts.docs = opts.docs.slice(i * batchSize,
              Math.min(opts.docs.length, (i + 1) * batchSize));
            bulkGet(self, subOpts, onResult(i));
          }
        }

        // mark the whole database as either supporting or not supporting _bulk_get
        var dbUrl = genUrl(host, '');
        var supportsBulkGet = supportsBulkGetMap[dbUrl];

        /* istanbul ignore next */
        if (typeof supportsBulkGet !== 'boolean') {
          // check if this database supports _bulk_get
          doBulkGet(function (err, res) {
            if (err) {
              supportsBulkGetMap[dbUrl] = false;
              explainError(
                err.status,
                'PouchDB is just detecting if the remote ' +
                'supports the _bulk_get API.'
              );
              doBulkGetShim();
            } else {
              supportsBulkGetMap[dbUrl] = true;
              callback(null, res);
            }
          });
        } else if (supportsBulkGet) {
          doBulkGet(callback);
        } else {
          doBulkGetShim();
        }
      });

      // Calls GET on the host, which gets back a JSON string containing
      //    couchdb: A welcome string
      //    version: The version of CouchDB it is running
      api._info = function (callback) {
        setup().then(function () {
          return ourFetch(genDBUrl(host, ''));
        }).then(function (response) {
          return response.json();
        }).then(function (info) {
          info.host = genDBUrl(host, '');
          callback(null, info);
        })["catch"](callback);
      };

      api.fetch = function (path, options) {
        return setup().then(function () {
          return ourFetch(genDBUrl(host, path), options);
        });
      };

      // Get the document with the given id from the database given by host.
      // The id could be solely the _id in the database, or it may be a
      // _design/ID or _local/ID path
      api.get = adapterFun$$1('get', function (id, opts, callback) {
        // If no options were given, set the callback to the second parameter
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        opts = clone(opts);

        // List of parameters to add to the GET request
        var params = {};

        if (opts.revs) {
          params.revs = true;
        }

        if (opts.revs_info) {
          params.revs_info = true;
        }

        if (opts.latest) {
          params.latest = true;
        }

        if (opts.open_revs) {
          if (opts.open_revs !== "all") {
            opts.open_revs = JSON.stringify(opts.open_revs);
          }
          params.open_revs = opts.open_revs;
        }

        if (opts.rev) {
          params.rev = opts.rev;
        }

        if (opts.conflicts) {
          params.conflicts = opts.conflicts;
        }

        /* istanbul ignore if */
        if (opts.update_seq) {
          params.update_seq = opts.update_seq;
        }

        id = encodeDocId(id);

        function fetchAttachments(doc) {
          var atts = doc._attachments;
          var filenames = atts && Object.keys(atts);
          if (!atts || !filenames.length) {
            return;
          }
          // we fetch these manually in separate XHRs, because
          // Sync Gateway would normally send it back as multipart/mixed,
          // which we cannot parse. Also, this is more efficient than
          // receiving attachments as base64-encoded strings.
          function fetchData(filename) {
            var att = atts[filename];
            var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +
                '?rev=' + doc._rev;
            return ourFetch(genDBUrl(host, path)).then(function (response) {
              if (typeof process !== 'undefined' && !process.browser) {
                return response.buffer();
              } else {
                /* istanbul ignore next */
                return response.blob();
              }
            }).then(function (blob) {
              if (opts.binary) {
                // TODO: Can we remove this?
                if (typeof process !== 'undefined' && !process.browser) {
                  blob.type = att.content_type;
                }
                return blob;
              }
              return new Promise(function (resolve) {
                blobToBase64(blob, resolve);
              });
            }).then(function (data) {
              delete att.stub;
              delete att.length;
              att.data = data;
            });
          }

          var promiseFactories = filenames.map(function (filename) {
            return function () {
              return fetchData(filename);
            };
          });

          // This limits the number of parallel xhr requests to 5 any time
          // to avoid issues with maximum browser request limits
          return pool(promiseFactories, 5);
        }

        function fetchAllAttachments(docOrDocs) {
          if (Array.isArray(docOrDocs)) {
            return Promise.all(docOrDocs.map(function (doc) {
              if (doc.ok) {
                return fetchAttachments(doc.ok);
              }
            }));
          }
          return fetchAttachments(docOrDocs);
        }

        var url = genDBUrl(host, id + paramsToStr(params));
        fetchJSON(url).then(function (res) {
          return Promise.resolve().then(function () {
            if (opts.attachments) {
              return fetchAllAttachments(res.data);
            }
          }).then(function () {
            callback(null, res.data);
          });
        })["catch"](function (e) {
          e.docId = id;
          callback(e);
        });
      });


      // Delete the document given by doc from the database given by host.
      api.remove = adapterFun$$1('remove', function (docOrId, optsOrRev, opts, cb) {
        var doc;
        if (typeof optsOrRev === 'string') {
          // id, rev, opts, callback style
          doc = {
            _id: docOrId,
            _rev: optsOrRev
          };
          if (typeof opts === 'function') {
            cb = opts;
            opts = {};
          }
        } else {
          // doc, opts, callback style
          doc = docOrId;
          if (typeof optsOrRev === 'function') {
            cb = optsOrRev;
            opts = {};
          } else {
            cb = opts;
            opts = optsOrRev;
          }
        }

        var rev = (doc._rev || opts.rev);
        var url = genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev;

        fetchJSON(url, {method: 'DELETE'}, cb)["catch"](cb);
      });

      function encodeAttachmentId(attachmentId) {
        return attachmentId.split("/").map(encodeURIComponent).join("/");
      }

      // Get the attachment
      api.getAttachment = adapterFun$$1('getAttachment', function (docId, attachmentId,
                                                                opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        var params = opts.rev ? ('?rev=' + opts.rev) : '';
        var url = genDBUrl(host, encodeDocId(docId)) + '/' +
            encodeAttachmentId(attachmentId) + params;
        var contentType;
        ourFetch(url, {method: 'GET'}).then(function (response) {
          contentType = response.headers.get('content-type');
          if (!response.ok) {
            throw response;
          } else {
            if (typeof process !== 'undefined' && !process.browser) {
              return response.buffer();
            } else {
              /* istanbul ignore next */
              return response.blob();
            }
          }
        }).then(function (blob) {
          // TODO: also remove
          if (typeof process !== 'undefined' && !process.browser) {
            blob.type = contentType;
          }
          callback(null, blob);
        })["catch"](function (err) {
          callback(err);
        });
      });

      // Remove the attachment given by the id and rev
      api.removeAttachment =  adapterFun$$1('removeAttachment', function (docId,
                                                                       attachmentId,
                                                                       rev,
                                                                       callback) {
        var url = genDBUrl(host, encodeDocId(docId) + '/' +
                           encodeAttachmentId(attachmentId)) + '?rev=' + rev;
        fetchJSON(url, {method: 'DELETE'}, callback)["catch"](callback);
      });

      // Add the attachment given by blob and its contentType property
      // to the document with the given id, the revision given by rev, and
      // add it to the database given by host.
      api.putAttachment = adapterFun$$1('putAttachment', function (docId, attachmentId,
                                                                rev, blob,
                                                                type, callback) {
        if (typeof type === 'function') {
          callback = type;
          type = blob;
          blob = rev;
          rev = null;
        }
        var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);
        var url = genDBUrl(host, id);
        if (rev) {
          url += '?rev=' + rev;
        }

        if (typeof blob === 'string') {
          // input is assumed to be a base64 string
          var binary;
          try {
            binary = thisAtob(blob);
          } catch (err) {
            return callback(createError(BAD_ARG,
                            'Attachment is not a valid base64 string'));
          }
          blob = binary ? binStringToBluffer(binary, type) : '';
        }

        // Add the attachment
        fetchJSON(url, {
          headers: new h({'Content-Type': type}),
          method: 'PUT',
          body: blob
        }, callback)["catch"](callback);
      });

      // Update/create multiple documents given by req in the database
      // given by host.
      api._bulkDocs = function (req, opts, callback) {
        // If new_edits=false then it prevents the database from creating
        // new revision numbers for the documents. Instead it just uses
        // the old ones. This is used in database replication.
        req.new_edits = opts.new_edits;

        setup().then(function () {
          return Promise.all(req.docs.map(preprocessAttachments$1));
        }).then(function () {
          // Update/create the documents
          return fetchJSON(genDBUrl(host, '_bulk_docs'), {
            method: 'POST',
            body: JSON.stringify(req)
          }, callback);
        })["catch"](callback);
      };


      // Update/create document
      api._put = function (doc, opts, callback) {
        setup().then(function () {
          return preprocessAttachments$1(doc);
        }).then(function () {
          return fetchJSON(genDBUrl(host, encodeDocId(doc._id)), {
            method: 'PUT',
            body: JSON.stringify(doc)
          });
        }).then(function (result) {
          callback(null, result.data);
        })["catch"](function (err) {
          err.docId = doc && doc._id;
          callback(err);
        });
      };


      // Get a listing of the documents in the database given
      // by host and ordered by increasing id.
      api.allDocs = adapterFun$$1('allDocs', function (opts, callback) {
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        opts = clone(opts);

        // List of parameters to add to the GET request
        var params = {};
        var body;
        var method = 'GET';

        if (opts.conflicts) {
          params.conflicts = true;
        }

        /* istanbul ignore if */
        if (opts.update_seq) {
          params.update_seq = true;
        }

        if (opts.descending) {
          params.descending = true;
        }

        if (opts.include_docs) {
          params.include_docs = true;
        }

        // added in CouchDB 1.6.0
        if (opts.attachments) {
          params.attachments = true;
        }

        if (opts.key) {
          params.key = JSON.stringify(opts.key);
        }

        if (opts.start_key) {
          opts.startkey = opts.start_key;
        }

        if (opts.startkey) {
          params.startkey = JSON.stringify(opts.startkey);
        }

        if (opts.end_key) {
          opts.endkey = opts.end_key;
        }

        if (opts.endkey) {
          params.endkey = JSON.stringify(opts.endkey);
        }

        if (typeof opts.inclusive_end !== 'undefined') {
          params.inclusive_end = !!opts.inclusive_end;
        }

        if (typeof opts.limit !== 'undefined') {
          params.limit = opts.limit;
        }

        if (typeof opts.skip !== 'undefined') {
          params.skip = opts.skip;
        }

        var paramStr = paramsToStr(params);

        if (typeof opts.keys !== 'undefined') {
          method = 'POST';
          body = {keys: opts.keys};
        }

        fetchJSON(genDBUrl(host, '_all_docs' + paramStr), {
           method: method,
          body: JSON.stringify(body)
        }).then(function (result) {
          if (opts.include_docs && opts.attachments && opts.binary) {
            result.data.rows.forEach(readAttachmentsAsBlobOrBuffer);
          }
          callback(null, result.data);
        })["catch"](callback);
      });

      // Get a list of changes made to documents in the database given by host.
      // TODO According to the README, there should be two other methods here,
      // api.changes.addListener and api.changes.removeListener.
      api._changes = function (opts) {

        // We internally page the results of a changes request, this means
        // if there is a large set of changes to be returned we can start
        // processing them quicker instead of waiting on the entire
        // set of changes to return and attempting to process them at once
        var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;

        opts = clone(opts);

        if (opts.continuous && !('heartbeat' in opts)) {
          opts.heartbeat = DEFAULT_HEARTBEAT;
        }

        var requestTimeout = ('timeout' in opts) ? opts.timeout : 30 * 1000;

        // ensure CHANGES_TIMEOUT_BUFFER applies
        if ('timeout' in opts && opts.timeout &&
          (requestTimeout - opts.timeout) < CHANGES_TIMEOUT_BUFFER) {
            requestTimeout = opts.timeout + CHANGES_TIMEOUT_BUFFER;
        }

        /* istanbul ignore if */
        if ('heartbeat' in opts && opts.heartbeat &&
           (requestTimeout - opts.heartbeat) < CHANGES_TIMEOUT_BUFFER) {
            requestTimeout = opts.heartbeat + CHANGES_TIMEOUT_BUFFER;
        }

        var params = {};
        if ('timeout' in opts && opts.timeout) {
          params.timeout = opts.timeout;
        }

        var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;
        var leftToFetch = limit;

        if (opts.style) {
          params.style = opts.style;
        }

        if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {
          params.include_docs = true;
        }

        if (opts.attachments) {
          params.attachments = true;
        }

        if (opts.continuous) {
          params.feed = 'longpoll';
        }

        if (opts.seq_interval) {
          params.seq_interval = opts.seq_interval;
        }

        if (opts.conflicts) {
          params.conflicts = true;
        }

        if (opts.descending) {
          params.descending = true;
        }
        
        /* istanbul ignore if */
        if (opts.update_seq) {
          params.update_seq = true;
        }

        if ('heartbeat' in opts) {
          // If the heartbeat value is false, it disables the default heartbeat
          if (opts.heartbeat) {
            params.heartbeat = opts.heartbeat;
          }
        }

        if (opts.filter && typeof opts.filter === 'string') {
          params.filter = opts.filter;
        }

        if (opts.view && typeof opts.view === 'string') {
          params.filter = '_view';
          params.view = opts.view;
        }

        // If opts.query_params exists, pass it through to the changes request.
        // These parameters may be used by the filter on the source database.
        if (opts.query_params && typeof opts.query_params === 'object') {
          for (var param_name in opts.query_params) {
            /* istanbul ignore else */
            if (opts.query_params.hasOwnProperty(param_name)) {
              params[param_name] = opts.query_params[param_name];
            }
          }
        }

        var method = 'GET';
        var body;

        if (opts.doc_ids) {
          // set this automagically for the user; it's annoying that couchdb
          // requires both a "filter" and a "doc_ids" param.
          params.filter = '_doc_ids';
          method = 'POST';
          body = {doc_ids: opts.doc_ids };
        }
        /* istanbul ignore next */
        else if (opts.selector) {
          // set this automagically for the user, similar to above
          params.filter = '_selector';
          method = 'POST';
          body = {selector: opts.selector };
        }

        var controller = new a();
        var lastFetchedSeq;

        // Get all the changes starting wtih the one immediately after the
        // sequence number given by since.
        var fetchData = function (since, callback) {
          if (opts.aborted) {
            return;
          }
          params.since = since;
          // "since" can be any kind of json object in Cloudant/CouchDB 2.x
          /* istanbul ignore next */
          if (typeof params.since === "object") {
            params.since = JSON.stringify(params.since);
          }

          if (opts.descending) {
            if (limit) {
              params.limit = leftToFetch;
            }
          } else {
            params.limit = (!limit || leftToFetch > batchSize) ?
              batchSize : leftToFetch;
          }

          // Set the options for the ajax call
          var url = genDBUrl(host, '_changes' + paramsToStr(params));
          var fetchOpts = {
            signal: controller.signal,
            method: method,
            body: JSON.stringify(body)
          };
          lastFetchedSeq = since;

          /* istanbul ignore if */
          if (opts.aborted) {
            return;
          }

          // Get the changes
          setup().then(function () {
            return fetchJSON(url, fetchOpts, callback);
          })["catch"](callback);
        };

        // If opts.since exists, get all the changes from the sequence
        // number given by opts.since. Otherwise, get all the changes
        // from the sequence number 0.
        var results = {results: []};

        var fetched = function (err, res) {
          if (opts.aborted) {
            return;
          }
          var raw_results_length = 0;
          // If the result of the ajax call (res) contains changes (res.results)
          if (res && res.results) {
            raw_results_length = res.results.length;
            results.last_seq = res.last_seq;
            var pending = null;
            var lastSeq = null;
            // Attach 'pending' property if server supports it (CouchDB 2.0+)
            /* istanbul ignore if */
            if (typeof res.pending === 'number') {
              pending = res.pending;
            }
            if (typeof results.last_seq === 'string' || typeof results.last_seq === 'number') {
              lastSeq = results.last_seq;
            }
            // For each change
            var req = {};
            req.query = opts.query_params;
            res.results = res.results.filter(function (c) {
              leftToFetch--;
              var ret = filterChange(opts)(c);
              if (ret) {
                if (opts.include_docs && opts.attachments && opts.binary) {
                  readAttachmentsAsBlobOrBuffer(c);
                }
                if (opts.return_docs) {
                  results.results.push(c);
                }
                opts.onChange(c, pending, lastSeq);
              }
              return ret;
            });
          } else if (err) {
            // In case of an error, stop listening for changes and call
            // opts.complete
            opts.aborted = true;
            opts.complete(err);
            return;
          }

          // The changes feed may have timed out with no results
          // if so reuse last update sequence
          if (res && res.last_seq) {
            lastFetchedSeq = res.last_seq;
          }

          var finished = (limit && leftToFetch <= 0) ||
            (res && raw_results_length < batchSize) ||
            (opts.descending);

          if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {
            // Queue a call to fetch again with the newest sequence number
            nextTick(function () { fetchData(lastFetchedSeq, fetched); });
          } else {
            // We're done, call the callback
            opts.complete(null, results);
          }
        };

        fetchData(opts.since || 0, fetched);

        // Return a method to cancel this method from processing any more
        return {
          cancel: function () {
            opts.aborted = true;
            controller.abort();
          }
        };
      };

      // Given a set of document/revision IDs (given by req), tets the subset of
      // those that do NOT correspond to revisions stored in the database.
      // See http://wiki.apache.org/couchdb/HttpPostRevsDiff
      api.revsDiff = adapterFun$$1('revsDiff', function (req, opts, callback) {
        // If no options were given, set the callback to be the second parameter
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }

        // Get the missing document/revision IDs
        fetchJSON(genDBUrl(host, '_revs_diff'), {
          method: 'POST',
          body: JSON.stringify(req)
        }, callback)["catch"](callback);
      });

      api._close = function (callback) {
        callback();
      };

      api._destroy = function (options, callback) {
        fetchJSON(genDBUrl(host, ''), {method: 'DELETE'}).then(function (json) {
          callback(null, json);
        })["catch"](function (err) {
          /* istanbul ignore if */
          if (err.status === 404) {
            callback(null, {ok: true});
          } else {
            callback(err);
          }
        });
      };
    }

    // HttpPouch is a valid adapter.
    HttpPouch.valid = function () {
      return true;
    };

    function HttpPouch$1 (PouchDB) {
      PouchDB.adapter('http', HttpPouch, false);
      PouchDB.adapter('https', HttpPouch, false);
    }

    function QueryParseError(message) {
      this.status = 400;
      this.name = 'query_parse_error';
      this.message = message;
      this.error = true;
      try {
        Error.captureStackTrace(this, QueryParseError);
      } catch (e) {}
    }

    inherits(QueryParseError, Error);

    function NotFoundError(message) {
      this.status = 404;
      this.name = 'not_found';
      this.message = message;
      this.error = true;
      try {
        Error.captureStackTrace(this, NotFoundError);
      } catch (e) {}
    }

    inherits(NotFoundError, Error);

    function BuiltInError(message) {
      this.status = 500;
      this.name = 'invalid_value';
      this.message = message;
      this.error = true;
      try {
        Error.captureStackTrace(this, BuiltInError);
      } catch (e) {}
    }

    inherits(BuiltInError, Error);

    function promisedCallback(promise, callback) {
      if (callback) {
        promise.then(function (res) {
          nextTick(function () {
            callback(null, res);
          });
        }, function (reason) {
          nextTick(function () {
            callback(reason);
          });
        });
      }
      return promise;
    }

    function callbackify(fun) {
      return getArguments(function (args) {
        var cb = args.pop();
        var promise = fun.apply(this, args);
        if (typeof cb === 'function') {
          promisedCallback(promise, cb);
        }
        return promise;
      });
    }

    // Promise finally util similar to Q.finally
    function fin(promise, finalPromiseFactory) {
      return promise.then(function (res) {
        return finalPromiseFactory().then(function () {
          return res;
        });
      }, function (reason) {
        return finalPromiseFactory().then(function () {
          throw reason;
        });
      });
    }

    function sequentialize(queue, promiseFactory) {
      return function () {
        var args = arguments;
        var that = this;
        return queue.add(function () {
          return promiseFactory.apply(that, args);
        });
      };
    }

    // uniq an array of strings, order not guaranteed
    // similar to underscore/lodash _.uniq
    function uniq(arr) {
      var theSet = new ExportedSet(arr);
      var result = new Array(theSet.size);
      var index = -1;
      theSet.forEach(function (value) {
        result[++index] = value;
      });
      return result;
    }

    function mapToKeysArray(map) {
      var result = new Array(map.size);
      var index = -1;
      map.forEach(function (value, key) {
        result[++index] = key;
      });
      return result;
    }

    function createBuiltInError(name) {
      var message = 'builtin ' + name +
        ' function requires map values to be numbers' +
        ' or number arrays';
      return new BuiltInError(message);
    }

    function sum(values) {
      var result = 0;
      for (var i = 0, len = values.length; i < len; i++) {
        var num = values[i];
        if (typeof num !== 'number') {
          if (Array.isArray(num)) {
            // lists of numbers are also allowed, sum them separately
            result = typeof result === 'number' ? [result] : result;
            for (var j = 0, jLen = num.length; j < jLen; j++) {
              var jNum = num[j];
              if (typeof jNum !== 'number') {
                throw createBuiltInError('_sum');
              } else if (typeof result[j] === 'undefined') {
                result.push(jNum);
              } else {
                result[j] += jNum;
              }
            }
          } else { // not array/number
            throw createBuiltInError('_sum');
          }
        } else if (typeof result === 'number') {
          result += num;
        } else { // add number to array
          result[0] += num;
        }
      }
      return result;
    }

    var log = guardedConsole.bind(null, 'log');
    var isArray = Array.isArray;
    var toJSON = JSON.parse;

    function evalFunctionWithEval(func, emit) {
      return scopeEval(
        "return (" + func.replace(/;\s*$/, "") + ");",
        {
          emit: emit,
          sum: sum,
          log: log,
          isArray: isArray,
          toJSON: toJSON
        }
      );
    }

    /*
     * Simple task queue to sequentialize actions. Assumes
     * callbacks will eventually fire (once).
     */


    function TaskQueue$1() {
      this.promise = new Promise(function (fulfill) {fulfill(); });
    }
    TaskQueue$1.prototype.add = function (promiseFactory) {
      this.promise = this.promise["catch"](function () {
        // just recover
      }).then(function () {
        return promiseFactory();
      });
      return this.promise;
    };
    TaskQueue$1.prototype.finish = function () {
      return this.promise;
    };

    function stringify(input) {
      if (!input) {
        return 'undefined'; // backwards compat for empty reduce
      }
      // for backwards compat with mapreduce, functions/strings are stringified
      // as-is. everything else is JSON-stringified.
      switch (typeof input) {
        case 'function':
          // e.g. a mapreduce map
          return input.toString();
        case 'string':
          // e.g. a mapreduce built-in _reduce function
          return input.toString();
        default:
          // e.g. a JSON object in the case of mango queries
          return JSON.stringify(input);
      }
    }

    /* create a string signature for a view so we can cache it and uniq it */
    function createViewSignature(mapFun, reduceFun) {
      // the "undefined" part is for backwards compatibility
      return stringify(mapFun) + stringify(reduceFun) + 'undefined';
    }

    function createView(sourceDB, viewName, mapFun, reduceFun, temporary, localDocName) {
      var viewSignature = createViewSignature(mapFun, reduceFun);

      var cachedViews;
      if (!temporary) {
        // cache this to ensure we don't try to update the same view twice
        cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};
        if (cachedViews[viewSignature]) {
          return cachedViews[viewSignature];
        }
      }

      var promiseForView = sourceDB.info().then(function (info) {

        var depDbName = info.db_name + '-mrview-' +
          (temporary ? 'temp' : stringMd5(viewSignature));

        // save the view name in the source db so it can be cleaned up if necessary
        // (e.g. when the _design doc is deleted, remove all associated view data)
        function diffFunction(doc) {
          doc.views = doc.views || {};
          var fullViewName = viewName;
          if (fullViewName.indexOf('/') === -1) {
            fullViewName = viewName + '/' + viewName;
          }
          var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};
          /* istanbul ignore if */
          if (depDbs[depDbName]) {
            return; // no update necessary
          }
          depDbs[depDbName] = true;
          return doc;
        }
        return upsert(sourceDB, '_local/' + localDocName, diffFunction).then(function () {
          return sourceDB.registerDependentDatabase(depDbName).then(function (res) {
            var db = res.db;
            db.auto_compaction = true;
            var view = {
              name: depDbName,
              db: db,
              sourceDB: sourceDB,
              adapter: sourceDB.adapter,
              mapFun: mapFun,
              reduceFun: reduceFun
            };
            return view.db.get('_local/lastSeq')["catch"](function (err) {
              /* istanbul ignore if */
              if (err.status !== 404) {
                throw err;
              }
            }).then(function (lastSeqDoc) {
              view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;
              if (cachedViews) {
                view.db.once('destroyed', function () {
                  delete cachedViews[viewSignature];
                });
              }
              return view;
            });
          });
        });
      });

      if (cachedViews) {
        cachedViews[viewSignature] = promiseForView;
      }
      return promiseForView;
    }

    var persistentQueues = {};
    var tempViewQueue = new TaskQueue$1();
    var CHANGES_BATCH_SIZE$1 = 50;

    function parseViewName(name) {
      // can be either 'ddocname/viewname' or just 'viewname'
      // (where the ddoc name is the same)
      return name.indexOf('/') === -1 ? [name, name] : name.split('/');
    }

    function isGenOne(changes) {
      // only return true if the current change is 1-
      // and there are no other leafs
      return changes.length === 1 && /^1-/.test(changes[0].rev);
    }

    function emitError(db, e) {
      try {
        db.emit('error', e);
      } catch (err) {
        guardedConsole('error',
          'The user\'s map/reduce function threw an uncaught error.\n' +
          'You can debug this error by doing:\n' +
          'myDatabase.on(\'error\', function (err) { debugger; });\n' +
          'Please double-check your map/reduce function.');
        guardedConsole('error', e);
      }
    }

    /**
     * Returns an "abstract" mapreduce object of the form:
     *
     *   {
     *     query: queryFun,
     *     viewCleanup: viewCleanupFun
     *   }
     *
     * Arguments are:
     *
     * localDoc: string
     *   This is for the local doc that gets saved in order to track the
     *   "dependent" DBs and clean them up for viewCleanup. It should be
     *   unique, so that indexer plugins don't collide with each other.
     * mapper: function (mapFunDef, emit)
     *   Returns a map function based on the mapFunDef, which in the case of
     *   normal map/reduce is just the de-stringified function, but may be
     *   something else, such as an object in the case of pouchdb-find.
     * reducer: function (reduceFunDef)
     *   Ditto, but for reducing. Modules don't have to support reducing
     *   (e.g. pouchdb-find).
     * ddocValidator: function (ddoc, viewName)
     *   Throws an error if the ddoc or viewName is not valid.
     *   This could be a way to communicate to the user that the configuration for the
     *   indexer is invalid.
     */
    function createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator) {

      function tryMap(db, fun, doc) {
        // emit an event if there was an error thrown by a map function.
        // putting try/catches in a single function also avoids deoptimizations.
        try {
          fun(doc);
        } catch (e) {
          emitError(db, e);
        }
      }

      function tryReduce(db, fun, keys, values, rereduce) {
        // same as above, but returning the result or an error. there are two separate
        // functions to avoid extra memory allocations since the tryCode() case is used
        // for custom map functions (common) vs this function, which is only used for
        // custom reduce functions (rare)
        try {
          return {output : fun(keys, values, rereduce)};
        } catch (e) {
          emitError(db, e);
          return {error: e};
        }
      }

      function sortByKeyThenValue(x, y) {
        var keyCompare = collate(x.key, y.key);
        return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);
      }

      function sliceResults(results, limit, skip) {
        skip = skip || 0;
        if (typeof limit === 'number') {
          return results.slice(skip, limit + skip);
        } else if (skip > 0) {
          return results.slice(skip);
        }
        return results;
      }

      function rowToDocId(row) {
        var val = row.value;
        // Users can explicitly specify a joined doc _id, or it
        // defaults to the doc _id that emitted the key/value.
        var docId = (val && typeof val === 'object' && val._id) || row.id;
        return docId;
      }

      function readAttachmentsAsBlobOrBuffer(res) {
        res.rows.forEach(function (row) {
          var atts = row.doc && row.doc._attachments;
          if (!atts) {
            return;
          }
          Object.keys(atts).forEach(function (filename) {
            var att = atts[filename];
            atts[filename].data = b64ToBluffer(att.data, att.content_type);
          });
        });
      }

      function postprocessAttachments(opts) {
        return function (res) {
          if (opts.include_docs && opts.attachments && opts.binary) {
            readAttachmentsAsBlobOrBuffer(res);
          }
          return res;
        };
      }

      function addHttpParam(paramName, opts, params, asJson) {
        // add an http param from opts to params, optionally json-encoded
        var val = opts[paramName];
        if (typeof val !== 'undefined') {
          if (asJson) {
            val = encodeURIComponent(JSON.stringify(val));
          }
          params.push(paramName + '=' + val);
        }
      }

      function coerceInteger(integerCandidate) {
        if (typeof integerCandidate !== 'undefined') {
          var asNumber = Number(integerCandidate);
          // prevents e.g. '1foo' or '1.1' being coerced to 1
          if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {
            return asNumber;
          } else {
            return integerCandidate;
          }
        }
      }

      function coerceOptions(opts) {
        opts.group_level = coerceInteger(opts.group_level);
        opts.limit = coerceInteger(opts.limit);
        opts.skip = coerceInteger(opts.skip);
        return opts;
      }

      function checkPositiveInteger(number) {
        if (number) {
          if (typeof number !== 'number') {
            return  new QueryParseError('Invalid value for integer: "' +
              number + '"');
          }
          if (number < 0) {
            return new QueryParseError('Invalid value for positive integer: ' +
              '"' + number + '"');
          }
        }
      }

      function checkQueryParseError(options, fun) {
        var startkeyName = options.descending ? 'endkey' : 'startkey';
        var endkeyName = options.descending ? 'startkey' : 'endkey';

        if (typeof options[startkeyName] !== 'undefined' &&
          typeof options[endkeyName] !== 'undefined' &&
          collate(options[startkeyName], options[endkeyName]) > 0) {
          throw new QueryParseError('No rows can match your key range, ' +
            'reverse your start_key and end_key or set {descending : true}');
        } else if (fun.reduce && options.reduce !== false) {
          if (options.include_docs) {
            throw new QueryParseError('{include_docs:true} is invalid for reduce');
          } else if (options.keys && options.keys.length > 1 &&
            !options.group && !options.group_level) {
            throw new QueryParseError('Multi-key fetches for reduce views must use ' +
              '{group: true}');
          }
        }
        ['group_level', 'limit', 'skip'].forEach(function (optionName) {
          var error = checkPositiveInteger(options[optionName]);
          if (error) {
            throw error;
          }
        });
      }

      function httpQuery(db, fun, opts) {
        // List of parameters to add to the PUT request
        var params = [];
        var body;
        var method = 'GET';
        var ok, status;

        // If opts.reduce exists and is defined, then add it to the list
        // of parameters.
        // If reduce=false then the results are that of only the map function
        // not the final result of map and reduce.
        addHttpParam('reduce', opts, params);
        addHttpParam('include_docs', opts, params);
        addHttpParam('attachments', opts, params);
        addHttpParam('limit', opts, params);
        addHttpParam('descending', opts, params);
        addHttpParam('group', opts, params);
        addHttpParam('group_level', opts, params);
        addHttpParam('skip', opts, params);
        addHttpParam('stale', opts, params);
        addHttpParam('conflicts', opts, params);
        addHttpParam('startkey', opts, params, true);
        addHttpParam('start_key', opts, params, true);
        addHttpParam('endkey', opts, params, true);
        addHttpParam('end_key', opts, params, true);
        addHttpParam('inclusive_end', opts, params);
        addHttpParam('key', opts, params, true);
        addHttpParam('update_seq', opts, params);

        // Format the list of parameters into a valid URI query string
        params = params.join('&');
        params = params === '' ? '' : '?' + params;

        // If keys are supplied, issue a POST to circumvent GET query string limits
        // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options
        if (typeof opts.keys !== 'undefined') {
          var MAX_URL_LENGTH = 2000;
          // according to http://stackoverflow.com/a/417184/680742,
          // the de facto URL length limit is 2000 characters

          var keysAsString =
            'keys=' + encodeURIComponent(JSON.stringify(opts.keys));
          if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {
            // If the keys are short enough, do a GET. we do this to work around
            // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)
            params += (params[0] === '?' ? '&' : '?') + keysAsString;
          } else {
            method = 'POST';
            if (typeof fun === 'string') {
              body = {keys: opts.keys};
            } else { // fun is {map : mapfun}, so append to this
              fun.keys = opts.keys;
            }
          }
        }

        // We are referencing a query defined in the design doc
        if (typeof fun === 'string') {
          var parts = parseViewName(fun);
          return db.fetch('_design/' + parts[0] + '/_view/' + parts[1] + params, {
            headers: new h({'Content-Type': 'application/json'}),
            method: method,
            body: JSON.stringify(body)
          }).then(function (response) {
            ok = response.ok;
            status = response.status;
            return response.json();
          }).then(function (result) {
            if (!ok) {
              result.status = status;
              throw generateErrorFromResponse(result);
            }
            // fail the entire request if the result contains an error
            result.rows.forEach(function (row) {
              /* istanbul ignore if */
              if (row.value && row.value.error && row.value.error === "builtin_reduce_error") {
                throw new Error(row.reason);
              }
            });
            return result;
          }).then(postprocessAttachments(opts));
        }

        // We are using a temporary view, terrible for performance, good for testing
        body = body || {};
        Object.keys(fun).forEach(function (key) {
          if (Array.isArray(fun[key])) {
            body[key] = fun[key];
          } else {
            body[key] = fun[key].toString();
          }
        });

        return db.fetch('_temp_view' + params, {
          headers: new h({'Content-Type': 'application/json'}),
          method: 'POST',
          body: JSON.stringify(body)
        }).then(function (response) {
            ok = response.ok;
            status = response.status;
          return response.json();
        }).then(function (result) {
          if (!ok) {
            result.status = status;
            throw generateErrorFromResponse(result);
          }
          return result;
        }).then(postprocessAttachments(opts));
      }

      // custom adapters can define their own api._query
      // and override the default behavior
      /* istanbul ignore next */
      function customQuery(db, fun, opts) {
        return new Promise(function (resolve, reject) {
          db._query(fun, opts, function (err, res) {
            if (err) {
              return reject(err);
            }
            resolve(res);
          });
        });
      }

      // custom adapters can define their own api._viewCleanup
      // and override the default behavior
      /* istanbul ignore next */
      function customViewCleanup(db) {
        return new Promise(function (resolve, reject) {
          db._viewCleanup(function (err, res) {
            if (err) {
              return reject(err);
            }
            resolve(res);
          });
        });
      }

      function defaultsTo(value) {
        return function (reason) {
          /* istanbul ignore else */
          if (reason.status === 404) {
            return value;
          } else {
            throw reason;
          }
        };
      }

      // returns a promise for a list of docs to update, based on the input docId.
      // the order doesn't matter, because post-3.2.0, bulkDocs
      // is an atomic operation in all three adapters.
      function getDocsToPersist(docId, view, docIdsToChangesAndEmits) {
        var metaDocId = '_local/doc_' + docId;
        var defaultMetaDoc = {_id: metaDocId, keys: []};
        var docData = docIdsToChangesAndEmits.get(docId);
        var indexableKeysToKeyValues = docData[0];
        var changes = docData[1];

        function getMetaDoc() {
          if (isGenOne(changes)) {
            // generation 1, so we can safely assume initial state
            // for performance reasons (avoids unnecessary GETs)
            return Promise.resolve(defaultMetaDoc);
          }
          return view.db.get(metaDocId)["catch"](defaultsTo(defaultMetaDoc));
        }

        function getKeyValueDocs(metaDoc) {
          if (!metaDoc.keys.length) {
            // no keys, no need for a lookup
            return Promise.resolve({rows: []});
          }
          return view.db.allDocs({
            keys: metaDoc.keys,
            include_docs: true
          });
        }

        function processKeyValueDocs(metaDoc, kvDocsRes) {
          var kvDocs = [];
          var oldKeys = new ExportedSet();

          for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {
            var row = kvDocsRes.rows[i];
            var doc = row.doc;
            if (!doc) { // deleted
              continue;
            }
            kvDocs.push(doc);
            oldKeys.add(doc._id);
            doc._deleted = !indexableKeysToKeyValues.has(doc._id);
            if (!doc._deleted) {
              var keyValue = indexableKeysToKeyValues.get(doc._id);
              if ('value' in keyValue) {
                doc.value = keyValue.value;
              }
            }
          }
          var newKeys = mapToKeysArray(indexableKeysToKeyValues);
          newKeys.forEach(function (key) {
            if (!oldKeys.has(key)) {
              // new doc
              var kvDoc = {
                _id: key
              };
              var keyValue = indexableKeysToKeyValues.get(key);
              if ('value' in keyValue) {
                kvDoc.value = keyValue.value;
              }
              kvDocs.push(kvDoc);
            }
          });
          metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));
          kvDocs.push(metaDoc);

          return kvDocs;
        }

        return getMetaDoc().then(function (metaDoc) {
          return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {
            return processKeyValueDocs(metaDoc, kvDocsRes);
          });
        });
      }

      // updates all emitted key/value docs and metaDocs in the mrview database
      // for the given batch of documents from the source database
      function saveKeyValues(view, docIdsToChangesAndEmits, seq) {
        var seqDocId = '_local/lastSeq';
        return view.db.get(seqDocId)[
          "catch"](defaultsTo({_id: seqDocId, seq: 0}))
          .then(function (lastSeqDoc) {
            var docIds = mapToKeysArray(docIdsToChangesAndEmits);
            return Promise.all(docIds.map(function (docId) {
              return getDocsToPersist(docId, view, docIdsToChangesAndEmits);
            })).then(function (listOfDocsToPersist) {
              var docsToPersist = flatten(listOfDocsToPersist);
              lastSeqDoc.seq = seq;
              docsToPersist.push(lastSeqDoc);
              // write all docs in a single operation, update the seq once
              return view.db.bulkDocs({docs : docsToPersist});
            });
          });
      }

      function getQueue(view) {
        var viewName = typeof view === 'string' ? view : view.name;
        var queue = persistentQueues[viewName];
        if (!queue) {
          queue = persistentQueues[viewName] = new TaskQueue$1();
        }
        return queue;
      }

      function updateView(view) {
        return sequentialize(getQueue(view), function () {
          return updateViewInQueue(view);
        })();
      }

      function updateViewInQueue(view) {
        // bind the emit function once
        var mapResults;
        var doc;

        function emit(key, value) {
          var output = {id: doc._id, key: normalizeKey(key)};
          // Don't explicitly store the value unless it's defined and non-null.
          // This saves on storage space, because often people don't use it.
          if (typeof value !== 'undefined' && value !== null) {
            output.value = normalizeKey(value);
          }
          mapResults.push(output);
        }

        var mapFun = mapper(view.mapFun, emit);

        var currentSeq = view.seq || 0;

        function processChange(docIdsToChangesAndEmits, seq) {
          return function () {
            return saveKeyValues(view, docIdsToChangesAndEmits, seq);
          };
        }

        var queue = new TaskQueue$1();

        function processNextBatch() {
          return view.sourceDB.changes({
            return_docs: true,
            conflicts: true,
            include_docs: true,
            style: 'all_docs',
            since: currentSeq,
            limit: CHANGES_BATCH_SIZE$1
          }).then(processBatch);
        }

        function processBatch(response) {
          var results = response.results;
          if (!results.length) {
            return;
          }
          var docIdsToChangesAndEmits = createDocIdsToChangesAndEmits(results);
          queue.add(processChange(docIdsToChangesAndEmits, currentSeq));
          if (results.length < CHANGES_BATCH_SIZE$1) {
            return;
          }
          return processNextBatch();
        }

        function createDocIdsToChangesAndEmits(results) {
          var docIdsToChangesAndEmits = new ExportedMap();
          for (var i = 0, len = results.length; i < len; i++) {
            var change = results[i];
            if (change.doc._id[0] !== '_') {
              mapResults = [];
              doc = change.doc;

              if (!doc._deleted) {
                tryMap(view.sourceDB, mapFun, doc);
              }
              mapResults.sort(sortByKeyThenValue);

              var indexableKeysToKeyValues = createIndexableKeysToKeyValues(mapResults);
              docIdsToChangesAndEmits.set(change.doc._id, [
                indexableKeysToKeyValues,
                change.changes
              ]);
            }
            currentSeq = change.seq;
          }
          return docIdsToChangesAndEmits;
        }

        function createIndexableKeysToKeyValues(mapResults) {
          var indexableKeysToKeyValues = new ExportedMap();
          var lastKey;
          for (var i = 0, len = mapResults.length; i < len; i++) {
            var emittedKeyValue = mapResults[i];
            var complexKey = [emittedKeyValue.key, emittedKeyValue.id];
            if (i > 0 && collate(emittedKeyValue.key, lastKey) === 0) {
              complexKey.push(i); // dup key+id, so make it unique
            }
            indexableKeysToKeyValues.set(toIndexableString(complexKey), emittedKeyValue);
            lastKey = emittedKeyValue.key;
          }
          return indexableKeysToKeyValues;
        }

        return processNextBatch().then(function () {
          return queue.finish();
        }).then(function () {
          view.seq = currentSeq;
        });
      }

      function reduceView(view, results, options) {
        if (options.group_level === 0) {
          delete options.group_level;
        }

        var shouldGroup = options.group || options.group_level;

        var reduceFun = reducer(view.reduceFun);

        var groups = [];
        var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :
          options.group_level;
        results.forEach(function (e) {
          var last = groups[groups.length - 1];
          var groupKey = shouldGroup ? e.key : null;

          // only set group_level for array keys
          if (shouldGroup && Array.isArray(groupKey)) {
            groupKey = groupKey.slice(0, lvl);
          }

          if (last && collate(last.groupKey, groupKey) === 0) {
            last.keys.push([e.key, e.id]);
            last.values.push(e.value);
            return;
          }
          groups.push({
            keys: [[e.key, e.id]],
            values: [e.value],
            groupKey: groupKey
          });
        });
        results = [];
        for (var i = 0, len = groups.length; i < len; i++) {
          var e = groups[i];
          var reduceTry = tryReduce(view.sourceDB, reduceFun, e.keys, e.values, false);
          if (reduceTry.error && reduceTry.error instanceof BuiltInError) {
            // CouchDB returns an error if a built-in errors out
            throw reduceTry.error;
          }
          results.push({
            // CouchDB just sets the value to null if a non-built-in errors out
            value: reduceTry.error ? null : reduceTry.output,
            key: e.groupKey
          });
        }
        // no total_rows/offset when reducing
        return {rows: sliceResults(results, options.limit, options.skip)};
      }

      function queryView(view, opts) {
        return sequentialize(getQueue(view), function () {
          return queryViewInQueue(view, opts);
        })();
      }

      function queryViewInQueue(view, opts) {
        var totalRows;
        var shouldReduce = view.reduceFun && opts.reduce !== false;
        var skip = opts.skip || 0;
        if (typeof opts.keys !== 'undefined' && !opts.keys.length) {
          // equivalent query
          opts.limit = 0;
          delete opts.keys;
        }

        function fetchFromView(viewOpts) {
          viewOpts.include_docs = true;
          return view.db.allDocs(viewOpts).then(function (res) {
            totalRows = res.total_rows;
            return res.rows.map(function (result) {

              // implicit migration - in older versions of PouchDB,
              // we explicitly stored the doc as {id: ..., key: ..., value: ...}
              // this is tested in a migration test
              /* istanbul ignore next */
              if ('value' in result.doc && typeof result.doc.value === 'object' &&
                result.doc.value !== null) {
                var keys = Object.keys(result.doc.value).sort();
                // this detection method is not perfect, but it's unlikely the user
                // emitted a value which was an object with these 3 exact keys
                var expectedKeys = ['id', 'key', 'value'];
                if (!(keys < expectedKeys || keys > expectedKeys)) {
                  return result.doc.value;
                }
              }

              var parsedKeyAndDocId = parseIndexableString(result.doc._id);
              return {
                key: parsedKeyAndDocId[0],
                id: parsedKeyAndDocId[1],
                value: ('value' in result.doc ? result.doc.value : null)
              };
            });
          });
        }

        function onMapResultsReady(rows) {
          var finalResults;
          if (shouldReduce) {
            finalResults = reduceView(view, rows, opts);
          } else {
            finalResults = {
              total_rows: totalRows,
              offset: skip,
              rows: rows
            };
          }
          /* istanbul ignore if */
          if (opts.update_seq) {
            finalResults.update_seq = view.seq;
          }
          if (opts.include_docs) {
            var docIds = uniq(rows.map(rowToDocId));

            return view.sourceDB.allDocs({
              keys: docIds,
              include_docs: true,
              conflicts: opts.conflicts,
              attachments: opts.attachments,
              binary: opts.binary
            }).then(function (allDocsRes) {
              var docIdsToDocs = new ExportedMap();
              allDocsRes.rows.forEach(function (row) {
                docIdsToDocs.set(row.id, row.doc);
              });
              rows.forEach(function (row) {
                var docId = rowToDocId(row);
                var doc = docIdsToDocs.get(docId);
                if (doc) {
                  row.doc = doc;
                }
              });
              return finalResults;
            });
          } else {
            return finalResults;
          }
        }

        if (typeof opts.keys !== 'undefined') {
          var keys = opts.keys;
          var fetchPromises = keys.map(function (key) {
            var viewOpts = {
              startkey : toIndexableString([key]),
              endkey   : toIndexableString([key, {}])
            };
            /* istanbul ignore if */
            if (opts.update_seq) {
              viewOpts.update_seq = true;
            }
            return fetchFromView(viewOpts);
          });
          return Promise.all(fetchPromises).then(flatten).then(onMapResultsReady);
        } else { // normal query, no 'keys'
          var viewOpts = {
            descending : opts.descending
          };
          /* istanbul ignore if */
          if (opts.update_seq) {
            viewOpts.update_seq = true;
          }
          var startkey;
          var endkey;
          if ('start_key' in opts) {
            startkey = opts.start_key;
          }
          if ('startkey' in opts) {
            startkey = opts.startkey;
          }
          if ('end_key' in opts) {
            endkey = opts.end_key;
          }
          if ('endkey' in opts) {
            endkey = opts.endkey;
          }
          if (typeof startkey !== 'undefined') {
            viewOpts.startkey = opts.descending ?
              toIndexableString([startkey, {}]) :
              toIndexableString([startkey]);
          }
          if (typeof endkey !== 'undefined') {
            var inclusiveEnd = opts.inclusive_end !== false;
            if (opts.descending) {
              inclusiveEnd = !inclusiveEnd;
            }

            viewOpts.endkey = toIndexableString(
              inclusiveEnd ? [endkey, {}] : [endkey]);
          }
          if (typeof opts.key !== 'undefined') {
            var keyStart = toIndexableString([opts.key]);
            var keyEnd = toIndexableString([opts.key, {}]);
            if (viewOpts.descending) {
              viewOpts.endkey = keyStart;
              viewOpts.startkey = keyEnd;
            } else {
              viewOpts.startkey = keyStart;
              viewOpts.endkey = keyEnd;
            }
          }
          if (!shouldReduce) {
            if (typeof opts.limit === 'number') {
              viewOpts.limit = opts.limit;
            }
            viewOpts.skip = skip;
          }
          return fetchFromView(viewOpts).then(onMapResultsReady);
        }
      }

      function httpViewCleanup(db) {
        return db.fetch('_view_cleanup', {
          headers: new h({'Content-Type': 'application/json'}),
          method: 'POST'
        }).then(function (response) {
          return response.json();
        });
      }

      function localViewCleanup(db) {
        return db.get('_local/' + localDocName).then(function (metaDoc) {
          var docsToViews = new ExportedMap();
          Object.keys(metaDoc.views).forEach(function (fullViewName) {
            var parts = parseViewName(fullViewName);
            var designDocName = '_design/' + parts[0];
            var viewName = parts[1];
            var views = docsToViews.get(designDocName);
            if (!views) {
              views = new ExportedSet();
              docsToViews.set(designDocName, views);
            }
            views.add(viewName);
          });
          var opts = {
            keys : mapToKeysArray(docsToViews),
            include_docs : true
          };
          return db.allDocs(opts).then(function (res) {
            var viewsToStatus = {};
            res.rows.forEach(function (row) {
              var ddocName = row.key.substring(8); // cuts off '_design/'
              docsToViews.get(row.key).forEach(function (viewName) {
                var fullViewName = ddocName + '/' + viewName;
                /* istanbul ignore if */
                if (!metaDoc.views[fullViewName]) {
                  // new format, without slashes, to support PouchDB 2.2.0
                  // migration test in pouchdb's browser.migration.js verifies this
                  fullViewName = viewName;
                }
                var viewDBNames = Object.keys(metaDoc.views[fullViewName]);
                // design doc deleted, or view function nonexistent
                var statusIsGood = row.doc && row.doc.views &&
                  row.doc.views[viewName];
                viewDBNames.forEach(function (viewDBName) {
                  viewsToStatus[viewDBName] =
                    viewsToStatus[viewDBName] || statusIsGood;
                });
              });
            });
            var dbsToDelete = Object.keys(viewsToStatus).filter(
              function (viewDBName) { return !viewsToStatus[viewDBName]; });
            var destroyPromises = dbsToDelete.map(function (viewDBName) {
              return sequentialize(getQueue(viewDBName), function () {
                return new db.constructor(viewDBName, db.__opts).destroy();
              })();
            });
            return Promise.all(destroyPromises).then(function () {
              return {ok: true};
            });
          });
        }, defaultsTo({ok: true}));
      }

      function queryPromised(db, fun, opts) {
        /* istanbul ignore next */
        if (typeof db._query === 'function') {
          return customQuery(db, fun, opts);
        }
        if (isRemote(db)) {
          return httpQuery(db, fun, opts);
        }

        if (typeof fun !== 'string') {
          // temp_view
          checkQueryParseError(opts, fun);

          tempViewQueue.add(function () {
            var createViewPromise = createView(
              /* sourceDB */ db,
              /* viewName */ 'temp_view/temp_view',
              /* mapFun */ fun.map,
              /* reduceFun */ fun.reduce,
              /* temporary */ true,
              /* localDocName */ localDocName);
            return createViewPromise.then(function (view) {
              return fin(updateView(view).then(function () {
                return queryView(view, opts);
              }), function () {
                return view.db.destroy();
              });
            });
          });
          return tempViewQueue.finish();
        } else {
          // persistent view
          var fullViewName = fun;
          var parts = parseViewName(fullViewName);
          var designDocName = parts[0];
          var viewName = parts[1];
          return db.get('_design/' + designDocName).then(function (doc) {
            var fun = doc.views && doc.views[viewName];

            if (!fun) {
              // basic validator; it's assumed that every subclass would want this
              throw new NotFoundError('ddoc ' + doc._id + ' has no view named ' +
                viewName);
            }

            ddocValidator(doc, viewName);
            checkQueryParseError(opts, fun);

            var createViewPromise = createView(
              /* sourceDB */ db,
              /* viewName */ fullViewName,
              /* mapFun */ fun.map,
              /* reduceFun */ fun.reduce,
              /* temporary */ false,
              /* localDocName */ localDocName);
            return createViewPromise.then(function (view) {
              if (opts.stale === 'ok' || opts.stale === 'update_after') {
                if (opts.stale === 'update_after') {
                  nextTick(function () {
                    updateView(view);
                  });
                }
                return queryView(view, opts);
              } else { // stale not ok
                return updateView(view).then(function () {
                  return queryView(view, opts);
                });
              }
            });
          });
        }
      }

      function abstractQuery(fun, opts, callback) {
        var db = this;
        if (typeof opts === 'function') {
          callback = opts;
          opts = {};
        }
        opts = opts ? coerceOptions(opts) : {};

        if (typeof fun === 'function') {
          fun = {map : fun};
        }

        var promise = Promise.resolve().then(function () {
          return queryPromised(db, fun, opts);
        });
        promisedCallback(promise, callback);
        return promise;
      }

      var abstractViewCleanup = callbackify(function () {
        var db = this;
        /* istanbul ignore next */
        if (typeof db._viewCleanup === 'function') {
          return customViewCleanup(db);
        }
        if (isRemote(db)) {
          return httpViewCleanup(db);
        }
        return localViewCleanup(db);
      });

      return {
        query: abstractQuery,
        viewCleanup: abstractViewCleanup
      };
    }

    var builtInReduce = {
      _sum: function (keys, values) {
        return sum(values);
      },

      _count: function (keys, values) {
        return values.length;
      },

      _stats: function (keys, values) {
        // no need to implement rereduce=true, because Pouch
        // will never call it
        function sumsqr(values) {
          var _sumsqr = 0;
          for (var i = 0, len = values.length; i < len; i++) {
            var num = values[i];
            _sumsqr += (num * num);
          }
          return _sumsqr;
        }
        return {
          sum     : sum(values),
          min     : Math.min.apply(null, values),
          max     : Math.max.apply(null, values),
          count   : values.length,
          sumsqr : sumsqr(values)
        };
      }
    };

    function getBuiltIn(reduceFunString) {
      if (/^_sum/.test(reduceFunString)) {
        return builtInReduce._sum;
      } else if (/^_count/.test(reduceFunString)) {
        return builtInReduce._count;
      } else if (/^_stats/.test(reduceFunString)) {
        return builtInReduce._stats;
      } else if (/^_/.test(reduceFunString)) {
        throw new Error(reduceFunString + ' is not a supported reduce function.');
      }
    }

    function mapper(mapFun, emit) {
      // for temp_views one can use emit(doc, emit), see #38
      if (typeof mapFun === "function" && mapFun.length === 2) {
        var origMap = mapFun;
        return function (doc) {
          return origMap(doc, emit);
        };
      } else {
        return evalFunctionWithEval(mapFun.toString(), emit);
      }
    }

    function reducer(reduceFun) {
      var reduceFunString = reduceFun.toString();
      var builtIn = getBuiltIn(reduceFunString);
      if (builtIn) {
        return builtIn;
      } else {
        return evalFunctionWithEval(reduceFunString);
      }
    }

    function ddocValidator(ddoc, viewName) {
      var fun = ddoc.views && ddoc.views[viewName];
      if (typeof fun.map !== 'string') {
        throw new NotFoundError('ddoc ' + ddoc._id + ' has no string view named ' +
          viewName + ', instead found object of type: ' + typeof fun.map);
      }
    }

    var localDocName = 'mrviews';
    var abstract = createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator);

    function query(fun, opts, callback) {
      return abstract.query.call(this, fun, opts, callback);
    }

    function viewCleanup(callback) {
      return abstract.viewCleanup.call(this, callback);
    }

    var mapreduce = {
      query: query,
      viewCleanup: viewCleanup
    };

    function isGenOne$1(rev) {
      return /^1-/.test(rev);
    }

    function fileHasChanged(localDoc, remoteDoc, filename) {
      return !localDoc._attachments ||
             !localDoc._attachments[filename] ||
             localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;
    }

    function getDocAttachments(db, doc) {
      var filenames = Object.keys(doc._attachments);
      return Promise.all(filenames.map(function (filename) {
        return db.getAttachment(doc._id, filename, {rev: doc._rev});
      }));
    }

    function getDocAttachmentsFromTargetOrSource(target, src, doc) {
      var doCheckForLocalAttachments = isRemote(src) && !isRemote(target);
      var filenames = Object.keys(doc._attachments);

      if (!doCheckForLocalAttachments) {
        return getDocAttachments(src, doc);
      }

      return target.get(doc._id).then(function (localDoc) {
        return Promise.all(filenames.map(function (filename) {
          if (fileHasChanged(localDoc, doc, filename)) {
            return src.getAttachment(doc._id, filename);
          }

          return target.getAttachment(localDoc._id, filename);
        }));
      })["catch"](function (error) {
        /* istanbul ignore if */
        if (error.status !== 404) {
          throw error;
        }

        return getDocAttachments(src, doc);
      });
    }

    function createBulkGetOpts(diffs) {
      var requests = [];
      Object.keys(diffs).forEach(function (id) {
        var missingRevs = diffs[id].missing;
        missingRevs.forEach(function (missingRev) {
          requests.push({
            id: id,
            rev: missingRev
          });
        });
      });

      return {
        docs: requests,
        revs: true,
        latest: true
      };
    }

    //
    // Fetch all the documents from the src as described in the "diffs",
    // which is a mapping of docs IDs to revisions. If the state ever
    // changes to "cancelled", then the returned promise will be rejected.
    // Else it will be resolved with a list of fetched documents.
    //
    function getDocs(src, target, diffs, state) {
      diffs = clone(diffs); // we do not need to modify this

      var resultDocs = [],
          ok = true;

      function getAllDocs() {

        var bulkGetOpts = createBulkGetOpts(diffs);

        if (!bulkGetOpts.docs.length) { // optimization: skip empty requests
          return;
        }

        return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {
          /* istanbul ignore if */
          if (state.cancelled) {
            throw new Error('cancelled');
          }
          return Promise.all(bulkGetResponse.results.map(function (bulkGetInfo) {
            return Promise.all(bulkGetInfo.docs.map(function (doc) {
              var remoteDoc = doc.ok;

              if (doc.error) {
                // when AUTO_COMPACTION is set, docs can be returned which look
                // like this: {"missing":"1-7c3ac256b693c462af8442f992b83696"}
                ok = false;
              }

              if (!remoteDoc || !remoteDoc._attachments) {
                return remoteDoc;
              }

              return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc)
                       .then(function (attachments) {
                               var filenames = Object.keys(remoteDoc._attachments);
                               attachments
                                 .forEach(function (attachment, i) {
                                            var att = remoteDoc._attachments[filenames[i]];
                                            delete att.stub;
                                            delete att.length;
                                            att.data = attachment;
                                          });

                                          return remoteDoc;
                                        });
            }));
          }))

          .then(function (results) {
            resultDocs = resultDocs.concat(flatten(results).filter(Boolean));
          });
        });
      }

      function hasAttachments(doc) {
        return doc._attachments && Object.keys(doc._attachments).length > 0;
      }

      function hasConflicts(doc) {
        return doc._conflicts && doc._conflicts.length > 0;
      }

      function fetchRevisionOneDocs(ids) {
        // Optimization: fetch gen-1 docs and attachments in
        // a single request using _all_docs
        return src.allDocs({
          keys: ids,
          include_docs: true,
          conflicts: true
        }).then(function (res) {
          if (state.cancelled) {
            throw new Error('cancelled');
          }
          res.rows.forEach(function (row) {
            if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||
                hasAttachments(row.doc) || hasConflicts(row.doc)) {
              // if any of these conditions apply, we need to fetch using get()
              return;
            }

            // strip _conflicts array to appease CSG (#5793)
            /* istanbul ignore if */
            if (row.doc._conflicts) {
              delete row.doc._conflicts;
            }

            // the doc we got back from allDocs() is sufficient
            resultDocs.push(row.doc);
            delete diffs[row.id];
          });
        });
      }

      function getRevisionOneDocs() {
        // filter out the generation 1 docs and get them
        // leaving the non-generation one docs to be got otherwise
        var ids = Object.keys(diffs).filter(function (id) {
          var missing = diffs[id].missing;
          return missing.length === 1 && isGenOne$1(missing[0]);
        });
        if (ids.length > 0) {
          return fetchRevisionOneDocs(ids);
        }
      }

      function returnResult() {
        return { ok:ok, docs:resultDocs };
      }

      return Promise.resolve()
        .then(getRevisionOneDocs)
        .then(getAllDocs)
        .then(returnResult);
    }

    var CHECKPOINT_VERSION = 1;
    var REPLICATOR = "pouchdb";
    // This is an arbitrary number to limit the
    // amount of replication history we save in the checkpoint.
    // If we save too much, the checkpoing docs will become very big,
    // if we save fewer, we'll run a greater risk of having to
    // read all the changes from 0 when checkpoint PUTs fail
    // CouchDB 2.0 has a more involved history pruning,
    // but let's go for the simple version for now.
    var CHECKPOINT_HISTORY_SIZE = 5;
    var LOWEST_SEQ = 0;

    function updateCheckpoint(db, id, checkpoint, session, returnValue) {
      return db.get(id)["catch"](function (err) {
        if (err.status === 404) {
          if (db.adapter === 'http' || db.adapter === 'https') {
            explainError(
              404, 'PouchDB is just checking if a remote checkpoint exists.'
            );
          }
          return {
            session_id: session,
            _id: id,
            history: [],
            replicator: REPLICATOR,
            version: CHECKPOINT_VERSION
          };
        }
        throw err;
      }).then(function (doc) {
        if (returnValue.cancelled) {
          return;
        }

        // if the checkpoint has not changed, do not update
        if (doc.last_seq === checkpoint) {
          return;
        }

        // Filter out current entry for this replication
        doc.history = (doc.history || []).filter(function (item) {
          return item.session_id !== session;
        });

        // Add the latest checkpoint to history
        doc.history.unshift({
          last_seq: checkpoint,
          session_id: session
        });

        // Just take the last pieces in history, to
        // avoid really big checkpoint docs.
        // see comment on history size above
        doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);

        doc.version = CHECKPOINT_VERSION;
        doc.replicator = REPLICATOR;

        doc.session_id = session;
        doc.last_seq = checkpoint;

        return db.put(doc)["catch"](function (err) {
          if (err.status === 409) {
            // retry; someone is trying to write a checkpoint simultaneously
            return updateCheckpoint(db, id, checkpoint, session, returnValue);
          }
          throw err;
        });
      });
    }

    function Checkpointer(src, target, id, returnValue, opts) {
      this.src = src;
      this.target = target;
      this.id = id;
      this.returnValue = returnValue;
      this.opts = opts || {};
    }

    Checkpointer.prototype.writeCheckpoint = function (checkpoint, session) {
      var self = this;
      return this.updateTarget(checkpoint, session).then(function () {
        return self.updateSource(checkpoint, session);
      });
    };

    Checkpointer.prototype.updateTarget = function (checkpoint, session) {
      if (this.opts.writeTargetCheckpoint) {
        return updateCheckpoint(this.target, this.id, checkpoint,
          session, this.returnValue);
      } else {
        return Promise.resolve(true);
      }
    };

    Checkpointer.prototype.updateSource = function (checkpoint, session) {
      if (this.opts.writeSourceCheckpoint) {
        var self = this;
        return updateCheckpoint(this.src, this.id, checkpoint,
          session, this.returnValue)[
          "catch"](function (err) {
            if (isForbiddenError(err)) {
              self.opts.writeSourceCheckpoint = false;
              return true;
            }
            throw err;
          });
      } else {
        return Promise.resolve(true);
      }
    };

    var comparisons = {
      "undefined": function (targetDoc, sourceDoc) {
        // This is the previous comparison function
        if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {
          return sourceDoc.last_seq;
        }
        /* istanbul ignore next */
        return 0;
      },
      "1": function (targetDoc, sourceDoc) {
        // This is the comparison function ported from CouchDB
        return compareReplicationLogs(sourceDoc, targetDoc).last_seq;
      }
    };

    Checkpointer.prototype.getCheckpoint = function () {
      var self = this;

      if (self.opts && self.opts.writeSourceCheckpoint && !self.opts.writeTargetCheckpoint) {
        return self.src.get(self.id).then(function (sourceDoc) {
          return sourceDoc.last_seq || LOWEST_SEQ;
        })["catch"](function (err) {
          /* istanbul ignore if */
          if (err.status !== 404) {
            throw err;
          }
          return LOWEST_SEQ;
        });
      }

      return self.target.get(self.id).then(function (targetDoc) {
        if (self.opts && self.opts.writeTargetCheckpoint && !self.opts.writeSourceCheckpoint) {
          return targetDoc.last_seq || LOWEST_SEQ;
        }

        return self.src.get(self.id).then(function (sourceDoc) {
          // Since we can't migrate an old version doc to a new one
          // (no session id), we just go with the lowest seq in this case
          /* istanbul ignore if */
          if (targetDoc.version !== sourceDoc.version) {
            return LOWEST_SEQ;
          }

          var version;
          if (targetDoc.version) {
            version = targetDoc.version.toString();
          } else {
            version = "undefined";
          }

          if (version in comparisons) {
            return comparisons[version](targetDoc, sourceDoc);
          }
          /* istanbul ignore next */
          return LOWEST_SEQ;
        }, function (err) {
          if (err.status === 404 && targetDoc.last_seq) {
            return self.src.put({
              _id: self.id,
              last_seq: LOWEST_SEQ
            }).then(function () {
              return LOWEST_SEQ;
            }, function (err) {
              if (isForbiddenError(err)) {
                self.opts.writeSourceCheckpoint = false;
                return targetDoc.last_seq;
              }
              /* istanbul ignore next */
              return LOWEST_SEQ;
            });
          }
          throw err;
        });
      })["catch"](function (err) {
        if (err.status !== 404) {
          throw err;
        }
        return LOWEST_SEQ;
      });
    };
    // This checkpoint comparison is ported from CouchDBs source
    // they come from here:
    // https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906

    function compareReplicationLogs(srcDoc, tgtDoc) {
      if (srcDoc.session_id === tgtDoc.session_id) {
        return {
          last_seq: srcDoc.last_seq,
          history: srcDoc.history
        };
      }

      return compareReplicationHistory(srcDoc.history, tgtDoc.history);
    }

    function compareReplicationHistory(sourceHistory, targetHistory) {
      // the erlang loop via function arguments is not so easy to repeat in JS
      // therefore, doing this as recursion
      var S = sourceHistory[0];
      var sourceRest = sourceHistory.slice(1);
      var T = targetHistory[0];
      var targetRest = targetHistory.slice(1);

      if (!S || targetHistory.length === 0) {
        return {
          last_seq: LOWEST_SEQ,
          history: []
        };
      }

      var sourceId = S.session_id;
      /* istanbul ignore if */
      if (hasSessionId(sourceId, targetHistory)) {
        return {
          last_seq: S.last_seq,
          history: sourceHistory
        };
      }

      var targetId = T.session_id;
      if (hasSessionId(targetId, sourceRest)) {
        return {
          last_seq: T.last_seq,
          history: targetRest
        };
      }

      return compareReplicationHistory(sourceRest, targetRest);
    }

    function hasSessionId(sessionId, history) {
      var props = history[0];
      var rest = history.slice(1);

      if (!sessionId || history.length === 0) {
        return false;
      }

      if (sessionId === props.session_id) {
        return true;
      }

      return hasSessionId(sessionId, rest);
    }

    function isForbiddenError(err) {
      return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;
    }

    var STARTING_BACK_OFF = 0;

    function backOff(opts, returnValue, error, callback) {
      if (opts.retry === false) {
        returnValue.emit('error', error);
        returnValue.removeAllListeners();
        return;
      }
      /* istanbul ignore if */
      if (typeof opts.back_off_function !== 'function') {
        opts.back_off_function = defaultBackOff;
      }
      returnValue.emit('requestError', error);
      if (returnValue.state === 'active' || returnValue.state === 'pending') {
        returnValue.emit('paused', error);
        returnValue.state = 'stopped';
        var backOffSet = function backoffTimeSet() {
          opts.current_back_off = STARTING_BACK_OFF;
        };
        var removeBackOffSetter = function removeBackOffTimeSet() {
          returnValue.removeListener('active', backOffSet);
        };
        returnValue.once('paused', removeBackOffSetter);
        returnValue.once('active', backOffSet);
      }

      opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;
      opts.current_back_off = opts.back_off_function(opts.current_back_off);
      setTimeout(callback, opts.current_back_off);
    }

    function sortObjectPropertiesByKey(queryParams) {
      return Object.keys(queryParams).sort(collate).reduce(function (result, key) {
        result[key] = queryParams[key];
        return result;
      }, {});
    }

    // Generate a unique id particular to this replication.
    // Not guaranteed to align perfectly with CouchDB's rep ids.
    function generateReplicationId(src, target, opts) {
      var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';
      var filterFun = opts.filter ? opts.filter.toString() : '';
      var queryParams = '';
      var filterViewName =  '';
      var selector = '';

      // possibility for checkpoints to be lost here as behaviour of
      // JSON.stringify is not stable (see #6226)
      /* istanbul ignore if */
      if (opts.selector) {
        selector = JSON.stringify(opts.selector);
      }

      if (opts.filter && opts.query_params) {
        queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));
      }

      if (opts.filter && opts.filter === '_view') {
        filterViewName = opts.view.toString();
      }

      return Promise.all([src.id(), target.id()]).then(function (res) {
        var queryData = res[0] + res[1] + filterFun + filterViewName +
          queryParams + docIds + selector;
        return new Promise(function (resolve) {
          binaryMd5(queryData, resolve);
        });
      }).then(function (md5sum) {
        // can't use straight-up md5 alphabet, because
        // the char '/' is interpreted as being for attachments,
        // and + is also not url-safe
        md5sum = md5sum.replace(/\//g, '.').replace(/\+/g, '_');
        return '_local/' + md5sum;
      });
    }

    function replicate(src, target, opts, returnValue, result) {
      var batches = [];               // list of batches to be processed
      var currentBatch;               // the batch currently being processed
      var pendingBatch = {
        seq: 0,
        changes: [],
        docs: []
      }; // next batch, not yet ready to be processed
      var writingCheckpoint = false;  // true while checkpoint is being written
      var changesCompleted = false;   // true when all changes received
      var replicationCompleted = false; // true when replication has completed
      var last_seq = 0;
      var continuous = opts.continuous || opts.live || false;
      var batch_size = opts.batch_size || 100;
      var batches_limit = opts.batches_limit || 10;
      var changesPending = false;     // true while src.changes is running
      var doc_ids = opts.doc_ids;
      var selector = opts.selector;
      var repId;
      var checkpointer;
      var changedDocs = [];
      // Like couchdb, every replication gets a unique session id
      var session = uuid();

      result = result || {
        ok: true,
        start_time: new Date().toISOString(),
        docs_read: 0,
        docs_written: 0,
        doc_write_failures: 0,
        errors: []
      };

      var changesOpts = {};
      returnValue.ready(src, target);

      function initCheckpointer() {
        if (checkpointer) {
          return Promise.resolve();
        }
        return generateReplicationId(src, target, opts).then(function (res) {
          repId = res;

          var checkpointOpts = {};
          if (opts.checkpoint === false) {
            checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: false };
          } else if (opts.checkpoint === 'source') {
            checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: false };
          } else if (opts.checkpoint === 'target') {
            checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: true };
          } else {
            checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: true };
          }

          checkpointer = new Checkpointer(src, target, repId, returnValue, checkpointOpts);
        });
      }

      function writeDocs() {
        changedDocs = [];

        if (currentBatch.docs.length === 0) {
          return;
        }
        var docs = currentBatch.docs;
        var bulkOpts = {timeout: opts.timeout};
        return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {
          /* istanbul ignore if */
          if (returnValue.cancelled) {
            completeReplication();
            throw new Error('cancelled');
          }

          // `res` doesn't include full documents (which live in `docs`), so we create a map of 
          // (id -> error), and check for errors while iterating over `docs`
          var errorsById = Object.create(null);
          res.forEach(function (res) {
            if (res.error) {
              errorsById[res.id] = res;
            }
          });

          var errorsNo = Object.keys(errorsById).length;
          result.doc_write_failures += errorsNo;
          result.docs_written += docs.length - errorsNo;

          docs.forEach(function (doc) {
            var error = errorsById[doc._id];
            if (error) {
              result.errors.push(error);
              // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
              var errorName = (error.name || '').toLowerCase();
              if (errorName === 'unauthorized' || errorName === 'forbidden') {
                returnValue.emit('denied', clone(error));
              } else {
                throw error;
              }
            } else {
              changedDocs.push(doc);
            }
          });

        }, function (err) {
          result.doc_write_failures += docs.length;
          throw err;
        });
      }

      function finishBatch() {
        if (currentBatch.error) {
          throw new Error('There was a problem getting docs.');
        }
        result.last_seq = last_seq = currentBatch.seq;
        var outResult = clone(result);
        if (changedDocs.length) {
          outResult.docs = changedDocs;
          // Attach 'pending' property if server supports it (CouchDB 2.0+)
          /* istanbul ignore if */
          if (typeof currentBatch.pending === 'number') {
            outResult.pending = currentBatch.pending;
            delete currentBatch.pending;
          }
          returnValue.emit('change', outResult);
        }
        writingCheckpoint = true;
        return checkpointer.writeCheckpoint(currentBatch.seq,
            session).then(function () {
          writingCheckpoint = false;
          /* istanbul ignore if */
          if (returnValue.cancelled) {
            completeReplication();
            throw new Error('cancelled');
          }
          currentBatch = undefined;
          getChanges();
        })["catch"](function (err) {
          onCheckpointError(err);
          throw err;
        });
      }

      function getDiffs() {
        var diff = {};
        currentBatch.changes.forEach(function (change) {
          // Couchbase Sync Gateway emits these, but we can ignore them
          /* istanbul ignore if */
          if (change.id === "_user/") {
            return;
          }
          diff[change.id] = change.changes.map(function (x) {
            return x.rev;
          });
        });
        return target.revsDiff(diff).then(function (diffs) {
          /* istanbul ignore if */
          if (returnValue.cancelled) {
            completeReplication();
            throw new Error('cancelled');
          }
          // currentBatch.diffs elements are deleted as the documents are written
          currentBatch.diffs = diffs;
        });
      }

      function getBatchDocs() {
        return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {
          currentBatch.error = !got.ok;
          got.docs.forEach(function (doc) {
            delete currentBatch.diffs[doc._id];
            result.docs_read++;
            currentBatch.docs.push(doc);
          });
        });
      }

      function startNextBatch() {
        if (returnValue.cancelled || currentBatch) {
          return;
        }
        if (batches.length === 0) {
          processPendingBatch(true);
          return;
        }
        currentBatch = batches.shift();
        getDiffs()
          .then(getBatchDocs)
          .then(writeDocs)
          .then(finishBatch)
          .then(startNextBatch)[
          "catch"](function (err) {
            abortReplication('batch processing terminated with error', err);
          });
      }


      function processPendingBatch(immediate) {
        if (pendingBatch.changes.length === 0) {
          if (batches.length === 0 && !currentBatch) {
            if ((continuous && changesOpts.live) || changesCompleted) {
              returnValue.state = 'pending';
              returnValue.emit('paused');
            }
            if (changesCompleted) {
              completeReplication();
            }
          }
          return;
        }
        if (
          immediate ||
          changesCompleted ||
          pendingBatch.changes.length >= batch_size
        ) {
          batches.push(pendingBatch);
          pendingBatch = {
            seq: 0,
            changes: [],
            docs: []
          };
          if (returnValue.state === 'pending' || returnValue.state === 'stopped') {
            returnValue.state = 'active';
            returnValue.emit('active');
          }
          startNextBatch();
        }
      }


      function abortReplication(reason, err) {
        if (replicationCompleted) {
          return;
        }
        if (!err.message) {
          err.message = reason;
        }
        result.ok = false;
        result.status = 'aborting';
        batches = [];
        pendingBatch = {
          seq: 0,
          changes: [],
          docs: []
        };
        completeReplication(err);
      }


      function completeReplication(fatalError) {
        if (replicationCompleted) {
          return;
        }
        /* istanbul ignore if */
        if (returnValue.cancelled) {
          result.status = 'cancelled';
          if (writingCheckpoint) {
            return;
          }
        }
        result.status = result.status || 'complete';
        result.end_time = new Date().toISOString();
        result.last_seq = last_seq;
        replicationCompleted = true;

        if (fatalError) {
          // need to extend the error because Firefox considers ".result" read-only
          fatalError = createError(fatalError);
          fatalError.result = result;

          // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
          var errorName = (fatalError.name || '').toLowerCase();
          if (errorName === 'unauthorized' || errorName === 'forbidden') {
            returnValue.emit('error', fatalError);
            returnValue.removeAllListeners();
          } else {
            backOff(opts, returnValue, fatalError, function () {
              replicate(src, target, opts, returnValue);
            });
          }
        } else {
          returnValue.emit('complete', result);
          returnValue.removeAllListeners();
        }
      }


      function onChange(change, pending, lastSeq) {
        /* istanbul ignore if */
        if (returnValue.cancelled) {
          return completeReplication();
        }
        // Attach 'pending' property if server supports it (CouchDB 2.0+)
        /* istanbul ignore if */
        if (typeof pending === 'number') {
          pendingBatch.pending = pending;
        }

        var filter = filterChange(opts)(change);
        if (!filter) {
          return;
        }
        pendingBatch.seq = change.seq || lastSeq;
        pendingBatch.changes.push(change);
        nextTick(function () {
          processPendingBatch(batches.length === 0 && changesOpts.live);
        });
      }


      function onChangesComplete(changes) {
        changesPending = false;
        /* istanbul ignore if */
        if (returnValue.cancelled) {
          return completeReplication();
        }

        // if no results were returned then we're done,
        // else fetch more
        if (changes.results.length > 0) {
          changesOpts.since = changes.results[changes.results.length - 1].seq;
          getChanges();
          processPendingBatch(true);
        } else {

          var complete = function () {
            if (continuous) {
              changesOpts.live = true;
              getChanges();
            } else {
              changesCompleted = true;
            }
            processPendingBatch(true);
          };

          // update the checkpoint so we start from the right seq next time
          if (!currentBatch && changes.results.length === 0) {
            writingCheckpoint = true;
            checkpointer.writeCheckpoint(changes.last_seq,
                session).then(function () {
              writingCheckpoint = false;
              result.last_seq = last_seq = changes.last_seq;
              complete();
            })[
            "catch"](onCheckpointError);
          } else {
            complete();
          }
        }
      }


      function onChangesError(err) {
        changesPending = false;
        /* istanbul ignore if */
        if (returnValue.cancelled) {
          return completeReplication();
        }
        abortReplication('changes rejected', err);
      }


      function getChanges() {
        if (!(
          !changesPending &&
          !changesCompleted &&
          batches.length < batches_limit
          )) {
          return;
        }
        changesPending = true;
        function abortChanges() {
          changes.cancel();
        }
        function removeListener() {
          returnValue.removeListener('cancel', abortChanges);
        }

        if (returnValue._changes) { // remove old changes() and listeners
          returnValue.removeListener('cancel', returnValue._abortChanges);
          returnValue._changes.cancel();
        }
        returnValue.once('cancel', abortChanges);

        var changes = src.changes(changesOpts)
          .on('change', onChange);
        changes.then(removeListener, removeListener);
        changes.then(onChangesComplete)[
          "catch"](onChangesError);

        if (opts.retry) {
          // save for later so we can cancel if necessary
          returnValue._changes = changes;
          returnValue._abortChanges = abortChanges;
        }
      }


      function startChanges() {
        initCheckpointer().then(function () {
          /* istanbul ignore if */
          if (returnValue.cancelled) {
            completeReplication();
            return;
          }
          return checkpointer.getCheckpoint().then(function (checkpoint) {
            last_seq = checkpoint;
            changesOpts = {
              since: last_seq,
              limit: batch_size,
              batch_size: batch_size,
              style: 'all_docs',
              doc_ids: doc_ids,
              selector: selector,
              return_docs: true // required so we know when we're done
            };
            if (opts.filter) {
              if (typeof opts.filter !== 'string') {
                // required for the client-side filter in onChange
                changesOpts.include_docs = true;
              } else { // ddoc filter
                changesOpts.filter = opts.filter;
              }
            }
            if ('heartbeat' in opts) {
              changesOpts.heartbeat = opts.heartbeat;
            }
            if ('timeout' in opts) {
              changesOpts.timeout = opts.timeout;
            }
            if (opts.query_params) {
              changesOpts.query_params = opts.query_params;
            }
            if (opts.view) {
              changesOpts.view = opts.view;
            }
            getChanges();
          });
        })["catch"](function (err) {
          abortReplication('getCheckpoint rejected with ', err);
        });
      }

      /* istanbul ignore next */
      function onCheckpointError(err) {
        writingCheckpoint = false;
        abortReplication('writeCheckpoint completed with error', err);
      }

      /* istanbul ignore if */
      if (returnValue.cancelled) { // cancelled immediately
        completeReplication();
        return;
      }

      if (!returnValue._addedListeners) {
        returnValue.once('cancel', completeReplication);

        if (typeof opts.complete === 'function') {
          returnValue.once('error', opts.complete);
          returnValue.once('complete', function (result) {
            opts.complete(null, result);
          });
        }
        returnValue._addedListeners = true;
      }

      if (typeof opts.since === 'undefined') {
        startChanges();
      } else {
        initCheckpointer().then(function () {
          writingCheckpoint = true;
          return checkpointer.writeCheckpoint(opts.since, session);
        }).then(function () {
          writingCheckpoint = false;
          /* istanbul ignore if */
          if (returnValue.cancelled) {
            completeReplication();
            return;
          }
          last_seq = opts.since;
          startChanges();
        })["catch"](onCheckpointError);
      }
    }

    // We create a basic promise so the caller can cancel the replication possibly
    // before we have actually started listening to changes etc
    inherits(Replication, events.EventEmitter);
    function Replication() {
      events.EventEmitter.call(this);
      this.cancelled = false;
      this.state = 'pending';
      var self = this;
      var promise = new Promise(function (fulfill, reject) {
        self.once('complete', fulfill);
        self.once('error', reject);
      });
      self.then = function (resolve, reject) {
        return promise.then(resolve, reject);
      };
      self["catch"] = function (reject) {
        return promise["catch"](reject);
      };
      // As we allow error handling via "error" event as well,
      // put a stub in here so that rejecting never throws UnhandledError.
      self["catch"](function () {});
    }

    Replication.prototype.cancel = function () {
      this.cancelled = true;
      this.state = 'cancelled';
      this.emit('cancel');
    };

    Replication.prototype.ready = function (src, target) {
      var self = this;
      if (self._readyCalled) {
        return;
      }
      self._readyCalled = true;

      function onDestroy() {
        self.cancel();
      }
      src.once('destroyed', onDestroy);
      target.once('destroyed', onDestroy);
      function cleanup() {
        src.removeListener('destroyed', onDestroy);
        target.removeListener('destroyed', onDestroy);
      }
      self.once('complete', cleanup);
    };

    function toPouch(db, opts) {
      var PouchConstructor = opts.PouchConstructor;
      if (typeof db === 'string') {
        return new PouchConstructor(db, opts);
      } else {
        return db;
      }
    }

    function replicateWrapper(src, target, opts, callback) {

      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      if (typeof opts === 'undefined') {
        opts = {};
      }

      if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {
        throw createError(BAD_REQUEST,
                           "`doc_ids` filter parameter is not a list.");
      }

      opts.complete = callback;
      opts = clone(opts);
      opts.continuous = opts.continuous || opts.live;
      opts.retry = ('retry' in opts) ? opts.retry : false;
      /*jshint validthis:true */
      opts.PouchConstructor = opts.PouchConstructor || this;
      var replicateRet = new Replication(opts);
      var srcPouch = toPouch(src, opts);
      var targetPouch = toPouch(target, opts);
      replicate(srcPouch, targetPouch, opts, replicateRet);
      return replicateRet;
    }

    inherits(Sync, events.EventEmitter);
    function sync(src, target, opts, callback) {
      if (typeof opts === 'function') {
        callback = opts;
        opts = {};
      }
      if (typeof opts === 'undefined') {
        opts = {};
      }
      opts = clone(opts);
      /*jshint validthis:true */
      opts.PouchConstructor = opts.PouchConstructor || this;
      src = toPouch(src, opts);
      target = toPouch(target, opts);
      return new Sync(src, target, opts, callback);
    }

    function Sync(src, target, opts, callback) {
      var self = this;
      this.canceled = false;

      var optsPush = opts.push ? $inject_Object_assign({}, opts, opts.push) : opts;
      var optsPull = opts.pull ? $inject_Object_assign({}, opts, opts.pull) : opts;

      this.push = replicateWrapper(src, target, optsPush);
      this.pull = replicateWrapper(target, src, optsPull);

      this.pushPaused = true;
      this.pullPaused = true;

      function pullChange(change) {
        self.emit('change', {
          direction: 'pull',
          change: change
        });
      }
      function pushChange(change) {
        self.emit('change', {
          direction: 'push',
          change: change
        });
      }
      function pushDenied(doc) {
        self.emit('denied', {
          direction: 'push',
          doc: doc
        });
      }
      function pullDenied(doc) {
        self.emit('denied', {
          direction: 'pull',
          doc: doc
        });
      }
      function pushPaused() {
        self.pushPaused = true;
        /* istanbul ignore if */
        if (self.pullPaused) {
          self.emit('paused');
        }
      }
      function pullPaused() {
        self.pullPaused = true;
        /* istanbul ignore if */
        if (self.pushPaused) {
          self.emit('paused');
        }
      }
      function pushActive() {
        self.pushPaused = false;
        /* istanbul ignore if */
        if (self.pullPaused) {
          self.emit('active', {
            direction: 'push'
          });
        }
      }
      function pullActive() {
        self.pullPaused = false;
        /* istanbul ignore if */
        if (self.pushPaused) {
          self.emit('active', {
            direction: 'pull'
          });
        }
      }

      var removed = {};

      function removeAll(type) { // type is 'push' or 'pull'
        return function (event, func) {
          var isChange = event === 'change' &&
            (func === pullChange || func === pushChange);
          var isDenied = event === 'denied' &&
            (func === pullDenied || func === pushDenied);
          var isPaused = event === 'paused' &&
            (func === pullPaused || func === pushPaused);
          var isActive = event === 'active' &&
            (func === pullActive || func === pushActive);

          if (isChange || isDenied || isPaused || isActive) {
            if (!(event in removed)) {
              removed[event] = {};
            }
            removed[event][type] = true;
            if (Object.keys(removed[event]).length === 2) {
              // both push and pull have asked to be removed
              self.removeAllListeners(event);
            }
          }
        };
      }

      if (opts.live) {
        this.push.on('complete', self.pull.cancel.bind(self.pull));
        this.pull.on('complete', self.push.cancel.bind(self.push));
      }

      function addOneListener(ee, event, listener) {
        if (ee.listeners(event).indexOf(listener) == -1) {
          ee.on(event, listener);
        }
      }

      this.on('newListener', function (event) {
        if (event === 'change') {
          addOneListener(self.pull, 'change', pullChange);
          addOneListener(self.push, 'change', pushChange);
        } else if (event === 'denied') {
          addOneListener(self.pull, 'denied', pullDenied);
          addOneListener(self.push, 'denied', pushDenied);
        } else if (event === 'active') {
          addOneListener(self.pull, 'active', pullActive);
          addOneListener(self.push, 'active', pushActive);
        } else if (event === 'paused') {
          addOneListener(self.pull, 'paused', pullPaused);
          addOneListener(self.push, 'paused', pushPaused);
        }
      });

      this.on('removeListener', function (event) {
        if (event === 'change') {
          self.pull.removeListener('change', pullChange);
          self.push.removeListener('change', pushChange);
        } else if (event === 'denied') {
          self.pull.removeListener('denied', pullDenied);
          self.push.removeListener('denied', pushDenied);
        } else if (event === 'active') {
          self.pull.removeListener('active', pullActive);
          self.push.removeListener('active', pushActive);
        } else if (event === 'paused') {
          self.pull.removeListener('paused', pullPaused);
          self.push.removeListener('paused', pushPaused);
        }
      });

      this.pull.on('removeListener', removeAll('pull'));
      this.push.on('removeListener', removeAll('push'));

      var promise = Promise.all([
        this.push,
        this.pull
      ]).then(function (resp) {
        var out = {
          push: resp[0],
          pull: resp[1]
        };
        self.emit('complete', out);
        if (callback) {
          callback(null, out);
        }
        self.removeAllListeners();
        return out;
      }, function (err) {
        self.cancel();
        if (callback) {
          // if there's a callback, then the callback can receive
          // the error event
          callback(err);
        } else {
          // if there's no callback, then we're safe to emit an error
          // event, which would otherwise throw an unhandled error
          // due to 'error' being a special event in EventEmitters
          self.emit('error', err);
        }
        self.removeAllListeners();
        if (callback) {
          // no sense throwing if we're already emitting an 'error' event
          throw err;
        }
      });

      this.then = function (success, err) {
        return promise.then(success, err);
      };

      this["catch"] = function (err) {
        return promise["catch"](err);
      };
    }

    Sync.prototype.cancel = function () {
      if (!this.canceled) {
        this.canceled = true;
        this.push.cancel();
        this.pull.cancel();
      }
    };

    function replication(PouchDB) {
      PouchDB.replicate = replicateWrapper;
      PouchDB.sync = sync;

      Object.defineProperty(PouchDB.prototype, 'replicate', {
        get: function () {
          var self = this;
          if (typeof this.replicateMethods === 'undefined') {
            this.replicateMethods = {
              from: function (other, opts, callback) {
                return self.constructor.replicate(other, self, opts, callback);
              },
              to: function (other, opts, callback) {
                return self.constructor.replicate(self, other, opts, callback);
              }
            };
          }
          return this.replicateMethods;
        }
      });

      PouchDB.prototype.sync = function (dbName, opts, callback) {
        return this.constructor.sync(this, dbName, opts, callback);
      };
    }

    PouchDB.plugin(IDBPouch)
      .plugin(HttpPouch$1)
      .plugin(mapreduce)
      .plugin(replication);

    // Pull from src because pouchdb-node/pouchdb-browser themselves

    module.exports = PouchDB;

    }).call(this,_dereq_(5),typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    },{"1":1,"12":12,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7}]},{},[13])(13)
    });
    });

    var pouchdb_authentication = createCommonjsModule(function (module, exports) {
    (function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var urlJoin = _interopDefault(require(15));
    var urlParse = _interopDefault(require(16));
    var inherits = _interopDefault(require(5));
    var pouchdbBinaryUtils = require(9);
    var ajaxCore = _interopDefault(require(7));
    var pouchdbUtils = require(11);
    var Promise = _interopDefault(require(10));

    function getBaseUrl(db) {
      // Parse database url
      var url;
      if (typeof db.getUrl === 'function') { // pouchdb pre-6.0.0
        url = urlParse(db.getUrl());
      } else { // pouchdb post-6.0.0
        // Use PouchDB.defaults' prefix, if any
        var prefix = db.__opts && db.__opts.prefix ? db.__opts.prefix + '/' : '';
        url = urlParse(prefix + db.name);
      }

      // Compute parent path for databases not hosted on domain root (see #215)
      var path = url.pathname;
      path = path.substr(-1, 1) === '/' ? path.substr(0, -1) : path;
      var parentPath = path.split('/').slice(0, -1).join('/');

      return url.origin + parentPath;
    }

    function getConfigUrl(db, nodeName) {
      return urlJoin(getBaseUrl(db), (nodeName ? '/_node/' + nodeName : '') + '/_config');
    }

    function getUsersUrl(db) {
      return urlJoin(getBaseUrl(db), '/_users');
    }

    function getSessionUrl(db) {
      return urlJoin(getBaseUrl(db), '/_session');
    }

    function getBasicAuthHeaders(db) {
      var auth;

      if (db.__opts.auth) {
        auth = db.__opts.auth;
      } else {
        var url = urlParse(db.name);
        if (url.auth) {
          auth = url;
        }
      }

      if (!auth) {
        return {};
      }

      var str = auth.username + ':' + auth.password;
      var token = pouchdbBinaryUtils.btoa(unescape(encodeURIComponent(str)));
      return {Authorization: 'Basic ' + token};
    }

    function wrapError(callback) {
      // provide more helpful error message
      return function (err, res) {
        if (err) {
          if (err.name === 'unknown_error') {
            err.message = (err.message || '') +
                ' Unknown error!  Did you remember to enable CORS?';
          }
        }
        return callback(err, res);
      };
    }

    function AuthError(message) {
      this.status = 400;
      this.name = 'authentication_error';
      this.message = message;
      this.error = true;
      try {
        Error.captureStackTrace(this, AuthError);
      } catch (e) {}
    }

    inherits(AuthError, Error);

    var getMembership = pouchdbUtils.toPromise(function (opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = opts;
        opts = {};
      }

      var url = getBaseUrl(db) + '/_membership';
      var ajaxOpts = pouchdbUtils.assign({
        method: 'GET',
        url: url,
        headers: getBasicAuthHeaders(db),
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    });

    var signUpAdmin = pouchdbUtils.toPromise(function (username, password, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? (typeof password === 'undefined' ?
          username : password) : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      } else if (!password) {
        return callback(new AuthError('You must provide a password'));
      }

      db.getMembership(opts, function (error, membership) {
        var nodeName;
        if (error) {
          if (error.error !== 'illegal_database_name') {
            return callback(error);
          } else {
            // Some couchdb-1.x-like server
            nodeName = undefined;
          }
        } else {
          // Some couchdb-2.x-like server
          nodeName = membership.all_nodes[0];
        }

        var configUrl = getConfigUrl(db, nodeName);
        var url = (opts.configUrl || configUrl) + '/admins/' + encodeURIComponent(username);
        var ajaxOpts = pouchdbUtils.assign({
          method: 'PUT',
          url: url,
          processData: false,
          headers: getBasicAuthHeaders(db),
          body: '"' + password + '"',
        }, opts.ajax || {});
        ajaxCore(ajaxOpts, wrapError(callback));
      });
    });

    var deleteAdmin = pouchdbUtils.toPromise(function (username, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? username : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      }

      db.getMembership(opts, function (error, membership) {
        var nodeName;
        if (error) {
          if (error.error !== 'illegal_database_name') {
            return callback(error);
          } else {
            // Some couchdb-1.x-like server
            nodeName = undefined;
          }
        } else {
          // Some couchdb-2.x-like server
          nodeName = membership.all_nodes[0];
        }

        var configUrl = getConfigUrl(db, nodeName);
        var url = (opts.configUrl || configUrl) + '/admins/' + encodeURIComponent(username);
        var ajaxOpts = pouchdbUtils.assign({
          method: 'DELETE',
          url: url,
          processData: false,
          headers: getBasicAuthHeaders(db),
        }, opts.ajax || {});
        ajaxCore(ajaxOpts, wrapError(callback));
      });
    });

    var logIn = pouchdbUtils.toPromise(function (username, password, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('this plugin only works for the http/https adapter'));
      }

      if (!username) {
        return callback(new AuthError('you must provide a username'));
      } else if (!password) {
        return callback(new AuthError('you must provide a password'));
      }

      var ajaxOpts = pouchdbUtils.assign({
        method: 'POST',
        url: getSessionUrl(db),
        headers: pouchdbUtils.assign({'Content-Type': 'application/json'}, getBasicAuthHeaders(db)),
        body: {name: username, password: password},
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    });

    var logOut = pouchdbUtils.toPromise(function (opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = opts;
        opts = {};
      }
      var ajaxOpts = pouchdbUtils.assign({
        method: 'DELETE',
        url: getSessionUrl(db),
        headers: getBasicAuthHeaders(db),
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    });

    var getSession = pouchdbUtils.toPromise(function (opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = opts;
        opts = {};
      }
      var url = getSessionUrl(db);

      var ajaxOpts = pouchdbUtils.assign({
        method: 'GET',
        url: url,
        headers: getBasicAuthHeaders(db),
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    });

    var getUsersDatabaseUrl = function () {
      var db = this;
      return getUsersUrl(db);
    };

    function updateUser(db, user, opts, callback) {
      var reservedWords = [
        '_id',
        '_rev',
        'name',
        'type',
        'roles',
        'password',
        'password_scheme',
        'iterations',
        'derived_key',
        'salt' ];

      if (opts.metadata) {
        for (var key in opts.metadata) {
          if (opts.metadata.hasOwnProperty(key) && reservedWords.indexOf(key) !== -1) {
            return callback(new AuthError('cannot use reserved word in metadata: "' + key + '"'));
          }
        }
        user = pouchdbUtils.assign(user, opts.metadata);
      }

      if (opts.roles) {
        user = pouchdbUtils.assign(user, {roles: opts.roles});
      }

      var url = getUsersUrl(db) + '/' + encodeURIComponent(user._id);
      var ajaxOpts = pouchdbUtils.assign({
        method: 'PUT',
        url: url,
        body: user,
        headers: getBasicAuthHeaders(db),
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    }

    var signUp = pouchdbUtils.toPromise(function (username, password, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? (typeof password === 'undefined' ?
          username : password) : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      } else if (!password) {
        return callback(new AuthError('You must provide a password'));
      }

      var userId = 'org.couchdb.user:' + username;
      var user = {
        name: username,
        password: password,
        roles: [],
        type: 'user',
        _id: userId,
      };

      updateUser(db, user, opts, callback);
    });

    var getUser = pouchdbUtils.toPromise(function (username, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? username : opts;
        opts = {};
      }
      if (!username) {
        return callback(new AuthError('you must provide a username'));
      }

      var url = getUsersUrl(db);
      var ajaxOpts = pouchdbUtils.assign({
        method: 'GET',
        url: url + '/' + encodeURIComponent('org.couchdb.user:' + username),
        headers: getBasicAuthHeaders(db),
      }, opts.ajax || {});
      ajaxCore(ajaxOpts, wrapError(callback));
    });

    var putUser = pouchdbUtils.toPromise(function (username, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? username : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      }

      db.getUser(username, opts, function (error, user) {
        if (error) {
          return callback(error);
        }

        updateUser(db, user, opts, callback);
      });
    });

    var deleteUser = pouchdbUtils.toPromise(function (username, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? username : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      }

      db.getUser(username, opts, function (error, user) {
        if (error) {
          return callback(error);
        }

        var url = getUsersUrl(db) + '/' + encodeURIComponent(user._id) + '?rev=' + user._rev;
        var ajaxOpts = pouchdbUtils.assign({
          method: 'DELETE',
          url: url,
          headers: getBasicAuthHeaders(db),
        }, opts.ajax || {});
        ajaxCore(ajaxOpts, wrapError(callback));
      });
    });

    var changePassword = pouchdbUtils.toPromise(function (username, password, opts, callback) {
      var db = this;
      if (typeof callback === 'undefined') {
        callback = typeof opts === 'undefined' ? (typeof password === 'undefined' ?
          username : password) : opts;
        opts = {};
      }
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      } else if (!username) {
        return callback(new AuthError('You must provide a username'));
      } else if (!password) {
        return callback(new AuthError('You must provide a password'));
      }

      db.getUser(username, opts, function (error, user) {
        if (error) {
          return callback(error);
        }

        user.password = password;

        var url = getUsersUrl(db) + '/' + encodeURIComponent(user._id);
        var ajaxOpts = pouchdbUtils.assign({
          method: 'PUT',
          url: url,
          headers: getBasicAuthHeaders(db),
          body: user,
        }, opts.ajax || {});
        ajaxCore(ajaxOpts, wrapError(callback));
      });
    });

    var changeUsername = pouchdbUtils.toPromise(function (oldUsername, newUsername, opts, callback) {
      var db = this;
      var USERNAME_PREFIX = 'org.couchdb.user:';
      var ajax = function (opts) {
        return new Promise(function (resolve, reject) {
          ajaxCore(opts, wrapError(function (err, res) {
            if (err) {
              return reject(err);
            }
            resolve(res);
          }));
        });
      };
      var updateUser = function (user, opts) {
        var url = getUsersUrl(db) + '/' + encodeURIComponent(user._id);
        var updateOpts = pouchdbUtils.assign({
          method: 'PUT',
          url: url,
          headers: getBasicAuthHeaders(db),
          body: user,
        }, opts.ajax);
        return ajax(updateOpts);
      };
      if (typeof callback === 'undefined') {
        callback = opts;
        opts = {};
      }
      opts.ajax = opts.ajax || {};
      if (['http', 'https'].indexOf(db.type()) === -1) {
        return callback(new AuthError('This plugin only works for the http/https adapter. ' +
          'So you should use new PouchDB("http://mysite.com:5984/mydb") instead.'));
      }
      if (!newUsername) {
        return callback(new AuthError('You must provide a new username'));
      }
      if (!oldUsername) {
        return callback(new AuthError('You must provide a username to rename'));
      }

      db.getUser(newUsername, opts)
      .then(function () {
        var error = new AuthError('user already exists');
        error.taken = true;
        throw error;
      }, function () {
        return db.getUser(oldUsername, opts);
      })
      .then(function (user) {
        var newUser = pouchdbUtils.clone(user);
        delete newUser._rev;
        newUser._id = USERNAME_PREFIX + newUsername;
        newUser.name = newUsername;
        newUser.roles = opts.roles || user.roles || {};
        return updateUser(newUser, opts).then(function () {
          user._deleted = true;
          return updateUser(user, opts);
        });
      }).then(function (res) {
        callback(null, res);
      }).catch(callback);
    });

    var plugin = {};

    plugin.login = logIn;
    plugin.logIn = logIn;
    plugin.logout = logOut;
    plugin.logOut = logOut;
    plugin.getSession = getSession;

    plugin.getMembership = getMembership;
    plugin.signUpAdmin = signUpAdmin;
    plugin.deleteAdmin = deleteAdmin;

    plugin.getUsersDatabaseUrl = getUsersDatabaseUrl;
    plugin.signup = signUp;
    plugin.signUp = signUp;
    plugin.getUser = getUser;
    plugin.putUser = putUser;
    plugin.deleteUser = deleteUser;
    plugin.changePassword = changePassword;
    plugin.changeUsername = changeUsername;

    if (typeof window !== 'undefined' && window.PouchDB) {
      window.PouchDB.plugin(plugin);
    }

    module.exports = plugin;

    },{"10":10,"11":11,"15":15,"16":16,"5":5,"7":7,"9":9}],2:[function(require,module,exports){

    module.exports = argsArray;

    function argsArray(fun) {
      return function () {
        var len = arguments.length;
        if (len) {
          var args = [];
          var i = -1;
          while (++i < len) {
            args[i] = arguments[i];
          }
          return fun.call(this, args);
        } else {
          return fun.call(this, []);
        }
      };
    }
    },{}],3:[function(require,module,exports){
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var objectCreate = Object.create || objectCreatePolyfill;
    var objectKeys = Object.keys || objectKeysPolyfill;
    var bind = Function.prototype.bind || functionBindPolyfill;

    function EventEmitter() {
      if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
        this._events = objectCreate(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    var hasDefineProperty;
    try {
      var o = {};
      if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
      hasDefineProperty = o.x === 0;
    } catch (err) { hasDefineProperty = false; }
    if (hasDefineProperty) {
      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          // check whether the input is a positive number (whose value is zero or
          // greater and not a NaN).
          if (typeof arg !== 'number' || arg < 0 || arg !== arg)
            throw new TypeError('"defaultMaxListeners" must be a positive number');
          defaultMaxListeners = arg;
        }
      });
    } else {
      EventEmitter.defaultMaxListeners = defaultMaxListeners;
    }

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        if (arguments.length > 1)
          er = arguments[1];
        if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Unhandled "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
          // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
          // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = objectCreate(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
              listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
              prepend ? [listener, existing] : [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                existing.length + ' "' + String(type) + '" listeners ' +
                'added. Use emitter.setMaxListeners() to ' +
                'increase limit.');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            if (typeof console === 'object' && console.warn) {
              console.warn('%s: %s', w.name, w.message);
            }
          }
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        switch (arguments.length) {
          case 0:
            return this.listener.call(this.target);
          case 1:
            return this.listener.call(this.target, arguments[0]);
          case 2:
            return this.listener.call(this.target, arguments[0], arguments[1]);
          case 3:
            return this.listener.call(this.target, arguments[0], arguments[1],
                arguments[2]);
          default:
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i)
              args[i] = arguments[i];
            this.listener.apply(this.target, args);
        }
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = bind.call(onceWrapper, state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = objectCreate(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (position === 0)
              list.shift();
            else
              spliceOne(list, position);

            if (list.length === 1)
              events[type] = list[0];

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = objectCreate(null);
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = objectCreate(null);
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = objectKeys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = objectCreate(null);
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function objectCreatePolyfill(proto) {
      var F = function() {};
      F.prototype = proto;
      return new F;
    }
    function objectKeysPolyfill(obj) {
      for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) ;
      return k;
    }
    function functionBindPolyfill(context) {
      var fn = this;
      return function () {
        return fn.apply(context, arguments);
      };
    }

    },{}],4:[function(require,module,exports){
    (function (global){
    var Mutation = global.MutationObserver || global.WebKitMutationObserver;

    var scheduleDrain;

    {
      if (Mutation) {
        var called = 0;
        var observer = new Mutation(nextTick);
        var element = global.document.createTextNode('');
        observer.observe(element, {
          characterData: true
        });
        scheduleDrain = function () {
          element.data = (called = ++called % 2);
        };
      } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
        var channel = new global.MessageChannel();
        channel.port1.onmessage = nextTick;
        scheduleDrain = function () {
          channel.port2.postMessage(0);
        };
      } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
        scheduleDrain = function () {

          // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
          // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
          var scriptEl = global.document.createElement('script');
          scriptEl.onreadystatechange = function () {
            nextTick();

            scriptEl.onreadystatechange = null;
            scriptEl.parentNode.removeChild(scriptEl);
            scriptEl = null;
          };
          global.document.documentElement.appendChild(scriptEl);
        };
      } else {
        scheduleDrain = function () {
          setTimeout(nextTick, 0);
        };
      }
    }

    var draining;
    var queue = [];
    //named nextTick for less confusing stack traces
    function nextTick() {
      draining = true;
      var i, oldQueue;
      var len = queue.length;
      while (len) {
        oldQueue = queue;
        queue = [];
        i = -1;
        while (++i < len) {
          oldQueue[i]();
        }
        len = queue.length;
      }
      draining = false;
    }

    module.exports = immediate;
    function immediate(task) {
      if (queue.push(task) === 1 && !draining) {
        scheduleDrain();
      }
    }

    }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    },{}],5:[function(require,module,exports){
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }

    },{}],6:[function(require,module,exports){
    var immediate = require(4);

    /* istanbul ignore next */
    function INTERNAL() {}

    var handlers = {};

    var REJECTED = ['REJECTED'];
    var FULFILLED = ['FULFILLED'];
    var PENDING = ['PENDING'];

    module.exports = Promise;

    function Promise(resolver) {
      if (typeof resolver !== 'function') {
        throw new TypeError('resolver must be a function');
      }
      this.state = PENDING;
      this.queue = [];
      this.outcome = void 0;
      if (resolver !== INTERNAL) {
        safelyResolveThenable(this, resolver);
      }
    }

    Promise.prototype["catch"] = function (onRejected) {
      return this.then(null, onRejected);
    };
    Promise.prototype.then = function (onFulfilled, onRejected) {
      if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
        typeof onRejected !== 'function' && this.state === REJECTED) {
        return this;
      }
      var promise = new this.constructor(INTERNAL);
      if (this.state !== PENDING) {
        var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
        unwrap(promise, resolver, this.outcome);
      } else {
        this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
      }

      return promise;
    };
    function QueueItem(promise, onFulfilled, onRejected) {
      this.promise = promise;
      if (typeof onFulfilled === 'function') {
        this.onFulfilled = onFulfilled;
        this.callFulfilled = this.otherCallFulfilled;
      }
      if (typeof onRejected === 'function') {
        this.onRejected = onRejected;
        this.callRejected = this.otherCallRejected;
      }
    }
    QueueItem.prototype.callFulfilled = function (value) {
      handlers.resolve(this.promise, value);
    };
    QueueItem.prototype.otherCallFulfilled = function (value) {
      unwrap(this.promise, this.onFulfilled, value);
    };
    QueueItem.prototype.callRejected = function (value) {
      handlers.reject(this.promise, value);
    };
    QueueItem.prototype.otherCallRejected = function (value) {
      unwrap(this.promise, this.onRejected, value);
    };

    function unwrap(promise, func, value) {
      immediate(function () {
        var returnValue;
        try {
          returnValue = func(value);
        } catch (e) {
          return handlers.reject(promise, e);
        }
        if (returnValue === promise) {
          handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
        } else {
          handlers.resolve(promise, returnValue);
        }
      });
    }

    handlers.resolve = function (self, value) {
      var result = tryCatch(getThen, value);
      if (result.status === 'error') {
        return handlers.reject(self, result.value);
      }
      var thenable = result.value;

      if (thenable) {
        safelyResolveThenable(self, thenable);
      } else {
        self.state = FULFILLED;
        self.outcome = value;
        var i = -1;
        var len = self.queue.length;
        while (++i < len) {
          self.queue[i].callFulfilled(value);
        }
      }
      return self;
    };
    handlers.reject = function (self, error) {
      self.state = REJECTED;
      self.outcome = error;
      var i = -1;
      var len = self.queue.length;
      while (++i < len) {
        self.queue[i].callRejected(error);
      }
      return self;
    };

    function getThen(obj) {
      // Make sure we only access the accessor once as required by the spec
      var then = obj && obj.then;
      if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
        return function appyThen() {
          then.apply(obj, arguments);
        };
      }
    }

    function safelyResolveThenable(self, thenable) {
      // Either fulfill, reject or reject with error
      var called = false;
      function onError(value) {
        if (called) {
          return;
        }
        called = true;
        handlers.reject(self, value);
      }

      function onSuccess(value) {
        if (called) {
          return;
        }
        called = true;
        handlers.resolve(self, value);
      }

      function tryToUnwrap() {
        thenable(onSuccess, onError);
      }

      var result = tryCatch(tryToUnwrap);
      if (result.status === 'error') {
        onError(result.value);
      }
    }

    function tryCatch(func, value) {
      var out = {};
      try {
        out.value = func(value);
        out.status = 'success';
      } catch (e) {
        out.status = 'error';
        out.value = e;
      }
      return out;
    }

    Promise.resolve = resolve;
    function resolve(value) {
      if (value instanceof this) {
        return value;
      }
      return handlers.resolve(new this(INTERNAL), value);
    }

    Promise.reject = reject;
    function reject(reason) {
      var promise = new this(INTERNAL);
      return handlers.reject(promise, reason);
    }

    Promise.all = all;
    function all(iterable) {
      var self = this;
      if (Object.prototype.toString.call(iterable) !== '[object Array]') {
        return this.reject(new TypeError('must be an array'));
      }

      var len = iterable.length;
      var called = false;
      if (!len) {
        return this.resolve([]);
      }

      var values = new Array(len);
      var resolved = 0;
      var i = -1;
      var promise = new this(INTERNAL);

      while (++i < len) {
        allResolver(iterable[i], i);
      }
      return promise;
      function allResolver(value, i) {
        self.resolve(value).then(resolveFromAll, function (error) {
          if (!called) {
            called = true;
            handlers.reject(promise, error);
          }
        });
        function resolveFromAll(outValue) {
          values[i] = outValue;
          if (++resolved === len && !called) {
            called = true;
            handlers.resolve(promise, values);
          }
        }
      }
    }

    Promise.race = race;
    function race(iterable) {
      var self = this;
      if (Object.prototype.toString.call(iterable) !== '[object Array]') {
        return this.reject(new TypeError('must be an array'));
      }

      var len = iterable.length;
      var called = false;
      if (!len) {
        return this.resolve([]);
      }

      var i = -1;
      var promise = new this(INTERNAL);

      while (++i < len) {
        resolver(iterable[i]);
      }
      return promise;
      function resolver(value) {
        self.resolve(value).then(function (response) {
          if (!called) {
            called = true;
            handlers.resolve(promise, response);
          }
        }, function (error) {
          if (!called) {
            called = true;
            handlers.reject(promise, error);
          }
        });
      }
    }

    },{"4":4}],7:[function(require,module,exports){

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var pouchdbUtils = require(11);
    var Promise = _interopDefault(require(10));
    var pouchdbBinaryUtils = require(9);
    var pouchdbErrors = require(8);

    /* global fetch */
    /* global Headers */
    function wrappedFetch() {
      var wrappedPromise = {};

      var promise = new Promise(function (resolve, reject) {
        wrappedPromise.resolve = resolve;
        wrappedPromise.reject = reject;
      });

      var args = new Array(arguments.length);

      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }

      wrappedPromise.promise = promise;

      Promise.resolve().then(function () {
        return fetch.apply(null, args);
      }).then(function (response) {
        wrappedPromise.resolve(response);
      }).catch(function (error) {
        wrappedPromise.reject(error);
      });

      return wrappedPromise;
    }

    function fetchRequest(options, callback) {
      var wrappedPromise, timer, response;

      var headers = new Headers();

      var fetchOptions = {
        method: options.method,
        credentials: 'include',
        headers: headers
      };

      if (options.json) {
        headers.set('Accept', 'application/json');
        headers.set('Content-Type', options.headers['Content-Type'] ||
          'application/json');
      }

      if (options.body &&
          options.processData &&
          typeof options.body !== 'string') {
        fetchOptions.body = JSON.stringify(options.body);
      } else if ('body' in options) {
        fetchOptions.body = options.body;
      } else {
        fetchOptions.body = null;
      }

      Object.keys(options.headers).forEach(function (key) {
        if (options.headers.hasOwnProperty(key)) {
          headers.set(key, options.headers[key]);
        }
      });

      wrappedPromise = wrappedFetch(options.url, fetchOptions);

      if (options.timeout > 0) {
        timer = setTimeout(function () {
          wrappedPromise.reject(new Error('Load timeout for resource: ' +
            options.url));
        }, options.timeout);
      }

      wrappedPromise.promise.then(function (fetchResponse) {
        response = {
          statusCode: fetchResponse.status
        };

        if (options.timeout > 0) {
          clearTimeout(timer);
        }

        if (response.statusCode >= 200 && response.statusCode < 300) {
          return options.binary ? fetchResponse.blob() : fetchResponse.text();
        }

        return fetchResponse.json();
      }).then(function (result) {
        if (response.statusCode >= 200 && response.statusCode < 300) {
          callback(null, response, result);
        } else {
          result.status = response.statusCode;
          callback(result);
        }
      }).catch(function (error) {
        if (!error) {
          // this happens when the listener is canceled
          error = new Error('canceled');
        }
        callback(error);
      });

      return {abort: wrappedPromise.reject};
    }

    function xhRequest(options, callback) {

      var xhr, timer;
      var timedout = false;

      var abortReq = function () {
        xhr.abort();
        cleanUp();
      };

      var timeoutReq = function () {
        timedout = true;
        xhr.abort();
        cleanUp();
      };

      var ret = {abort: abortReq};

      var cleanUp = function () {
        clearTimeout(timer);
        ret.abort = function () {};
        if (xhr) {
          xhr.onprogress = undefined;
          if (xhr.upload) {
            xhr.upload.onprogress = undefined;
          }
          xhr.onreadystatechange = undefined;
          xhr = undefined;
        }
      };

      if (options.xhr) {
        xhr = new options.xhr();
      } else {
        xhr = new XMLHttpRequest();
      }

      try {
        xhr.open(options.method, options.url);
      } catch (exception) {
        return callback(new Error(exception.name || 'Url is invalid'));
      }

      xhr.withCredentials = ('withCredentials' in options) ?
        options.withCredentials : true;

      if (options.method === 'GET') {
        delete options.headers['Content-Type'];
      } else if (options.json) {
        options.headers.Accept = 'application/json';
        options.headers['Content-Type'] = options.headers['Content-Type'] ||
          'application/json';
        if (options.body &&
            options.processData &&
            typeof options.body !== "string") {
          options.body = JSON.stringify(options.body);
        }
      }

      if (options.binary) {
        xhr.responseType = 'arraybuffer';
      }

      if (!('body' in options)) {
        options.body = null;
      }

      for (var key in options.headers) {
        if (options.headers.hasOwnProperty(key)) {
          xhr.setRequestHeader(key, options.headers[key]);
        }
      }

      if (options.timeout > 0) {
        timer = setTimeout(timeoutReq, options.timeout);
        xhr.onprogress = function () {
          clearTimeout(timer);
          if (xhr.readyState !== 4) {
            timer = setTimeout(timeoutReq, options.timeout);
          }
        };
        if (typeof xhr.upload !== 'undefined') { // does not exist in ie9
          xhr.upload.onprogress = xhr.onprogress;
        }
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState !== 4) {
          return;
        }

        var response = {
          statusCode: xhr.status
        };

        if (xhr.status >= 200 && xhr.status < 300) {
          var data;
          if (options.binary) {
            data = pouchdbBinaryUtils.blob([xhr.response || ''], {
              type: xhr.getResponseHeader('Content-Type')
            });
          } else {
            data = xhr.responseText;
          }
          callback(null, response, data);
        } else {
          var err = {};
          if (timedout) {
            err = new Error('ETIMEDOUT');
            err.code = 'ETIMEDOUT';
          } else if (typeof xhr.response === 'string') {
            try {
              err = JSON.parse(xhr.response);
            } catch (e) {}
          }
          err.status = xhr.status;
          callback(err);
        }
        cleanUp();
      };

      if (options.body && (options.body instanceof Blob)) {
        pouchdbBinaryUtils.readAsArrayBuffer(options.body, function (arrayBuffer) {
          xhr.send(arrayBuffer);
        });
      } else {
        xhr.send(options.body);
      }

      return ret;
    }

    function testXhr() {
      try {
        new XMLHttpRequest();
        return true;
      } catch (err) {
        return false;
      }
    }

    var hasXhr = testXhr();

    function ajax$1(options, callback) {
      if (hasXhr || options.xhr) {
        return xhRequest(options, callback);
      } else {
        return fetchRequest(options, callback);
      }
    }

    // the blob already has a type; do nothing

    function defaultBody() {
      return '';
    }

    function ajaxCore(options, callback) {

      options = pouchdbUtils.clone(options);

      var defaultOptions = {
        method : "GET",
        headers: {},
        json: true,
        processData: true,
        timeout: 10000,
        cache: false
      };

      options = pouchdbUtils.assign(defaultOptions, options);

      function onSuccess(obj, resp, cb) {
        if (!options.binary && options.json && typeof obj === 'string') {
          /* istanbul ignore next */
          try {
            obj = JSON.parse(obj);
          } catch (e) {
            // Probably a malformed JSON from server
            return cb(e);
          }
        }
        if (Array.isArray(obj)) {
          obj = obj.map(function (v) {
            if (v.error || v.missing) {
              return pouchdbErrors.generateErrorFromResponse(v);
            } else {
              return v;
            }
          });
        }
        if (options.binary) ;
        cb(null, obj, resp);
      }

      if (options.json) {
        if (!options.binary) {
          options.headers.Accept = 'application/json';
        }
        options.headers['Content-Type'] = options.headers['Content-Type'] ||
          'application/json';
      }

      if (options.binary) {
        options.encoding = null;
        options.json = false;
      }

      if (!options.processData) {
        options.json = false;
      }

      return ajax$1(options, function (err, response, body) {

        if (err) {
          return callback(pouchdbErrors.generateErrorFromResponse(err));
        }

        var error;
        var content_type = response.headers && response.headers['content-type'];
        var data = body || defaultBody();

        // CouchDB doesn't always return the right content-type for JSON data, so
        // we check for ^{ and }$ (ignoring leading/trailing whitespace)
        if (!options.binary && (options.json || !options.processData) &&
            typeof data !== 'object' &&
            (/json/.test(content_type) ||
             (/^[\s]*\{/.test(data) && /\}[\s]*$/.test(data)))) {
          try {
            data = JSON.parse(data.toString());
          } catch (e) {}
        }

        if (response.statusCode >= 200 && response.statusCode < 300) {
          onSuccess(data, response, callback);
        } else {
          error = pouchdbErrors.generateErrorFromResponse(data);
          error.status = response.statusCode;
          callback(error);
        }
      });
    }

    function ajax(opts, callback) {

      // cache-buster, specifically designed to work around IE's aggressive caching
      // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/
      // Also Safari caches POSTs, so we need to cache-bust those too.
      var ua = (navigator && navigator.userAgent) ?
        navigator.userAgent.toLowerCase() : '';

      var isSafari = ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1;
      var isIE = ua.indexOf('msie') !== -1;
      var isTrident = ua.indexOf('trident') !== -1;
      var isEdge = ua.indexOf('edge') !== -1;

      // it appears the new version of safari also caches GETs,
      // see https://github.com/pouchdb/pouchdb/issues/5010
      var shouldCacheBust = (isSafari ||
        ((isIE || isTrident || isEdge) && opts.method === 'GET'));

      var cache = 'cache' in opts ? opts.cache : true;

      var isBlobUrl = /^blob:/.test(opts.url); // don't append nonces for blob URLs

      if (!isBlobUrl && (shouldCacheBust || !cache)) {
        var hasArgs = opts.url.indexOf('?') !== -1;
        opts.url += (hasArgs ? '&' : '?') + '_nonce=' + Date.now();
      }

      return ajaxCore(opts, callback);
    }

    module.exports = ajax;

    },{"10":10,"11":11,"8":8,"9":9}],8:[function(require,module,exports){

    Object.defineProperty(exports, '__esModule', { value: true });

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var inherits = _interopDefault(require(5));

    inherits(PouchError, Error);

    function PouchError(status, error, reason) {
      Error.call(this, reason);
      this.status = status;
      this.name = error;
      this.message = reason;
      this.error = true;
    }

    PouchError.prototype.toString = function () {
      return JSON.stringify({
        status: this.status,
        name: this.name,
        message: this.message,
        reason: this.reason
      });
    };

    var UNAUTHORIZED = new PouchError(401, 'unauthorized', "Name or password is incorrect.");
    var MISSING_BULK_DOCS = new PouchError(400, 'bad_request', "Missing JSON list of 'docs'");
    var MISSING_DOC = new PouchError(404, 'not_found', 'missing');
    var REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');
    var INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');
    var MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');
    var RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');
    var NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');
    var UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');
    var BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');
    var INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');
    var QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');
    var DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');
    var BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');
    var NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');
    var DB_MISSING = new PouchError(404, 'not_found', 'Database not found');
    var IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');
    var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');
    var LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');
    var FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');
    var INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');
    var FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');
    var MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\'t found');
    var INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');

    function createError(error, reason) {
      function CustomPouchError(reason) {
        // inherit error properties from our parent error manually
        // so as to allow proper JSON parsing.
        /* jshint ignore:start */
        for (var p in error) {
          if (typeof error[p] !== 'function') {
            this[p] = error[p];
          }
        }
        /* jshint ignore:end */
        if (reason !== undefined) {
          this.reason = reason;
        }
      }
      CustomPouchError.prototype = PouchError.prototype;
      return new CustomPouchError(reason);
    }

    function generateErrorFromResponse(err) {

      if (typeof err !== 'object') {
        var data = err;
        err = UNKNOWN_ERROR;
        err.data = data;
      }

      if ('error' in err && err.error === 'conflict') {
        err.name = 'conflict';
        err.status = 409;
      }

      if (!('name' in err)) {
        err.name = err.error || 'unknown';
      }

      if (!('status' in err)) {
        err.status = 500;
      }

      if (!('message' in err)) {
        err.message = err.message || err.reason;
      }

      return err;
    }

    exports.UNAUTHORIZED = UNAUTHORIZED;
    exports.MISSING_BULK_DOCS = MISSING_BULK_DOCS;
    exports.MISSING_DOC = MISSING_DOC;
    exports.REV_CONFLICT = REV_CONFLICT;
    exports.INVALID_ID = INVALID_ID;
    exports.MISSING_ID = MISSING_ID;
    exports.RESERVED_ID = RESERVED_ID;
    exports.NOT_OPEN = NOT_OPEN;
    exports.UNKNOWN_ERROR = UNKNOWN_ERROR;
    exports.BAD_ARG = BAD_ARG;
    exports.INVALID_REQUEST = INVALID_REQUEST;
    exports.QUERY_PARSE_ERROR = QUERY_PARSE_ERROR;
    exports.DOC_VALIDATION = DOC_VALIDATION;
    exports.BAD_REQUEST = BAD_REQUEST;
    exports.NOT_AN_OBJECT = NOT_AN_OBJECT;
    exports.DB_MISSING = DB_MISSING;
    exports.WSQ_ERROR = WSQ_ERROR;
    exports.LDB_ERROR = LDB_ERROR;
    exports.FORBIDDEN = FORBIDDEN;
    exports.INVALID_REV = INVALID_REV;
    exports.FILE_EXISTS = FILE_EXISTS;
    exports.MISSING_STUB = MISSING_STUB;
    exports.IDB_ERROR = IDB_ERROR;
    exports.INVALID_URL = INVALID_URL;
    exports.createError = createError;
    exports.generateErrorFromResponse = generateErrorFromResponse;

    },{"5":5}],9:[function(require,module,exports){

    Object.defineProperty(exports, '__esModule', { value: true });

    var thisAtob = function (str) {
      return atob(str);
    };

    var thisBtoa = function (str) {
      return btoa(str);
    };

    // Abstracts constructing a Blob object, so it also works in older
    // browsers that don't support the native Blob constructor (e.g.
    // old QtWebKit versions, Android < 4.4).
    function createBlob(parts, properties) {
      /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
      parts = parts || [];
      properties = properties || {};
      try {
        return new Blob(parts, properties);
      } catch (e) {
        if (e.name !== "TypeError") {
          throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
                      typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
                      typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :
                      WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
          builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
      }
    }

    // From http://stackoverflow.com/questions/14967647/ (continues on next line)
    // encode-decode-image-with-base64-breaks-image (2013-04-21)
    function binaryStringToArrayBuffer(bin) {
      var length = bin.length;
      var buf = new ArrayBuffer(length);
      var arr = new Uint8Array(buf);
      for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
      }
      return buf;
    }

    function binStringToBluffer(binString, type) {
      return createBlob([binaryStringToArrayBuffer(binString)], {type: type});
    }

    function b64ToBluffer(b64, type) {
      return binStringToBluffer(thisAtob(b64), type);
    }

    //Can't find original post, but this is close
    //http://stackoverflow.com/questions/6965107/ (continues on next line)
    //converting-between-strings-and-arraybuffers
    function arrayBufferToBinaryString(buffer) {
      var binary = '';
      var bytes = new Uint8Array(buffer);
      var length = bytes.byteLength;
      for (var i = 0; i < length; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return binary;
    }

    // shim for browsers that don't support it
    function readAsBinaryString(blob, callback) {
      if (typeof FileReader === 'undefined') {
        // fix for Firefox in a web worker
        // https://bugzilla.mozilla.org/show_bug.cgi?id=901097
        return callback(arrayBufferToBinaryString(
          new FileReaderSync().readAsArrayBuffer(blob)));
      }

      var reader = new FileReader();
      var hasBinaryString = typeof reader.readAsBinaryString === 'function';
      reader.onloadend = function (e) {
        var result = e.target.result || '';
        if (hasBinaryString) {
          return callback(result);
        }
        callback(arrayBufferToBinaryString(result));
      };
      if (hasBinaryString) {
        reader.readAsBinaryString(blob);
      } else {
        reader.readAsArrayBuffer(blob);
      }
    }

    function blobToBinaryString(blobOrBuffer, callback) {
      readAsBinaryString(blobOrBuffer, function (bin) {
        callback(bin);
      });
    }

    function blobToBase64(blobOrBuffer, callback) {
      blobToBinaryString(blobOrBuffer, function (base64) {
        callback(thisBtoa(base64));
      });
    }

    // simplified API. universal browser support is assumed
    function readAsArrayBuffer(blob, callback) {
      if (typeof FileReader === 'undefined') {
        // fix for Firefox in a web worker:
        // https://bugzilla.mozilla.org/show_bug.cgi?id=901097
        return callback(new FileReaderSync().readAsArrayBuffer(blob));
      }

      var reader = new FileReader();
      reader.onloadend = function (e) {
        var result = e.target.result || new ArrayBuffer(0);
        callback(result);
      };
      reader.readAsArrayBuffer(blob);
    }

    // this is not used in the browser
    function typedBuffer() {
    }

    exports.atob = thisAtob;
    exports.btoa = thisBtoa;
    exports.base64StringToBlobOrBuffer = b64ToBluffer;
    exports.binaryStringToArrayBuffer = binaryStringToArrayBuffer;
    exports.binaryStringToBlobOrBuffer = binStringToBluffer;
    exports.blob = createBlob;
    exports.blobOrBufferToBase64 = blobToBase64;
    exports.blobOrBufferToBinaryString = blobToBinaryString;
    exports.readAsArrayBuffer = readAsArrayBuffer;
    exports.readAsBinaryString = readAsBinaryString;
    exports.typedBuffer = typedBuffer;

    },{}],10:[function(require,module,exports){

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var lie = _interopDefault(require(6));

    /* istanbul ignore next */
    var PouchPromise = typeof Promise === 'function' ? Promise : lie;

    module.exports = PouchPromise;

    },{"6":6}],11:[function(require,module,exports){

    Object.defineProperty(exports, '__esModule', { value: true });

    function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

    var uuidV4 = _interopDefault(require(18));
    var Promise = _interopDefault(require(10));
    var getArguments = _interopDefault(require(2));
    var pouchdbCollections = require(12);
    var events = require(3);
    var inherits = _interopDefault(require(5));
    var immediate = _interopDefault(require(4));
    var pouchdbErrors = require(13);

    function isBinaryObject(object) {
      return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||
        (typeof Blob !== 'undefined' && object instanceof Blob);
    }

    function cloneArrayBuffer(buff) {
      if (typeof buff.slice === 'function') {
        return buff.slice(0);
      }
      // IE10-11 slice() polyfill
      var target = new ArrayBuffer(buff.byteLength);
      var targetArray = new Uint8Array(target);
      var sourceArray = new Uint8Array(buff);
      targetArray.set(sourceArray);
      return target;
    }

    function cloneBinaryObject(object) {
      if (object instanceof ArrayBuffer) {
        return cloneArrayBuffer(object);
      }
      var size = object.size;
      var type = object.type;
      // Blob
      if (typeof object.slice === 'function') {
        return object.slice(0, size, type);
      }
      // PhantomJS slice() replacement
      return object.webkitSlice(0, size, type);
    }

    // most of this is borrowed from lodash.isPlainObject:
    // https://github.com/fis-components/lodash.isplainobject/
    // blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js

    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);

    function isPlainObject(value) {
      var proto = Object.getPrototypeOf(value);
      /* istanbul ignore if */
      if (proto === null) { // not sure when this happens, but I guess it can
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    function clone(object) {
      var newObject;
      var i;
      var len;

      if (!object || typeof object !== 'object') {
        return object;
      }

      if (Array.isArray(object)) {
        newObject = [];
        for (i = 0, len = object.length; i < len; i++) {
          newObject[i] = clone(object[i]);
        }
        return newObject;
      }

      // special case: to avoid inconsistencies between IndexedDB
      // and other backends, we automatically stringify Dates
      if (object instanceof Date) {
        return object.toISOString();
      }

      if (isBinaryObject(object)) {
        return cloneBinaryObject(object);
      }

      if (!isPlainObject(object)) {
        return object; // don't clone objects like Workers
      }

      newObject = {};
      for (i in object) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(object, i)) {
          var value = clone(object[i]);
          if (typeof value !== 'undefined') {
            newObject[i] = value;
          }
        }
      }
      return newObject;
    }

    function once(fun) {
      var called = false;
      return getArguments(function (args) {
        /* istanbul ignore if */
        if (called) {
          // this is a smoke test and should never actually happen
          throw new Error('once called more than once');
        } else {
          called = true;
          fun.apply(this, args);
        }
      });
    }

    function toPromise(func) {
      //create the function we will be returning
      return getArguments(function (args) {
        // Clone arguments
        args = clone(args);
        var self = this;
        // if the last argument is a function, assume its a callback
        var usedCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;
        var promise = new Promise(function (fulfill, reject) {
          var resp;
          try {
            var callback = once(function (err, mesg) {
              if (err) {
                reject(err);
              } else {
                fulfill(mesg);
              }
            });
            // create a callback for this invocation
            // apply the function in the orig context
            args.push(callback);
            resp = func.apply(self, args);
            if (resp && typeof resp.then === 'function') {
              fulfill(resp);
            }
          } catch (e) {
            reject(e);
          }
        });
        // if there is a callback, call it back
        if (usedCB) {
          promise.then(function (result) {
            usedCB(null, result);
          }, usedCB);
        }
        return promise;
      });
    }

    function logApiCall(self, name, args) {
      /* istanbul ignore if */
      if (self.constructor.listeners('debug').length) {
        var logArgs = ['api', self.name, name];
        for (var i = 0; i < args.length - 1; i++) {
          logArgs.push(args[i]);
        }
        self.constructor.emit('debug', logArgs);

        // override the callback itself to log the response
        var origCallback = args[args.length - 1];
        args[args.length - 1] = function (err, res) {
          var responseArgs = ['api', self.name, name];
          responseArgs = responseArgs.concat(
            err ? ['error', err] : ['success', res]
          );
          self.constructor.emit('debug', responseArgs);
          origCallback(err, res);
        };
      }
    }

    function adapterFun(name, callback) {
      return toPromise(getArguments(function (args) {
        if (this._closed) {
          return Promise.reject(new Error('database is closed'));
        }
        if (this._destroyed) {
          return Promise.reject(new Error('database is destroyed'));
        }
        var self = this;
        logApiCall(self, name, args);
        if (!this.taskqueue.isReady) {
          return new Promise(function (fulfill, reject) {
            self.taskqueue.addTask(function (failed) {
              if (failed) {
                reject(failed);
              } else {
                fulfill(self[name].apply(self, args));
              }
            });
          });
        }
        return callback.apply(this, args);
      }));
    }

    // like underscore/lodash _.pick()
    function pick(obj, arr) {
      var res = {};
      for (var i = 0, len = arr.length; i < len; i++) {
        var prop = arr[i];
        if (prop in obj) {
          res[prop] = obj[prop];
        }
      }
      return res;
    }

    // Most browsers throttle concurrent requests at 6, so it's silly
    // to shim _bulk_get by trying to launch potentially hundreds of requests
    // and then letting the majority time out. We can handle this ourselves.
    var MAX_NUM_CONCURRENT_REQUESTS = 6;

    function identityFunction(x) {
      return x;
    }

    function formatResultForOpenRevsGet(result) {
      return [{
        ok: result
      }];
    }

    // shim for P/CouchDB adapters that don't directly implement _bulk_get
    function bulkGet(db, opts, callback) {
      var requests = opts.docs;

      // consolidate into one request per doc if possible
      var requestsById = new pouchdbCollections.Map();
      requests.forEach(function (request) {
        if (requestsById.has(request.id)) {
          requestsById.get(request.id).push(request);
        } else {
          requestsById.set(request.id, [request]);
        }
      });

      var numDocs = requestsById.size;
      var numDone = 0;
      var perDocResults = new Array(numDocs);

      function collapseResultsAndFinish() {
        var results = [];
        perDocResults.forEach(function (res) {
          res.docs.forEach(function (info) {
            results.push({
              id: res.id,
              docs: [info]
            });
          });
        });
        callback(null, {results: results});
      }

      function checkDone() {
        if (++numDone === numDocs) {
          collapseResultsAndFinish();
        }
      }

      function gotResult(docIndex, id, docs) {
        perDocResults[docIndex] = {id: id, docs: docs};
        checkDone();
      }

      var allRequests = [];
      requestsById.forEach(function (value, key) {
        allRequests.push(key);
      });

      var i = 0;

      function nextBatch() {

        if (i >= allRequests.length) {
          return;
        }

        var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);
        var batch = allRequests.slice(i, upTo);
        processBatch(batch, i);
        i += batch.length;
      }

      function processBatch(batch, offset) {
        batch.forEach(function (docId, j) {
          var docIdx = offset + j;
          var docRequests = requestsById.get(docId);

          // just use the first request as the "template"
          // TODO: The _bulk_get API allows for more subtle use cases than this,
          // but for now it is unlikely that there will be a mix of different
          // "atts_since" or "attachments" in the same request, since it's just
          // replicate.js that is using this for the moment.
          // Also, atts_since is aspirational, since we don't support it yet.
          var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);
          docOpts.open_revs = docRequests.map(function (request) {
            // rev is optional, open_revs disallowed
            return request.rev;
          });

          // remove falsey / undefined revisions
          docOpts.open_revs = docOpts.open_revs.filter(identityFunction);

          var formatResult = identityFunction;

          if (docOpts.open_revs.length === 0) {
            delete docOpts.open_revs;

            // when fetching only the "winning" leaf,
            // transform the result so it looks like an open_revs
            // request
            formatResult = formatResultForOpenRevsGet;
          }

          // globally-supplied options
          ['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(function (param) {
            if (param in opts) {
              docOpts[param] = opts[param];
            }
          });
          db.get(docId, docOpts, function (err, res) {
            var result;
            /* istanbul ignore if */
            if (err) {
              result = [{error: err}];
            } else {
              result = formatResult(res);
            }
            gotResult(docIdx, docId, result);
            nextBatch();
          });
        });
      }

      nextBatch();

    }

    function isChromeApp() {
      return (typeof chrome !== "undefined" &&
        typeof chrome.storage !== "undefined" &&
        typeof chrome.storage.local !== "undefined");
    }

    var hasLocal;

    if (isChromeApp()) {
      hasLocal = false;
    } else {
      try {
        localStorage.setItem('_pouch_check_localstorage', 1);
        hasLocal = !!localStorage.getItem('_pouch_check_localstorage');
      } catch (e) {
        hasLocal = false;
      }
    }

    function hasLocalStorage() {
      return hasLocal;
    }

    // Custom nextTick() shim for browsers. In node, this will just be process.nextTick(). We
    // avoid using process.nextTick() directly because the polyfill is very large and we don't
    // need all of it (see: https://github.com/defunctzombie/node-process).
    // "immediate" 3.0.8 is used by lie, and it's a smaller version of the latest "immediate"
    // package, so it's the one we use.
    // When we use nextTick() in our codebase, we only care about not releasing Zalgo
    // (see: http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony).
    // Microtask vs macrotask doesn't matter to us. So we're free to use the fastest
    // (least latency) option, which is "immediate" due to use of microtasks.
    // All of our nextTicks are isolated to this one function so we can easily swap out one
    // implementation for another.

    inherits(Changes, events.EventEmitter);

    /* istanbul ignore next */
    function attachBrowserEvents(self) {
      if (isChromeApp()) {
        chrome.storage.onChanged.addListener(function (e) {
          // make sure it's event addressed to us
          if (e.db_name != null) {
            //object only has oldValue, newValue members
            self.emit(e.dbName.newValue);
          }
        });
      } else if (hasLocalStorage()) {
        if (typeof addEventListener !== 'undefined') {
          addEventListener("storage", function (e) {
            self.emit(e.key);
          });
        } else { // old IE
          window.attachEvent("storage", function (e) {
            self.emit(e.key);
          });
        }
      }
    }

    function Changes() {
      events.EventEmitter.call(this);
      this._listeners = {};

      attachBrowserEvents(this);
    }
    Changes.prototype.addListener = function (dbName, id, db, opts) {
      /* istanbul ignore if */
      if (this._listeners[id]) {
        return;
      }
      var self = this;
      var inprogress = false;
      function eventFunction() {
        /* istanbul ignore if */
        if (!self._listeners[id]) {
          return;
        }
        if (inprogress) {
          inprogress = 'waiting';
          return;
        }
        inprogress = true;
        var changesOpts = pick(opts, [
          'style', 'include_docs', 'attachments', 'conflicts', 'filter',
          'doc_ids', 'view', 'since', 'query_params', 'binary'
        ]);

        /* istanbul ignore next */
        function onError() {
          inprogress = false;
        }

        db.changes(changesOpts).on('change', function (c) {
          if (c.seq > opts.since && !opts.cancelled) {
            opts.since = c.seq;
            opts.onChange(c);
          }
        }).on('complete', function () {
          if (inprogress === 'waiting') {
            immediate(eventFunction);
          }
          inprogress = false;
        }).on('error', onError);
      }
      this._listeners[id] = eventFunction;
      this.on(dbName, eventFunction);
    };

    Changes.prototype.removeListener = function (dbName, id) {
      /* istanbul ignore if */
      if (!(id in this._listeners)) {
        return;
      }
      events.EventEmitter.prototype.removeListener.call(this, dbName,
        this._listeners[id]);
      delete this._listeners[id];
    };


    /* istanbul ignore next */
    Changes.prototype.notifyLocalWindows = function (dbName) {
      //do a useless change on a storage thing
      //in order to get other windows's listeners to activate
      if (isChromeApp()) {
        chrome.storage.local.set({dbName: dbName});
      } else if (hasLocalStorage()) {
        localStorage[dbName] = (localStorage[dbName] === "a") ? "b" : "a";
      }
    };

    Changes.prototype.notify = function (dbName) {
      this.emit(dbName);
      this.notifyLocalWindows(dbName);
    };

    function guardedConsole(method) {
      /* istanbul ignore else */
      if (typeof console !== 'undefined' && typeof console[method] === 'function') {
        var args = Array.prototype.slice.call(arguments, 1);
        console[method].apply(console, args);
      }
    }

    function randomNumber(min, max) {
      var maxTimeout = 600000; // Hard-coded default of 10 minutes
      min = parseInt(min, 10) || 0;
      max = parseInt(max, 10);
      if (max !== max || max <= min) {
        max = (min || 1) << 1; //doubling
      } else {
        max = max + 1;
      }
      // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout
      if (max > maxTimeout) {
        min = maxTimeout >> 1; // divide by two
        max = maxTimeout;
      }
      var ratio = Math.random();
      var range = max - min;

      return ~~(range * ratio + min); // ~~ coerces to an int, but fast.
    }

    function defaultBackOff(min) {
      var max = 0;
      if (!min) {
        max = 2000;
      }
      return randomNumber(min, max);
    }

    // designed to give info to browser users, who are disturbed
    // when they see http errors in the console
    function explainError(status, str) {
      guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);
    }

    var assign;
    {
      if (typeof Object.assign === 'function') {
        assign = Object.assign;
      } else {
        // lite Object.assign polyfill based on
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
        assign = function (target) {
          var to = Object(target);

          for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) { // Skip over if undefined or null
              for (var nextKey in nextSource) {
                // Avoid bugs when hasOwnProperty is shadowed
                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
          }
          return to;
        };
      }
    }

    var assign$1 = assign;

    function tryFilter(filter, doc, req) {
      try {
        return !filter(doc, req);
      } catch (err) {
        var msg = 'Filter function threw: ' + err.toString();
        return pouchdbErrors.createError(pouchdbErrors.BAD_REQUEST, msg);
      }
    }

    function filterChange(opts) {
      var req = {};
      var hasFilter = opts.filter && typeof opts.filter === 'function';
      req.query = opts.query_params;

      return function filter(change) {
        if (!change.doc) {
          // CSG sends events on the changes feed that don't have documents,
          // this hack makes a whole lot of existing code robust.
          change.doc = {};
        }

        var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);

        if (typeof filterReturn === 'object') {
          return filterReturn;
        }

        if (filterReturn) {
          return false;
        }

        if (!opts.include_docs) {
          delete change.doc;
        } else if (!opts.attachments) {
          for (var att in change.doc._attachments) {
            /* istanbul ignore else */
            if (change.doc._attachments.hasOwnProperty(att)) {
              change.doc._attachments[att].stub = true;
            }
          }
        }
        return true;
      };
    }

    function flatten(arrs) {
      var res = [];
      for (var i = 0, len = arrs.length; i < len; i++) {
        res = res.concat(arrs[i]);
      }
      return res;
    }

    // shim for Function.prototype.name,
    // for browsers that don't support it like IE

    /* istanbul ignore next */
    function f() {}

    var hasName = f.name;
    var res;

    // We dont run coverage in IE
    /* istanbul ignore else */
    if (hasName) {
      res = function (fun) {
        return fun.name;
      };
    } else {
      res = function (fun) {
        return fun.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
      };
    }

    var res$1 = res;

    // Determine id an ID is valid
    //   - invalid IDs begin with an underescore that does not begin '_design' or
    //     '_local'
    //   - any other string value is a valid id
    // Returns the specific error object for each case
    function invalidIdError(id) {
      var err;
      if (!id) {
        err = pouchdbErrors.createError(pouchdbErrors.MISSING_ID);
      } else if (typeof id !== 'string') {
        err = pouchdbErrors.createError(pouchdbErrors.INVALID_ID);
      } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {
        err = pouchdbErrors.createError(pouchdbErrors.RESERVED_ID);
      }
      if (err) {
        throw err;
      }
    }

    function isCordova() {
      return (typeof cordova !== "undefined" ||
      typeof PhoneGap !== "undefined" ||
      typeof phonegap !== "undefined");
    }

    // Checks if a PouchDB object is "remote" or not. This is
    // designed to opt-in to certain optimizations, such as
    // avoiding checks for "dependentDbs" and other things that
    // we know only apply to local databases. In general, "remote"
    // should be true for the http adapter, and for third-party
    // adapters with similar expensive boundaries to cross for
    // every API call, such as socket-pouch and worker-pouch.
    // Previously, this was handled via db.type() === 'http'
    // which is now deprecated.

    function isRemote(db) {
      if (typeof db._remote === 'boolean') {
        return db._remote;
      }
      /* istanbul ignore next */
      if (typeof db.type === 'function') {
        guardedConsole('warn',
          'db.type() is deprecated and will be removed in ' +
          'a future version of PouchDB');
        return db.type() === 'http';
      }
      /* istanbul ignore next */
      return false;
    }

    function listenerCount(ee, type) {
      return 'listenerCount' in ee ? ee.listenerCount(type) :
                                     events.EventEmitter.listenerCount(ee, type);
    }

    function parseDesignDocFunctionName(s) {
      if (!s) {
        return null;
      }
      var parts = s.split('/');
      if (parts.length === 2) {
        return parts;
      }
      if (parts.length === 1) {
        return [s, s];
      }
      return null;
    }

    function normalizeDesignDocFunctionName(s) {
      var normalized = parseDesignDocFunctionName(s);
      return normalized ? normalized.join('/') : null;
    }

    // originally parseUri 1.2.2, now patched by us
    // (c) Steven Levithan <stevenlevithan.com>
    // MIT License
    var keys = ["source", "protocol", "authority", "userInfo", "user", "password",
        "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
    var qName ="queryKey";
    var qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;

    // use the "loose" parser
    /* eslint maxlen: 0, no-useless-escape: 0 */
    var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

    function parseUri(str) {
      var m = parser.exec(str);
      var uri = {};
      var i = 14;

      while (i--) {
        var key = keys[i];
        var value = m[i] || "";
        var encoded = ['user', 'password'].indexOf(key) !== -1;
        uri[key] = encoded ? decodeURIComponent(value) : value;
      }

      uri[qName] = {};
      uri[keys[12]].replace(qParser, function ($0, $1, $2) {
        if ($1) {
          uri[qName][$1] = $2;
        }
      });

      return uri;
    }

    // Based on https://github.com/alexdavid/scope-eval v0.0.3
    // (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)
    // This is basically just a wrapper around new Function()

    function scopeEval(source, scope) {
      var keys = [];
      var values = [];
      for (var key in scope) {
        if (scope.hasOwnProperty(key)) {
          keys.push(key);
          values.push(scope[key]);
        }
      }
      keys.push(source);
      return Function.apply(null, keys).apply(null, values);
    }

    // this is essentially the "update sugar" function from daleharvey/pouchdb#1388
    // the diffFun tells us what delta to apply to the doc.  it either returns
    // the doc, or false if it doesn't need to do an update after all
    function upsert(db, docId, diffFun) {
      return new Promise(function (fulfill, reject) {
        db.get(docId, function (err, doc) {
          if (err) {
            /* istanbul ignore next */
            if (err.status !== 404) {
              return reject(err);
            }
            doc = {};
          }

          // the user might change the _rev, so save it for posterity
          var docRev = doc._rev;
          var newDoc = diffFun(doc);

          if (!newDoc) {
            // if the diffFun returns falsy, we short-circuit as
            // an optimization
            return fulfill({updated: false, rev: docRev});
          }

          // users aren't allowed to modify these values,
          // so reset them here
          newDoc._id = docId;
          newDoc._rev = docRev;
          fulfill(tryAndPut(db, newDoc, diffFun));
        });
      });
    }

    function tryAndPut(db, doc, diffFun) {
      return db.put(doc).then(function (res) {
        return {
          updated: true,
          rev: res.rev
        };
      }, function (err) {
        /* istanbul ignore next */
        if (err.status !== 409) {
          throw err;
        }
        return upsert(db, doc._id, diffFun);
      });
    }

    function rev() {
      return uuidV4.v4().replace(/-/g, '').toLowerCase();
    }

    var uuid = uuidV4.v4;

    exports.adapterFun = adapterFun;
    exports.assign = assign$1;
    exports.bulkGetShim = bulkGet;
    exports.changesHandler = Changes;
    exports.clone = clone;
    exports.defaultBackOff = defaultBackOff;
    exports.explainError = explainError;
    exports.filterChange = filterChange;
    exports.flatten = flatten;
    exports.functionName = res$1;
    exports.guardedConsole = guardedConsole;
    exports.hasLocalStorage = hasLocalStorage;
    exports.invalidIdError = invalidIdError;
    exports.isChromeApp = isChromeApp;
    exports.isCordova = isCordova;
    exports.isRemote = isRemote;
    exports.listenerCount = listenerCount;
    exports.nextTick = immediate;
    exports.normalizeDdocFunctionName = normalizeDesignDocFunctionName;
    exports.once = once;
    exports.parseDdocFunctionName = parseDesignDocFunctionName;
    exports.parseUri = parseUri;
    exports.pick = pick;
    exports.rev = rev;
    exports.scopeEval = scopeEval;
    exports.toPromise = toPromise;
    exports.upsert = upsert;
    exports.uuid = uuid;

    },{"10":10,"12":12,"13":13,"18":18,"2":2,"3":3,"4":4,"5":5}],12:[function(require,module,exports){

    Object.defineProperty(exports, '__esModule', { value: true });

    function mangle(key) {
      return '$' + key;
    }
    function unmangle(key) {
      return key.substring(1);
    }
    function Map$1() {
      this._store = {};
    }
    Map$1.prototype.get = function (key) {
      var mangled = mangle(key);
      return this._store[mangled];
    };
    Map$1.prototype.set = function (key, value) {
      var mangled = mangle(key);
      this._store[mangled] = value;
      return true;
    };
    Map$1.prototype.has = function (key) {
      var mangled = mangle(key);
      return mangled in this._store;
    };
    Map$1.prototype.delete = function (key) {
      var mangled = mangle(key);
      var res = mangled in this._store;
      delete this._store[mangled];
      return res;
    };
    Map$1.prototype.forEach = function (cb) {
      var keys = Object.keys(this._store);
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        var value = this._store[key];
        key = unmangle(key);
        cb(value, key);
      }
    };
    Object.defineProperty(Map$1.prototype, 'size', {
      get: function () {
        return Object.keys(this._store).length;
      }
    });

    function Set$1(array) {
      this._store = new Map$1();

      // init with an array
      if (array && Array.isArray(array)) {
        for (var i = 0, len = array.length; i < len; i++) {
          this.add(array[i]);
        }
      }
    }
    Set$1.prototype.add = function (key) {
      return this._store.set(key, true);
    };
    Set$1.prototype.has = function (key) {
      return this._store.has(key);
    };
    Set$1.prototype.forEach = function (cb) {
      this._store.forEach(function (value, key) {
        cb(key);
      });
    };
    Object.defineProperty(Set$1.prototype, 'size', {
      get: function () {
        return this._store.size;
      }
    });

    /* global Map,Set,Symbol */
    // Based on https://kangax.github.io/compat-table/es6/ we can sniff out
    // incomplete Map/Set implementations which would otherwise cause our tests to fail.
    // Notably they fail in IE11 and iOS 8.4, which this prevents.
    function supportsMapAndSet() {
      if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {
        return false;
      }
      var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);
      return prop && 'get' in prop && Map[Symbol.species] === Map;
    }

    // based on https://github.com/montagejs/collections
    /* global Map,Set */

    {
      if (supportsMapAndSet()) { // prefer built-in Map/Set
        exports.Set = Set;
        exports.Map = Map;
      } else { // fall back to our polyfill
        exports.Set = Set$1;
        exports.Map = Map$1;
      }
    }

    },{}],13:[function(require,module,exports){
    arguments[4][8][0].apply(exports,arguments);
    },{"5":5,"8":8}],14:[function(require,module,exports){

    var has = Object.prototype.hasOwnProperty;

    /**
     * Decode a URI encoded string.
     *
     * @param {String} input The URI encoded string.
     * @returns {String} The decoded string.
     * @api private
     */
    function decode(input) {
      return decodeURIComponent(input.replace(/\+/g, ' '));
    }

    /**
     * Simple query string parser.
     *
     * @param {String} query The query string that needs to be parsed.
     * @returns {Object}
     * @api public
     */
    function querystring(query) {
      var parser = /([^=?&]+)=?([^&]*)/g
        , result = {}
        , part;

      //
      // Little nifty parsing hack, leverage the fact that RegExp.exec increments
      // the lastIndex property so we can continue executing this loop until we've
      // parsed all results.
      //
      for (;
        part = parser.exec(query);
        result[decode(part[1])] = decode(part[2])
      );

      return result;
    }

    /**
     * Transform a query string to an object.
     *
     * @param {Object} obj Object that should be transformed.
     * @param {String} prefix Optional prefix.
     * @returns {String}
     * @api public
     */
    function querystringify(obj, prefix) {
      prefix = prefix || '';

      var pairs = [];

      //
      // Optionally prefix with a '?' if needed
      //
      if ('string' !== typeof prefix) prefix = '?';

      for (var key in obj) {
        if (has.call(obj, key)) {
          pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
        }
      }

      return pairs.length ? prefix + pairs.join('&') : '';
    }

    //
    // Expose the module.
    //
    exports.stringify = querystringify;
    exports.parse = querystring;

    },{}],15:[function(require,module,exports){
    (function (name, context, definition) {
      if (typeof module !== 'undefined' && module.exports) module.exports = definition();
      else context[name] = definition();
    })('urljoin', this, function () {

      function normalize (strArray) {
        var resultArray = [];

        // If the first part is a plain protocol, we combine it with the next part.
        if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }

        // There must be two or three slashes in the file protocol, two slashes in anything else.
        if (strArray[0].match(/^file:\/\/\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1:///');
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1://');
        }

        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];

          if (typeof component !== 'string') {
            throw new TypeError('Url must be a string. Received ' + component);
          }

          if (component === '') { continue; }

          if (i > 0) {
            // Removing the starting slashes for each component but the first.
            component = component.replace(/^[\/]+/, '');
          }
          if (i < strArray.length - 1) {
            // Removing the ending slashes for each component but the last.
            component = component.replace(/[\/]+$/, '');
          } else {
            // For the last component we will combine multiple slashes to a single one.
            component = component.replace(/[\/]+$/, '/');
          }

          resultArray.push(component);

        }

        var str = resultArray.join('/');
        // Each input component is now separated by a single slash except the possible first plain protocol part.

        // remove trailing slash before parameters or hash
        str = str.replace(/\/(\?|&|#[^!])/g, '$1');

        // replace ? in parameters with &
        var parts = str.split('?');
        str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');

        return str;
      }

      return function () {
        var input;

        if (typeof arguments[0] === 'object') {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }

        return normalize(input);
      };

    });

    },{}],16:[function(require,module,exports){
    (function (global){

    var required = require(17)
      , qs = require(14)
      , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
      , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

    /**
     * These are the parse rules for the URL parser, it informs the parser
     * about:
     *
     * 0. The char it Needs to parse, if it's a string it should be done using
     *    indexOf, RegExp using exec and NaN means set as current value.
     * 1. The property we should set when parsing this value.
     * 2. Indication if it's backwards or forward parsing, when set as number it's
     *    the value of extra chars that should be split off.
     * 3. Inherit from location if non existing in the parser.
     * 4. `toLowerCase` the resulting value.
     */
    var rules = [
      ['#', 'hash'],                        // Extract from the back.
      ['?', 'query'],                       // Extract from the back.
      ['/', 'pathname'],                    // Extract from the back.
      ['@', 'auth', 1],                     // Extract from the front.
      [NaN, 'host', undefined, 1, 1],       // Set left over value.
      [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
      [NaN, 'hostname', undefined, 1, 1]    // Set left over.
    ];

    /**
     * These properties should not be copied or inherited from. This is only needed
     * for all non blob URL's as a blob URL does not include a hash, only the
     * origin.
     *
     * @type {Object}
     * @private
     */
    var ignore = { hash: 1, query: 1 };

    /**
     * The location object differs when your code is loaded through a normal page,
     * Worker or through a worker using a blob. And with the blobble begins the
     * trouble as the location object will contain the URL of the blob, not the
     * location of the page where our code is loaded in. The actual origin is
     * encoded in the `pathname` so we can thankfully generate a good "default"
     * location from it so we can generate proper relative URL's again.
     *
     * @param {Object|String} loc Optional default location object.
     * @returns {Object} lolcation object.
     * @api public
     */
    function lolcation(loc) {
      loc = loc || global.location || {};

      var finaldestination = {}
        , type = typeof loc
        , key;

      if ('blob:' === loc.protocol) {
        finaldestination = new URL(unescape(loc.pathname), {});
      } else if ('string' === type) {
        finaldestination = new URL(loc, {});
        for (key in ignore) delete finaldestination[key];
      } else if ('object' === type) {
        for (key in loc) {
          if (key in ignore) continue;
          finaldestination[key] = loc[key];
        }

        if (finaldestination.slashes === undefined) {
          finaldestination.slashes = slashes.test(loc.href);
        }
      }

      return finaldestination;
    }

    /**
     * @typedef ProtocolExtract
     * @type Object
     * @property {String} protocol Protocol matched in the URL, in lowercase.
     * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
     * @property {String} rest Rest of the URL that is not part of the protocol.
     */

    /**
     * Extract protocol information from a URL with/without double slash ("//").
     *
     * @param {String} address URL we want to extract from.
     * @return {ProtocolExtract} Extracted information.
     * @api private
     */
    function extractProtocol(address) {
      var match = protocolre.exec(address);

      return {
        protocol: match[1] ? match[1].toLowerCase() : '',
        slashes: !!match[2],
        rest: match[3]
      };
    }

    /**
     * Resolve a relative URL pathname against a base URL pathname.
     *
     * @param {String} relative Pathname of the relative URL.
     * @param {String} base Pathname of the base URL.
     * @return {String} Resolved pathname.
     * @api private
     */
    function resolve(relative, base) {
      var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
        , i = path.length
        , last = path[i - 1]
        , unshift = false
        , up = 0;

      while (i--) {
        if (path[i] === '.') {
          path.splice(i, 1);
        } else if (path[i] === '..') {
          path.splice(i, 1);
          up++;
        } else if (up) {
          if (i === 0) unshift = true;
          path.splice(i, 1);
          up--;
        }
      }

      if (unshift) path.unshift('');
      if (last === '.' || last === '..') path.push('');

      return path.join('/');
    }

    /**
     * The actual URL instance. Instead of returning an object we've opted-in to
     * create an actual constructor as it's much more memory efficient and
     * faster and it pleases my OCD.
     *
     * @constructor
     * @param {String} address URL we want to parse.
     * @param {Object|String} location Location defaults for relative paths.
     * @param {Boolean|Function} parser Parser for the query string.
     * @api public
     */
    function URL(address, location, parser) {
      if (!(this instanceof URL)) {
        return new URL(address, location, parser);
      }

      var relative, extracted, parse, instruction, index, key
        , instructions = rules.slice()
        , type = typeof location
        , url = this
        , i = 0;

      //
      // The following if statements allows this module two have compatibility with
      // 2 different API:
      //
      // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
      //    where the boolean indicates that the query string should also be parsed.
      //
      // 2. The `URL` interface of the browser which accepts a URL, object as
      //    arguments. The supplied object will be used as default values / fall-back
      //    for relative paths.
      //
      if ('object' !== type && 'string' !== type) {
        parser = location;
        location = null;
      }

      if (parser && 'function' !== typeof parser) parser = qs.parse;

      location = lolcation(location);

      //
      // Extract protocol information before running the instructions.
      //
      extracted = extractProtocol(address || '');
      relative = !extracted.protocol && !extracted.slashes;
      url.slashes = extracted.slashes || relative && location.slashes;
      url.protocol = extracted.protocol || location.protocol || '';
      address = extracted.rest;

      //
      // When the authority component is absent the URL starts with a path
      // component.
      //
      if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

      for (; i < instructions.length; i++) {
        instruction = instructions[i];
        parse = instruction[0];
        key = instruction[1];

        if (parse !== parse) {
          url[key] = address;
        } else if ('string' === typeof parse) {
          if (~(index = address.indexOf(parse))) {
            if ('number' === typeof instruction[2]) {
              url[key] = address.slice(0, index);
              address = address.slice(index + instruction[2]);
            } else {
              url[key] = address.slice(index);
              address = address.slice(0, index);
            }
          }
        } else if ((index = parse.exec(address))) {
          url[key] = index[1];
          address = address.slice(0, index.index);
        }

        url[key] = url[key] || (
          relative && instruction[3] ? location[key] || '' : ''
        );

        //
        // Hostname, host and protocol should be lowercased so they can be used to
        // create a proper `origin`.
        //
        if (instruction[4]) url[key] = url[key].toLowerCase();
      }

      //
      // Also parse the supplied query string in to an object. If we're supplied
      // with a custom parser as function use that instead of the default build-in
      // parser.
      //
      if (parser) url.query = parser(url.query);

      //
      // If the URL is relative, resolve the pathname against the base URL.
      //
      if (
          relative
        && location.slashes
        && url.pathname.charAt(0) !== '/'
        && (url.pathname !== '' || location.pathname !== '')
      ) {
        url.pathname = resolve(url.pathname, location.pathname);
      }

      //
      // We should not add port numbers if they are already the default port number
      // for a given protocol. As the host also contains the port number we're going
      // override it with the hostname which contains no port number.
      //
      if (!required(url.port, url.protocol)) {
        url.host = url.hostname;
        url.port = '';
      }

      //
      // Parse down the `auth` for the username and password.
      //
      url.username = url.password = '';
      if (url.auth) {
        instruction = url.auth.split(':');
        url.username = instruction[0] || '';
        url.password = instruction[1] || '';
      }

      url.origin = url.protocol && url.host && url.protocol !== 'file:'
        ? url.protocol +'//'+ url.host
        : 'null';

      //
      // The href is just the compiled result.
      //
      url.href = url.toString();
    }

    /**
     * This is convenience method for changing properties in the URL instance to
     * insure that they all propagate correctly.
     *
     * @param {String} part          Property we need to adjust.
     * @param {Mixed} value          The newly assigned value.
     * @param {Boolean|Function} fn  When setting the query, it will be the function
     *                               used to parse the query.
     *                               When setting the protocol, double slash will be
     *                               removed from the final url if it is true.
     * @returns {URL}
     * @api public
     */
    function set(part, value, fn) {
      var url = this;

      switch (part) {
        case 'query':
          if ('string' === typeof value && value.length) {
            value = (fn || qs.parse)(value);
          }

          url[part] = value;
          break;

        case 'port':
          url[part] = value;

          if (!required(value, url.protocol)) {
            url.host = url.hostname;
            url[part] = '';
          } else if (value) {
            url.host = url.hostname +':'+ value;
          }

          break;

        case 'hostname':
          url[part] = value;

          if (url.port) value += ':'+ url.port;
          url.host = value;
          break;

        case 'host':
          url[part] = value;

          if (/:\d+$/.test(value)) {
            value = value.split(':');
            url.port = value.pop();
            url.hostname = value.join(':');
          } else {
            url.hostname = value;
            url.port = '';
          }

          break;

        case 'protocol':
          url.protocol = value.toLowerCase();
          url.slashes = !fn;
          break;

        case 'pathname':
        case 'hash':
          if (value) {
            var char = part === 'pathname' ? '/' : '#';
            url[part] = value.charAt(0) !== char ? char + value : value;
          } else {
            url[part] = value;
          }
          break;

        default:
          url[part] = value;
      }

      for (var i = 0; i < rules.length; i++) {
        var ins = rules[i];

        if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
      }

      url.origin = url.protocol && url.host && url.protocol !== 'file:'
        ? url.protocol +'//'+ url.host
        : 'null';

      url.href = url.toString();

      return url;
    }

    /**
     * Transform the properties back in to a valid and full URL string.
     *
     * @param {Function} stringify Optional query stringify function.
     * @returns {String}
     * @api public
     */
    function toString(stringify) {
      if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

      var query
        , url = this
        , protocol = url.protocol;

      if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

      var result = protocol + (url.slashes ? '//' : '');

      if (url.username) {
        result += url.username;
        if (url.password) result += ':'+ url.password;
        result += '@';
      }

      result += url.host + url.pathname;

      query = 'object' === typeof url.query ? stringify(url.query) : url.query;
      if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

      if (url.hash) result += url.hash;

      return result;
    }

    URL.prototype = { set: set, toString: toString };

    //
    // Expose the URL parser and some additional properties that might be useful for
    // others or testing.
    //
    URL.extractProtocol = extractProtocol;
    URL.location = lolcation;
    URL.qs = qs;

    module.exports = URL;

    }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    },{"14":14,"17":17}],17:[function(require,module,exports){

    /**
     * Check if we're required to add a port number.
     *
     * @see https://url.spec.whatwg.org/#default-port
     * @param {Number|String} port Port number we need to check
     * @param {String} protocol Protocol we need to check against.
     * @returns {Boolean} Is it a default port for the given protocol
     * @api private
     */
    module.exports = function required(port, protocol) {
      protocol = protocol.split(':')[0];
      port = +port;

      if (!port) return false;

      switch (protocol) {
        case 'http':
        case 'ws':
        return port !== 80;

        case 'https':
        case 'wss':
        return port !== 443;

        case 'ftp':
        return port !== 21;

        case 'gopher':
        return port !== 70;

        case 'file':
        return false;
      }

      return port !== 0;
    };

    },{}],18:[function(require,module,exports){
    var v1 = require(21);
    var v4 = require(22);

    var uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;

    module.exports = uuid;

    },{"21":21,"22":22}],19:[function(require,module,exports){
    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 0x100).toString(16).substr(1);
    }

    function bytesToUuid(buf, offset) {
      var i = offset || 0;
      var bth = byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] + '-' +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]] +
              bth[buf[i++]] + bth[buf[i++]];
    }

    module.exports = bytesToUuid;

    },{}],20:[function(require,module,exports){
    (function (global){
    // Unique ID creation requires a high quality random # generator.  In the
    // browser this is a little complicated due to unknown quality of Math.random()
    // and inconsistent support for the `crypto` API.  We do the best we can via
    // feature-detection
    var rng;

    var crypto = global.crypto || global.msCrypto; // for IE 11
    if (crypto && crypto.getRandomValues) {
      // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
      var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
      rng = function whatwgRNG() {
        crypto.getRandomValues(rnds8);
        return rnds8;
      };
    }

    if (!rng) {
      // Math.random()-based (RNG)
      //
      // If all else fails, use Math.random().  It's fast, but is of unspecified
      // quality.
      var rnds = new Array(16);
      rng = function() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
          rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }

        return rnds;
      };
    }

    module.exports = rng;

    }).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    },{}],21:[function(require,module,exports){
    var rng = require(20);
    var bytesToUuid = require(19);

    // **`v1()` - Generate time-based UUID**
    //
    // Inspired by https://github.com/LiosK/UUID.js
    // and http://docs.python.org/library/uuid.html

    // random #'s we need to init node and clockseq
    var _seedBytes = rng();

    // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
    var _nodeId = [
      _seedBytes[0] | 0x01,
      _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
    ];

    // Per 4.2.2, randomize (14 bit) clockseq
    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

    // Previous uuid creation time
    var _lastMSecs = 0, _lastNSecs = 0;

    // See https://github.com/broofa/node-uuid for API details
    function v1(options, buf, offset) {
      var i = buf && offset || 0;
      var b = buf || [];

      options = options || {};

      var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

      // UUID timestamps are 100 nano-second units since the Gregorian epoch,
      // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
      // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
      // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
      var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

      // Per 4.2.1.2, use count of uuid's generated during the current clock
      // cycle to simulate higher resolution clock
      var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

      // Time since last uuid creation (in msecs)
      var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

      // Per 4.2.1.2, Bump clockseq on clock regression
      if (dt < 0 && options.clockseq === undefined) {
        clockseq = clockseq + 1 & 0x3fff;
      }

      // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
      // time interval
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
        nsecs = 0;
      }

      // Per 4.2.1.2 Throw error if too many uuids are requested
      if (nsecs >= 10000) {
        throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
      }

      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;

      // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
      msecs += 12219292800000;

      // `time_low`
      var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;

      // `time_mid`
      var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;

      // `time_high_and_version`
      b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
      b[i++] = tmh >>> 16 & 0xff;

      // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
      b[i++] = clockseq >>> 8 | 0x80;

      // `clock_seq_low`
      b[i++] = clockseq & 0xff;

      // `node`
      var node = options.node || _nodeId;
      for (var n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }

      return buf ? buf : bytesToUuid(b);
    }

    module.exports = v1;

    },{"19":19,"20":20}],22:[function(require,module,exports){
    var rng = require(20);
    var bytesToUuid = require(19);

    function v4(options, buf, offset) {
      var i = buf && offset || 0;

      if (typeof(options) == 'string') {
        buf = options == 'binary' ? new Array(16) : null;
        options = null;
      }
      options = options || {};

      var rnds = options.random || (options.rng || rng)();

      // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;

      // Copy bytes to buffer, if provided
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }

      return buf || bytesToUuid(rnds);
    }

    module.exports = v4;

    },{"19":19,"20":20}]},{},[1])(1)
    });
    });

    var Auth = unwrapExports(pouchdb_authentication);

    const $_documentContainer$k = html$1`<dom-module id="lumo-button" theme-for="vaadin-button">
  <template>
    <style>
      :host {
        /* Sizing */
        --lumo-button-size: var(--lumo-size-m);
        min-width: calc(var(--lumo-button-size) * 2);
        height: var(--lumo-button-size);
        padding: 0 calc(var(--lumo-button-size) / 3 + var(--lumo-border-radius) / 2);
        margin: var(--lumo-space-xs) 0;
        box-sizing: border-box;
        /* Style */
        font-family: var(--lumo-font-family);
        font-size: var(--lumo-font-size-m);
        font-weight: 500;
        color: var(--lumo-primary-text-color);
        background-color: var(--lumo-contrast-5pct);
        border-radius: var(--lumo-border-radius);
        cursor: default;
        -webkit-tap-highlight-color: transparent;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      /* Set only for the internal parts so we don’t affect the host vertical alignment */
      [part="label"],
      [part="prefix"],
      [part="suffix"] {
        line-height: var(--lumo-line-height-xs);
      }

      [part="label"] {
        padding: calc(var(--lumo-button-size) / 6) 0;
      }

      :host([theme~="small"]) {
        font-size: var(--lumo-font-size-s);
        --lumo-button-size: var(--lumo-size-s);
      }

      :host([theme~="large"]) {
        font-size: var(--lumo-font-size-l);
        --lumo-button-size: var(--lumo-size-l);
      }

      /* This needs to be the last selector for it to take priority */
      :host([disabled][disabled]) {
        pointer-events: none;
        color: var(--lumo-disabled-text-color);
        background-color: var(--lumo-contrast-5pct);
      }

      /* For interaction states */
      :host::before,
      :host::after {
        content: "";
        /* We rely on the host always being relative */
        position: absolute;
        z-index: 1;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: currentColor;
        border-radius: inherit;
        opacity: 0;
        transition: opacity 0.2s;
        pointer-events: none;
      }

      /* Hover */

      :host(:hover)::before {
        opacity: 0.05;
      }

      /* Disable hover for touch devices */
      @media (pointer: coarse) {
        :host(:not([active]):hover)::before {
          opacity: 0;
        }
      }

      /* Active */

      :host::after {
        transition: opacity 1.4s, transform 0.1s;
        filter: blur(8px);
      }

      :host([active])::before {
        opacity: 0.1;
        transition-duration: 0s;
      }

      :host([active])::after {
        opacity: 0.1;
        transition-duration: 0s, 0s;
        transform: scale(0);
      }

      /* Keyboard focus */

      :host([focus-ring]) {
        box-shadow: 0 0 0 2px var(--lumo-primary-color-50pct);
      }

      /* Types (primary, tertiary, tertiary-inline */

      :host([theme~="tertiary"]),
      :host([theme~="tertiary-inline"]) {
        background-color: transparent !important;
        transition: opacity 0.2s;
        min-width: 0;
      }

      :host([theme~="tertiary"])::before,
      :host([theme~="tertiary-inline"])::before {
        display: none;
      }

      :host([theme~="tertiary"]) {
        padding: 0 calc(var(--lumo-button-size) / 6);
      }

      @media (hover: hover) {
        :host([theme*="tertiary"]:not([active]):hover) {
          opacity: 0.8;
        }
      }

      :host([theme~="tertiary"][active]),
      :host([theme~="tertiary-inline"][active]) {
        opacity: 0.5;
        transition-duration: 0s;
      }

      :host([theme~="tertiary-inline"]) {
        margin: 0;
        height: auto;
        padding: 0;
        line-height: inherit;
        font-size: inherit;
      }

      :host([theme~="tertiary-inline"]) [part="label"] {
        padding: 0;
        overflow: visible;
        line-height: inherit;
      }

      :host([theme~="primary"]) {
        background-color: var(--lumo-primary-color);
        color: var(--lumo-primary-contrast-color);
        font-weight: 600;
        min-width: calc(var(--lumo-button-size) * 2.5);
      }

      :host([theme~="primary"][disabled]) {
        background-color: var(--lumo-primary-color-50pct);
        color: var(--lumo-primary-contrast-color);
      }

      :host([theme~="primary"]:hover)::before {
        opacity: 0.1;
      }

      :host([theme~="primary"][active])::before {
        background-color: var(--lumo-shade-20pct);
      }

      @media (pointer: coarse) {
        :host([theme~="primary"][active])::before {
          background-color: var(--lumo-shade-60pct);
        }

        :host([theme~="primary"]:not([active]):hover)::before {
          opacity: 0;
        }
      }

      :host([theme~="primary"][active])::after {
        opacity: 0.2;
      }

      /* Colors (success, error, contrast) */

      :host([theme~="success"]) {
        color: var(--lumo-success-text-color);
      }

      :host([theme~="success"][theme~="primary"]) {
        background-color: var(--lumo-success-color);
        color: var(--lumo-success-contrast-color);
      }

      :host([theme~="success"][theme~="primary"][disabled]) {
        background-color: var(--lumo-success-color-50pct);
      }

      :host([theme~="error"]) {
        color: var(--lumo-error-text-color);
      }

      :host([theme~="error"][theme~="primary"]) {
        background-color: var(--lumo-error-color);
        color: var(--lumo-error-contrast-color);
      }

      :host([theme~="error"][theme~="primary"][disabled]) {
        background-color: var(--lumo-error-color-50pct);
      }

      :host([theme~="contrast"]) {
        color: var(--lumo-contrast);
      }

      :host([theme~="contrast"][theme~="primary"]) {
        background-color: var(--lumo-contrast);
        color: var(--lumo-base-color);
      }

      :host([theme~="contrast"][theme~="primary"][disabled]) {
        background-color: var(--lumo-contrast-50pct);
      }

      /* Icons */

      [part] ::slotted(iron-icon) {
        display: inline-block;
        width: var(--lumo-icon-size-m);
        height: var(--lumo-icon-size-m);
      }

      /* Vaadin icons are based on a 16x16 grid (unlike Lumo and Material icons with 24x24), so they look too big by default */
      [part] ::slotted(iron-icon[icon^="vaadin:"]) {
        padding: 0.25em;
        box-sizing: border-box !important;
      }

      [part="prefix"] {
        margin-left: -0.25em;
        margin-right: 0.25em;
      }

      [part="suffix"] {
        margin-left: 0.25em;
        margin-right: -0.25em;
      }

      /* Icon-only */

      :host([theme~="icon"]) {
        min-width: var(--lumo-button-size);
        padding-left: calc(var(--lumo-button-size) / 4);
        padding-right: calc(var(--lumo-button-size) / 4);
      }

      :host([theme~="icon"]) [part="prefix"],
      :host([theme~="icon"]) [part="suffix"] {
        margin-left: 0;
        margin-right: 0;
      }
    </style>
  </template>
</dom-module>`;

    document.head.appendChild($_documentContainer$k.content);

    /**
    @license
    Copyright (c) 2017 Vaadin Ltd.
    This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
    */
    /**
     * `<vaadin-button>` is a Web Component providing an accessible and customizable button.
     *
     * ```html
     * <vaadin-button>
     * </vaadin-button>
     * ```
     *
     * ```js
     * document.querySelector('vaadin-button').addEventListener('click', () => alert('Hello World!'));
     * ```
     *
     * ### Styling
     *
     * The following shadow DOM parts are exposed for styling:
     *
     * Part name | Description
     * ----------------|----------------
     * `label` | The label (text) inside the button
     * `prefix` | A slot for e.g. an icon before the label
     * `suffix` | A slot for e.g. an icon after the label
     *
     *
     * The following attributes are exposed for styling:
     *
     * Attribute | Description
     * --------- | -----------
     * `active` | Set when the button is pressed down, either with mouse, touch or the keyboard.
     * `disabled` | Set when the button is disabled.
     * `focus-ring` | Set when the button is focused using the keyboard.
     * `focused` | Set when the button is focused.
     *
     * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
     *
     * @memberof Vaadin
     * @mixes Vaadin.ElementMixin
     * @mixes Vaadin.ControlStateMixin
     * @mixes Vaadin.ThemableMixin
     * @mixes Polymer.GestureEventListeners
     * @demo demo/index.html
     */
    class ButtonElement extends
      ElementMixin$1(
        ControlStateMixin(
          ThemableMixin(
            GestureEventListeners(PolymerElement)))) {
      static get template() {
        return html$1`
    <style>
      :host {
        display: inline-block;
        position: relative;
        outline: none;
        white-space: nowrap;
      }

      :host([hidden]) {
        display: none !important;
      }

      /* Ensure the button is always aligned on the baseline */
      .vaadin-button-container::before {
        content: "\\2003";
        display: inline-block;
        width: 0;
      }

      .vaadin-button-container {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        width: 100%;
        height: 100%;
        min-height: inherit;
        text-shadow: inherit;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      [part="prefix"],
      [part="suffix"] {
        flex: none;
      }

      [part="label"] {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      #button {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: inherit;
      }
    </style>
    <div class="vaadin-button-container">
      <div part="prefix">
        <slot name="prefix"></slot>
      </div>
      <div part="label">
        <slot></slot>
      </div>
      <div part="suffix">
        <slot name="suffix"></slot>
      </div>
    </div>
    <button id="button" type="button"></button>
`;
      }

      static get is() {
        return 'vaadin-button';
      }

      static get version() {
        return '2.1.2';
      }

      ready() {
        super.ready();

        // Leaving default role in the native button, makes navigation announcement
        // being different when using focus navigation (tab) versus using normal
        // navigation (arrows). The first way announces the label on a button
        // since the focus is moved programmatically, and the second on a group.
        this.setAttribute('role', 'button');
        this.$.button.setAttribute('role', 'presentation');

        this._addActiveListeners();
      }

      /**
       * @protected
       */
      disconnectedCallback() {
        super.disconnectedCallback();

        // `active` state is preserved when the element is disconnected between keydown and keyup events.
        // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.
        if (this.hasAttribute('active')) {
          this.removeAttribute('active');
        }
      }

      _addActiveListeners() {
        addListener(this, 'down', () => !this.disabled && this.setAttribute('active', ''));
        addListener(this, 'up', () => this.removeAttribute('active'));
        this.addEventListener('keydown', e => !this.disabled && [13, 32].indexOf(e.keyCode) >= 0 && this.setAttribute('active', ''));
        this.addEventListener('keyup', () => this.removeAttribute('active'));
        this.addEventListener('blur', () => this.removeAttribute('active'));
      }

      /**
       * @protected
       */
      get focusElement() {
        return this.$.button;
      }
    }

    customElements.define(ButtonElement.is, ButtonElement);

    function mergeSchemas$4() {
      return {
          ui_schema: {
              ui_order: [
                "xmain"
              ],
              xmain: {
                ui_widget: 'x-main',
                ui_order: [
                  "subheader",
                  "header",
                  "main",
                ],
                ui_merged: true,
                subheader: fourSubheaderSchemas.call(this).ui_schema,
          header: fourHeaderSchemas.call(this).ui_schema,
          main: fiveMainSchemas.call(this).ui_schema
              }
              
          },
          json_schema: {
              type: 'Object',
              properties: {
                  xmain: {
                      type: 'Object',
                      properties: {
                        subheader: fourSubheaderSchemas.call(this).json_schema,
            header: fourHeaderSchemas.call(this).json_schema,
            main: fiveMainSchemas.call(this).json_schema
                      }
                  }
              }
          },
          data_schema: {
            xmain: {
              subheader: fourSubheaderSchemas.call(this).data_schema,
          header: fourHeaderSchemas.call(this).data_schema,
          main: fiveMainSchemas.call(this).data_schema
            }
            
          }
      }
    }



    let props$k = () => [
      { propKey: "comment", propValue: { type: String }, rx: false },
      {
        propKey: "startyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "startyear"]
      },
      {
        propKey: "scenario",
        rx: true,
        propValue: { type: String }
      },
      {
        propKey: "endyear",
        propValue: { type: String },
        rx: true,
        path: ["assumptions", "scenario" + chosenScenario, "endyear"]
      },
      {
        propKey: "demandrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "demand", "scenario" + chosenScenario]
      },
      {
        propKey: "volumedynamicrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumedynamic", "scenario" + chosenScenario]
      },
      {
        propKey: "volumepermanentrow",
        propValue: { type: Object },
        rx: false,
        path: ["investmentprogram", "volumepermanent", "scenario" + chosenScenario]
      },
      {
        propKey: "scenariodynamicrentamounts",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariodynamicrentperiods",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenarioinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "initial"]
      },
      {
        propKey: "scenarioreinvestment",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "investments", "scenario" + chosenScenario, "future"]
      },
      {
        propKey: "scenarioinflation",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "inflation"]
      },
      {
        propKey: "scenariodiscountrate",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rates", "scenario" + chosenScenario, "discount"]
      },
      {
        propKey: "scenariorent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "amount"]
      },
      {
        propKey: "scenariorentperiod",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "rent", "scenario" + chosenScenario, "period"]
      },
      {
        propKey: "scenariomaintenanceown",
        propValue: { type: Array },
        rx: true,
        path: [
          "assumptions",
          "maintenance",
          "scenario" + chosenScenario,
          "permanent"
        ]
      },
      {
        propKey: "scenariomaintenancerent",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "dynamic"]
      },
      {
        propKey: "scenariomaintenancenotused",
        propValue: { type: Array },
        rx: true,
        path: ["assumptions", "maintenance", "scenario" + chosenScenario, "notused"]
      },
      {
        propKey: "selectedpremises",
        propValue: { type: String },
        rx: true,
        path: ["menu", "selected"]
      },
      { propKey: "selected", propValue: { type: Number }, rx: true },
      { propKey: "renderdata", propValue: { type: Array }, rx: false },
      { 
        propKey: "newtable", 
        propValue: { type: Boolean }, 
        rx: true 
      },
      { propKey: "county", propValue: { type: Array }, rx: true, path: ["kth", "county"] },
      { propKey: "runrx", propValue: { type: Boolean }, rx: true },

    ];



    class XFive extends reduxmixin(props$k, rxmixin(props$k, LitElement)) {
      constructor() {
        super();
        this.renderxmain = false;
        this.okToRender = false;
        this.scenario = chosenScenario;
        this.newtable = true;
        this.county = [];
        this.runrx = true;
        this.testdb = new pouchdb('http://plex:1111111111@localhost:5984/sample');
      }

      tablePagingChangedHandler() {
        // console.log('HERE')
        this.newtable = !this.newtable;
      }

      gridChangedHandler(e) {
        console.log(e);
        if (e.detail.table == 0) {
          this.storeHolder.store.dispatch(
            action.kth_county_selected(e.detail.selected)
          );
        }

        if (e.detail.table == 1) {
          this.storeHolder.store.dispatch(
            action.kth_municipality_selected(e.detail.selected)
          );
        }

        if (e.detail.table == 2) {
          this.storeHolder.store.dispatch(
            action.kth_lkf_selected(e.detail.selected)
          );
        }

      }

      getCounty() {
        return !isEmpty$1(this.county) ? this.county : this.testdb.query('my_index/by_municipality', {
          startkey: 'A',
          group_level: 1,
        }).then(res => {
          let items = res.rows.map(row => {
            return row.key
          });
          let result = items.map((item, index) => {
            return { data: item[0], id:  index,
              selected: false,
            county: item[0],
          header: item[0]}
          });
          this.storeHolder.store.dispatch(
            action.kth_county(result)
          );

          return result

        }).catch(function (err) {
          console.log(err);
        })
      }

      firstUpdated() {
        super.firstUpdated();

        // this.getCounty()
        
        
        rx.latestCombiner([
          this.county$,
        ])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            getRenderData.call(this, mergeSchemas$4)
              .then(renderdata => {
                renderdata.forEach(prop$$1 => {
                  if (prop$$1.name == 'xmain') {
                    this.xmain = prop$$1;
                  }
                });

                this.renderxmain = this.xmain;
                console.log('T', this.xmain);
                this.okToRender = true;
                this.requestUpdate();
              });
          });

    }

    searchHandler(e) {
      console.log(e);
      this.testdb.query('my_index/by_county', {
          key: 'BLEKINGE',
          include_docs: true,
          limit: 1000000
          // group_level: 2,
      }).then(res => {
        let items = res.rows.map(row => {
          return row.key
        });
        // let result = items.map((item, index) => {
        //   return { data: item[0], id:  index,
        //     selected: false,
        //   county: item[0],
        // header: item[0]}
        // })
        // this.storeHolder.store.dispatch(
        //   action.kth_county(result)
        // );

        // return result
        console.log(res.rows);

      }).catch(function (err) {
        console.log(err);
      });
    }

    tableChangedHandler(e) {
        //console.log(e)
    }

      scenarioChangedHandler(e) {
        chosenScenario = +e.detail.index + 1;
        page = 0;
        this.scenario = chosenScenario;
        this.stateChanged(this.storeHolder.store.getState(), props$k);
      }

      getData(value, index) {
        return getData.call(this, value, index)
      }

      render() {
        return this.okToRender ? html`
      ${toRender.call(this, prepareRender(this.renderxmain))}
      <vaadin-button @click="${e => this.searchHandler(e)}">SÖK</vaadin-button>
        ` : html``
      }


    }

    customElements.define("x-five", XFive);



    // render() {
    //   return this.okToRender ? html`
    //        <style>
        
    //     .main {
    //         display: grid;
    //         grid-template-columns: repeat(12, 1fr);
    //         grid-template-rows: auto 50px auto;
    //         grid-column-gap: 20px;
    //         grid-template-areas: 
    //             ".      label    label      label    label      label    label      label    label      label    label      . "
    //             ".      .          .          .         .          .        .          .        .          .        .       ."
    //             ".      tableone       tableone           tableone       tableone           tableone   tabletwo      tabletwo    tabletwo      tabletwo      tabletwo         ."
                
    //             ;
                
    //         /* background-color: var(--color-bg); */

    //         height: 100%
    //     }

    //     .label {
    //         grid-area: label;
    //         /* background-color: var(--color-bg); */
          
    //         font: var(--font-mainheader);
    //         color: var(--color-text, white);
    //         border-bottom: 2px solid #FFFFFF; 

    //         display: flex;
    //         align-items: center;
    //         height: 50px;                                                                                        
    //     } 

    //     .tabletwo {
    //         grid-area: tabletwo;
    //         justify-self: end;

    //     }

    //     .tableone {
    //         grid-area: tableone;
    //         justify-self: start;
            
    //     }

    //     .tablethree {
    //         grid-area: tablethree;
    //     }

    //     .comment {
    //         grid-area: comment;
    //         justify-self: end;
    //         align-self: center;
    //         /* background-color: var(--colro-bg, blue); */
    //         color: var(--color-text, white);
    //         font: var(--font-rowcomment);
    //     }   


    // </style>
    //     <div class="main">
    //         <div class="label">Result</div>
            
    //             <x-chart .props="${this.testchart}" .test=${this.renderxmain} .years=${this.period} type="bar" class="tableone"></x-chart>
                

    //         <div class="comment">
    //         </div>
    //     </div>
    //       ` : html``
    // }

    let props$l = () => ([]);

    class XStartpage extends reduxmixin(props$l, LitElement) {
        // onBeforeEnter(location, commands, router) {
        //     if (!firebase.auth().currentUser) {
        //         return commands.redirect('/')
        //     }
        //     console.log('GOING INTO USERS')
        // }

        constructor() {
            super();
            firebase.auth().onAuthStateChanged((user) => {
                this.requestUpdate();
              });
            this.amHidden = 'hidden';
        }

        firstUpdated() {
            super.firstUpdated();
            // console.log(Popper)
        }

        clicked(e) {
            // console.log(e)
            var reference = this.shadowRoot.querySelector('.my-button');
            var popper = this.shadowRoot.querySelector('.my-popper');
            // console.log(reference)

            this.amHidden = 'visible';
            var popperInstance = new Popper(reference, popper, {
                placement: 'right'
            });
            this.requestUpdate();
        }

        clicked2(e) {
            this.amHidden = 'hidden';
            this.requestUpdate();
        }
        render() {

           
            return html`
        ${grid}
        <style>

            .grid {
                /* display: grid;
                grid-template-columns: 1fr 1fr 1fr 1fr;
                
                grid-template-areas: "one two three four"
                "five six seven eight"
                "nine ten eleven twelve"; */
                /* grid-template-rows: 72px auto 42px auto auto 42px auto; */
                grid-template-rows: 72px auto auto auto auto auto;
                min-height: 90vh;
                color: var(--color-text);
                font: var(--font-table-rowheader); 
            
  /* background-image: url("../images/bg-masthead.jpg"); */
  /* background-image: url("../images/daghemsbuggnade-blomman-pohja.png"); */

height: 100%; 

background-position: center;
background-repeat: no-repeat;
background-size: cover;
            }



            .my-popper {
                visibility: ${this.amHidden};
            }

            .header {
                font: var(--font-subheader);
                color: var(--color-text);
                /* justify-self: end; */
            }

            .text {
                font: var(--font-menu);
                color: var(--color-text);
                /* justify-self: end; */
            }

            .subheader {
                font: var(--font-subsubheader);
                color: var(--color-text);
             
                /* justify-self: end; */
            }
        </style>

        <div class="grid grid-12">
            <div class="col9span3"></div>
            <div class="col1span7 header">PARMACOMODELLEN</div>
            <div class="col1span5 text"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>
            <!-- <div class="col1span5 text">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div>
            <div class="col1span5 text">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div> -->

            <!-- <div class="col1span5 subheader">RUBRIK</div>
            <div class="col1span5 text">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div>
        -->
        </div>`;
        }
    }

    customElements.define('x-startpage', XStartpage);

    let props$m = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "buttons", propValue: { type: Object }, rx: true },
        { propKey: "okToRender", propValue: { type: Boolean }, rx: false },
      ]);

    class XMenuLogin extends rxmixin(props$m, LitElement) {

        constructor() {
            super();
            this.okToRender = false;
        }

        menuchangedHandler(index) {
            let event = new CustomEvent('menuchanged', { detail: {value: String(index)} });
            this.dispatchEvent(event);
        }
        
          firstUpdated() {
            super.firstUpdated();
            rx.latestCombiner([this.buttons$])
            .pipe(rx.undefinedElementRemover)
            .subscribe(() => {
                this.renderbuttons = this.buttons;
                this.okToRender = true;
                this.requestUpdate();
            });
        }

          updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => { 
                if (propName === "props") {
                    this.props.forEach(prop$$1 => {
                        if (prop$$1.name == 'buttons') {
                            this.buttons = prop$$1;
                        }
                    });
                }        });
        }


        render() {

            return this.okToRender ? html`
            <style>
@media only screen and (min-width : 660px) {   
                .menu {
                    display: grid;
                    grid-template-columns: repeat(${this.renderbuttons != undefined ? this.renderbuttons.json_schema.length : 1}, max-content);
                    grid-column-gap: 10px;
                }
}

@media only screen and (max-width : 659px) {   
                .menu {
                    display: grid;
                    grid-template-columns: repeat(${this.renderbuttons != undefined ? this.renderbuttons.json_schema.length : 1}, max-content);
                    grid-column-gap: 10px;
                    visibility: hidden;
                }
}

            </style>
            <div class="menu">
                ${toRender.call(this, prepareRender(this.renderbuttons))}
            </div>
            ` : html``
        }
    }

    customElements.define('x-menulogin', XMenuLogin);

    const usermixin = (props, superClass) => {
        return class UserMixedin extends superClass {

            static get properties() {
                return {...props().reduce((acc, prop) => {
                    return { ...acc, [prop.propKey]: prop.propValue }
                }, {}), user: {type: Object}}
            }


            constructor() {
                super();
                this.user = firebase.auth();
            }
        } 
    };

    let props$n = () => ([
      { propKey: "props", propValue: { type: Object }, rx: false },
      { propKey: "hidden", propValue: { type: Boolean }, rx: false },
    ]);

    class XLogin extends usermixin(props$n, LitElement) {
      keyHandler(e) {
        if (e.key === "Enter") {
          e.preventDefault();
          this.logintest(e, true);
        }
      }

      logintest(e, clean = false) {
        const redo = e => {
          this.shadowRoot.querySelector("#name").value = "";
          this.shadowRoot.querySelector("#password").value = "";
          e.target.blur();
          this.requestUpdate();
        };

        let name = this.shadowRoot.querySelector("#name").value;
        let password = this.shadowRoot.querySelector("#password").value;

        if (name != "" && password != "") {
          this.user.signInWithEmailAndPassword(name, password).catch(error => {
            redo(e);
          });
        } else {
          if (clean) {
            redo(e);
          }
        }
      }

      blurHandler(e) {
        this.style.setProperty("--focus-line-color", "var(--color-text)");
        this.style.setProperty("--focus-placeholder-opacity", "1");
        this.logintest(e);
      }

      focusHandler(e) {
        this.style.setProperty("--focus-line-color", "var(--color-attention)");
        this.style.setProperty("--focus-placeholder-opacity", "0.2");
        this.logintest(e);
      }

      firstUpdated() {
        super.firstUpdated();
        if (!this.user.currentUser) {
          this.shadowRoot.querySelector("#name").value = "";
          this.shadowRoot.querySelector("#password").value = "";
        }
        this.user.onAuthStateChanged(user => {
          if (user) {
            this.requestUpdate();
          } else {
            this.shadowRoot.querySelector("#name").value = "";
            this.shadowRoot.querySelector("#password").value = "";
            this.requestUpdate();
          }
        });
      }

      updated(changedProperties) {
        super.updated(changedProperties);
        changedProperties.forEach((oldValue, propName) => {
          
          if (propName === "props") {
            // console.log('THEPROPS', this.props)
            this.hidden = this.props.ui_schema.ui_options.hidden;
          }
        });
      }

      render() {
        return html`
      <style>
        :host {
          --focus-line-color: var(--color-text);
          --focus-placeholder-opacity: 1;
        }

        @media only screen and (min-width : 660px) { 
        .menu {
          display: grid;
          grid-template-columns: repeat(2, max-content);
          grid-column-gap: 10px;
          grid-template-areas: "zero one";
        }

        }

        @media only screen and (max-width : 659px) { 
        .menu {
          display: grid;
          grid-template-columns: repeat(2, max-content);
          grid-column-gap: 10px;
          grid-template-areas: "zero one";
          visibility: hidden;
        }

        }

        .item-0 {
          grid-area: zero;
        }
        .item-1 {
          grid-area: one;
        }

        .input {
          width: 100%;
          display: flex;
          border: 0px;
          box-sizing: border-box;
          text-align: left;
          padding: 0px;
          padding-right: 9px;
          background-color: var(--color-bg);

          height: 30px;
          justify-content: center;
          align-items: center;
          font: var(--font-menu);
          color: var(--color-menu);
          border-bottom: 2px solid var(--focus-line-color);
          outline: none !important;
          border-radius: 0px;
        }

        ::placeholder {
          /* Chrome, Firefox, Opera, Safari 10.1+ */
          color: var(--color-text);
          opacity: var(--focus-placeholder-opacity); /* Firefox */
        }

        .hidden {
          visibility: hidden;
        }

      </style>

    <div class="menu ${this.hidden ? 'hidden' : ''}">
            <input class="input item-0" type="textfield" id="name" placeholder="ANVÄNDARE" @keydown="${event =>
              this.keyHandler(event)}" @blur="${event =>
      this.blurHandler(event)}" @focus="${event =>
      this.focusHandler(event)}"></input>
            <input class="input item-1" type="textfield" id="password" placeholder="LÖSENORD" @keydown="${event =>
              this.keyHandler(event)}" @blur="${event =>
      this.blurHandler(event)}" @focus="${event =>
      this.focusHandler(event)}"></input>
        </div>
    `;
      }
    }

    customElements.define("x-login", XLogin);

    let props$o = () => ([
        { propKey: "props", propValue: { type: Object }, rx: false },
        { propKey: "value", propValue: { type: String }, rx: false },
        { propKey: "menuhidden", propValue: { type: Boolean }, rx: false },
      ]);

    class XIcon extends propsmixin(props$o, LitElement) {

        constructor() {
            super();
            this.menuhidden = true;
        }

        logoutHandler() {
            let event = new CustomEvent('loggedout');
            this.dispatchEvent(event);
        }

        loginHandler() {
            let event = new CustomEvent('loggedin');
            this.dispatchEvent(event);
        }

        hoverHandler() {
            // console.log('hover');
            this.menuhidden = !this.menuhidden;
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            changedProperties.forEach((oldValue, propName) => {
                if (propName === "props") {
                    this.value = this.props.data_schema.value;
                }        });
        }

        render() {
           
            return html`
            <style>
            .in {
                display: flex;
                justify-content: center;
                align-items: center;                    
                /* font: var(--font-menu);
                color: var(--color-menu);  */
                border-bottom: 2px solid var(--color-transparent);
                max-height: 2.5em;
                max-width: 2.5em;
                fill: var(--color-menu);
            }

            .out {
                display: flex;
                justify-content: center;
                align-items: center;                    
                /* font: var(--font-menu);
                color: var(--color-menu);  */
                border-bottom: 2px solid var(--color-transparent);
                max-height: 1.6em;
                max-width: 1.6em;
                fill: var(--color-menu);
            }

            .logout {
                background-color: rgba(0, 0, 0, 0.05);
                font: var(--font-menu);
                color: var(--color-menu);
                padding-top: 20px;
                padding-bottom: 20px;
                padding-left: 20px;
                padding-right: 20px;
                position: absolute;
                top: 80px;
                right: 104px;
                /* z-index: 1000; */
            }

            .hidden {
                visibility: hidden;
            }


            .selected {
                transition: border-bottom 0.1s ease-in;
                border-bottom: 2px solid var(--color-attention);
            }

            </style>
            <div class="logout ${this.menuhidden ? 'hidden' : ''}" @click="${e => this.logoutHandler(e)}" @mouseout="${e => this.hoverHandler(e)}">LOGGA UT</div>
            
${this.value == 'in' ? html`<div @click="${e => this.hoverHandler(e)}"><svg class="in" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 311.541 311.541" style="enable-background:new 0 0 311.541 311.541;" xml:space="preserve">
<g>
<g>
<path d="M155.771,26.331C69.74,26.331,0,96.071,0,182.102c0,37.488,13.25,71.883,35.314,98.761    c3.404-27.256,30.627-50.308,68.8-61.225c13.946,12.994,31.96,20.878,51.656,20.878c19.233,0,36.894-7.487,50.698-19.936    c38.503,11.871,65.141,36.27,66.017,64.63c24.284-27.472,39.056-63.555,39.056-103.108    C311.541,96.071,241.801,26.331,155.771,26.331z M155.771,222.069c-9.944,0-19.314-2.732-27.634-7.464    c-20.05-11.409-33.855-34.756-33.855-61.711c0-38.143,27.583-69.176,61.489-69.176c33.909,0,61.489,31.033,61.489,69.176    c0,27.369-14.237,51.004-34.786,62.215C174.379,219.523,165.346,222.069,155.771,222.069z" fill="#FFFFFF"/>
</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg></div>` : html`<div @click="${e => this.loginHandler(e)}"><svg class="out" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 95.667 95.667" style="enable-background:new 0 0 95.667 95.667;" xml:space="preserve">
<g>
<g>
<path d="M39.173,72.344l39.447-22.777c0.619-0.356,1-1.018,1-1.731s-0.381-1.375-1-1.732L39.173,23.324    c-0.619-0.357-1.381-0.357-2,0c-0.619,0.357-1,1.018-1,1.732v10.605H2.121c-1.104,0-2,0.896-2,2v20.344c0,1.104,0.896,2,2,2    h34.053v10.604c0,0.716,0.381,1.375,1,1.732c0.31,0.18,0.655,0.268,1,0.268C38.519,72.609,38.864,72.521,39.173,72.344z" fill="#FFFFFF"/>
<path d="M80.775,0H40.026c-1.104,0-2,0.896-2,2v6c0,1.104,0.896,2,2,2h40.749c2.632,0,4.771,2.141,4.771,4.771v66.125    c0,2.631-2.141,4.771-4.771,4.771H40.026c-1.104,0-2,0.896-2,2v6c0,1.104,0.896,2,2,2h40.749c8.146,0,14.771-6.627,14.771-14.771    V14.772C95.546,6.627,88.92,0,80.775,0z" fill="#FFFFFF"/>
</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg></div>`}


           

          
            
              
        `;
        }
    }

    customElements.define('x-icon', XIcon);

    function loggedinHeaderSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "header",
                ],
                header: {
                    ui_widget: "x-header",
                    ui_classnames: "header",
                    ui_order: [
                        "menu",
                        "icon"
                    ],
                    menu: {
                        ui_widget: "x-menulogin",
                        ui_order: [
                            "buttons",
                        ],
                        buttons: {
                            ui_widget: "x-menu-button",
                            ui_options:  {
                                selected: {
                                    fn: 'getData',
                                    parameter: 'selectedmenu'
                                },
                                // selected: true
                            },
                            ui_order: [
                                "value",
                            ]
                        },
                    },
                    icon: {
                        ui_widget: "x-icon",
                        ui_order: [
                            "value",
                        ]
                    },
                }
            },
            json_schema: {
                type: 'Object',
                properties: {
                    header: {
                        type: 'Object',
                        properties: {
                            menu: {
                                type: 'Object',
                                properties: {
                                    buttons: {
                                        type: 'Array',
                                        items: {
                                            type: 'Object',
                                            properties: {
                                                value: {
                                                    type: 'String',
                                                },
                                            },
                                        }
                                    },
                                }
                            },
                            icon: {
                                type: 'Object',
                                properties: {
                                    value: {
                                        type: 'String',
                                    },
                                },
                            }
                        }
                    },
                },

            },
            data_schema: {
                header: {
                    menu: {
                        buttons: [
                            {
                                value: "ANTAGANDEN",
                            },
                            {
                                value: "INVESTERINGSPROGRAM",
                            },
                            {
                                value: "KOSTNADER PER ÅR",
                            },
                            {
                                value: "RESULTAT",
                            },
                            {
                                value: "KTH",
                            },
                        ],
                    },
                    icon: {
                        value: "in",
                    }
                }
            }
        }
    }


    function loggedoutHeaderSchemas() {

        return {
            ui_schema: {
                ui_order: [
                    "header",
                ],
                header: {
                    ui_widget: "x-header",
                    ui_classnames: "header",
                    ui_order: [
                        "menu",
                        "icon"
                    ],
                    menu: {
                        ui_widget: "x-login",
                        ui_options:  {
                            hidden: this.loginhidden
                        },
                    },
                    icon: {
                        ui_widget: "x-icon",
                        ui_order: [
                            "value",
                        ]
                    }, 
                }
            },
            json_schema: {
                type: 'Object',
                properties: {
                    header: {
                        type: 'Object',
                        properties: {
                            menu: {
                                type: 'String',
                            },
                            icon: {
                                type: 'Object',
                                properties: {
                                    value: {
                                        type: 'String',
                                    },
                                },
                            }
                        }
                    },
                },

            },
            data_schema: {
                header: {
                    menu: "",
                    icon: {
                        value: "out",
                    }  
                }
            }
        }
    }




    // export function loggedinSchemas() {

    //     return {
    //         ui_schema: {
    //             ui_order: [
    //                 "header",
    //             ],
    //             header: {
    //                 ui_widget: "x-header",
    //                 ui_classnames: "header",
    //                 ui_order: [
    //                     "menu",
    //                     "login",
    //                 ],
    //                 menu: {
    //                     ui_widget: "x-menulogin",
    //                     ui_order: [
    //                         "buttons",
    //                     ],
    //                     buttons: {
    //                         ui_widget: "x-menu-button",
    //                         ui_options:  {
    //                             selected: {
    //                                 fn: 'getData',
    //                                 parameter: 'selectedmenu'
    //                             },
    //                             // selected: true
    //                         },
    //                         ui_order: [
    //                             "value",
    //                         ]
    //                     },
    //                 },
    //                 login: {
    //                     ui_widget: "x-login",
    //                 } 
    //             }
    //         },
    //         json_schema: {
    //             type: 'Object',
    //             properties: {
    //                 header: {
    //                     type: 'Object',
    //                     properties: {
    //                         menu: {
    //                             type: 'Object',
    //                             properties: {
    //                                 buttons: {
    //                                     type: 'Array',
    //                                     items: {
    //                                         type: 'Object',
    //                                         properties: {
    //                                             value: {
    //                                                 type: 'String',
    //                                             },
    //                                         },
    //                                     }
    //                                 },
    //                             }
    //                         },
    //                         login: {
    //                             type: 'String',
    //                         }
    //                     }
    //                 },
    //             },

    //         },
    //         data_schema: {
    //             header: {
    //                 menu: {
    //                     buttons: [
    //                         {
    //                             value: "ANTAGANDEN",
    //                         },
    //                         {
    //                             value: "INVESTERINGSPROGRAM",
    //                         },
    //                         {
    //                             value: "KOSTNADER PER ÅR",
    //                         },
    //                         {
    //                             value: "RESULTAT",
    //                         },
    //                         {
    //                             value: "LOGGA UT",
    //                         },
    //                         {
    //                             value: "TEST",
    //                         }
    //                     ],
    //                 },
    //                 login: ""  
    //             }
    //         }
    //     }
    // }

    function toArray$1(objectOrArray) {
      objectOrArray = objectOrArray || [];
      return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];
    }

    function log(msg) {
      return `[Vaadin.Router] ${msg}`;
    }

    function logValue(value) {
      if (typeof value !== 'object') {
        return String(value);
      }

      const stringType = Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];
      if (stringType === 'Object' || stringType === 'Array') {
        return `${stringType} ${JSON.stringify(value)}`;
      } else {
        return stringType;
      }
    }

    const MODULE = 'module';
    const NOMODULE = 'nomodule';
    const bundleKeys = [MODULE, NOMODULE];

    function ensureBundle(src) {
      if (!src.match(/.+\.[m]?js$/)) {
        throw new Error(
          log(`Unsupported type for bundle "${src}": .js or .mjs expected.`)
        );
      }
    }

    function ensureRoute(route) {
      if (!route || !isString(route.path)) {
        throw new Error(
          log(`Expected route config to be an object with a "path" string property, or an array of such objects`)
        );
      }

      const bundle = route.bundle;

      const stringKeys = ['component', 'redirect', 'bundle'];
      if (
        !isFunction$1(route.action) &&
        !Array.isArray(route.children) &&
        !isFunction$1(route.children) &&
        !isObject$1(bundle) &&
        !stringKeys.some(key => isString(route[key]))
      ) {
        throw new Error(
          log(
            `Expected route config "${route.path}" to include either "${stringKeys.join('", "')}" ` +
            `or "action" function but none found.`
          )
        );
      }

      if (bundle) {
        if (isString(bundle)) {
          ensureBundle(bundle);
        } else if (!bundleKeys.some(key => key in bundle)) {
          throw new Error(
            log('Expected route bundle to include either "' + NOMODULE + '" or "' + MODULE + '" keys, or both')
          );
        } else {
          bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));
        }
      }

      if (route.redirect) {
        ['bundle', 'component'].forEach(overriddenProp => {
          if (overriddenProp in route) {
            console.warn(
              log(
                `Route config "${route.path}" has both "redirect" and "${overriddenProp}" properties, ` +
                `and "redirect" will always override the latter. Did you mean to only use "${overriddenProp}"?`
              )
            );
          }
        });
      }
    }

    function ensureRoutes(routes) {
      toArray$1(routes).forEach(route => ensureRoute(route));
    }

    function loadScript(src, key) {
      let script = document.head.querySelector('script[src="' + src + '"][async]');
      if (!script) {
        script = document.createElement('script');
        script.setAttribute('src', src);
        if (key === MODULE) {
          script.setAttribute('type', MODULE);
        } else if (key === NOMODULE) {
          script.setAttribute(NOMODULE, '');
        }
        script.async = true;
      }
      return new Promise((resolve, reject) => {
        script.onreadystatechange = script.onload = e => {
          script.__dynamicImportLoaded = true;
          resolve(e);
        };
        script.onerror = e => {
          if (script.parentNode) {
            script.parentNode.removeChild(script);
          }
          reject(e);
        };
        if (script.parentNode === null) {
          document.head.appendChild(script);
        } else if (script.__dynamicImportLoaded) {
          resolve();
        }
      });
    }

    function loadBundle(bundle) {
      if (isString(bundle)) {
        return loadScript(bundle);
      } else {
        return Promise.race(
          bundleKeys
            .filter(key => key in bundle)
            .map(key => loadScript(bundle[key], key))
        );
      }
    }

    function fireRouterEvent(type, detail) {
      return !window.dispatchEvent(new CustomEvent(
        `vaadin-router-${type}`,
        {cancelable: type === 'go', detail}
      ));
    }

    function isObject$1(o) {
      // guard against null passing the typeof check
      return typeof o === 'object' && !!o;
    }

    function isFunction$1(f) {
      return typeof f === 'function';
    }

    function isString(s) {
      return typeof s === 'string';
    }

    function getNotFoundError(context) {
      const error = new Error(log(`Page not found (${context.pathname})`));
      error.context = context;
      error.code = 404;
      return error;
    }

    const notFoundResult = new (class NotFoundResult {})();

    /* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */
    function getAnchorOrigin(anchor) {
      // IE11: on HTTP and HTTPS the default port is not included into
      // window.location.origin, so won't include it here either.
      const port = anchor.port;
      const protocol = anchor.protocol;
      const defaultHttp = protocol === 'http:' && port === '80';
      const defaultHttps = protocol === 'https:' && port === '443';
      const host = (defaultHttp || defaultHttps)
        ? anchor.hostname // does not include the port number (e.g. www.example.org)
        : anchor.host; // does include the port number (e.g. www.example.org:80)
      return `${protocol}//${host}`;
    }

    // The list of checks is not complete:
    //  - SVG support is missing
    //  - the 'rel' attribute is not considered
    function vaadinRouterGlobalClickHandler(event) {
      // ignore the click if the default action is prevented
      if (event.defaultPrevented) {
        return;
      }

      // ignore the click if not with the primary mouse button
      if (event.button !== 0) {
        return;
      }

      // ignore the click if a modifier key is pressed
      if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {
        return;
      }

      // find the <a> element that the click is at (or within)
      let anchor = event.target;
      const path = event.composedPath
        ? event.composedPath()
        : (event.path || []);

      // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays
      // example to check: `for...of` loop here throws the "Not yet implemented" error
      for (let i = 0; i < path.length; i++) {
        const target = path[i];
        if (target.nodeName && target.nodeName.toLowerCase() === 'a') {
          anchor = target;
          break;
        }
      }

      while (anchor && anchor.nodeName.toLowerCase() !== 'a') {
        anchor = anchor.parentNode;
      }

      // ignore the click if not at an <a> element
      if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {
        return;
      }

      // ignore the click if the <a> element has a non-default target
      if (anchor.target && anchor.target.toLowerCase() !== '_self') {
        return;
      }

      // ignore the click if the <a> element has the 'download' attribute
      if (anchor.hasAttribute('download')) {
        return;
      }

      // ignore the click if the target URL is a fragment on the current page
      if (anchor.pathname === window.location.pathname && anchor.hash !== '') {
        return;
      }

      // ignore the click if the target is external to the app
      // In IE11 HTMLAnchorElement does not have the `origin` property
      const origin = anchor.origin || getAnchorOrigin(anchor);
      if (origin !== window.location.origin) {
        return;
      }

      // if none of the above, convert the click into a navigation event
      if (fireRouterEvent('go', {pathname: anchor.pathname})) {
        event.preventDefault();
      }
    }

    /**
     * A navigation trigger for Vaadin Router that translated clicks on `<a>` links
     * into Vaadin Router navigation events.
     *
     * Only regular clicks on in-app links are translated (primary mouse button, no
     * modifier keys, the target href is within the app's URL space).
     *
     * @memberOf Vaadin.Router.Triggers
     * @type {NavigationTrigger}
     */
    const CLICK = {
      activate() {
        window.document.addEventListener('click', vaadinRouterGlobalClickHandler);
      },

      inactivate() {
        window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);
      }
    };

    // PopStateEvent constructor shim
    const isIE = /Trident/.test(navigator.userAgent);

    /* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */
    if (isIE && !isFunction$1(window.PopStateEvent)) {
      window.PopStateEvent = function(inType, params) {
        params = params || {};
        var e = document.createEvent('Event');
        e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));
        e.state = params.state || null;
        return e;
      };
      window.PopStateEvent.prototype = window.Event.prototype;
    }

    function vaadinRouterGlobalPopstateHandler(event) {
      if (event.state === 'vaadin-router-ignore') {
        return;
      }
      fireRouterEvent('go', {pathname: window.location.pathname});
    }

    /**
     * A navigation trigger for Vaadin Router that translates popstate events into
     * Vaadin Router navigation events.
     *
     * @memberOf Vaadin.Router.Triggers
     * @type {NavigationTrigger}
     */
    const POPSTATE = {
      activate() {
        window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);
      },

      inactivate() {
        window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);
      }
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse$1;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * Default configs.
     */
    var DEFAULT_DELIMITER = '/';
    var DEFAULT_DELIMITERS = './';

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?"]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined]
      '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse$1 (str, options) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER;
      var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS;
      var pathEscaped = false;
      var res;

      while ((res = PATH_REGEXP.exec(str)) !== null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          pathEscaped = true;
          continue
        }

        var prev = '';
        var next = str[index];
        var name = res[2];
        var capture = res[3];
        var group = res[4];
        var modifier = res[5];

        if (!pathEscaped && path.length) {
          var k = path.length - 1;

          if (delimiters.indexOf(path[k]) > -1) {
            prev = path[k];
            path = path.slice(0, k);
          }
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
          pathEscaped = false;
        }

        var partial = prev !== '' && next !== undefined && next !== prev;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = prev || defaultDelimiter;
        var pattern = capture || group;

        tokens.push({
          name: name || key++,
          prefix: prev,
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          partial: partial,
          pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'
        });
      }

      // Push any remaining characters.
      if (path || index < str.length) {
        tokens.push(path + str.substr(index));
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile (str, options) {
      return tokensToFunction(parse$1(str, options))
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
        }
      }

      return function (data, options) {
        var path = '';
        var encode = (options && options.encode) || encodeURIComponent;

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;
            continue
          }

          var value = data ? data[token.name] : undefined;
          var segment;

          if (Array.isArray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but got array')
            }

            if (value.length === 0) {
              if (token.optional) continue

              throw new TypeError('Expected "' + token.name + '" to not be empty')
            }

            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j], token);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            segment = encode(String(value), token);

            if (!matches[i].test(segment)) {
              throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"')
            }

            path += token.prefix + segment;
            continue
          }

          if (token.optional) {
            // Prepend partial segment prefixes.
            if (token.partial) path += token.prefix;

            continue
          }

          throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'))
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$/()])/g, '\\$1')
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags (options) {
      return options && options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {Array=}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp (path, keys) {
      if (!keys) return path

      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            pattern: null
          });
        }
      }

      return path
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      return new RegExp('(?:' + parts.join('|') + ')', flags(options))
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function stringToRegexp (path, keys, options) {
      return tokensToRegExp(parse$1(path, options), keys, options)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}  tokens
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function tokensToRegExp (tokens, keys, options) {
      options = options || {};

      var strict = options.strict;
      var end = options.end !== false;
      var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);
      var delimiters = options.delimiters || DEFAULT_DELIMITERS;
      var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');
      var route = '';
      var isEndDelimited = tokens.length === 0;

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
          isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;
        } else {
          var prefix = escapeString(token.prefix);
          var capture = token.repeat
            ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*'
            : token.pattern;

          if (keys) keys.push(token);

          if (token.optional) {
            if (token.partial) {
              route += prefix + '(' + capture + ')?';
            } else {
              route += '(?:' + prefix + '(' + capture + '))?';
            }
          } else {
            route += prefix + '(' + capture + ')';
          }
        }
      }

      if (end) {
        if (!strict) route += '(?:' + delimiter + ')?';

        route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
      } else {
        if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';
        if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';
      }

      return new RegExp('^' + route, flags(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {Array=}                keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp (path, keys, options) {
      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys)
      }

      if (Array.isArray(path)) {
        return arrayToRegexp(/** @type {!Array} */ (path), keys, options)
      }

      return stringToRegexp(/** @type {string} */ (path), keys, options)
    }
    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    /**
     * Universal Router (https://www.kriasoft.com/universal-router/)
     *
     * Copyright (c) 2015-present Kriasoft.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.txt file in the root directory of this source tree.
     */

    const {hasOwnProperty} = Object.prototype;
    const cache = new Map();
    // see https://github.com/pillarjs/path-to-regexp/issues/148
    cache.set('|false', {
      keys: [],
      pattern: /(?:)/
    });

    function decodeParam(val) {
      try {
        return decodeURIComponent(val);
      } catch (err) {
        return val;
      }
    }

    function matchPath(routepath, path, exact, parentKeys, parentParams) {
      exact = !!exact;
      const cacheKey = `${routepath}|${exact}`;
      let regexp = cache.get(cacheKey);

      if (!regexp) {
        const keys = [];
        regexp = {
          keys,
          pattern: pathToRegexp_1(routepath, keys, {
            end: exact,
            strict: routepath === ''
          }),
        };
        cache.set(cacheKey, regexp);
      }

      const m = regexp.pattern.exec(path);
      if (!m) {
        return null;
      }

      const params = Object.assign({}, parentParams);

      for (let i = 1; i < m.length; i++) {
        const key = regexp.keys[i - 1];
        const prop = key.name;
        const value = m[i];
        if (value !== undefined || !hasOwnProperty.call(params, prop)) {
          if (key.repeat) {
            params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];
          } else {
            params[prop] = value ? decodeParam(value) : value;
          }
        }
      }

      return {
        path: m[0],
        keys: (parentKeys || []).concat(regexp.keys),
        params,
      };
    }

    /**
     * Universal Router (https://www.kriasoft.com/universal-router/)
     *
     * Copyright (c) 2015-present Kriasoft.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.txt file in the root directory of this source tree.
     */

    /**
     * Traverses the routes tree and matches its nodes to the given pathname from
     * the root down to the leaves. Each match consumes a part of the pathname and
     * the matching process continues for as long as there is a matching child
     * route for the remaining part of the pathname.
     *
     * The returned value is a lazily evaluated iterator.
     *
     * The leading "/" in a route path matters only for the root of the routes
     * tree (or if all parent routes are ""). In all other cases a leading "/" in
     * a child route path has no significance.
     *
     * The trailing "/" in a _route path_ matters only for the leaves of the
     * routes tree. A leaf route with a trailing "/" matches only a pathname that
     * also has a trailing "/".
     *
     * The trailing "/" in a route path does not affect matching of child routes
     * in any way.
     *
     * The trailing "/" in a _pathname_ generally does not matter (except for
     * the case of leaf nodes described above).
     *
     * The "" and "/" routes have special treatment:
     *  1. as a single route
     *     the "" and "/" routes match only the "" and "/" pathnames respectively
     *  2. as a parent in the routes tree
     *     the "" route matches any pathname without consuming any part of it
     *     the "/" route matches any absolute pathname consuming its leading "/"
     *  3. as a leaf in the routes tree
     *     the "" and "/" routes match only if the entire pathname is consumed by
     *         the parent routes chain. In this case "" and "/" are equivalent.
     *  4. several directly nested "" or "/" routes
     *     - directly nested "" or "/" routes are 'squashed' (i.e. nesting two
     *       "/" routes does not require a double "/" in the pathname to match)
     *     - if there are only "" in the parent routes chain, no part of the
     *       pathname is consumed, and the leading "/" in the child routes' paths
     *       remains significant
     *
     * Side effect:
     *   - the routes tree { path: '' } matches only the '' pathname
     *   - the routes tree { path: '', children: [ { path: '' } ] } matches any
     *     pathname (for the tree root)
     *
     * Prefix matching can be enabled also by `children: true`.
     */
    function matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {
      let match;
      let childMatches;
      let childIndex = 0;
      let routepath = route.path || '';
      if (routepath.charAt(0) === '/') {
        if (ignoreLeadingSlash) {
          routepath = routepath.substr(1);
        }
        ignoreLeadingSlash = true;
      }

      return {
        next(routeToSkip) {
          if (route === routeToSkip) {
            return {done: true};
          }

          const children = route.__children = route.__children || route.children;

          if (!match) {
            match = matchPath(routepath, pathname, !children, parentKeys, parentParams);

            if (match) {
              return {
                done: false,
                value: {
                  route,
                  keys: match.keys,
                  params: match.params,
                  path: match.path
                },
              };
            }
          }

          if (match && children) {
            while (childIndex < children.length) {
              if (!childMatches) {
                const childRoute = children[childIndex];
                childRoute.parent = route;

                let matchedLength = match.path.length;
                if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {
                  matchedLength += 1;
                }

                childMatches = matchRoute(
                  childRoute,
                  pathname.substr(matchedLength),
                  ignoreLeadingSlash,
                  match.keys,
                  match.params
                );
              }

              const childMatch = childMatches.next(routeToSkip);
              if (!childMatch.done) {
                return {
                  done: false,
                  value: childMatch.value,
                };
              }

              childMatches = null;
              childIndex++;
            }
          }

          return {done: true};
        },
      };
    }

    /**
     * Universal Router (https://www.kriasoft.com/universal-router/)
     *
     * Copyright (c) 2015-present Kriasoft.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.txt file in the root directory of this source tree.
     */

    function resolveRoute(context) {
      if (isFunction$1(context.route.action)) {
        return context.route.action(context);
      }
      return undefined;
    }

    /**
     * Universal Router (https://www.kriasoft.com/universal-router/)
     *
     * Copyright (c) 2015-present Kriasoft.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.txt file in the root directory of this source tree.
     */

    function isChildRoute(parentRoute, childRoute) {
      let route = childRoute;
      while (route) {
        route = route.parent;
        if (route === parentRoute) {
          return true;
        }
      }
      return false;
    }

    function generateErrorMessage(currentContext) {
      let errorMessage = `Path '${currentContext.pathname}' is not properly resolved due to an error.`;
      const routePath = (currentContext.route || {}).path;
      if (routePath) {
        errorMessage += ` Resolution had failed on route: '${routePath}'`;
      }
      return errorMessage;
    }

    function addRouteToChain(context, match) {
      const {route, path} = match;
      function shouldDiscardOldChain(oldChain, route) {
        return !route.parent || !oldChain || !oldChain.length || oldChain[oldChain.length - 1].route !== route.parent;
      }

      if (route && !route.__synthetic) {
        const item = {path, route};
        if (shouldDiscardOldChain(context.chain, route)) {
          context.chain = [item];
        } else {
          context.chain.push(item);
        }
      }
    }

    /**
     * @memberof Vaadin
     */
    class Resolver {
      constructor(routes, options = {}) {
        if (Object(routes) !== routes) {
          throw new TypeError('Invalid routes');
        }

        this.baseUrl = options.baseUrl || '';
        this.errorHandler = options.errorHandler;
        this.resolveRoute = options.resolveRoute || resolveRoute;
        this.context = Object.assign({resolver: this}, options.context);
        this.root = Array.isArray(routes) ? {path: '', __children: routes, parent: null, __synthetic: true} : routes;
        this.root.parent = null;
      }

      /**
       * Returns the current list of routes (as a shallow copy). Adding / removing
       * routes to / from the returned array does not affect the routing config,
       * but modifying the route objects does.
       *
       * @return {!Array<!Route>}
       */
      getRoutes() {
        return [...this.root.__children];
      }

      /**
       * Sets the routing config (replacing the existing one).
       *
       * @param {!Array<!Route>|!Route} routes a single route or an array of those
       *    (the array is shallow copied)
       */
      setRoutes(routes) {
        ensureRoutes(routes);
        const newRoutes = [...toArray$1(routes)];
        this.root.__children = newRoutes;
      }

      /**
       * Appends one or several routes to the routing config and returns the
       * effective routing config after the operation.
       *
       * @param {!Array<!Route>|!Route} routes a single route or an array of those
       *    (the array is shallow copied)
       * @return {!Array<!Route>}
       * @protected
       */
      addRoutes(routes) {
        ensureRoutes(routes);
        this.root.__children.push(...toArray$1(routes));
        return this.getRoutes();
      }

      /**
       * Removes all existing routes from the routing config.
       */
      removeRoutes() {
        this.setRoutes([]);
      }

      /**
       * Asynchronously resolves the given pathname, i.e. finds all routes matching
       * the pathname and tries resolving them one after another in the order they
       * are listed in the routes config until the first non-null result.
       *
       * Returns a promise that is fulfilled with the return value of an object that consists of the first
       * route handler result that returns something other than `null` or `undefined` and context used to get this result.
       *
       * If no route handlers return a non-null result, or if no route matches the
       * given pathname the returned promise is rejected with a 'page not found'
       * `Error`.
       *
       * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
       *    resolve or a context object with a `pathname` property and other
       *    properties to pass to the route resolver functions.
       * @return {!Promise<any>}
       */
      resolve(pathnameOrContext) {
        const context = Object.assign(
          {},
          this.context,
          isString(pathnameOrContext) ? {pathname: pathnameOrContext} : pathnameOrContext
        );
        const match = matchRoute(
          this.root,
          this.__normalizePathname(context.pathname),
          this.baseUrl
        );
        const resolve = this.resolveRoute;
        let matches = null;
        let nextMatches = null;
        let currentContext = context;

        function next(resume, parent = matches.value.route, prevResult) {
          const routeToSkip = prevResult === null && matches.value.route;
          matches = nextMatches || match.next(routeToSkip);
          nextMatches = null;

          if (!resume) {
            if (matches.done || !isChildRoute(parent, matches.value.route)) {
              nextMatches = matches;
              return Promise.resolve(notFoundResult);
            }
          }

          if (matches.done) {
            return Promise.reject(getNotFoundError(context));
          }

          addRouteToChain(context, matches.value);
          currentContext = Object.assign({}, context, matches.value);

          return Promise.resolve(resolve(currentContext)).then(resolution => {
            if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {
              currentContext.result = resolution.result || resolution;
              return currentContext;
            }
            return next(resume, parent, resolution);
          });
        }

        context.next = next;

        return Promise.resolve()
          .then(() => next(true, this.root))
          .catch((error) => {
            const errorMessage = generateErrorMessage(currentContext);
            if (!error) {
              error = new Error(errorMessage);
            } else {
              console.warn(errorMessage);
            }
            error.context = error.context || currentContext;
            // DOMException has its own code which is read-only
            if (!(error instanceof DOMException)) {
              error.code = error.code || 500;
            }
            if (this.errorHandler) {
              currentContext.result = this.errorHandler(error);
              return currentContext;
            }
            throw error;
          });
      }

      /**
       * URL constructor polyfill hook. Creates and returns an URL instance.
       */
      static __createUrl(url, base) {
        return new URL(url, base);
      }

      /**
       * If the baseUrl property is set, transforms the baseUrl and returns the full
       * actual `base` string for using in the `new URL(path, base);` and for
       * prepernding the paths with. The returned base ends with a trailing slash.
       *
       * Otherwise, returns empty string.
       */
      get __effectiveBaseUrl() {
        return this.baseUrl
          ? this.constructor.__createUrl(
            this.baseUrl,
            document.baseURI || document.URL
          ).href.replace(/[^\/]*$/, '')
          : '';
      }

      /**
       * If the baseUrl is set, matches the pathname with the router’s baseUrl,
       * and returns the local pathname with the baseUrl stripped out.
       *
       * If the pathname does not match the baseUrl, returns undefined.
       *
       * If the `baseUrl` is not set, returns the unmodified pathname argument.
       */
      __normalizePathname(pathname) {
        if (!this.baseUrl) {
          // No base URL, no need to transform the pathname.
          return pathname;
        }

        const base = this.__effectiveBaseUrl;
        const normalizedUrl = this.constructor.__createUrl(pathname, base).href;
        if (normalizedUrl.slice(0, base.length) === base) {
          return normalizedUrl.slice(base.length);
        }
      }
    }

    Resolver.pathToRegexp = pathToRegexp_1;

    /**
     * Universal Router (https://www.kriasoft.com/universal-router/)
     *
     * Copyright (c) 2015-present Kriasoft.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.txt file in the root directory of this source tree.
     */

    const {pathToRegexp: pathToRegexp$1} = Resolver;
    const cache$1 = new Map();

    function cacheRoutes(routesByName, route, routes) {
      const name = route.name || route.component;
      if (name) {
        if (routesByName.has(name)) {
          routesByName.get(name).push(route);
        } else {
          routesByName.set(name, [route]);
        }
      }

      if (Array.isArray(routes)) {
        for (let i = 0; i < routes.length; i++) {
          const childRoute = routes[i];
          childRoute.parent = route;
          cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);
        }
      }
    }

    function getRouteByName(routesByName, routeName) {
      const routes = routesByName.get(routeName);
      if (routes && routes.length > 1) {
        throw new Error(
          `Duplicate route with name "${routeName}".`
          + ` Try seting unique 'name' route properties.`
        );
      }
      return routes && routes[0];
    }

    function getRoutePath(route) {
      let path = route.path;
      path = Array.isArray(path) ? path[0] : path;
      return path !== undefined ? path : '';
    }

    function generateUrls(router, options = {}) {
      if (!(router instanceof Resolver)) {
        throw new TypeError('An instance of Resolver is expected');
      }

      const routesByName = new Map();

      return (routeName, params) => {
        let route = getRouteByName(routesByName, routeName);
        if (!route) {
          routesByName.clear(); // clear cache
          cacheRoutes(routesByName, router.root, router.root.__children);

          route = getRouteByName(routesByName, routeName);
          if (!route) {
            throw new Error(`Route "${routeName}" not found`);
          }
        }

        let regexp = cache$1.get(route.fullPath);
        if (!regexp) {
          let fullPath = getRoutePath(route);
          let rt = route.parent;
          while (rt) {
            const path = getRoutePath(rt);
            if (path) {
              fullPath = path.replace(/\/$/, '') + '/' + fullPath.replace(/^\//, '');
            }
            rt = rt.parent;
          }
          const tokens = pathToRegexp$1.parse(fullPath);
          const toPath = pathToRegexp$1.tokensToFunction(tokens);
          const keys = Object.create(null);
          for (let i = 0; i < tokens.length; i++) {
            if (!isString(tokens[i])) {
              keys[tokens[i].name] = true;
            }
          }
          regexp = {toPath, keys};
          cache$1.set(fullPath, regexp);
          route.fullPath = fullPath;
        }

        let url = regexp.toPath(params, options) || '/';

        if (options.stringifyQueryParams && params) {
          const queryParams = {};
          const keys = Object.keys(params);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (!regexp.keys[key]) {
              queryParams[key] = params[key];
            }
          }
          const query = options.stringifyQueryParams(queryParams);
          if (query) {
            url += query.charAt(0) === '?' ? query : `?${query}`;
          }
        }

        return url;
      };
    }

    /**
     * @typedef NavigationTrigger
     * @type {object}
     * @property {function()} activate
     * @property {function()} inactivate
     */

    /** @type {Array<NavigationTrigger>} */
    let triggers = [];

    function setNavigationTriggers(newTriggers) {
      triggers.forEach(trigger => trigger.inactivate());

      newTriggers.forEach(trigger => trigger.activate());

      triggers = newTriggers;
    }

    const willAnimate = elem => {
      const name = getComputedStyle(elem).getPropertyValue('animation-name');
      return name && name !== 'none';
    };

    const waitForAnimation = (elem, cb) => {
      const listener = () => {
        elem.removeEventListener('animationend', listener);
        cb();
      };
      elem.addEventListener('animationend', listener);
    };

    function animate(elem, className) {
      elem.classList.add(className);

      return new Promise(resolve => {
        if (willAnimate(elem)) {
          const rect = elem.getBoundingClientRect();
          const size = `height: ${rect.bottom - rect.top}px; width: ${rect.right - rect.left}px`;
          elem.setAttribute('style', `position: absolute; ${size}`);
          waitForAnimation(elem, () => {
            elem.classList.remove(className);
            elem.removeAttribute('style');
            resolve();
          });
        } else {
          elem.classList.remove(className);
          resolve();
        }
      });
    }

    const MAX_REDIRECT_COUNT = 256;

    function isResultNotEmpty(result) {
      return result !== null && result !== undefined;
    }

    function copyContextWithoutNext(context) {
      const copy = Object.assign({}, context);
      delete copy.next;
      return copy;
    }

    function createLocation({pathname = '', chain = [], params = {}, redirectFrom, resolver}, route) {
      const routes = chain.map(item => item.route);
      return {
        baseUrl: resolver && resolver.baseUrl || '',
        pathname,
        routes,
        route: route || routes.length && routes[routes.length - 1] || null,
        params,
        redirectFrom,
        getUrl: (userParams = {}) => getPathnameForRouter(
          Router.pathToRegexp.compile(
            getMatchedPath(routes)
          )(Object.assign({}, params, userParams)),
          resolver
        )
      };
    }

    function createRedirect(context, pathname) {
      const params = Object.assign({}, context.params);
      return {
        redirect: {
          pathname,
          from: context.pathname,
          params
        }
      };
    }

    function renderComponent(context, component) {
      const element = document.createElement(component);
      element.location = createLocation(context);
      const index = context.chain.map(item => item.route).indexOf(context.route);
      context.chain[index].element = element;
      return element;
    }

    function runCallbackIfPossible(callback, args, thisArg) {
      if (isFunction$1(callback)) {
        return callback.apply(thisArg, args);
      }
    }

    function amend(amendmentFunction, args, element) {
      return amendmentResult => {
        if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {
          return amendmentResult;
        }

        if (element) {
          return runCallbackIfPossible(element[amendmentFunction], args, element);
        }
      };
    }

    function processNewChildren(newChildren, route) {
      if (!Array.isArray(newChildren) && !isObject$1(newChildren)) {
        throw new Error(
          log(
            `Incorrect "children" value for the route ${route.path}: expected array or object, but got ${newChildren}`
          )
        );
      }

      route.__children = [];
      const childRoutes = toArray$1(newChildren);
      for (let i = 0; i < childRoutes.length; i++) {
        ensureRoute(childRoutes[i]);
        route.__children.push(childRoutes[i]);
      }
    }

    function removeDomNodes(nodes) {
      if (nodes && nodes.length) {
        const parent = nodes[0].parentNode;
        for (let i = 0; i < nodes.length; i++) {
          parent.removeChild(nodes[i]);
        }
      }
    }

    function getPathnameForRouter(pathname, router) {
      const base = router.__effectiveBaseUrl;
      return base
        ? router.constructor.__createUrl(pathname.replace(/^\//, ''), base).pathname
        : pathname;
    }

    function getMatchedPath(chain) {
      return chain.map(item => item.path).reduce((a, b) => {
        if (b.length) {
          return a.replace(/\/$/, '') + '/' + b.replace(/^\//, '');
        }
        return a;
      }, '');
    }

    /**
     * A simple client-side router for single-page applications. It uses
     * express-style middleware and has a first-class support for Web Components and
     * lazy-loading. Works great in Polymer and non-Polymer apps.
     *
     * Use `new Router(outlet, options)` to create a new Router instance.
     *
     * * The `outlet` parameter is a reference to the DOM node to render
     *   the content into.
     *
     * * The `options` parameter is an optional object with options. The following
     *   keys are supported:
     *   * `baseUrl` — the initial value for [
     *     the `baseUrl` property
     *   ](#/classes/Vaadin.Router#property-baseUrl)
     *
     * The Router instance is automatically subscribed to navigation events
     * on `window`.
     *
     * See [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html) for the detailed usage demo and code snippets.
     *
     * See also detailed API docs for the following methods, for the advanced usage:
     *
     * * [setOutlet](#/classes/Vaadin.Router#method-setOutlet) – should be used to configure the outlet.
     * * [setTriggers](#/classes/Vaadin.Router#method-setTriggers) – should be used to configure the navigation events.
     * * [setRoutes](#/classes/Vaadin.Router#method-setRoutes) – should be used to configure the routes.
     *
     * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.
     *
     * @memberof Vaadin
     * @extends Vaadin.Resolver
     * @demo demo/index.html
     * @summary JavaScript class that renders different DOM content depending on
     *    a given path. It can re-render when triggered or automatically on
     *    'popstate' and / or 'click' events.
     */
    class Router extends Resolver {

      /**
       * Creates a new Router instance with a given outlet, and
       * automatically subscribes it to navigation events on the `window`.
       * Using a constructor argument or a setter for outlet is equivalent:
       *
       * ```
       * const router = new Vaadin.Router();
       * router.setOutlet(outlet);
       * ```
       * @param {?Node} outlet
       * @param {?RouterOptions} options
       */
      constructor(outlet, options) {
        const baseElement = document.head.querySelector('base');
        super([], Object.assign({
          // Default options
          baseUrl: baseElement && baseElement.getAttribute('href')
        }, options));

        this.resolveRoute = context => this.__resolveRoute(context);

        const triggers = Router.NavigationTrigger;
        Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));

        /**
         * The base URL for all routes in the router instance. By default,
         * takes the `<base href>` attribute value if the base element exists
         * in the `<head>`.
         *
         * @public
         * @type {string}
         */
        this.baseUrl;

        /**
         * A promise that is settled after the current render cycle completes. If
         * there is no render cycle in progress the promise is immediately settled
         * with the last render cycle result.
         *
         * @public
         * @type {!Promise<!Vaadin.Router.Location>}
         */
        this.ready;
        this.ready = Promise.resolve(outlet);

        /**
         * Contains read-only information about the current router location:
         * pathname, active routes, parameters. See the
         * [Location type declaration](#/classes/Vaadin.Router.Location)
         * for more details.
         *
         * @public
         * @type {!Vaadin.Router.Location}
         */
        this.location;
        this.location = createLocation({resolver: this});

        this.__lastStartedRenderId = 0;
        this.__navigationEventHandler = this.__onNavigationEvent.bind(this);
        this.setOutlet(outlet);
        this.subscribe();
      }

      __resolveRoute(context) {
        const route = context.route;

        let callbacks = Promise.resolve();

        if (isFunction$1(route.children)) {
          callbacks = callbacks
            .then(() => route.children(copyContextWithoutNext(context)))
            .then(children => {
              // The route.children() callback might have re-written the
              // route.children property instead of returning a value
              if (!isResultNotEmpty(children) && !isFunction$1(route.children)) {
                children = route.children;
              }
              processNewChildren(children, route);
            });
        }

        const commands = {
          redirect: path => createRedirect(context, path),
          component: component => renderComponent(context, component)
        };

        return callbacks
          .then(() => runCallbackIfPossible(route.action, [context, commands], route))
          .then(result => {
            if (isResultNotEmpty(result)) {
              // Actions like `() => import('my-view.js')` are not expected to
              // end the resolution, despite the result is not empty. Checking
              // the result with a whitelist of values that end the resulution.
              if (result instanceof HTMLElement ||
                  result.redirect ||
                  result === notFoundResult) {
                return result;
              }
            }

            if (isString(route.redirect)) {
              return commands.redirect(route.redirect);
            }

            if (route.bundle) {
              return loadBundle(route.bundle)
                .then(() => {}, () => {
                  throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`));
                });
            }
          })
          .then(result => {
            if (isResultNotEmpty(result)) {
              return result;
            }
            if (isString(route.component)) {
              return commands.component(route.component);
            }
          });
      }

      /**
       * Sets the router outlet (the DOM node where the content for the current
       * route is inserted). Any content pre-existing in the router outlet is
       * removed at the end of each render pass.
       *
       * NOTE: this method is automatically invoked first time when creating a new Router instance.
       *
       * @param {?Node} outlet the DOM node where the content for the current route
       *     is inserted.
       */
      setOutlet(outlet) {
        if (outlet) {
          this.__ensureOutlet(outlet);
        }
        this.__outlet = outlet;
      }

      /**
       * Returns the current router outlet. The initial value is `undefined`.
       *
       * @return {?Node} the current router outlet (or `undefined`)
       */
      getOutlet() {
        return this.__outlet;
      }

      /**
       * Sets the routing config (replacing the existing one) and triggers a
       * navigation event so that the router outlet is refreshed according to the
       * current `window.location` and the new routing config.
       *
       * Each route object may have the following properties, listed here in the processing order:
       * * `path` – the route path (relative to the parent route if any) in the
       * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
       *
       * * `children` – an array of nested routes or a function that provides this
       * array at the render time. The function can be synchronous or asynchronous:
       * in the latter case the render is delayed until the returned promise is
       * resolved. The `children` function is executed every time when this route is
       * being rendered. This allows for dynamic route structures (e.g. backend-defined),
       * but it might have a performance impact as well. In order to avoid calling
       * the function on subsequent renders, you can override the `children` property
       * of the route object and save the calculated array there
       * (via `context.route.children = [ route1, route2, ...];`).
       * Parent routes are fully resolved before resolving the children. Children
       * 'path' values are relative to the parent ones.
       *
       * * `action` – the action that is executed before the route is resolved.
       * The value for this property should be a function, accepting `context`
       * and `commands` parameters described below. If present, this function is
       * always invoked first, disregarding of the other properties' presence.
       * The action can return a result directly or within a `Promise`, which
       * resolves to the result. If the action result is an `HTMLElement` instance,
       * a `commands.component(name)` result, a `commands.redirect(path)` result,
       * or a `context.next()` result, the current route resolution is finished,
       * and other route config properties are ignored.
       * See also **Route Actions** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
       *
       * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.
       * The target route should also be defined.
       * See also **Redirects** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
       *
       * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,
       * or the object with "module" and "nomodule" keys referring to different bundles.
       * Each bundle is only loaded once. If "module" and "nomodule" are set, only one bundle is loaded,
       * depending on whether the browser supports ES modules or not.
       * The property is ignored when either an `action` returns the result or `redirect` property is present.
       * Any error, e.g. 404 while loading bundle will cause route resolution to throw.
       * See also **Code Splitting** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
       *
       * * `component` – the tag name of the Web Component to resolve the route to.
       * The property is ignored when either an `action` returns the result or `redirect` property is present.
       * If route contains the `component` property (or an action that return a component)
       * and its child route also contains the `component` property, child route's component
       * will be rendered as a light dom child of a parent component.
       *
       * * `name` – the string name of the route to use in the
       * [`router.urlForName(name, params)`](#/classes/Vaadin.Router#method-urlForName)
       * navigation helper method.
       *
       * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback
       * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function
       * because arrow functions do not have their own `this` reference.
       *
       * `context` object that is passed to `action` function holds the following properties:
       * * `context.pathname` – string with the pathname being resolved
       *
       * * `context.params` – object with route parameters
       *
       * * `context.route` – object that holds the route that is currently being rendered.
       *
       * * `context.next()` – function for asynchronously getting the next route
       * contents from the resolution chain (if any)
       *
       * `commands` object that is passed to `action` function has
       * the following methods:
       *
       * * `commands.redirect(path)` – function that creates a redirect data
       * for the path specified.
       *
       * * `commands.component(component)` – function that creates a new HTMLElement
       * with current context
       *
       * @param {!Array<!Object>|!Object} routes a single route or an array of those
       */
      setRoutes(routes) {
        this.__urlForName = undefined;
        super.setRoutes(routes);
        this.__onNavigationEvent();
      }

      /**
       * Asynchronously resolves the given pathname and renders the resolved route
       * component into the router outlet. If no router outlet is set at the time of
       * calling this method, or at the time when the route resolution is completed,
       * a `TypeError` is thrown.
       *
       * Returns a promise that is fulfilled with the router outlet DOM Node after
       * the route component is created and inserted into the router outlet, or
       * rejected if no route matches the given path.
       *
       * If another render pass is started before the previous one is completed, the
       * result of the previous render pass is ignored.
       *
       * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
       *    render or a context object with a `pathname` property and other
       *    properties to pass to the resolver.
       * @return {!Promise<!Node>}
       */
      render(pathnameOrContext, shouldUpdateHistory) {
        const renderId = ++this.__lastStartedRenderId;
        const pathname = pathnameOrContext.pathname || pathnameOrContext;

        // Find the first route that resolves to a non-empty result
        this.ready = this.resolve(pathnameOrContext)

          // Process the result of this.resolve() and handle all special commands:
          // (redirect / prevent / component). If the result is a 'component',
          // then go deeper and build the entire chain of nested components matching
          // the pathname. Also call all 'on before' callbacks along the way.
          .then(context => this.__fullyResolveChain(context))

          .then(context => {
            if (renderId === this.__lastStartedRenderId) {
              const previousContext = this.__previousContext;

              // Check if the render was prevented and make an early return in that case
              if (context === previousContext) {
                return this.location;
              }

              this.location = createLocation(context);
              fireRouterEvent('location-changed', {router: this, location: this.location});

              if (shouldUpdateHistory) {
                this.__updateBrowserHistory(context.pathname, context.redirectFrom);
              }

              this.__addAppearingContent(context, previousContext);
              const animationDone = this.__animateIfNeeded(context);

              this.__runOnAfterEnterCallbacks(context);
              this.__runOnAfterLeaveCallbacks(context, previousContext);

              return animationDone.then(() => {
                if (renderId === this.__lastStartedRenderId) {
                  // If there is another render pass started after this one,
                  // the 'disappearing content' would be removed when the other
                  // render pass calls `this.__addAppearingContent()`
                  this.__removeDisappearingContent();

                  this.__previousContext = context;
                  return this.location;
                }
              });
            }
          })
          .catch(error => {
            if (renderId === this.__lastStartedRenderId) {
              if (shouldUpdateHistory) {
                this.__updateBrowserHistory(pathname);
              }
              removeDomNodes(this.__outlet && this.__outlet.children);
              this.location = createLocation({pathname, resolver: this});
              fireRouterEvent('error', {router: this, error, pathname});
              throw error;
            }
          });
        return this.ready;
      }

      __fullyResolveChain(originalContext, currentContext = originalContext) {
        return this.__amendWithResolutionResult(currentContext)
          .then(amendedContext => {
            const initialContext = amendedContext !== currentContext ? amendedContext : originalContext;
            return amendedContext.next()
              .then(nextContext => {
                if (nextContext === null || nextContext === notFoundResult) {
                  const matchedPath = getPathnameForRouter(
                    getMatchedPath(amendedContext.chain),
                    amendedContext.resolver
                  );
                  if (matchedPath !== amendedContext.pathname) {
                    throw getNotFoundError(initialContext);
                  }
                }
                return nextContext && nextContext !== notFoundResult
                  ? this.__fullyResolveChain(initialContext, nextContext)
                  : this.__amendWithOnBeforeCallbacks(initialContext);
              });
          });
      }

      __amendWithResolutionResult(context) {
        const result = context.result;
        if (result instanceof HTMLElement) {
          return Promise.resolve(context);
        } else if (result.redirect) {
          return this.__redirect(result.redirect, context.__redirectCount)
            .then(context => this.__amendWithResolutionResult(context));
        } else if (result instanceof Error) {
          return Promise.reject(result);
        } else {
          return Promise.reject(
            new Error(
              log(
                `Invalid route resolution result for path "${context.pathname}". ` +
                `Expected redirect object or HTML element, but got: "${logValue(result)}". ` +
                `Double check the action return value for the route.`
              )
            ));
        }
      }

      __amendWithOnBeforeCallbacks(contextWithFullChain) {
        return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {
          if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {
            return amendedContext;
          }
          return this.__fullyResolveChain(amendedContext);
        });
      }

      __runOnBeforeCallbacks(newContext) {
        const previousContext = this.__previousContext || {};
        const previousChain = previousContext.chain || [];
        const newChain = newContext.chain;

        let callbacks = Promise.resolve();
        const prevent = () => ({cancel: true});
        const redirect = (pathname) => createRedirect(newContext, pathname);

        newContext.__divergedChainIndex = 0;
        if (previousChain.length) {
          for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {
            if (previousChain[i].route !== newChain[i].route
              || previousChain[i].path !== newChain[i].path
              || (previousChain[i].element && previousChain[i].element.localName)
                !== (newChain[i].element && newChain[i].element.localName)
            ) {
              break;
            }
          }

          for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {
            const location = createLocation(newContext);
            callbacks = callbacks
              .then(amend('onBeforeLeave', [location, {prevent}, this], previousChain[i].element))
              .then(result => {
                if (!(result || {}).redirect) {
                  return result;
                }
              });
          }
        }

        for (let i = newContext.__divergedChainIndex; i < newChain.length; i++) {
          const location = createLocation(newContext, newChain[i].route);
          callbacks = callbacks.then(amend('onBeforeEnter', [location, {prevent, redirect}, this], newChain[i].element));
        }

        return callbacks.then(amendmentResult => {
          if (amendmentResult) {
            if (amendmentResult.cancel) {
              return this.__previousContext;
            }
            if (amendmentResult.redirect) {
              return this.__redirect(amendmentResult.redirect, newContext.__redirectCount);
            }
          }
          return newContext;
        });
      }

      __redirect(redirectData, counter) {
        if (counter > MAX_REDIRECT_COUNT) {
          throw new Error(log(`Too many redirects when rendering ${redirectData.from}`));
        }

        return this.resolve({
          pathname: this.urlForPath(
            redirectData.pathname,
            redirectData.params
          ),
          redirectFrom: redirectData.from,
          __redirectCount: (counter || 0) + 1
        });
      }

      __ensureOutlet(outlet = this.__outlet) {
        if (!(outlet instanceof Node)) {
          throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`));
        }
      }

      __updateBrowserHistory(pathname, replace) {
        if (window.location.pathname !== pathname) {
          const changeState = replace ? 'replaceState' : 'pushState';
          window.history[changeState](null, document.title, pathname);
          window.dispatchEvent(new PopStateEvent('popstate', {state: 'vaadin-router-ignore'}));
        }
      }

      __addAppearingContent(context, previousContext) {
        this.__ensureOutlet();

        // If the previous 'entering' animation has not completed yet,
        // stop it and remove that content from the DOM before adding new one.
        this.__removeAppearingContent();

        // Find the deepest common parent between the last and the new component
        // chains. Update references for the unchanged elements in the new chain
        let deepestCommonParent = this.__outlet;
        for (let i = 0; i < context.__divergedChainIndex; i++) {
          const unchangedElement = previousContext && previousContext.chain[i].element;
          if (unchangedElement) {
            if (unchangedElement.parentNode === deepestCommonParent) {
              context.chain[i].element = unchangedElement;
              deepestCommonParent = unchangedElement;
            } else {
              break;
            }
          }
        }

        // Keep two lists of DOM elements:
        //  - those that should be removed once the transition animation is over
        //  - and those that should remain
        this.__disappearingContent = Array.from(deepestCommonParent.children);
        this.__appearingContent = [];

        // Add new elements (starting after the deepest common parent) to the DOM.
        // That way only the components that are actually different between the two
        // locations are added to the DOM (and those that are common remain in the
        // DOM without first removing and then adding them again).
        let parentElement = deepestCommonParent;
        for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {
          const elementToAdd = context.chain[i].element;
          if (elementToAdd) {
            parentElement.appendChild(elementToAdd);
            if (parentElement === deepestCommonParent) {
              this.__appearingContent.push(elementToAdd);
            }
            parentElement = elementToAdd;
          }
        }
      }

      __removeDisappearingContent() {
        if (this.__disappearingContent) {
          removeDomNodes(this.__disappearingContent);
        }
        this.__disappearingContent = null;
        this.__appearingContent = null;
      }

      __removeAppearingContent() {
        if (this.__disappearingContent && this.__appearingContent) {
          removeDomNodes(this.__appearingContent);
          this.__disappearingContent = null;
          this.__appearingContent = null;
        }
      }

      __runOnAfterLeaveCallbacks(currentContext, targetContext) {
        if (!targetContext) {
          return;
        }

        // REVERSE iteration: from Z to A
        for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {
          const currentComponent = targetContext.chain[i].element;
          if (!currentComponent) {
            continue;
          }
          try {
            const location = createLocation(currentContext);
            runCallbackIfPossible(
              currentComponent.onAfterLeave,
              [location, {}, targetContext.resolver],
              currentComponent);
          } finally {
            removeDomNodes(currentComponent.children);
          }
        }
      }

      __runOnAfterEnterCallbacks(currentContext) {
        // forward iteration: from A to Z
        for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {
          const currentComponent = currentContext.chain[i].element || {};
          const location = createLocation(currentContext, currentContext.chain[i].route);
          runCallbackIfPossible(
            currentComponent.onAfterEnter,
            [location, {}, currentContext.resolver],
            currentComponent);
        }
      }

      __animateIfNeeded(context) {
        const from = (this.__disappearingContent || [])[0];
        const to = (this.__appearingContent || [])[0];
        const promises = [];

        const chain = context.chain;
        let config;
        for (let i = chain.length; i > 0; i--) {
          if (chain[i - 1].route.animate) {
            config = chain[i - 1].route.animate;
            break;
          }
        }

        if (from && to && config) {
          const leave = isObject$1(config) && config.leave || 'leaving';
          const enter = isObject$1(config) && config.enter || 'entering';
          promises.push(animate(from, leave));
          promises.push(animate(to, enter));
        }

        return Promise.all(promises).then(() => context);
      }

      /**
       * Subscribes this instance to navigation events on the `window`.
       *
       * NOTE: beware of resource leaks. For as long as a router instance is
       * subscribed to navigation events, it won't be garbage collected.
       */
      subscribe() {
        window.addEventListener('vaadin-router-go', this.__navigationEventHandler);
      }

      /**
       * Removes the subscription to navigation events created in the `subscribe()`
       * method.
       */
      unsubscribe() {
        window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);
      }

      __onNavigationEvent(event) {
        const pathname = event ? event.detail.pathname : window.location.pathname;
        if (isString(this.__normalizePathname(pathname))) {
          if (event && event.preventDefault) {
            event.preventDefault();
          }
          this.render(pathname, true);
        }
      }

      /**
       * Configures what triggers Vaadin.Router navigation events:
       *  - `POPSTATE`: popstate events on the current `window`
       *  - `CLICK`: click events on `<a>` links leading to the current page
       *
       * This method is invoked with the pre-configured values when creating a new Router instance.
       * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.
       *
       * See the `router-config.js` for the default navigation triggers config. Based on it, you can
       * create the own one and only import the triggers you need, instead of pulling in all the code,
       * e.g. if you want to handle `click` differently.
       *
       * See also **Navigation Triggers** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
       *
       * @param {...NavigationTrigger} triggers
       */
      static setTriggers(...triggers) {
        setNavigationTriggers(triggers);
      }

      /**
       * Generates a URL for the route with the given name, optionally performing
       * substitution of parameters.
       *
       * The route is searched in all the Vaadin.Router instances subscribed to
       * navigation events.
       *
       * **Note:** For child route names, only array children are considered.
       * It is not possible to generate URLs using a name for routes set with
       * a children function.
       *
       * @function urlForName
       * @param {!string} name the route name or the route’s `component` name.
       * @param {?Object} params Optional object with route path parameters.
       * Named parameters are passed by name (`params[name] = value`), unnamed
       * parameters are passed by index (`params[index] = value`).
       *
       * @return {string}
       */
      urlForName(name, params) {
        if (!this.__urlForName) {
          this.__urlForName = generateUrls(this);
        }
        return getPathnameForRouter(
          this.__urlForName(name, params),
          this
        );
      }

      /**
       * Generates a URL for the given route path, optionally performing
       * substitution of parameters.
       *
       * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
       * @param {?Object} params Optional object with route path parameters.
       * Named parameters are passed by name (`params[name] = value`), unnamed
       * parameters are passed by index (`params[index] = value`).
       *
       * @return {string}
       */
      urlForPath(path, params) {
        return getPathnameForRouter(
          Router.pathToRegexp.compile(path)(params),
          this
        );
      }

      /**
       * Triggers navigation to a new path. Returns a boolean without waiting until
       * the navigation is complete. Returns `true` if at least one `Vaadin.Router`
       * has handled the navigation (was subscribed and had `baseUrl` matching
       * the `pathname` argument), otherwise returns `false`.
       *
       * @param {!string} pathname a new in-app path
       * @return {boolean}
       */
      static go(pathname) {
        return fireRouterEvent('go', {pathname});
      }
    }

    const DEV_MODE_CODE_REGEXP$1 =
      /\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i;

    function isMinified$1() {
      function test() {
        /** vaadin-dev-mode:start
        return false;
        vaadin-dev-mode:end **/
        return true;
      }
      return uncommentAndRun$1(test);
    }

    function isDevelopmentMode$1() {
      try {
        return isForcedDevelopmentMode$1() || (isLocalhost$1() && !isMinified$1() && !isFlowProductionMode$1());
      } catch (e) {
        // Some error in this code, assume production so no further actions will be taken
        return false;
      }
    }

    function isForcedDevelopmentMode$1() {
      return localStorage.getItem("vaadin.developmentmode.force");
    }

    function isLocalhost$1() {
      return (["localhost","127.0.0.1"].indexOf(window.location.hostname) >= 0);
    }

    function isFlowProductionMode$1() {
      if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
        const productionModeApps = Object.keys(window.Vaadin.Flow.clients)
        .map(key => window.Vaadin.Flow.clients[key])
        .filter(client => client.productionMode);
        if (productionModeApps.length > 0) {
          return true;
        }
      }
      return false;
    }

    function uncommentAndRun$1(callback, args) {
      if (typeof callback !== 'function') {
        return;
      }

      const match = DEV_MODE_CODE_REGEXP$1.exec(callback.toString());
      if (match) {
        try {
          // requires CSP: script-src 'unsafe-eval'
          callback = new Function(match[1]);
        } catch (e) {
          // eat the exception
          console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);
        }
      }

      return callback(args);
    }

    // A guard against polymer-modulizer removing the window.Vaadin
    // initialization above.
    window['Vaadin'] = window['Vaadin'] || {};

    /**
     * Inspects the source code of the given `callback` function for
     * specially-marked _commented_ code. If such commented code is found in the
     * callback source, uncomments and runs that code instead of the callback
     * itself. Otherwise runs the callback as is.
     *
     * The optional arguments are passed into the callback / uncommented code,
     * the result is returned.
     *
     * See the `isMinified()` function source code in this file for an example.
     *
     */
    const runIfDevelopmentMode$1 = function(callback, args) {
      if (window.Vaadin.developmentMode) {
        return uncommentAndRun$1(callback, args);
      }
    };

    if (window.Vaadin.developmentMode === undefined) {
      window.Vaadin.developmentMode = isDevelopmentMode$1();
    }

    /* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */

    function maybeGatherAndSendStats$1() {
      /** vaadin-dev-mode:start
      (function () {
    'use strict';

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };

    var createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var getPolymerVersion = function getPolymerVersion() {
      return window.Polymer && window.Polymer.version;
    };

    var StatisticsGatherer = function () {
      function StatisticsGatherer(logger) {
        classCallCheck(this, StatisticsGatherer);

        this.now = new Date().getTime();
        this.logger = logger;
      }

      createClass(StatisticsGatherer, [{
        key: 'frameworkVersionDetectors',
        value: function frameworkVersionDetectors() {
          return {
            'Flow': function Flow() {
              if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
                var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {
                  return window.Vaadin.Flow.clients[key];
                }).filter(function (client) {
                  return client.getVersionInfo;
                }).map(function (client) {
                  return client.getVersionInfo().flow;
                });
                if (flowVersions.length > 0) {
                  return flowVersions[0];
                }
              }
            },
            'Vaadin Framework': function VaadinFramework() {
              if (window.vaadin && window.vaadin.clients) {
                var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {
                  return client.getVersionInfo;
                }).map(function (client) {
                  return client.getVersionInfo().vaadinVersion;
                });
                if (frameworkVersions.length > 0) {
                  return frameworkVersions[0];
                }
              }
            },
            'AngularJs': function AngularJs() {
              if (window.angular && window.angular.version && window.angular.version) {
                return window.angular.version.full;
              }
            },
            'Angular': function Angular() {
              if (window.ng) {
                var tags = document.querySelectorAll("[ng-version]");
                if (tags.length > 0) {
                  return tags[0].getAttribute("ng-version");
                }
                return "Unknown";
              }
            },
            'Backbone.js': function BackboneJs() {
              if (window.Backbone) {
                return window.Backbone.VERSION;
              }
            },
            'React': function React() {
              var reactSelector = '[data-reactroot], [data-reactid]';
              if (!!document.querySelector(reactSelector)) {
                // React does not publish the version by default
                return "unknown";
              }
            },
            'Ember': function Ember() {
              if (window.Em && window.Em.VERSION) {
                return window.Em.VERSION;
              } else if (window.Ember && window.Ember.VERSION) {
                return window.Ember.VERSION;
              }
            },
            'jQuery': function (_jQuery) {
              function jQuery() {
                return _jQuery.apply(this, arguments);
              }

              jQuery.toString = function () {
                return _jQuery.toString();
              };

              return jQuery;
            }(function () {
              if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {
                return jQuery.prototype.jquery;
              }
            }),
            'Polymer': function Polymer() {
              var version = getPolymerVersion();
              if (version) {
                return version;
              }
            },
            'Vue.js': function VueJs() {
              if (window.Vue) {
                return window.Vue.version;
              }
            }
          };
        }
      }, {
        key: 'getUsedVaadinElements',
        value: function getUsedVaadinElements(elements) {
          var version = getPolymerVersion();
          var elementClasses = void 0;
          if (version && version.indexOf('2') === 0) {
            // Polymer 2: components classes are stored in window.Vaadin
            elementClasses = Object.keys(window.Vaadin).map(function (c) {
              return window.Vaadin[c];
            }).filter(function (c) {
              return c.is;
            });
          } else {
            // Polymer 3: components classes are stored in window.Vaadin.registrations
            elementClasses = window.Vaadin.registrations || [];
          }
          elementClasses.forEach(function (klass) {
            var version = klass.version ? klass.version : "0.0.0";
            elements[klass.is] = { version: version };
          });
        }
      }, {
        key: 'getUsedVaadinThemes',
        value: function getUsedVaadinThemes(themes) {
          ['Lumo', 'Material'].forEach(function (themeName) {
            var theme;
            var version = getPolymerVersion();
            if (version && version.indexOf('2') === 0) {
              // Polymer 2: themes are stored in window.Vaadin
              theme = window.Vaadin[themeName];
            } else {
              // Polymer 3: themes are stored in custom element registry
              theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');
            }
            if (theme && theme.version) {
              themes[themeName] = { version: theme.version };
            }
          });
        }
      }, {
        key: 'getFrameworks',
        value: function getFrameworks(frameworks) {
          var detectors = this.frameworkVersionDetectors();
          Object.keys(detectors).forEach(function (framework) {
            var detector = detectors[framework];
            try {
              var version = detector();
              if (version) {
                frameworks[framework] = { "version": version };
              }
            } catch (e) {}
          });
        }
      }, {
        key: 'gather',
        value: function gather(storage) {
          var storedStats = storage.read();
          var gatheredStats = {};
          var types = ["elements", "frameworks", "themes"];

          types.forEach(function (type) {
            gatheredStats[type] = {};
            if (!storedStats[type]) {
              storedStats[type] = {};
            }
          });

          var previousStats = JSON.stringify(storedStats);

          this.getUsedVaadinElements(gatheredStats.elements);
          this.getFrameworks(gatheredStats.frameworks);
          this.getUsedVaadinThemes(gatheredStats.themes);

          var now = this.now;
          types.forEach(function (type) {
            var keys = Object.keys(gatheredStats[type]);
            keys.forEach(function (key) {
              if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {
                storedStats[type][key] = { "firstUsed": now };
              }
              // Discards any previously logged version numebr
              storedStats[type][key].version = gatheredStats[type][key].version;
              storedStats[type][key].lastUsed = now;
            });
          });

          var newStats = JSON.stringify(storedStats);
          storage.write(newStats);
          if (newStats != previousStats && Object.keys(storedStats).length > 0) {
            this.logger.debug("New stats: " + newStats);
          }
        }
      }]);
      return StatisticsGatherer;
    }();

    var StatisticsStorage = function () {
      function StatisticsStorage(key) {
        classCallCheck(this, StatisticsStorage);

        this.key = key;
      }

      createClass(StatisticsStorage, [{
        key: 'read',
        value: function read() {
          var localStorageStatsString = localStorage.getItem(this.key);
          try {
            return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');
          } catch (e) {
            return {};
          }
        }
      }, {
        key: 'write',
        value: function write(data) {
          localStorage.setItem(this.key, data);
        }
      }, {
        key: 'clear',
        value: function clear() {
          localStorage.removeItem(this.key);
        }
      }, {
        key: 'isEmpty',
        value: function isEmpty() {
          var storedStats = this.read();
          var empty = true;
          Object.keys(storedStats).forEach(function (key) {
            if (Object.keys(storedStats[key]).length > 0) {
              empty = false;
            }
          });

          return empty;
        }
      }]);
      return StatisticsStorage;
    }();

    var StatisticsSender = function () {
      function StatisticsSender(url, logger) {
        classCallCheck(this, StatisticsSender);

        this.url = url;
        this.logger = logger;
      }

      createClass(StatisticsSender, [{
        key: 'send',
        value: function send(data, errorHandler) {
          var logger = this.logger;

          if (navigator.onLine === false) {
            logger.debug("Offline, can't send");
            errorHandler();
            return;
          }
          logger.debug("Sending data to " + this.url);

          var req = new XMLHttpRequest();
          req.withCredentials = true;
          req.addEventListener("load", function () {
            // Stats sent, nothing more to do
            logger.debug("Response: " + req.responseText);
          });
          req.addEventListener("error", function () {
            logger.debug("Send failed");
            errorHandler();
          });
          req.addEventListener("abort", function () {
            logger.debug("Send aborted");
            errorHandler();
          });
          req.open("POST", this.url);
          req.setRequestHeader("Content-Type", "application/json");
          req.send(data);
        }
      }]);
      return StatisticsSender;
    }();

    var StatisticsLogger = function () {
      function StatisticsLogger(id) {
        classCallCheck(this, StatisticsLogger);

        this.id = id;
      }

      createClass(StatisticsLogger, [{
        key: '_isDebug',
        value: function _isDebug() {
          return localStorage.getItem("vaadin." + this.id + ".debug");
        }
      }, {
        key: 'debug',
        value: function debug(msg) {
          if (this._isDebug()) {
            console.info(this.id + ": " + msg);
          }
        }
      }]);
      return StatisticsLogger;
    }();

    var UsageStatistics = function () {
      function UsageStatistics() {
        classCallCheck(this, UsageStatistics);

        this.now = new Date();
        this.timeNow = this.now.getTime();
        this.gatherDelay = 10; // Delay between loading this file and gathering stats
        this.initialDelay = 24 * 60 * 60;

        this.logger = new StatisticsLogger("statistics");
        this.storage = new StatisticsStorage("vaadin.statistics.basket");
        this.gatherer = new StatisticsGatherer(this.logger);
        this.sender = new StatisticsSender("https://tools.vaadin.com/usage-stats/submit", this.logger);
      }

      createClass(UsageStatistics, [{
        key: 'maybeGatherAndSend',
        value: function maybeGatherAndSend() {
          var _this = this;

          if (localStorage.getItem(UsageStatistics.optOutKey)) {
            return;
          }
          this.gatherer.gather(this.storage);
          setTimeout(function () {
            _this.maybeSend();
          }, this.gatherDelay * 1000);
        }
      }, {
        key: 'lottery',
        value: function lottery() {
          return Math.random() <= 0.05;
        }
      }, {
        key: 'currentMonth',
        value: function currentMonth() {
          return this.now.getYear() * 12 + this.now.getMonth();
        }
      }, {
        key: 'maybeSend',
        value: function maybeSend() {
          var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));
          var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));

          if (!firstUse) {
            // Use a grace period to avoid interfering with tests, incognito mode etc
            firstUse = this.timeNow;
            localStorage.setItem(UsageStatistics.firstUseKey, firstUse);
          }

          if (this.timeNow < firstUse + this.initialDelay * 1000) {
            this.logger.debug("No statistics will be sent until the initial delay of " + this.initialDelay + "s has passed");
            return;
          }
          if (this.currentMonth() <= monthProcessed) {
            this.logger.debug("This month has already been processed");
            return;
          }
          localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());
          // Use random sampling
          if (this.lottery()) {
            this.logger.debug("Congratulations, we have a winner!");
          } else {
            this.logger.debug("Sorry, no stats from you this time");
            return;
          }

          this.send();
        }
      }, {
        key: 'send',
        value: function send() {
          // Ensure we have the latest data
          this.gatherer.gather(this.storage);

          // Read, send and clean up
          var data = this.storage.read();
          data["firstUse"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));
          data["usageStatisticsVersion"] = UsageStatistics.version;
          var info = 'This request contains usage statistics gathered from the application running in development mode. \n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n\n\n';
          var self = this;
          this.sender.send(info + JSON.stringify(data), function () {
            // Revert the 'month processed' flag
            localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);
          });
        }
      }], [{
        key: 'version',
        get: function get$1() {
          return '2.0.1';
        }
      }, {
        key: 'firstUseKey',
        get: function get$1() {
          return 'vaadin.statistics.firstuse';
        }
      }, {
        key: 'monthProcessedKey',
        get: function get$1() {
          return 'vaadin.statistics.monthProcessed';
        }
      }, {
        key: 'optOutKey',
        get: function get$1() {
          return 'vaadin.statistics.optout';
        }
      }]);
      return UsageStatistics;
    }();

    try {
      window.Vaadin = window.Vaadin || {};
      window.Vaadin.usageStatistics = window.Vaadin.usageStatistics || new UsageStatistics();
      window.Vaadin.usageStatistics.maybeGatherAndSend();
    } catch (e) {
      // Intentionally ignored as this is not a problem in the app being developed
    }

    }());

      vaadin-dev-mode:end **/
    }

    const usageStatistics$1 = function() {
      if (typeof runIfDevelopmentMode$1 === 'function') {
        return runIfDevelopmentMode$1(maybeGatherAndSendStats$1);
      }
    };

    window.Vaadin = window.Vaadin || {};
    window.Vaadin.registrations = window.Vaadin.registrations || [];

    window.Vaadin.registrations.push({
      is: '@vaadin/router',
      version: '1.2.0',
    });

    usageStatistics$1();

    Router.NavigationTrigger = {POPSTATE, CLICK};
    //# sourceMappingURL=vaadin-router.js.map

    function symbolObservablePonyfill(e){var t,o=e.Symbol;return "function"==typeof o?o.observable?t=o.observable:(t=o("observable"),o.observable=t):t="@@observable",t}var root$1,result=symbolObservablePonyfill(root$1="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof module?module:Function("return this")());const randomString=()=>Math.random().toString(36).substring(7).split("").join("."),ActionTypes={INIT:`@@redux/INIT${randomString()}`,REPLACE:`@@redux/REPLACE${randomString()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${randomString()}`};function isPlainObject(e){if("object"!=typeof e||null===e)return !1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function createStore(e,t,o){if("function"==typeof t&&"function"==typeof o||"function"==typeof o&&"function"==typeof arguments[3])throw Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===o&&(o=t,t=void 0),void 0!==o){if("function"!=typeof o)throw Error("Expected the enhancer to be a function.");return o(createStore)(e,t)}if("function"!=typeof e)throw Error("Expected the reducer to be a function.");let r=e,n=t,i=[],s=i,c=!1;function u(){s===i&&(s=i.slice());}function a(){if(c)throw Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return n}function d(e){if("function"!=typeof e)throw Error("Expected the listener to be a function.");if(c)throw Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");let t=!0;return u(),s.push(e),function(){if(!t)return;if(c)throw Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,u();const o=s.indexOf(e);s.splice(o,1);}}function f(e){if(!isPlainObject(e))throw Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw Error("Reducers may not dispatch actions.");try{c=!0,n=r(n,e);}finally{c=!1;}const t=i=s;for(let e=0;t.length>e;e++){(0, t[e])();}return e}return f({type:ActionTypes.INIT}),{dispatch:f,subscribe:d,getState:a,replaceReducer:function(e){if("function"!=typeof e)throw Error("Expected the nextReducer to be a function.");r=e,f({type:ActionTypes.REPLACE});},[result]:function(){const e=d;return {subscribe(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function o(){t.next&&t.next(a());}return o(),{unsubscribe:e(o)}},[result](){return this}}}}}function compose$1(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce((e,t)=>(...o)=>e(t(...o)))}function applyMiddleware(...e){return t=>(...o)=>{const r=t(...o);let n=()=>{throw Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")};const i={getState:r.getState,dispatch:(...e)=>n(...e)},s=e.map(e=>e(i));return n=compose$1(...s)(r.dispatch),{...r,dispatch:n}}}

    var keys$1 = createCommonjsModule(function (module, exports) {
    exports = module.exports = typeof Object.keys === 'function'
      ? Object.keys : shim;

    exports.shim = shim;
    function shim (obj) {
      var keys = [];
      for (var key in obj) keys.push(key);
      return keys;
    }
    });
    var keys_1 = keys$1.shim;

    var is_arguments = createCommonjsModule(function (module, exports) {
    var supportsArgumentsClass = (function(){
      return Object.prototype.toString.call(arguments)
    })() == '[object Arguments]';

    exports = module.exports = supportsArgumentsClass ? supported : unsupported;

    exports.supported = supported;
    function supported(object) {
      return Object.prototype.toString.call(object) == '[object Arguments]';
    }
    exports.unsupported = unsupported;
    function unsupported(object){
      return object &&
        typeof object == 'object' &&
        typeof object.length == 'number' &&
        Object.prototype.hasOwnProperty.call(object, 'callee') &&
        !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
        false;
    }});
    var is_arguments_1 = is_arguments.supported;
    var is_arguments_2 = is_arguments.unsupported;

    var deepEqual_1 = createCommonjsModule(function (module) {
    var pSlice = Array.prototype.slice;



    var deepEqual = module.exports = function (actual, expected, opts) {
      if (!opts) opts = {};
      // 7.1. All identical values are equivalent, as determined by ===.
      if (actual === expected) {
        return true;

      } else if (actual instanceof Date && expected instanceof Date) {
        return actual.getTime() === expected.getTime();

      // 7.3. Other pairs that do not both pass typeof value == 'object',
      // equivalence is determined by ==.
      } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
        return opts.strict ? actual === expected : actual == expected;

      // 7.4. For all other Object pairs, including Array objects, equivalence is
      // determined by having the same number of owned properties (as verified
      // with Object.prototype.hasOwnProperty.call), the same set of keys
      // (although not necessarily the same order), equivalent values for every
      // corresponding key, and an identical 'prototype' property. Note: this
      // accounts for both named and indexed properties on Arrays.
      } else {
        return objEquiv(actual, expected, opts);
      }
    };

    function isUndefinedOrNull(value) {
      return value === null || value === undefined;
    }

    function isBuffer (x) {
      if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
      if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
        return false;
      }
      if (x.length > 0 && typeof x[0] !== 'number') return false;
      return true;
    }

    function objEquiv(a, b, opts) {
      var i, key;
      if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
        return false;
      // an identical 'prototype' property.
      if (a.prototype !== b.prototype) return false;
      //~~~I've managed to break Object.keys through screwy arguments passing.
      //   Converting to array solves the problem.
      if (is_arguments(a)) {
        if (!is_arguments(b)) {
          return false;
        }
        a = pSlice.call(a);
        b = pSlice.call(b);
        return deepEqual(a, b, opts);
      }
      if (isBuffer(a)) {
        if (!isBuffer(b)) {
          return false;
        }
        if (a.length !== b.length) return false;
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      }
      try {
        var ka = keys$1(a),
            kb = keys$1(b);
      } catch (e) {//happens when one is a string literal and the other isn't
        return false;
      }
      // having the same number of owned properties (keys incorporates
      // hasOwnProperty)
      if (ka.length != kb.length)
        return false;
      //the same set of keys (although not necessarily the same order),
      ka.sort();
      kb.sort();
      //~~~cheap key test
      for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i])
          return false;
      }
      //equivalent values for every corresponding key, and
      //~~~possibly expensive deep test
      for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!deepEqual(a[key], b[key], opts)) return false;
      }
      return typeof a === typeof b;
    }
    });

    var toStr = Object.prototype.toString;

    var isArguments = function isArguments(value) {
    	var str = toStr.call(value);
    	var isArgs = str === '[object Arguments]';
    	if (!isArgs) {
    		isArgs = str !== '[object Array]' &&
    			value !== null &&
    			typeof value === 'object' &&
    			typeof value.length === 'number' &&
    			value.length >= 0 &&
    			toStr.call(value.callee) === '[object Function]';
    	}
    	return isArgs;
    };

    // modified from https://github.com/es-shims/es5-shim
    var has$1 = Object.prototype.hasOwnProperty;
    var toStr$1 = Object.prototype.toString;
    var slice$1 = Array.prototype.slice;

    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
    var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
    var dontEnums = [
    	'toString',
    	'toLocaleString',
    	'valueOf',
    	'hasOwnProperty',
    	'isPrototypeOf',
    	'propertyIsEnumerable',
    	'constructor'
    ];
    var equalsConstructorPrototype = function (o) {
    	var ctor = o.constructor;
    	return ctor && ctor.prototype === o;
    };
    var excludedKeys = {
    	$applicationCache: true,
    	$console: true,
    	$external: true,
    	$frame: true,
    	$frameElement: true,
    	$frames: true,
    	$innerHeight: true,
    	$innerWidth: true,
    	$outerHeight: true,
    	$outerWidth: true,
    	$pageXOffset: true,
    	$pageYOffset: true,
    	$parent: true,
    	$scrollLeft: true,
    	$scrollTop: true,
    	$scrollX: true,
    	$scrollY: true,
    	$self: true,
    	$webkitIndexedDB: true,
    	$webkitStorageInfo: true,
    	$window: true
    };
    var hasAutomationEqualityBug = (function () {
    	/* global window */
    	if (typeof window === 'undefined') { return false; }
    	for (var k in window) {
    		try {
    			if (!excludedKeys['$' + k] && has$1.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
    				try {
    					equalsConstructorPrototype(window[k]);
    				} catch (e) {
    					return true;
    				}
    			}
    		} catch (e) {
    			return true;
    		}
    	}
    	return false;
    }());
    var equalsConstructorPrototypeIfNotBuggy = function (o) {
    	/* global window */
    	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
    		return equalsConstructorPrototype(o);
    	}
    	try {
    		return equalsConstructorPrototype(o);
    	} catch (e) {
    		return false;
    	}
    };

    var keysShim = function keys(object) {
    	var isObject = object !== null && typeof object === 'object';
    	var isFunction = toStr$1.call(object) === '[object Function]';
    	var isArguments$$1 = isArguments(object);
    	var isString = isObject && toStr$1.call(object) === '[object String]';
    	var theKeys = [];

    	if (!isObject && !isFunction && !isArguments$$1) {
    		throw new TypeError('Object.keys called on a non-object');
    	}

    	var skipProto = hasProtoEnumBug && isFunction;
    	if (isString && object.length > 0 && !has$1.call(object, 0)) {
    		for (var i = 0; i < object.length; ++i) {
    			theKeys.push(String(i));
    		}
    	}

    	if (isArguments$$1 && object.length > 0) {
    		for (var j = 0; j < object.length; ++j) {
    			theKeys.push(String(j));
    		}
    	} else {
    		for (var name in object) {
    			if (!(skipProto && name === 'prototype') && has$1.call(object, name)) {
    				theKeys.push(String(name));
    			}
    		}
    	}

    	if (hasDontEnumBug) {
    		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

    		for (var k = 0; k < dontEnums.length; ++k) {
    			if (!(skipConstructor && dontEnums[k] === 'constructor') && has$1.call(object, dontEnums[k])) {
    				theKeys.push(dontEnums[k]);
    			}
    		}
    	}
    	return theKeys;
    };

    keysShim.shim = function shimObjectKeys() {
    	if (Object.keys) {
    		var keysWorksWithArguments = (function () {
    			// Safari 5.0 bug
    			return (Object.keys(arguments) || '').length === 2;
    		}(1, 2));
    		if (!keysWorksWithArguments) {
    			var originalKeys = Object.keys;
    			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
    				if (isArguments(object)) {
    					return originalKeys(slice$1.call(object));
    				} else {
    					return originalKeys(object);
    				}
    			};
    		}
    	} else {
    		Object.keys = keysShim;
    	}
    	return Object.keys || keysShim;
    };

    var objectKeys = keysShim;

    var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

    var toStr$2 = Object.prototype.toString;
    var concat$3 = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;

    var isFunction$2 = function (fn) {
    	return typeof fn === 'function' && toStr$2.call(fn) === '[object Function]';
    };

    var arePropertyDescriptorsSupported = function () {
    	var obj = {};
    	try {
    		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
    		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
    		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
    			return false;
    		}
    		return obj.x === obj;
    	} catch (e) { /* this is IE 8. */
    		return false;
    	}
    };
    var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

    var defineProperty = function (object, name, value, predicate) {
    	if (name in object && (!isFunction$2(predicate) || !predicate())) {
    		return;
    	}
    	if (supportsDescriptors) {
    		origDefineProperty(object, name, {
    			configurable: true,
    			enumerable: false,
    			value: value,
    			writable: true
    		});
    	} else {
    		object[name] = value;
    	}
    };

    var defineProperties = function (object, map) {
    	var predicates = arguments.length > 2 ? arguments[2] : {};
    	var props = objectKeys(map);
    	if (hasSymbols) {
    		props = concat$3.call(props, Object.getOwnPropertySymbols(map));
    	}
    	for (var i = 0; i < props.length; i += 1) {
    		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
    	}
    };

    defineProperties.supportsDescriptors = !!supportsDescriptors;

    var defineProperties_1 = defineProperties;

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice$2 = Array.prototype.slice;
    var toStr$3 = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr$3.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice$2.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice$2.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice$2.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

    var functionBind = Function.prototype.bind || implementation;

    var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

    var isPrimitive$1 = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var fnToStr = Function.prototype.toString;

    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
    	try {
    		var fnStr = fnToStr.call(value);
    		return constructorRegex.test(fnStr);
    	} catch (e) {
    		return false; // not a function
    	}
    };

    var tryFunctionObject = function tryFunctionToStr(value) {
    	try {
    		if (isES6ClassFn(value)) { return false; }
    		fnToStr.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$4 = Object.prototype.toString;
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

    var isCallable = function isCallable(value) {
    	if (!value) { return false; }
    	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    	if (typeof value === 'function' && !value.prototype) { return true; }
    	if (hasToStringTag) { return tryFunctionObject(value); }
    	if (isES6ClassFn(value)) { return false; }
    	var strClass = toStr$4.call(value);
    	return strClass === fnClass || strClass === genClass;
    };

    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateObject(value) {
    	try {
    		getDay.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };

    var toStr$5 = Object.prototype.toString;
    var dateClass = '[object Date]';
    var hasToStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

    var isDateObject = function isDateObject(value) {
    	if (typeof value !== 'object' || value === null) { return false; }
    	return hasToStringTag$1 ? tryDateObject(value) : toStr$5.call(value) === dateClass;
    };

    /* eslint complexity: [2, 17], max-statements: [2, 33] */
    var shams = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var origSymbol = commonjsGlobal.Symbol;


    var hasSymbols$1 = function hasNativeSymbols() {
    	if (typeof origSymbol !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return shams();
    };

    var isSymbol = createCommonjsModule(function (module) {

    var toStr = Object.prototype.toString;
    var hasSymbols = hasSymbols$1();

    if (hasSymbols) {
    	var symToStr = Symbol.prototype.toString;
    	var symStringRegex = /^Symbol\(.*\)$/;
    	var isSymbolObject = function isRealSymbolObject(value) {
    		if (typeof value.valueOf() !== 'symbol') {
    			return false;
    		}
    		return symStringRegex.test(symToStr.call(value));
    	};

    	module.exports = function isSymbol(value) {
    		if (typeof value === 'symbol') {
    			return true;
    		}
    		if (toStr.call(value) !== '[object Symbol]') {
    			return false;
    		}
    		try {
    			return isSymbolObject(value);
    		} catch (e) {
    			return false;
    		}
    	};
    } else {

    	module.exports = function isSymbol(value) {
    		// this environment does not support Symbols.
    		return false;
    	};
    }
    });

    var hasSymbols$2 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';






    var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
    	if (typeof O === 'undefined' || O === null) {
    		throw new TypeError('Cannot call method on ' + O);
    	}
    	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
    		throw new TypeError('hint must be "string" or "number"');
    	}
    	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
    	var method, result, i;
    	for (i = 0; i < methodNames.length; ++i) {
    		method = O[methodNames[i]];
    		if (isCallable(method)) {
    			result = method.call(O);
    			if (isPrimitive$1(result)) {
    				return result;
    			}
    		}
    	}
    	throw new TypeError('No default value');
    };

    var GetMethod = function GetMethod(O, P) {
    	var func = O[P];
    	if (func !== null && typeof func !== 'undefined') {
    		if (!isCallable(func)) {
    			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    		}
    		return func;
    	}
    	return void 0;
    };

    // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
    var es2015 = function ToPrimitive(input) {
    	if (isPrimitive$1(input)) {
    		return input;
    	}
    	var hint = 'default';
    	if (arguments.length > 1) {
    		if (arguments[1] === String) {
    			hint = 'string';
    		} else if (arguments[1] === Number) {
    			hint = 'number';
    		}
    	}

    	var exoticToPrim;
    	if (hasSymbols$2) {
    		if (Symbol.toPrimitive) {
    			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
    		} else if (isSymbol(input)) {
    			exoticToPrim = Symbol.prototype.valueOf;
    		}
    	}
    	if (typeof exoticToPrim !== 'undefined') {
    		var result = exoticToPrim.call(input, hint);
    		if (isPrimitive$1(result)) {
    			return result;
    		}
    		throw new TypeError('unable to convert exotic object to primitive');
    	}
    	if (hint === 'default' && (isDateObject(input) || isSymbol(input))) {
    		hint = 'string';
    	}
    	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
    };

    var es6 = es2015;

    /* globals
    	Set,
    	Map,
    	WeakSet,
    	WeakMap,

    	Promise,

    	Symbol,
    	Proxy,

    	Atomics,
    	SharedArrayBuffer,

    	ArrayBuffer,
    	DataView,
    	Uint8Array,
    	Float32Array,
    	Float64Array,
    	Int8Array,
    	Int16Array,
    	Int32Array,
    	Uint8ClampedArray,
    	Uint16Array,
    	Uint32Array,
    */

    var undefined$1; // eslint-disable-line no-shadow-restricted-names

    var ThrowTypeError = Object.getOwnPropertyDescriptor
    	? (function () { return Object.getOwnPropertyDescriptor(arguments, 'callee').get; }())
    	: function () { throw new TypeError(); };

    var hasSymbols$3 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

    var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto
    var generatorFunction = undefined$1;
    var asyncFunction = undefined$1;
    var asyncGenFunction = undefined$1;

    var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

    var INTRINSICS = {
    	'$ %Array%': Array,
    	'$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    	'$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
    	'$ %ArrayIteratorPrototype%': hasSymbols$3 ? getProto([][Symbol.iterator]()) : undefined$1,
    	'$ %ArrayPrototype%': Array.prototype,
    	'$ %ArrayProto_entries%': Array.prototype.entries,
    	'$ %ArrayProto_forEach%': Array.prototype.forEach,
    	'$ %ArrayProto_keys%': Array.prototype.keys,
    	'$ %ArrayProto_values%': Array.prototype.values,
    	'$ %AsyncFromSyncIteratorPrototype%': undefined$1,
    	'$ %AsyncFunction%': asyncFunction,
    	'$ %AsyncFunctionPrototype%': undefined$1,
    	'$ %AsyncGenerator%': undefined$1,
    	'$ %AsyncGeneratorFunction%': asyncGenFunction,
    	'$ %AsyncGeneratorPrototype%': undefined$1,
    	'$ %AsyncIteratorPrototype%': undefined$1,
    	'$ %Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    	'$ %Boolean%': Boolean,
    	'$ %BooleanPrototype%': Boolean.prototype,
    	'$ %DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    	'$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
    	'$ %Date%': Date,
    	'$ %DatePrototype%': Date.prototype,
    	'$ %decodeURI%': decodeURI,
    	'$ %decodeURIComponent%': decodeURIComponent,
    	'$ %encodeURI%': encodeURI,
    	'$ %encodeURIComponent%': encodeURIComponent,
    	'$ %Error%': Error,
    	'$ %ErrorPrototype%': Error.prototype,
    	'$ %eval%': eval, // eslint-disable-line no-eval
    	'$ %EvalError%': EvalError,
    	'$ %EvalErrorPrototype%': EvalError.prototype,
    	'$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    	'$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
    	'$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    	'$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
    	'$ %Function%': Function,
    	'$ %FunctionPrototype%': Function.prototype,
    	'$ %Generator%': undefined$1,
    	'$ %GeneratorFunction%': generatorFunction,
    	'$ %GeneratorPrototype%': undefined$1,
    	'$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    	'$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
    	'$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    	'$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
    	'$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    	'$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
    	'$ %isFinite%': isFinite,
    	'$ %isNaN%': isNaN,
    	'$ %IteratorPrototype%': hasSymbols$3 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    	'$ %JSON%': JSON,
    	'$ %JSONParse%': JSON.parse,
    	'$ %Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    	'$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
    	'$ %MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
    	'$ %Math%': Math,
    	'$ %Number%': Number,
    	'$ %NumberPrototype%': Number.prototype,
    	'$ %Object%': Object,
    	'$ %ObjectPrototype%': Object.prototype,
    	'$ %ObjProto_toString%': Object.prototype.toString,
    	'$ %ObjProto_valueOf%': Object.prototype.valueOf,
    	'$ %parseFloat%': parseFloat,
    	'$ %parseInt%': parseInt,
    	'$ %Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    	'$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
    	'$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
    	'$ %Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
    	'$ %Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
    	'$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
    	'$ %Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    	'$ %RangeError%': RangeError,
    	'$ %RangeErrorPrototype%': RangeError.prototype,
    	'$ %ReferenceError%': ReferenceError,
    	'$ %ReferenceErrorPrototype%': ReferenceError.prototype,
    	'$ %Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    	'$ %RegExp%': RegExp,
    	'$ %RegExpPrototype%': RegExp.prototype,
    	'$ %Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    	'$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
    	'$ %SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
    	'$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    	'$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
    	'$ %String%': String,
    	'$ %StringIteratorPrototype%': hasSymbols$3 ? getProto(''[Symbol.iterator]()) : undefined$1,
    	'$ %StringPrototype%': String.prototype,
    	'$ %Symbol%': hasSymbols$3 ? Symbol : undefined$1,
    	'$ %SymbolPrototype%': hasSymbols$3 ? Symbol.prototype : undefined$1,
    	'$ %SyntaxError%': SyntaxError,
    	'$ %SyntaxErrorPrototype%': SyntaxError.prototype,
    	'$ %ThrowTypeError%': ThrowTypeError,
    	'$ %TypedArray%': TypedArray,
    	'$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
    	'$ %TypeError%': TypeError,
    	'$ %TypeErrorPrototype%': TypeError.prototype,
    	'$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    	'$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
    	'$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    	'$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
    	'$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    	'$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
    	'$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    	'$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
    	'$ %URIError%': URIError,
    	'$ %URIErrorPrototype%': URIError.prototype,
    	'$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    	'$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
    	'$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
    	'$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
    };

    var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
    	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    		throw new TypeError('"allowMissing" argument must be a boolean');
    	}

    	var key = '$ ' + name;
    	if (!(key in INTRINSICS)) {
    		throw new SyntaxError('intrinsic ' + name + ' does not exist!');
    	}

    	// istanbul ignore if // hopefully this is impossible to test :-)
    	if (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {
    		throw new TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    	}
    	return INTRINSICS[key];
    };

    var $TypeError = GetIntrinsic('%TypeError%');
    var $SyntaxError = GetIntrinsic('%SyntaxError%');



    var predicates = {
      // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
      'Property Descriptor': function isPropertyDescriptor(ES, Desc) {
        if (ES.Type(Desc) !== 'Object') {
          return false;
        }
        var allowed = {
          '[[Configurable]]': true,
          '[[Enumerable]]': true,
          '[[Get]]': true,
          '[[Set]]': true,
          '[[Value]]': true,
          '[[Writable]]': true
        };

        for (var key in Desc) { // eslint-disable-line
          if (src(Desc, key) && !allowed[key]) {
            return false;
          }
        }

        var isData = src(Desc, '[[Value]]');
        var IsAccessor = src(Desc, '[[Get]]') || src(Desc, '[[Set]]');
        if (isData && IsAccessor) {
          throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
        }
        return true;
      }
    };

    var assertRecord = function assertRecord(ES, recordType, argumentName, value) {
      var predicate = predicates[recordType];
      if (typeof predicate !== 'function') {
        throw new $SyntaxError('unknown record type: ' + recordType);
      }
      if (!predicate(ES, value)) {
        throw new $TypeError(argumentName + ' must be a ' + recordType);
      }
      console.log(predicate(ES, value), value);
    };

    var _isNaN = Number.isNaN || function isNaN(a) {
    	return a !== a;
    };

    var $isNaN = Number.isNaN || function (a) { return a !== a; };

    var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

    var has$2 = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

    var $assign = Object.assign;

    var assign = function assign(target, source) {
    	if ($assign) {
    		return $assign(target, source);
    	}

    	for (var key in source) {
    		if (has$2(source, key)) {
    			target[key] = source[key];
    		}
    	}
    	return target;
    };

    var sign = function sign(number) {
    	return number >= 0 ? 1 : -1;
    };

    var mod = function mod(number, modulo) {
    	var remain = number % modulo;
    	return Math.floor(remain >= 0 ? remain : remain + modulo);
    };

    var isPrimitive$2 = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var toStr$6 = Object.prototype.toString;





    // http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
    var ES5internalSlots = {
    	'[[DefaultValue]]': function (O) {
    		var actualHint;
    		if (arguments.length > 1) {
    			actualHint = arguments[1];
    		} else {
    			actualHint = toStr$6.call(O) === '[object Date]' ? String : Number;
    		}

    		if (actualHint === String || actualHint === Number) {
    			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
    			var value, i;
    			for (i = 0; i < methods.length; ++i) {
    				if (isCallable(O[methods[i]])) {
    					value = O[methods[i]]();
    					if (isPrimitive$1(value)) {
    						return value;
    					}
    				}
    			}
    			throw new TypeError('No default value');
    		}
    		throw new TypeError('invalid [[DefaultValue]] hint supplied');
    	}
    };

    // http://ecma-international.org/ecma-262/5.1/#sec-9.1
    var es5 = function ToPrimitive(input) {
    	if (isPrimitive$1(input)) {
    		return input;
    	}
    	if (arguments.length > 1) {
    		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
    	}
    	return ES5internalSlots['[[DefaultValue]]'](input);
    };

    var $Object = GetIntrinsic('%Object%');
    var $TypeError$1 = GetIntrinsic('%TypeError%');
    var $String = GetIntrinsic('%String%');













    // https://es5.github.io/#x9
    var ES5 = {
    	ToPrimitive: es5,

    	ToBoolean: function ToBoolean(value) {
    		return !!value;
    	},
    	ToNumber: function ToNumber(value) {
    		return +value; // eslint-disable-line no-implicit-coercion
    	},
    	ToInteger: function ToInteger(value) {
    		var number = this.ToNumber(value);
    		if (_isNaN(number)) { return 0; }
    		if (number === 0 || !_isFinite(number)) { return number; }
    		return sign(number) * Math.floor(Math.abs(number));
    	},
    	ToInt32: function ToInt32(x) {
    		return this.ToNumber(x) >> 0;
    	},
    	ToUint32: function ToUint32(x) {
    		return this.ToNumber(x) >>> 0;
    	},
    	ToUint16: function ToUint16(value) {
    		var number = this.ToNumber(value);
    		if (_isNaN(number) || number === 0 || !_isFinite(number)) { return 0; }
    		var posInt = sign(number) * Math.floor(Math.abs(number));
    		return mod(posInt, 0x10000);
    	},
    	ToString: function ToString(value) {
    		return $String(value);
    	},
    	ToObject: function ToObject(value) {
    		this.CheckObjectCoercible(value);
    		return $Object(value);
    	},
    	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
    		/* jshint eqnull:true */
    		if (value == null) {
    			throw new $TypeError$1(optMessage || 'Cannot call method on ' + value);
    		}
    		return value;
    	},
    	IsCallable: isCallable,
    	SameValue: function SameValue(x, y) {
    		if (x === y) { // 0 === -0, but they are not identical.
    			if (x === 0) { return 1 / x === 1 / y; }
    			return true;
    		}
    		return _isNaN(x) && _isNaN(y);
    	},

    	// https://www.ecma-international.org/ecma-262/5.1/#sec-8
    	Type: function Type(x) {
    		if (x === null) {
    			return 'Null';
    		}
    		if (typeof x === 'undefined') {
    			return 'Undefined';
    		}
    		if (typeof x === 'function' || typeof x === 'object') {
    			return 'Object';
    		}
    		if (typeof x === 'number') {
    			return 'Number';
    		}
    		if (typeof x === 'boolean') {
    			return 'Boolean';
    		}
    		if (typeof x === 'string') {
    			return 'String';
    		}
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
    	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
    		if (this.Type(Desc) !== 'Object') {
    			return false;
    		}
    		var allowed = {
    			'[[Configurable]]': true,
    			'[[Enumerable]]': true,
    			'[[Get]]': true,
    			'[[Set]]': true,
    			'[[Value]]': true,
    			'[[Writable]]': true
    		};

    		for (var key in Desc) { // eslint-disable-line
    			if (src(Desc, key) && !allowed[key]) {
    				return false;
    			}
    		}

    		var isData = src(Desc, '[[Value]]');
    		var IsAccessor = src(Desc, '[[Get]]') || src(Desc, '[[Set]]');
    		if (isData && IsAccessor) {
    			throw new $TypeError$1('Property Descriptors may not be both accessor and data descriptors');
    		}
    		return true;
    	},

    	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.1
    	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
    		if (typeof Desc === 'undefined') {
    			return false;
    		}

    		assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    		if (!src(Desc, '[[Get]]') && !src(Desc, '[[Set]]')) {
    			return false;
    		}

    		return true;
    	},

    	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.2
    	IsDataDescriptor: function IsDataDescriptor(Desc) {
    		if (typeof Desc === 'undefined') {
    			return false;
    		}

    		assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    		if (!src(Desc, '[[Value]]') && !src(Desc, '[[Writable]]')) {
    			return false;
    		}

    		return true;
    	},

    	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.3
    	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
    		if (typeof Desc === 'undefined') {
    			return false;
    		}

    		assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
    			return true;
    		}

    		return false;
    	},

    	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.4
    	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
    		if (typeof Desc === 'undefined') {
    			return Desc;
    		}

    		assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    		if (this.IsDataDescriptor(Desc)) {
    			return {
    				value: Desc['[[Value]]'],
    				writable: !!Desc['[[Writable]]'],
    				enumerable: !!Desc['[[Enumerable]]'],
    				configurable: !!Desc['[[Configurable]]']
    			};
    		} else if (this.IsAccessorDescriptor(Desc)) {
    			return {
    				get: Desc['[[Get]]'],
    				set: Desc['[[Set]]'],
    				enumerable: !!Desc['[[Enumerable]]'],
    				configurable: !!Desc['[[Configurable]]']
    			};
    		} else {
    			throw new $TypeError$1('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
    		}
    	},

    	// https://ecma-international.org/ecma-262/5.1/#sec-8.10.5
    	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
    		if (this.Type(Obj) !== 'Object') {
    			throw new $TypeError$1('ToPropertyDescriptor requires an object');
    		}

    		var desc = {};
    		if (src(Obj, 'enumerable')) {
    			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
    		}
    		if (src(Obj, 'configurable')) {
    			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
    		}
    		if (src(Obj, 'value')) {
    			desc['[[Value]]'] = Obj.value;
    		}
    		if (src(Obj, 'writable')) {
    			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
    		}
    		if (src(Obj, 'get')) {
    			var getter = Obj.get;
    			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
    				throw new TypeError('getter must be a function');
    			}
    			desc['[[Get]]'] = getter;
    		}
    		if (src(Obj, 'set')) {
    			var setter = Obj.set;
    			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
    				throw new $TypeError$1('setter must be a function');
    			}
    			desc['[[Set]]'] = setter;
    		}

    		if ((src(desc, '[[Get]]') || src(desc, '[[Set]]')) && (src(desc, '[[Value]]') || src(desc, '[[Writable]]'))) {
    			throw new $TypeError$1('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
    		}
    		return desc;
    	}
    };

    var es5$1 = ES5;

    var regexExec = RegExp.prototype.exec;
    var gOPD = Object.getOwnPropertyDescriptor;

    var tryRegexExecCall = function tryRegexExec(value) {
    	try {
    		var lastIndex = value.lastIndex;
    		value.lastIndex = 0;

    		regexExec.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	} finally {
    		value.lastIndex = lastIndex;
    	}
    };
    var toStr$7 = Object.prototype.toString;
    var regexClass = '[object RegExp]';
    var hasToStringTag$2 = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

    var isRegex = function isRegex(value) {
    	if (!value || typeof value !== 'object') {
    		return false;
    	}
    	if (!hasToStringTag$2) {
    		return toStr$7.call(value) === regexClass;
    	}

    	var descriptor = gOPD(value, 'lastIndex');
    	var hasLastIndexDataProperty = descriptor && src(descriptor, 'value');
    	if (!hasLastIndexDataProperty) {
    		return false;
    	}

    	return tryRegexExecCall(value);
    };

    var $TypeError$2 = GetIntrinsic('%TypeError%');
    var $SyntaxError$1 = GetIntrinsic('%SyntaxError%');
    var $Array = GetIntrinsic('%Array%');
    var $String$1 = GetIntrinsic('%String%');
    var $Object$1 = GetIntrinsic('%Object%');
    var $Number = GetIntrinsic('%Number%');
    var $Symbol = GetIntrinsic('%Symbol%', true);
    var $RegExp = GetIntrinsic('%RegExp%');

    var hasSymbols$4 = !!$Symbol;




    var MAX_SAFE_INTEGER = $Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;





    var parseInteger = parseInt;

    var arraySlice = functionBind.call(Function.call, $Array.prototype.slice);
    var strSlice = functionBind.call(Function.call, $String$1.prototype.slice);
    var isBinary = functionBind.call(Function.call, $RegExp.prototype.test, /^0b[01]+$/i);
    var isOctal = functionBind.call(Function.call, $RegExp.prototype.test, /^0o[0-7]+$/i);
    var regexExec$1 = functionBind.call(Function.call, $RegExp.prototype.exec);
    var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
    var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
    var hasNonWS = functionBind.call(Function.call, $RegExp.prototype.test, nonWSregex);
    var invalidHexLiteral = /^[-+]0x[0-9a-f]+$/i;
    var isInvalidHexLiteral = functionBind.call(Function.call, $RegExp.prototype.test, invalidHexLiteral);
    var $charCodeAt = functionBind.call(Function.call, $String$1.prototype.charCodeAt);

    var toStr$8 = functionBind.call(Function.call, Object.prototype.toString);

    var $NumberValueOf = functionBind.call(Function.call, GetIntrinsic('%NumberPrototype%').valueOf);
    var $BooleanValueOf = functionBind.call(Function.call, GetIntrinsic('%BooleanPrototype%').valueOf);
    var $StringValueOf = functionBind.call(Function.call, GetIntrinsic('%StringPrototype%').valueOf);
    var $DateValueOf = functionBind.call(Function.call, GetIntrinsic('%DatePrototype%').valueOf);

    var $floor = Math.floor;
    var $abs = Math.abs;

    var $ObjectCreate = Object.create;
    var $gOPD = $Object$1.getOwnPropertyDescriptor;

    var $isExtensible = $Object$1.isExtensible;

    var $defineProperty = $Object$1.defineProperty;

    // whitespace from: http://es5.github.io/#x15.5.4.20
    // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
    var ws$1 = [
    	'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
    	'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
    	'\u2029\uFEFF'
    ].join('');
    var trimRegex = new RegExp('(^[' + ws$1 + ']+)|([' + ws$1 + ']+$)', 'g');
    var replace$1 = functionBind.call(Function.call, $String$1.prototype.replace);
    var trim$1 = function (value) {
    	return replace$1(value, trimRegex, '');
    };





    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations
    var ES6 = assign(assign({}, es5$1), {

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args
    	Call: function Call(F, V) {
    		var args = arguments.length > 2 ? arguments[2] : [];
    		if (!this.IsCallable(F)) {
    			throw new $TypeError$2(F + ' is not a function');
    		}
    		return F.apply(V, args);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive
    	ToPrimitive: es6,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean
    	// ToBoolean: ES5.ToBoolean,

    	// https://ecma-international.org/ecma-262/6.0/#sec-tonumber
    	ToNumber: function ToNumber(argument) {
    		var value = isPrimitive$2(argument) ? argument : es6(argument, $Number);
    		if (typeof value === 'symbol') {
    			throw new $TypeError$2('Cannot convert a Symbol value to a number');
    		}
    		if (typeof value === 'string') {
    			if (isBinary(value)) {
    				return this.ToNumber(parseInteger(strSlice(value, 2), 2));
    			} else if (isOctal(value)) {
    				return this.ToNumber(parseInteger(strSlice(value, 2), 8));
    			} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
    				return NaN;
    			} else {
    				var trimmed = trim$1(value);
    				if (trimmed !== value) {
    					return this.ToNumber(trimmed);
    				}
    			}
    		}
    		return $Number(value);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger
    	// ToInteger: ES5.ToNumber,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32
    	// ToInt32: ES5.ToInt32,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32
    	// ToUint32: ES5.ToUint32,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16
    	ToInt16: function ToInt16(argument) {
    		var int16bit = this.ToUint16(argument);
    		return int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16
    	// ToUint16: ES5.ToUint16,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8
    	ToInt8: function ToInt8(argument) {
    		var int8bit = this.ToUint8(argument);
    		return int8bit >= 0x80 ? int8bit - 0x100 : int8bit;
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8
    	ToUint8: function ToUint8(argument) {
    		var number = this.ToNumber(argument);
    		if (_isNaN(number) || number === 0 || !_isFinite(number)) { return 0; }
    		var posInt = sign(number) * $floor($abs(number));
    		return mod(posInt, 0x100);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp
    	ToUint8Clamp: function ToUint8Clamp(argument) {
    		var number = this.ToNumber(argument);
    		if (_isNaN(number) || number <= 0) { return 0; }
    		if (number >= 0xFF) { return 0xFF; }
    		var f = $floor(argument);
    		if (f + 0.5 < number) { return f + 1; }
    		if (number < f + 0.5) { return f; }
    		if (f % 2 !== 0) { return f + 1; }
    		return f;
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring
    	ToString: function ToString(argument) {
    		if (typeof argument === 'symbol') {
    			throw new $TypeError$2('Cannot convert a Symbol value to a string');
    		}
    		return $String$1(argument);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject
    	ToObject: function ToObject(value) {
    		this.RequireObjectCoercible(value);
    		return $Object$1(value);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
    	ToPropertyKey: function ToPropertyKey(argument) {
    		var key = this.ToPrimitive(argument, $String$1);
    		return typeof key === 'symbol' ? key : this.ToString(key);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
    	ToLength: function ToLength(argument) {
    		var len = this.ToInteger(argument);
    		if (len <= 0) { return 0; } // includes converting -0 to +0
    		if (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }
    		return len;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring
    	CanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {
    		if (toStr$8(argument) !== '[object String]') {
    			throw new $TypeError$2('must be a string');
    		}
    		if (argument === '-0') { return -0; }
    		var n = this.ToNumber(argument);
    		if (this.SameValue(this.ToString(n), argument)) { return n; }
    		return void 0;
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible
    	RequireObjectCoercible: es5$1.CheckObjectCoercible,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
    	IsArray: $Array.isArray || function IsArray(argument) {
    		return toStr$8(argument) === '[object Array]';
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable
    	// IsCallable: ES5.IsCallable,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
    	IsConstructor: function IsConstructor(argument) {
    		return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o
    	IsExtensible: Object.preventExtensions
    		? function IsExtensible(obj) {
    			if (isPrimitive$2(obj)) {
    				return false;
    			}
    			return $isExtensible(obj);
    		}
    		: function isExtensible(obj) { return true; }, // eslint-disable-line no-unused-vars

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger
    	IsInteger: function IsInteger(argument) {
    		if (typeof argument !== 'number' || _isNaN(argument) || !_isFinite(argument)) {
    			return false;
    		}
    		var abs = $abs(argument);
    		return $floor(abs) === abs;
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey
    	IsPropertyKey: function IsPropertyKey(argument) {
    		return typeof argument === 'string' || typeof argument === 'symbol';
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-isregexp
    	IsRegExp: function IsRegExp(argument) {
    		if (!argument || typeof argument !== 'object') {
    			return false;
    		}
    		if (hasSymbols$4) {
    			var isRegExp = argument[$Symbol.match];
    			if (typeof isRegExp !== 'undefined') {
    				return es5$1.ToBoolean(isRegExp);
    			}
    		}
    		return isRegex(argument);
    	},

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue
    	// SameValue: ES5.SameValue,

    	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero
    	SameValueZero: function SameValueZero(x, y) {
    		return (x === y) || (_isNaN(x) && _isNaN(y));
    	},

    	/**
    	 * 7.3.2 GetV (V, P)
    	 * 1. Assert: IsPropertyKey(P) is true.
    	 * 2. Let O be ToObject(V).
    	 * 3. ReturnIfAbrupt(O).
    	 * 4. Return O.[[Get]](P, V).
    	 */
    	GetV: function GetV(V, P) {
    		// 7.3.2.1
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}

    		// 7.3.2.2-3
    		var O = this.ToObject(V);

    		// 7.3.2.4
    		return O[P];
    	},

    	/**
    	 * 7.3.9 - https://ecma-international.org/ecma-262/6.0/#sec-getmethod
    	 * 1. Assert: IsPropertyKey(P) is true.
    	 * 2. Let func be GetV(O, P).
    	 * 3. ReturnIfAbrupt(func).
    	 * 4. If func is either undefined or null, return undefined.
    	 * 5. If IsCallable(func) is false, throw a TypeError exception.
    	 * 6. Return func.
    	 */
    	GetMethod: function GetMethod(O, P) {
    		// 7.3.9.1
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}

    		// 7.3.9.2
    		var func = this.GetV(O, P);

    		// 7.3.9.4
    		if (func == null) {
    			return void 0;
    		}

    		// 7.3.9.5
    		if (!this.IsCallable(func)) {
    			throw new $TypeError$2(P + 'is not a function');
    		}

    		// 7.3.9.6
    		return func;
    	},

    	/**
    	 * 7.3.1 Get (O, P) - https://ecma-international.org/ecma-262/6.0/#sec-get-o-p
    	 * 1. Assert: Type(O) is Object.
    	 * 2. Assert: IsPropertyKey(P) is true.
    	 * 3. Return O.[[Get]](P, O).
    	 */
    	Get: function Get(O, P) {
    		// 7.3.1.1
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}
    		// 7.3.1.2
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}
    		// 7.3.1.3
    		return O[P];
    	},

    	Type: function Type(x) {
    		if (typeof x === 'symbol') {
    			return 'Symbol';
    		}
    		return es5$1.Type(x);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-speciesconstructor
    	SpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}
    		var C = O.constructor;
    		if (typeof C === 'undefined') {
    			return defaultConstructor;
    		}
    		if (this.Type(C) !== 'Object') {
    			throw new $TypeError$2('O.constructor is not an Object');
    		}
    		var S = hasSymbols$4 && $Symbol.species ? C[$Symbol.species] : void 0;
    		if (S == null) {
    			return defaultConstructor;
    		}
    		if (this.IsConstructor(S)) {
    			return S;
    		}
    		throw new $TypeError$2('no constructor found');
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-completepropertydescriptor
    	CompletePropertyDescriptor: function CompletePropertyDescriptor(Desc) {
    		assertRecord(this, 'Property Descriptor', 'Desc', Desc);

    		if (this.IsGenericDescriptor(Desc) || this.IsDataDescriptor(Desc)) {
    			if (!src(Desc, '[[Value]]')) {
    				Desc['[[Value]]'] = void 0;
    			}
    			if (!src(Desc, '[[Writable]]')) {
    				Desc['[[Writable]]'] = false;
    			}
    		} else {
    			if (!src(Desc, '[[Get]]')) {
    				Desc['[[Get]]'] = void 0;
    			}
    			if (!src(Desc, '[[Set]]')) {
    				Desc['[[Set]]'] = void 0;
    			}
    		}
    		if (!src(Desc, '[[Enumerable]]')) {
    			Desc['[[Enumerable]]'] = false;
    		}
    		if (!src(Desc, '[[Configurable]]')) {
    			Desc['[[Configurable]]'] = false;
    		}
    		return Desc;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw
    	Set: function Set(O, P, V, Throw) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('O must be an Object');
    		}
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('P must be a Property Key');
    		}
    		if (this.Type(Throw) !== 'Boolean') {
    			throw new $TypeError$2('Throw must be a Boolean');
    		}
    		if (Throw) {
    			O[P] = V;
    			return true;
    		} else {
    			try {
    				O[P] = V;
    			} catch (e) {
    				return false;
    			}
    		}
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-hasownproperty
    	HasOwnProperty: function HasOwnProperty(O, P) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('O must be an Object');
    		}
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('P must be a Property Key');
    		}
    		return src(O, P);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-hasproperty
    	HasProperty: function HasProperty(O, P) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('O must be an Object');
    		}
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('P must be a Property Key');
    		}
    		return P in O;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-isconcatspreadable
    	IsConcatSpreadable: function IsConcatSpreadable(O) {
    		if (this.Type(O) !== 'Object') {
    			return false;
    		}
    		if (hasSymbols$4 && typeof $Symbol.isConcatSpreadable === 'symbol') {
    			var spreadable = this.Get(O, Symbol.isConcatSpreadable);
    			if (typeof spreadable !== 'undefined') {
    				return this.ToBoolean(spreadable);
    			}
    		}
    		return this.IsArray(O);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-invoke
    	Invoke: function Invoke(O, P) {
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('P must be a Property Key');
    		}
    		var argumentsList = arraySlice(arguments, 2);
    		var func = this.GetV(O, P);
    		return this.Call(func, O, argumentsList);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-getiterator
    	GetIterator: function GetIterator(obj, method) {
    		if (!hasSymbols$4) {
    			throw new SyntaxError('ES.GetIterator depends on native iterator support.');
    		}

    		var actualMethod = method;
    		if (arguments.length < 2) {
    			actualMethod = this.GetMethod(obj, $Symbol.iterator);
    		}
    		var iterator = this.Call(actualMethod, obj);
    		if (this.Type(iterator) !== 'Object') {
    			throw new $TypeError$2('iterator must return an object');
    		}

    		return iterator;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-iteratornext
    	IteratorNext: function IteratorNext(iterator, value) {
    		var result = this.Invoke(iterator, 'next', arguments.length < 2 ? [] : [value]);
    		if (this.Type(result) !== 'Object') {
    			throw new $TypeError$2('iterator next must return an object');
    		}
    		return result;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-iteratorcomplete
    	IteratorComplete: function IteratorComplete(iterResult) {
    		if (this.Type(iterResult) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(iterResult) is not Object');
    		}
    		return this.ToBoolean(this.Get(iterResult, 'done'));
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-iteratorvalue
    	IteratorValue: function IteratorValue(iterResult) {
    		if (this.Type(iterResult) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(iterResult) is not Object');
    		}
    		return this.Get(iterResult, 'value');
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-iteratorstep
    	IteratorStep: function IteratorStep(iterator) {
    		var result = this.IteratorNext(iterator);
    		var done = this.IteratorComplete(result);
    		return done === true ? false : result;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose
    	IteratorClose: function IteratorClose(iterator, completion) {
    		if (this.Type(iterator) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(iterator) is not Object');
    		}
    		if (!this.IsCallable(completion)) {
    			throw new $TypeError$2('Assertion failed: completion is not a thunk for a Completion Record');
    		}
    		var completionThunk = completion;

    		var iteratorReturn = this.GetMethod(iterator, 'return');

    		if (typeof iteratorReturn === 'undefined') {
    			return completionThunk();
    		}

    		var completionRecord;
    		try {
    			var innerResult = this.Call(iteratorReturn, iterator, []);
    		} catch (e) {
    			// if we hit here, then "e" is the innerResult completion that needs re-throwing

    			// if the completion is of type "throw", this will throw.
    			completionRecord = completionThunk();
    			completionThunk = null; // ensure it's not called twice.

    			// if not, then return the innerResult completion
    			throw e;
    		}
    		completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does
    		completionThunk = null; // ensure it's not called twice.

    		if (this.Type(innerResult) !== 'Object') {
    			throw new $TypeError$2('iterator .return must return an object');
    		}

    		return completionRecord;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-createiterresultobject
    	CreateIterResultObject: function CreateIterResultObject(value, done) {
    		if (this.Type(done) !== 'Boolean') {
    			throw new $TypeError$2('Assertion failed: Type(done) is not Boolean');
    		}
    		return {
    			value: value,
    			done: done
    		};
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-regexpexec
    	RegExpExec: function RegExpExec(R, S) {
    		if (this.Type(R) !== 'Object') {
    			throw new $TypeError$2('R must be an Object');
    		}
    		if (this.Type(S) !== 'String') {
    			throw new $TypeError$2('S must be a String');
    		}
    		var exec = this.Get(R, 'exec');
    		if (this.IsCallable(exec)) {
    			var result = this.Call(exec, R, [S]);
    			if (result === null || this.Type(result) === 'Object') {
    				return result;
    			}
    			throw new $TypeError$2('"exec" method must return `null` or an Object');
    		}
    		return regexExec$1(R, S);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate
    	ArraySpeciesCreate: function ArraySpeciesCreate(originalArray, length) {
    		if (!this.IsInteger(length) || length < 0) {
    			throw new $TypeError$2('Assertion failed: length must be an integer >= 0');
    		}
    		var len = length === 0 ? 0 : length;
    		var C;
    		var isArray = this.IsArray(originalArray);
    		if (isArray) {
    			C = this.Get(originalArray, 'constructor');
    			// TODO: figure out how to make a cross-realm normal Array, a same-realm Array
    			// if (this.IsConstructor(C)) {
    			// 	if C is another realm's Array, C = undefined
    			// 	Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?
    			// }
    			if (this.Type(C) === 'Object' && hasSymbols$4 && $Symbol.species) {
    				C = this.Get(C, $Symbol.species);
    				if (C === null) {
    					C = void 0;
    				}
    			}
    		}
    		if (typeof C === 'undefined') {
    			return $Array(len);
    		}
    		if (!this.IsConstructor(C)) {
    			throw new $TypeError$2('C must be a constructor');
    		}
    		return new C(len); // this.Construct(C, len);
    	},

    	CreateDataProperty: function CreateDataProperty(O, P, V) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}
    		var oldDesc = $gOPD(O, P);
    		var extensible = oldDesc || (typeof $isExtensible !== 'function' || $isExtensible(O));
    		var immutable = oldDesc && (!oldDesc.writable || !oldDesc.configurable);
    		if (immutable || !extensible) {
    			return false;
    		}
    		var newDesc = {
    			configurable: true,
    			enumerable: true,
    			value: V,
    			writable: true
    		};
    		$defineProperty(O, P, newDesc);
    		return true;
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-createdatapropertyorthrow
    	CreateDataPropertyOrThrow: function CreateDataPropertyOrThrow(O, P, V) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}
    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}
    		var success = this.CreateDataProperty(O, P, V);
    		if (!success) {
    			throw new $TypeError$2('unable to create data property');
    		}
    		return success;
    	},

    	// https://www.ecma-international.org/ecma-262/6.0/#sec-objectcreate
    	ObjectCreate: function ObjectCreate(proto, internalSlotsList) {
    		if (proto !== null && this.Type(proto) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: proto must be null or an object');
    		}
    		var slots = arguments.length < 2 ? [] : internalSlotsList;
    		if (slots.length > 0) {
    			throw new $SyntaxError$1('es-abstract does not yet support internal slots');
    		}

    		if (proto === null && !$ObjectCreate) {
    			throw new $SyntaxError$1('native Object.create support is required to create null objects');
    		}

    		return $ObjectCreate(proto);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-advancestringindex
    	AdvanceStringIndex: function AdvanceStringIndex(S, index, unicode) {
    		if (this.Type(S) !== 'String') {
    			throw new $TypeError$2('S must be a String');
    		}
    		if (!this.IsInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {
    			throw new $TypeError$2('Assertion failed: length must be an integer >= 0 and <= 2**53');
    		}
    		if (this.Type(unicode) !== 'Boolean') {
    			throw new $TypeError$2('Assertion failed: unicode must be a Boolean');
    		}
    		if (!unicode) {
    			return index + 1;
    		}
    		var length = S.length;
    		if ((index + 1) >= length) {
    			return index + 1;
    		}

    		var first = $charCodeAt(S, index);
    		if (first < 0xD800 || first > 0xDBFF) {
    			return index + 1;
    		}

    		var second = $charCodeAt(S, index + 1);
    		if (second < 0xDC00 || second > 0xDFFF) {
    			return index + 1;
    		}

    		return index + 2;
    	},

    	// https://www.ecma-international.org/ecma-262/6.0/#sec-createmethodproperty
    	CreateMethodProperty: function CreateMethodProperty(O, P, V) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}

    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}

    		var newDesc = {
    			configurable: true,
    			enumerable: false,
    			value: V,
    			writable: true
    		};
    		return !!$defineProperty(O, P, newDesc);
    	},

    	// https://www.ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow
    	DefinePropertyOrThrow: function DefinePropertyOrThrow(O, P, desc) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}

    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}

    		return !!$defineProperty(O, P, desc);
    	},

    	// https://www.ecma-international.org/ecma-262/6.0/#sec-deletepropertyorthrow
    	DeletePropertyOrThrow: function DeletePropertyOrThrow(O, P) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}

    		if (!this.IsPropertyKey(P)) {
    			throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
    		}

    		var success = delete O[P];
    		if (!success) {
    			throw new TypeError('Attempt to delete property failed.');
    		}
    		return success;
    	},

    	// https://www.ecma-international.org/ecma-262/6.0/#sec-enumerableownnames
    	EnumerableOwnNames: function EnumerableOwnNames(O) {
    		if (this.Type(O) !== 'Object') {
    			throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    		}

    		return objectKeys(O);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-number-prototype-object
    	thisNumberValue: function thisNumberValue(value) {
    		if (this.Type(value) === 'Number') {
    			return value;
    		}

    		return $NumberValueOf(value);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-boolean-prototype-object
    	thisBooleanValue: function thisBooleanValue(value) {
    		if (this.Type(value) === 'Boolean') {
    			return value;
    		}

    		return $BooleanValueOf(value);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-string-prototype-object
    	thisStringValue: function thisStringValue(value) {
    		if (this.Type(value) === 'String') {
    			return value;
    		}

    		return $StringValueOf(value);
    	},

    	// https://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-date-prototype-object
    	thisTimeValue: function thisTimeValue(value) {
    		return $DateValueOf(value);
    	}
    });

    delete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible

    var es2015$1 = ES6;

    var es6$1 = es2015$1;

    var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;

    /*! https://mths.be/array-from v0.2.0 by @mathias */
    var implementation$1 = function from(arrayLike) {
    	var defineProperty = supportsDescriptors$1 ? Object.defineProperty : function put(object, key, descriptor) {
    		object[key] = descriptor.value;
    	};
    	var C = this;
    	if (arrayLike === null || typeof arrayLike === 'undefined') {
    		throw new TypeError('`Array.from` requires an array-like object, not `null` or `undefined`');
    	}
    	var items = es6$1.ToObject(arrayLike);

    	var mapFn, T;
    	if (typeof arguments[1] !== 'undefined') {
    		mapFn = arguments[1];
    		if (!es6$1.IsCallable(mapFn)) {
    			throw new TypeError('When provided, the second argument to `Array.from` must be a function');
    		}
    		if (arguments.length > 2) {
    			T = arguments[2];
    		}
    	}

    	var len = es6$1.ToLength(items.length);
    	var A = es6$1.IsCallable(C) ? es6$1.ToObject(new C(len)) : new Array(len);
    	var k = 0;
    	var kValue, mappedValue;
    	while (k < len) {
    		kValue = items[k];
    		if (mapFn) {
    			mappedValue = typeof T === 'undefined' ? mapFn(kValue, k) : es6$1.Call(mapFn, T, [kValue, k]);
    		} else {
    			mappedValue = kValue;
    		}
    		defineProperty(A, k, {
    			'configurable': true,
    			'enumerable': true,
    			'value': mappedValue,
    			'writable': true
    		});
    		k += 1;
    	}
    	A.length = len;
    	return A;
    };

    var tryCall = function (fn) {
    	try {
    		fn();
    		return true;
    	} catch (e) {
    		return false;
    	}
    };

    var polyfill = function getPolyfill() {
    	var implemented = es6$1.IsCallable(Array.from)
    		&& tryCall(function () { })
    		&& !tryCall(function () { });

    	return implemented ? Array.from : implementation$1;
    };

    var shim = function shimArrayFrom() {
    	var polyfill$$1 = polyfill();

    	defineProperties_1(Array, { 'from': polyfill$$1 }, {
    		'from': function () {
    			return Array.from !== polyfill$$1;
    		}
    	});

    	return polyfill$$1;
    };

    // eslint-disable-next-line no-unused-vars
    var boundFromShim = function from(array) {
        // eslint-disable-next-line no-invalid-this
    	return implementation$1.apply(this || Array, arguments);
    };

    defineProperties_1(boundFromShim, {
    	'getPolyfill': polyfill,
    	'implementation': implementation$1,
    	'shim': shim
    });

    var load = (function (db) {
      return function (_id) {
        return db.get(_id).catch(function (err) {
          if (err.status === 404) {
            return { _id: _id };
          } else {
            throw err;
          }
        }).catch(console.error.bind(console));
      };
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var unpersistedQueue = {};
    var isUpdating = {};

    var save = (function (db, madeBy) {
      var loadReducer = load(db);

      var saveReducer = function saveReducer(reducerName, reducerState) {
        if (isUpdating[reducerName]) {
          //enqueue promise
          unpersistedQueue[reducerName] = unpersistedQueue[reducerName] || [];
          unpersistedQueue[reducerName].push(reducerState);

          return Promise.resolve();
        }

        isUpdating[reducerName] = true;

        return loadReducer(reducerName).then(function (doc) {
          var newDoc = _extends({}, doc, { madeBy: madeBy, state: reducerState });
          return newDoc;
        }).then(function (newDoc) {
          return db.put(newDoc);
        }).then(function () {
          isUpdating[reducerName] = false;
          if (unpersistedQueue[reducerName] && unpersistedQueue[reducerName].length) {
            var next = unpersistedQueue[reducerName].shift();

            return saveReducer(reducerName, next);
          }
        }).catch(console.error.bind(console));
      };

      return saveReducer;
    });

    var SET_REDUCER = 'redux-pouchdb/SET_REDUCER';
    var INIT = '@@redux-pouchdb/INIT';

    var LOCAL_IDENTIFIER = Array(12).fill(0).map(function (_) {
      return String.fromCharCode(function (x) {
        return x > 25 ? x + 71 : x + 65;
      }(Math.floor(Math.random() * 52)));
    }).join('');

    var saveReducer = void 0;
    var isInitialized = false;
    var persistentStore = function persistentStore(db) {
      var onChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return function (storeCreator) {
        return function (reducer, initialState) {

          var store = storeCreator(reducer, initialState);

          saveReducer = save(db, LOCAL_IDENTIFIER);

          if (!Array.isArray(onChange)) {
            onChange = [onChange];
          }

          var setReducer = function setReducer(doc) {
            var _id = doc._id,
                _rev = doc._rev,
                state = doc.state;


            store.dispatch({
              type: SET_REDUCER,
              reducer: _id,
              state: state,
              _rev: _rev
            });

            onChange.forEach(function (fn) {
              var result = fn(doc);
              if (result) {
                store.dispatch(result);
              }
            });
          };

          db.allDocs({ include_docs: true }).then(function (res) {
            var promises = res.rows.map(function (row) {
              return setReducer(row.doc);
            });
            return Promise.all(promises);
          }).then(function () {
            isInitialized = true;
            store.dispatch({
              type: INIT
            });

            return db.changes({
              include_docs: true,
              live: true,
              since: 'now'
            }).on('change', function (change) {
              if (change.doc.state && change.doc.madeBy !== LOCAL_IDENTIFIER) {
                setReducer(change.doc);
              }
            });
          }).catch(console.error.bind(console));

          return store;
        };
      };
    };

    var persistentReducer = function persistentReducer(reducer, name) {
      var lastState = void 0;
      name = name || reducer.name || Math.random().toString();

      return function (state, action) {
        if (action.type === SET_REDUCER && action.reducer === name && action.state) {

          lastState = action.state;
          return reducer(action.state, action);
        }
        if (action.type === SET_REDUCER) {
          // Another reducer's state... ignore.
          return state;
        }

        var reducedState = reducer(state, action);
        if (isInitialized && !deepEqual_1(reducedState, lastState)) {
          lastState = reducedState;
          saveReducer(name, reducedState);
        }

        return reducedState;
      };
    };

    function reducer(state, action) {
      let tmp1;
      let tmp2;
      let tmp3;
      let tmp6;
      let tmp7;
      let newArr;

      switch (action.type) {
        case "KTH_COUNTY":
          return { ...state, kth: { ...state.kth, county: action.payload } };

        case "KTH_COUNTY_SELECTED":
          tmp1 = {
            ...state,
            kth: { ...state.kth, county: [...state.kth.county] }
          }.kth.county.map(item => {
            tmp2 = { ...item };
            tmp2.selected = false;
            action.payload.forEach(selected => {
              if (selected.id == tmp2.id) {
                tmp2.selected = true;
              }
            });

            return { ...tmp2 };
          });
          return { ...state, kth: { ...state.kth, county: [...tmp1] } };
        case "KTH_MUNICIPALITY":
          return { ...state, kth: { ...state.kth, municipality: action.payload } };

        case "KTH_MUNICIPALITY_SELECTED":
          tmp1 = {
            ...state,
            kth: { ...state.kth, municipality: [...state.kth.municipality] }
          }.kth.municipality.map(item => {
            tmp2 = { ...item };
            tmp2.selected = false;
            action.payload.forEach(selected => {
              if (selected.id == tmp2.id) {
                tmp2.selected = true;
              }
            });

            return { ...tmp2 };
          });
          return { ...state, kth: { ...state.kth, municipality: [...tmp1] } };

        case "KTH_LKF":
          return { ...state, kth: { ...state.kth, lkf: action.payload } };

        case "KTH_LKF_SELECTED":
          tmp1 = {
            ...state,
            kth: { ...state.kth, lkf: [...state.kth.lkf] }
          }.kth.lkf.map(item => {
            tmp2 = { ...item };
            tmp2.selected = false;
            action.payload.forEach(selected => {
              if (selected.id == tmp2.id) {
                tmp2.selected = true;
              }
            });

            return { ...tmp2 };
          });
          return { ...state, kth: { ...state.kth, lkf: [...tmp1] } };

        
      


          case 'MENU_SELECTED':
          return {...state, menu: {...state.menu, selected: action.payload}}
      case 'ASSUMPTIONS_STARTYEAR':
          return {...state, assumptions: {...state.assumptions, startyear: action.payload}}
      case 'ASSUMPTIONS_ENDYEAR':

          tmp7 = {...state.investmentprogram};

          //YEAR ARRAY
          tmp3 = range$1(+action.payload.startyear, +action.payload.endyear + 1);


          //VALUE ZERO FOR ALL YEARS IN ARRAY
          tmp1 = {};
          tmp3.forEach(year => {
              tmp1[year] = '0';
          });


          //ARRAY OF ALL COST NAMES
          let keysOfObj = Object.keys(tmp7);



          //ARRAYS WITH ALL CORRECT VALUES FOR COST NAMES IN SCENARIO
          tmp6 = keysOfObj.map(item => {

              let myObject = {...tmp1};
              for (var property in myObject) {
                  if (tmp7[item]['scenario' + +action.payload.scenario][property] != undefined) {
                      myObject[property] = tmp7[item]['scenario' + +action.payload.scenario][property];
                  }
              }

              return {...myObject}
          });


          keysOfObj.forEach((prop$$1, index) => {
              tmp7[prop$$1]['scenario' + +action.payload.scenario] = tmp6[index];
          });            

           return {...state, assumptions: {...state.assumptions, ['scenario' + +action.payload.scenario]: {...state.assumptions['scenario' + +action.payload.scenario], endyear: action.payload.endyear}}, investmentprogram: {...tmp7}}

    //   case 'ASSUMPTIONS_SCENARIO':
    //       return {...state, assumptions: {...state.assumptions, scenario: action.payload}}
      




      



      //OK
      case 'ASSUMPTIONS_RENT_REMOVE':
          tmp1 = +action.payload.index / 2;
          tmp2 = remove(tmp1, 1, [...state.assumptions.rent['scenario' + chosenScenario].period]);
          tmp3 = remove(tmp1, 1, [...state.assumptions.rent['scenario' + chosenScenario].amount]);
          return {...state, assumptions: {...state.assumptions, rent: {...state.assumptions.rent, ['scenario' + chosenScenario]: {...state.assumptions.rent['scenario' + chosenScenario], amount: tmp3, period: tmp2}}}}

      //OK
      case 'ASSUMPTIONS_RENT_ADD':
          tmp1 = insert(math.ceil(+action.payload.index / 2), '0', [...state.assumptions.rent['scenario' + chosenScenario].amount]);
          tmp2 = insert(math.ceil(+action.payload.index / 2), '0', [...state.assumptions.rent['scenario' + chosenScenario].period]);
          return {...state, assumptions: {...state.assumptions, rent: {...state.assumptions.rent, ['scenario' + chosenScenario]: {...state.assumptions.rent['scenario' + chosenScenario], amount: tmp1, period: tmp2}}}}

      //OK
      case 'ASSUMPTIONS_RENT_AMOUNT':
          newArr = [...state.assumptions.rent['scenario' + chosenScenario].amount];
          newArr[action.payload.order] = action.payload.value;
          return {...state, assumptions: {...state.assumptions, rent: {...state.assumptions.rent, ['scenario' + chosenScenario]: {...state.assumptions.rent['scenario' + chosenScenario], amount: newArr}}}}

      //OK 
      case 'ASSUMPTIONS_RENT_PERIOD':
          newArr = [...state.assumptions.rent['scenario' + chosenScenario].period];
          newArr[action.payload.order] = action.payload.value;
          return {...state, assumptions: {...state.assumptions, rent: {...state.assumptions.rent, ['scenario' + chosenScenario]: {...state.assumptions.rent['scenario' + chosenScenario], period: newArr}}}}

      //OK
      case 'ASSUMPTIONS_INVESTMENTS_FUTURE':
          newArr = {...state.assumptions.investments['scenario' + chosenScenario]};
          newArr.future = action.payload.value;
          return {...state, assumptions: {...state.assumptions, investments: {...state.assumptions.investments, ['scenario' + chosenScenario]: {...newArr}}}}
      
      //OK
      case 'ASSUMPTIONS_INVESTMENTS_INITIAL':
          newArr = {...state.assumptions.investments['scenario' + chosenScenario]};
          newArr.initial = action.payload.value;
          return {...state, assumptions: {...state.assumptions, investments: {...state.assumptions.investments, ['scenario' + chosenScenario]: {...newArr}}}}

      //OK
      case 'ASSUMPTIONS_MAINTENANCE_PERMANENT':
          newArr = {...state.assumptions.maintenance['scenario' + chosenScenario]};
          newArr.permanent = action.payload.value;
          return {...state, assumptions: {...state.assumptions, maintenance: {...state.assumptions.maintenance, ['scenario' + chosenScenario]: {...newArr}}}}
      
      //OK
      case 'ASSUMPTIONS_MAINTENANCE_DYNAMIC':
          newArr = {...state.assumptions.maintenance['scenario' + chosenScenario]};
          newArr.dynamic = action.payload.value;
          return {...state, assumptions: {...state.assumptions, maintenance: {...state.assumptions.maintenance, ['scenario' + chosenScenario]: {...newArr}}}}

      //OK
      case 'ASSUMPTIONS_MAINTENANCE_NOTUSED':
          newArr = {...state.assumptions.maintenance['scenario' + chosenScenario]};
          newArr.notused = action.payload.value;
          return {...state, assumptions: {...state.assumptions, maintenance: {...state.assumptions.maintenance, ['scenario' + chosenScenario]: {...newArr}}}}

      //OK
      case 'ASSUMPTIONS_RATES_INFLATION':
          newArr = {...state.assumptions.rates['scenario' + chosenScenario]};
          newArr.inflation = action.payload.value;
          return {...state, assumptions: {...state.assumptions, rates: {...state.assumptions.rates, ['scenario' + chosenScenario]: {...newArr}}}}
      
      //OK
      case 'ASSUMPTIONS_RATES_DISCOUNT':
          newArr = {...state.assumptions.rates['scenario' + chosenScenario]};
          newArr.discount = action.payload.value;
          return {...state, assumptions: {...state.assumptions, rates: {...state.assumptions.rates, ['scenario' + chosenScenario]: {...newArr}}}}

      //OK
      case 'INVESTMENTPROGRAM_DEMAND':
          return {...state, investmentprogram: {...state.investmentprogram, demand: {...state.investmentprogram.demand, ['scenario' + chosenScenario]: {...state.investmentprogram.demand['scenario' + chosenScenario], [action.payload.key]: action.payload.value}}}};
      
      //OK
      case 'INVESTMENTPROGRAM_VOLUMEDYNAMIC':
          return {...state, investmentprogram: {...state.investmentprogram, volumedynamic: {...state.investmentprogram.volumedynamic, ['scenario' + chosenScenario]: {...state.investmentprogram.volumedynamic['scenario' + chosenScenario], [action.payload.key]: action.payload.value}}}};
      
      //OK
      case 'INVESTMENTPROGRAM_VOLUMEPERMANENT':
          return {...state, investmentprogram: {...state.investmentprogram, volumepermanent: {...state.investmentprogram.volumepermanent, ['scenario' + chosenScenario]: {...state.investmentprogram.volumepermanent['scenario' + chosenScenario], [action.payload.key]: action.payload.value}}}};




      case 'STATIC_ASSUMPTIONS':
          return {...state}
      case 'STATIC_INVESTMENT':
          return {...state}




        default:
          return state;
      }
    }

    var reduxLogger = createCommonjsModule(function (module, exports) {
    !function(e,t){t(exports);}(commonjsGlobal,function(e){function t(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0});}function n(e,t,r){n.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:r,enumerable:!0});}function o(e,t){o.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0});}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0});}function a(e,t,r){a.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:r,enumerable:!0});}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,n),e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return "object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[],p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0],t=h[1]);}}}g.push(d);}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(),t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])));}else{var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p),S=f(S,i)):l(e[n],void 0,r,c,g,n,p);}),S.forEach(function(e){l(void 0,t[e],r,c,g,e,p);});}p.length=p.length-1;}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)));}function c(e,t,r,n){return n=n||[],l(e,t,function(e){e&&n.push(e);},r),n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs;}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs;}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}),n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs;}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]];}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t);}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1,n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}),i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]];}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n);};l(e,t,n);}}function y(e){return "color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return [r.join("."),n,"→",o];case"N":return [r.join("."),o];case"D":return [r.join(".")];case"A":return [r.join(".")+"["+i+"]",a];default:return []}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff");}catch(e){r.log("diff");}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)));}):r.log("—— no diff ——");try{r.groupEnd();}catch(e){r.log("—— diff end —— ");}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return "function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+n),r&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState,v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E),t.timestamp&&A.push("color: gray; font-weight: lighter;"),t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O);}catch(e){r.log(O);}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h);}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S);}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y);}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w);}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd();}catch(e){r.log("—— log end ——");}});}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c),c.started=O.now(),c.startedTime=new Date,c.prevState=n(r()),c.action=l;var s=void 0;if(a)try{s=e(l);}catch(e){c.error=o(e);}else s=e(l);c.took=O.now()-c.started,c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})),u.length=0,c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof commonjsGlobal?"undefined":N(commonjsGlobal))&&commonjsGlobal?commonjsGlobal:"undefined"!=typeof window?window:{},j=k.DeepDiff,j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j,j=void 0);}),t(n,r),t(o,r),t(i,r),t(a,r),Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return "undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e();}),C=null),c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return "inherit"},prevState:function(){return "#9E9E9E"},action:function(){return "#03A9F4"},nextState:function(){return "#4CAF50"},error:function(){return "#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return "function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L,e.createLogger=S,e.logger=T,e.default=T,Object.defineProperty(e,"__esModule",{value:!0});});
    });

    var logger = unwrapExports(reduxLogger);

    function storeCreator(username, state, db) {   
        
        const applyMiddlewares = applyMiddleware(
            logger
          );
        
        const createStoreWithMiddleware = compose$1(
            applyMiddlewares,
            persistentStore(db)
        )(createStore);

        const store = createStoreWithMiddleware(persistentReducer(reducer, username), state);

        return store;
    }

    const initState = {
        kth: {
            county: [
            ],
            municipality: [
            ],
            lkf: [
            ]
        },

        menu: {
            selected: "0"
        },
        assumptions: {
            startyear: "2019",
            endyear: ["2028", "2028", "2028"],
            scenario1: {
                endyear: "2028"
            },
            scenario2: {
                endyear: "2028"
            },
            scenario3: {
                endyear: "2028"
            },
            // scenario: "1",
            investments: {
                scenario1: {
                    future: "0.02",
                    initial: "0",
                },
                scenario2: {
                    future: "0.02",
                    initial: "0",
                },
                scenario3: {
                    future: "0.02",
                    initial: "0",
                },
            },
            rent: {
                scenario1: {
                    amount: ["0"],
                    period: ["10"],
                },
                scenario2: {
                    amount: ["0"],
                    period: ["10"],
                },
                scenario3: {
                    amount: ["0"],
                    period: ["10"],
                },
            },
            maintenance: {
                scenario1: {
                    permanent: "0",
                    dynamic: "0",
                    notused: "0",
                },
                scenario2: {
                    permanent: "0",
                    dynamic: "0",
                    notused: "0",
                },
                scenario3: {
                    permanent: "0",
                    dynamic: "0",
                    notused: "0",
                },
            },
            rates: {
                scenario1: {
                    inflation: "0.02",
                    discount: "0.05",
                },
                scenario2: {
                    inflation: "0.02",
                    discount: "0.05",
                },
                scenario3: {
                    inflation: "0.02",
                    discount: "0.05",
                },
            }
        },
        investmentprogram: {
            demand: {
                scenario1: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario2: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario3: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                }
            },
            volumedynamic: {
                scenario1: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario2: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario3: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                }

            },
            volumepermanent: {
                scenario1: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario2: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                },
                scenario3: {
                    "2019": "0",
                    "2020": "0",
                    "2021": "0",
                    "2022": "0",
                    "2023": "0",
                    "2024": "0",
                    "2025": "0",
                    "2026": "0",
                    "2027": "0",
                    "2028": "0",
                }

            }
        },
    };

    pouchdb.plugin(Auth);

    const connectmixin = (props$$1) => {
      return class ConnectMixin extends usermixin(props$$1, LitElement) {

        static get properties() {
          return props$$1().reduce((acc, prop$$1) => {
              return { ...acc, [prop$$1.propKey]: prop$$1.propValue }
          }, {})
      }

        // This is called every time something is updated in the store.
        stateChanged(state) {
     
          throw new Error('stateChanged() not implemented', this);
        }

        disconnectedCallback() {
          if (super.disconnectedCallback) {
            super.disconnectedCallback();
          }
          this.storeUnsubscribe();
        }

        connectedCallback() {
          if (super.connectedCallback) {
            super.connectedCallback();
          }

          let that = this;
          let username;
          if(this.user.currentUser) {
            username = this.user.currentUser.email.replace("@", "at");
            username = username.replace(".", "dot");
          } else {
            username = 'anonymous';
          }

        
          let db = new pouchdb(username);
          // let couchDB = new PouchDB(`https://whcg:1111111111@whcg.se/couchdb/${username}`);
          
          // db
          // .replicate
          // .from(couchDB)
          // .on('complete', (info) => {   
          //   db.sync(couchDB, { live: true, retry: true })
          //     console.log('info');
          //     console.log(info); 
          // })
          // .on('error', (info) => {
          //     console.log('error');
          //     console.log(info);
          // })
          // .on('change', (info) => {
          //     console.log('change');
          //     console.log(info);
          // });

          db.allDocs({
          include_docs: true,
          attachments: true
          }).then(function (result) {
              let state;
              if (result.rows.length) {
                  state = result.rows[0].doc.state;
              } else {
                  state = initState;
              }
              that.store = storeCreator(username, state, db);
              that.storeUnsubscribe = that.store.subscribe(() => that.stateChanged(that.store.getState()));
              that.stateChanged(that.store.getState());
              }).catch(function (err) {
                console.log(err);
              });

              // that.user.onAuthStateChanged(function(user) {
              // if (user) {      
              //     console.log('User Logged In!!!!!');
              // } else {
              //     that.storeUnsubscribe();
              //     console.log('UNSUBSCRIBED');
              // }
          // });
        }
      };

    };

    let props$p = () => [
      {
        propKey: "selectedmenu",
        propValue: { type: String },
        rx: true,
        path: ["menu", "selected"]
      },
      {
        propKey: "okToRender",
        propValue: { type: Boolean },
        rx: true,
      },
      {
        propKey: "loginhidden",
        propValue: { type: Boolean },
        rx: true,
      }
    ];

    class XApp extends reduxmixin(props$p, rxmixin(props$p, connectmixin(props$p, LitElement))) {

      constructor() {
        super();
        this.okToRender = false;
        this.loginhidden = true;
        
      }

      menuchangedHandler(e) {
        if (e.detail.value == 0) {
          this.selectedmenu = 0;
          Router.go("/antaganden");
        }
        if (e.detail.value == 1) {
          this.selectedmenu = 1;
          Router.go("/investeringsprogram");
        }
        if (e.detail.value == 2) {
          this.selectedmenu = 2;
          Router.go("/kostnader");
        }
        if (e.detail.value == 3) {
          this.selectedmenu = 3;
          Router.go("/resultat");
        }
        if (e.detail.value == 4) {
          this.selectedmenu = 4;
          Router.go("/kth");
        }
      }

      loggedinHandler(e) {
        this.loginhidden = !this.loginhidden;
        // this.requestUpdate();
        // firebase
        //   .auth()
        //   .signInWithEmailAndPassword("ahell@kth.se", "111111")
        //   .catch(function(error) {});
      }

      loggedoutHandler(e) {
        firebase
        .auth()
        .signOut()
        .then(
          function() {
            console.log("Signed Out");
          },
          function(error) {
            console.error("Sign Out Error", error);
          }
        );
      }

      getData(value, index) {
        switch (value) {
          case "selectedmenu":
            return +this.selectedmenu == index ? true : false;
        }
      }

      firstUpdated() {
        super.firstUpdated();
        firebase.auth().onAuthStateChanged((user) => {
          if (user) {
            this.storeUnsubscribe();

            let username = firebase.auth().currentUser.email.replace("@", "at");
            username = username.replace(".", "dot");

            let db = new pouchdb(username);
            // let couchDB = new PouchDB(`http://plex:1111111111@localhost:5984/${username}`);

            // db
            //   .replicate
            //   .from(couchDB)
            //   .on('complete', (info) => {
            //     db.sync(couchDB, { live: true, retry: true })
            //     console.log('info');
            //     console.log(info);
            //   })
            //   .on('error', (info) => {
            //     console.log('error');
            //     console.log(info);
            //   })
            //   .on('change', (info) => {
            //     console.log('change');
            //     console.log(info);
            //   });

            db.allDocs({
              include_docs: true,
              attachments: true
            }).then(result => {

              let state;
              if (result.rows.length) {
                state = result.rows[0].doc.state;
              } else {
                state = initState;
              }

              this.store = storeCreator(username, state, db);
              this.storeUnsubscribe = this.store.subscribe(() => this.stateChanged(this.store.getState()));
              this.stateChanged(this.store.getState());

              this.selectedmenu = 0;
              Router.go("/antaganden");
              this.requestUpdate();
            }).catch(function (err) {
              console.log(err);
            });

          } else {
            this.selectedmenu = -1;
            Router.go("/startpage");
            this.requestUpdate();
          }

        });

        rx.latestCombiner([this.selectedmenu$])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            getRenderData.call(this, loggedinHeaderSchemas).then(renderdata => {
              renderdata.forEach(prop$$1 => {
                if (prop$$1.name == "header") {
                  this.header = prop$$1;
                }
              });
              this.renderheader = this.header;
              this.okToRender = true;
              this.requestUpdate();
            });
          });

          rx.latestCombiner([this.loginhidden$])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
        getRenderData.call(this, loggedoutHeaderSchemas).then(renderdata => {
          renderdata.forEach(prop$$1 => {
            if (prop$$1.name == "header") {
              this.header = prop$$1;
            }
          });
          this.renderloggedoutheader = this.header;
          this.okToRender = true;
          this.requestUpdate();
        });
      });


        rx.latestCombiner([this.okToRender$])
          .pipe(rx.undefinedElementRemover)
          .subscribe(() => {
            if (this.okToRender) {
              const outlet = this.shadowRoot.getElementById("outlet");
              const router = new Router(outlet);
              router.setRoutes([
                { path: '/antaganden', action: this.antagandenAction.bind(this) },
                { path: '/investeringsprogram', action: this.investeringsprogramAction.bind(this) },
                { path: '/kostnader', action: this.kostnaderAction.bind(this) },
                { path: '/resultat', action: this.resultatAction.bind(this) },
                { path: '/kth', action: this.kthAction.bind(this) },
                { path: '(.*)', action: this.startpageAction.bind(this) }
              ]);
            }
          });
      }

      antagandenAction(context, commands) {
        this.slotted = commands.component('x-one');
        this.slotted.storeHolder = this;
        this.slotted.stateChanged(this.store.getState());
        return this.slotted;  
    }

    investeringsprogramAction(context, commands) {
      this.slotted = commands.component('x-two');
      this.slotted.storeHolder = this;
      this.slotted.stateChanged(this.store.getState());
      return this.slotted;  
    }

    kostnaderAction(context, commands) {
      this.slotted = commands.component('x-three');
      this.slotted.storeHolder = this;
      this.slotted.stateChanged(this.store.getState());
      return this.slotted;  
    }

    resultatAction(context, commands) {
      this.slotted = commands.component('x-four');
      this.slotted.storeHolder = this;
      this.slotted.stateChanged(this.store.getState());
      return this.slotted;  
    }

    kthAction(context, commands) {
      this.slotted = commands.component('x-five');
      this.slotted.storeHolder = this;
      this.slotted.stateChanged(this.store.getState());
      return this.slotted;  
    }

    startpageAction(context, commands) {
      this.slotted = commands.component('x-startpage');
      this.slotted.storeHolder = this;
      return this.slotted;  
    }

    stateChanged(state) {
      this.slotted.stateChanged(state);
    }

      render() {
        return this.okToRender
          ? html`
      <style>




        
        .container {
          display: grid;
          position: -webkit-sticky; /* Safari */
          position: sticky;
          top: 0;
          /* background-color: var(--color-attention); */
          


  
        



          grid-template-areas:
            "header header header";
            /* "content content content"
            "footer footer footer"; */

          grid-template-columns: 200px 1fr 200px;
          grid-template-rows: auto 1fr auto;
          grid-gap: 10px;

          /* height: 100vh; */
          /* margin-left: 150px;
          margin-right: 150px; */

        }

        .container2 {
          display: grid;

          grid-template-areas:
            /* "header header header" */
            "content content content"
            "footer footer footer";

          grid-template-columns: 200px 1fr 200px;
          grid-template-rows: auto 1fr auto;
          grid-gap: 10px;

          /* height: 100vh; */
          margin-left: 7vw;
          margin-right: 7vw;
        }

        header {
          grid-area: header;
          background-color: var(--color-bg);
          /* position: sticky; */
          /* margin-left: 1rem;
          margin-right: 0.5rem; */
          padding-left: 7vw;
          padding-right: 7vw;
        }

        nav {
          grid-area: nav;
          /* margin-left: 0.1rem; */
          /* background-color: firebrick; */
        }

        main {
          grid-area: content;
        }

        aside {
          grid-area: side;
          margin-right: 0.5rem;
          /* background-color: saddlebrown; */
        }

        footer {
          grid-area: footer;
          padding-bottom: 40px;
        }

        /* @media (max-width: 768px) {
          .container {
            grid-template-areas:
              "header"
              "nav"
              "content"
              "side"
              "footer";

            grid-template-columns: 1fr;
            grid-template-rows:
              auto
              minmax(75px, auto)
              1fr
              minmax(75px, auto)
              auto;
          }

          nav,
          aside {
            margin: 0;
          }
        } */
      </style>
      <div class="container">
        <header>
          ${firebase.auth().currentUser ? toRender.call(this, prepareRender(this.renderheader)) : toRender.call(this, prepareRender(this.renderloggedoutheader))}
        </header>
      </div>

      <div class="container2">


        <!-- <nav></nav> -->

        <main class="containerbg">
          <div id="outlet"></div>
        </main>

        <!-- <aside></aside> -->

        <footer>
          <x-footer></x-footer>
        </footer>
      </div>
    `
          : html``;
      }
    }

    customElements.define("x-app", XApp);

    //HEJ

}());
